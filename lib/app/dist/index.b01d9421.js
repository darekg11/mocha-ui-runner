// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"7avRg":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = 1234;
var HMR_SECURE = false;
var HMR_ENV_HASH = "4a236f9275d0a351";
module.bundle.HMR_BUNDLE_ID = "04a88b02b01d9421";
"use strict";
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = o[Symbol.iterator]();
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            if (typeof document !== 'undefined') removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                }
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            if (typeof document !== 'undefined') {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>").concat(stack, "</pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>💡 ' + hint + '</div>';
            }).join(''), "\n        </div>\n        ").concat(diagnostic.documentation ? "<div>\uD83D\uDCDD <a style=\"color: violet\" href=\"".concat(diagnostic.documentation, "\" target=\"_blank\">Learn more</a></div>") : '', "\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            var fn = new Function('require', 'module', 'exports', asset.output);
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) return true;
    var parents = getParents(module.bundle.root, id); // If no parents, the asset is new. Prevent reloading the page.
    if (!parents.length) return true;
    return parents.some(function(v) {
        return hmrAcceptCheck(v[0], v[1], null);
    });
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"9Udrw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _vue = require("vue");
var _quasar = require("quasar");
var _store = require("./store");
var _storeDefault = parcelHelpers.interopDefault(_store);
var _appVue = require("./pages/App.vue");
var _appVueDefault = parcelHelpers.interopDefault(_appVue);
var _headerVue = require("./components/header/Header.vue");
var _headerVueDefault = parcelHelpers.interopDefault(_headerVue);
// Import icon libraries
var _robotoFontCss = require("@quasar/extras/roboto-font/roboto-font.css");
var _materialIconsCss = require("@quasar/extras/material-icons/material-icons.css");
var _bootstrapIconsCss = require("@quasar/extras/bootstrap-icons/bootstrap-icons.css");
// Import Quasar css
var _indexSass = require("quasar/src/css/index.sass");
var _indexScss = require("./index.scss");
const app = _vue.createApp(_appVueDefault.default);
app.component("AppHeader", _headerVueDefault.default);
app.use(_quasar.Quasar, {
    plugins: [
        _quasar.Loading,
        _quasar.Notify
    ]
});
app.use(_storeDefault.default);
app.mount("#q-app");

},{"vue":"a2RR7","quasar":"053an","./store":"cSzv9","./pages/App.vue":"6JlN7","./components/header/Header.vue":"cENDJ","@quasar/extras/roboto-font/roboto-font.css":"bJyT2","@quasar/extras/material-icons/material-icons.css":"hIQau","@quasar/extras/bootstrap-icons/bootstrap-icons.css":"4dYhd","quasar/src/css/index.sass":"ljNwR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV","./index.scss":"fcEUB"}],"a2RR7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compile", ()=>compile
);
var _runtimeDom = require("@vue/runtime-dom");
parcelHelpers.exportAll(_runtimeDom, exports);
function initDev() {
    _runtimeDom.initCustomFormatter();
}
initDev();
const compile = ()=>{
    _runtimeDom.warn(`Runtime compilation is not supported in this build of Vue.` + ` Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`);
};

},{"@vue/runtime-dom":"195jv","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"195jv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Transition", ()=>Transition
);
parcelHelpers.export(exports, "TransitionGroup", ()=>TransitionGroup
);
parcelHelpers.export(exports, "VueElement", ()=>VueElement
);
parcelHelpers.export(exports, "createApp", ()=>createApp
);
parcelHelpers.export(exports, "createSSRApp", ()=>createSSRApp
);
parcelHelpers.export(exports, "defineCustomElement", ()=>defineCustomElement
);
parcelHelpers.export(exports, "defineSSRCustomElement", ()=>defineSSRCustomElement
);
parcelHelpers.export(exports, "hydrate", ()=>hydrate
);
parcelHelpers.export(exports, "initDirectivesForSSR", ()=>initDirectivesForSSR
);
parcelHelpers.export(exports, "render", ()=>render
);
parcelHelpers.export(exports, "useCssModule", ()=>useCssModule
);
parcelHelpers.export(exports, "useCssVars", ()=>useCssVars
);
parcelHelpers.export(exports, "vModelCheckbox", ()=>vModelCheckbox
);
parcelHelpers.export(exports, "vModelDynamic", ()=>vModelDynamic
);
parcelHelpers.export(exports, "vModelRadio", ()=>vModelRadio
);
parcelHelpers.export(exports, "vModelSelect", ()=>vModelSelect
);
parcelHelpers.export(exports, "vModelText", ()=>vModelText
);
parcelHelpers.export(exports, "vShow", ()=>vShow
);
parcelHelpers.export(exports, "withKeys", ()=>withKeys
);
parcelHelpers.export(exports, "withModifiers", ()=>withModifiers
);
var _runtimeCore = require("@vue/runtime-core");
var _shared = require("@vue/shared");
parcelHelpers.exportAll(_runtimeCore, exports);
const svgNS = 'http://www.w3.org/2000/svg';
const doc = typeof document !== 'undefined' ? document : null;
const staticTemplateCache = new Map();
const nodeOps = {
    insert: (child, parent, anchor)=>{
        parent.insertBefore(child, anchor || null);
    },
    remove: (child)=>{
        const parent = child.parentNode;
        if (parent) parent.removeChild(child);
    },
    createElement: (tag, isSVG, is, props)=>{
        const el = isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is ? {
            is
        } : undefined);
        if (tag === 'select' && props && props.multiple != null) el.setAttribute('multiple', props.multiple);
        return el;
    },
    createText: (text)=>doc.createTextNode(text)
    ,
    createComment: (text)=>doc.createComment(text)
    ,
    setText: (node, text)=>{
        node.nodeValue = text;
    },
    setElementText: (el, text)=>{
        el.textContent = text;
    },
    parentNode: (node)=>node.parentNode
    ,
    nextSibling: (node)=>node.nextSibling
    ,
    querySelector: (selector)=>doc.querySelector(selector)
    ,
    setScopeId (el, id) {
        el.setAttribute(id, '');
    },
    cloneNode (el) {
        const cloned = el.cloneNode(true);
        // #3072
        // - in `patchDOMProp`, we store the actual value in the `el._value` property.
        // - normally, elements using `:value` bindings will not be hoisted, but if
        //   the bound value is a constant, e.g. `:value="true"` - they do get
        //   hoisted.
        // - in production, hoisted nodes are cloned when subsequent inserts, but
        //   cloneNode() does not copy the custom property we attached.
        // - This may need to account for other custom DOM properties we attach to
        //   elements in addition to `_value` in the future.
        if (`_value` in el) cloned._value = el._value;
        return cloned;
    },
    // __UNSAFE__
    // Reason: innerHTML.
    // Static content here can only come from compiled templates.
    // As long as the user only uses trusted templates, this is safe.
    insertStaticContent (content, parent, anchor, isSVG) {
        // <parent> before | first ... last | anchor </parent>
        const before = anchor ? anchor.previousSibling : parent.lastChild;
        let template = staticTemplateCache.get(content);
        if (!template) {
            const t = doc.createElement('template');
            t.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
            template = t.content;
            if (isSVG) {
                // remove outer svg wrapper
                const wrapper = template.firstChild;
                while(wrapper.firstChild)template.appendChild(wrapper.firstChild);
                template.removeChild(wrapper);
            }
            staticTemplateCache.set(content, template);
        }
        parent.insertBefore(template.cloneNode(true), anchor);
        return [
            // first
            before ? before.nextSibling : parent.firstChild,
            // last
            anchor ? anchor.previousSibling : parent.lastChild
        ];
    }
};
// compiler should normalize class + :class bindings on the same element
// into a single binding ['staticClass', dynamic]
function patchClass(el, value, isSVG) {
    // directly setting className should be faster than setAttribute in theory
    // if this is an element during a transition, take the temporary transition
    // classes into account.
    const transitionClasses = el._vtc;
    if (transitionClasses) value = (value ? [
        value,
        ...transitionClasses
    ] : [
        ...transitionClasses
    ]).join(' ');
    if (value == null) el.removeAttribute('class');
    else if (isSVG) el.setAttribute('class', value);
    else el.className = value;
}
function patchStyle(el, prev, next) {
    const style = el.style;
    const isCssString = _shared.isString(next);
    if (next && !isCssString) {
        for(const key in next)setStyle(style, key, next[key]);
        if (prev && !_shared.isString(prev)) {
            for(const key in prev)if (next[key] == null) setStyle(style, key, '');
        }
    } else {
        const currentDisplay = style.display;
        if (isCssString) {
            if (prev !== next) style.cssText = next;
        } else if (prev) el.removeAttribute('style');
        // indicates that the `display` of the element is controlled by `v-show`,
        // so we always keep the current `display` value regardless of the `style`
        // value, thus handing over control to `v-show`.
        if ('_vod' in el) style.display = currentDisplay;
    }
}
const importantRE = /\s*!important$/;
function setStyle(style, name, val) {
    if (_shared.isArray(val)) val.forEach((v)=>setStyle(style, name, v)
    );
    else if (name.startsWith('--')) // custom property definition
    style.setProperty(name, val);
    else {
        const prefixed = autoPrefix(style, name);
        if (importantRE.test(val)) // !important
        style.setProperty(_shared.hyphenate(prefixed), val.replace(importantRE, ''), 'important');
        else style[prefixed] = val;
    }
}
const prefixes = [
    'Webkit',
    'Moz',
    'ms'
];
const prefixCache = {
};
function autoPrefix(style, rawName) {
    const cached = prefixCache[rawName];
    if (cached) return cached;
    let name = _runtimeCore.camelize(rawName);
    if (name !== 'filter' && name in style) return prefixCache[rawName] = name;
    name = _shared.capitalize(name);
    for(let i = 0; i < prefixes.length; i++){
        const prefixed = prefixes[i] + name;
        if (prefixed in style) return prefixCache[rawName] = prefixed;
    }
    return rawName;
}
const xlinkNS = 'http://www.w3.org/1999/xlink';
function patchAttr(el, key, value, isSVG, instance) {
    if (isSVG && key.startsWith('xlink:')) {
        if (value == null) el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
        else el.setAttributeNS(xlinkNS, key, value);
    } else {
        // note we are only checking boolean attributes that don't have a
        // corresponding dom prop of the same name here.
        const isBoolean = _shared.isSpecialBooleanAttr(key);
        if (value == null || isBoolean && !_shared.includeBooleanAttr(value)) el.removeAttribute(key);
        else el.setAttribute(key, isBoolean ? '' : value);
    }
}
// __UNSAFE__
// functions. The user is responsible for using them with only trusted content.
function patchDOMProp(el, key, value, // the following args are passed only due to potential innerHTML/textContent
// overriding existing VNodes, in which case the old tree must be properly
// unmounted.
prevChildren, parentComponent, parentSuspense, unmountChildren) {
    if (key === 'innerHTML' || key === 'textContent') {
        if (prevChildren) unmountChildren(prevChildren, parentComponent, parentSuspense);
        el[key] = value == null ? '' : value;
        return;
    }
    if (key === 'value' && el.tagName !== 'PROGRESS') {
        // store value as _value as well since
        // non-string values will be stringified.
        el._value = value;
        const newValue = value == null ? '' : value;
        if (el.value !== newValue) el.value = newValue;
        if (value == null) el.removeAttribute(key);
        return;
    }
    if (value === '' || value == null) {
        const type = typeof el[key];
        if (type === 'boolean') {
            // e.g. <select multiple> compiles to { multiple: '' }
            el[key] = _shared.includeBooleanAttr(value);
            return;
        } else if (value == null && type === 'string') {
            // e.g. <div :id="null">
            el[key] = '';
            el.removeAttribute(key);
            return;
        } else if (type === 'number') {
            // e.g. <img :width="null">
            // the value of some IDL attr must be greater than 0, e.g. input.size = 0 -> error
            try {
                el[key] = 0;
            } catch (_a) {
            }
            el.removeAttribute(key);
            return;
        }
    }
    // some properties perform value validation and throw
    try {
        el[key] = value;
    } catch (e) {
        _runtimeCore.warn(`Failed setting prop "${key}" on <${el.tagName.toLowerCase()}>: ` + `value ${value} is invalid.`, e);
    }
}
// Async edge case fix requires storing an event listener's attach timestamp.
let _getNow = Date.now;
let skipTimestampCheck = false;
if (typeof window !== 'undefined') {
    // Determine what event timestamp the browser is using. Annoyingly, the
    // timestamp can either be hi-res (relative to page load) or low-res
    // (relative to UNIX epoch), so in order to compare time we have to use the
    // same timestamp type when saving the flush timestamp.
    if (_getNow() > document.createEvent('Event').timeStamp) // if the low-res timestamp which is bigger than the event timestamp
    // (which is evaluated AFTER) it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listeners as well.
    _getNow = ()=>performance.now()
    ;
    // #3485: Firefox <= 53 has incorrect Event.timeStamp implementation
    // and does not fire microtasks in between event propagation, so safe to exclude.
    const ffMatch = navigator.userAgent.match(/firefox\/(\d+)/i);
    skipTimestampCheck = !!(ffMatch && Number(ffMatch[1]) <= 53);
}
// To avoid the overhead of repeatedly calling performance.now(), we cache
// and use the same timestamp for all event listeners attached in the same tick.
let cachedNow = 0;
const p = Promise.resolve();
const reset = ()=>{
    cachedNow = 0;
};
const getNow = ()=>cachedNow || (p.then(reset), cachedNow = _getNow())
;
function addEventListener(el, event, handler, options) {
    el.addEventListener(event, handler, options);
}
function removeEventListener(el, event, handler, options) {
    el.removeEventListener(event, handler, options);
}
function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
    // vei = vue event invokers
    const invokers = el._vei || (el._vei = {
    });
    const existingInvoker = invokers[rawName];
    if (nextValue && existingInvoker) // patch
    existingInvoker.value = nextValue;
    else {
        const [name, options] = parseName(rawName);
        if (nextValue) {
            // add
            const invoker = invokers[rawName] = createInvoker(nextValue, instance);
            addEventListener(el, name, invoker, options);
        } else if (existingInvoker) {
            // remove
            removeEventListener(el, name, existingInvoker, options);
            invokers[rawName] = undefined;
        }
    }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name) {
    let options;
    if (optionsModifierRE.test(name)) {
        options = {
        };
        let m;
        while(m = name.match(optionsModifierRE)){
            name = name.slice(0, name.length - m[0].length);
            options[m[0].toLowerCase()] = true;
        }
    }
    return [
        _shared.hyphenate(name.slice(2)),
        options
    ];
}
function createInvoker(initialValue, instance) {
    const invoker = (e)=>{
        // async edge case #6566: inner click event triggers patch, event handler
        // attached to outer element during patch, and triggered again. This
        // happens because browsers fire microtask ticks between event propagation.
        // the solution is simple: we save the timestamp when a handler is attached,
        // and the handler would only fire if the event passed to it was fired
        // AFTER it was attached.
        const timeStamp = e.timeStamp || _getNow();
        if (skipTimestampCheck || timeStamp >= invoker.attached - 1) _runtimeCore.callWithAsyncErrorHandling(patchStopImmediatePropagation(e, invoker.value), instance, 5 /* NATIVE_EVENT_HANDLER */ , [
            e
        ]);
    };
    invoker.value = initialValue;
    invoker.attached = getNow();
    return invoker;
}
function patchStopImmediatePropagation(e1, value) {
    if (_shared.isArray(value)) {
        const originalStop = e1.stopImmediatePropagation;
        e1.stopImmediatePropagation = ()=>{
            originalStop.call(e1);
            e1._stopped = true;
        };
        return value.map((fn)=>(e)=>!e._stopped && fn(e)
        );
    } else return value;
}
const nativeOnRE = /^on[a-z]/;
const patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren)=>{
    if (key === 'class') patchClass(el, nextValue, isSVG);
    else if (key === 'style') patchStyle(el, prevValue, nextValue);
    else if (_shared.isOn(key)) // ignore v-model listeners
    {
        if (!_shared.isModelListener(key)) patchEvent(el, key, prevValue, nextValue, parentComponent);
    } else if (key[0] === '.' ? (key = key.slice(1), true) : key[0] === '^' ? (key = key.slice(1), false) : shouldSetAsProp(el, key, nextValue, isSVG)) patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
    else {
        // special case for <input v-model type="checkbox"> with
        // :true-value & :false-value
        // store value as dom properties since non-string values will be
        // stringified.
        if (key === 'true-value') el._trueValue = nextValue;
        else if (key === 'false-value') el._falseValue = nextValue;
        patchAttr(el, key, nextValue, isSVG);
    }
};
function shouldSetAsProp(el, key, value, isSVG) {
    if (isSVG) {
        // most keys must be set as attribute on svg elements to work
        // ...except innerHTML & textContent
        if (key === 'innerHTML' || key === 'textContent') return true;
        // or native onclick with function values
        if (key in el && nativeOnRE.test(key) && _shared.isFunction(value)) return true;
        return false;
    }
    // spellcheck and draggable are numerated attrs, however their
    // corresponding DOM properties are actually booleans - this leads to
    // setting it with a string "false" value leading it to be coerced to
    // `true`, so we need to always treat them as attributes.
    // Note that `contentEditable` doesn't have this problem: its DOM
    // property is also enumerated string values.
    if (key === 'spellcheck' || key === 'draggable') return false;
    // #1787, #2840 form property on form elements is readonly and must be set as
    // attribute.
    if (key === 'form') return false;
    // #1526 <input list> must be set as attribute
    if (key === 'list' && el.tagName === 'INPUT') return false;
    // #2766 <textarea type> must be set as attribute
    if (key === 'type' && el.tagName === 'TEXTAREA') return false;
    // native onclick with string value, must be set as attribute
    if (nativeOnRE.test(key) && _shared.isString(value)) return false;
    return key in el;
}
function defineCustomElement(options, hydate) {
    const Comp = _runtimeCore.defineComponent(options);
    class VueCustomElement extends VueElement {
        constructor(initialProps){
            super(Comp, initialProps, hydate);
        }
    }
    VueCustomElement.def = Comp;
    return VueCustomElement;
}
const defineSSRCustomElement = (options)=>{
    // @ts-ignore
    return defineCustomElement(options, hydrate);
};
const BaseClass = typeof HTMLElement !== 'undefined' ? HTMLElement : class {
};
class VueElement extends BaseClass {
    constructor(_def, _props = {
    }, hydrate1){
        super();
        this._def = _def;
        this._props = _props;
        /**
         * @internal
         */ this._instance = null;
        this._connected = false;
        this._resolved = false;
        this._numberProps = null;
        if (this.shadowRoot && hydrate1) hydrate1(this._createVNode(), this.shadowRoot);
        else {
            if (this.shadowRoot) _runtimeCore.warn(`Custom element has pre-rendered declarative shadow root but is not ` + `defined as hydratable. Use \`defineSSRCustomElement\`.`);
            this.attachShadow({
                mode: 'open'
            });
        }
    }
    connectedCallback() {
        this._connected = true;
        if (!this._instance) this._resolveDef();
    }
    disconnectedCallback() {
        this._connected = false;
        _runtimeCore.nextTick(()=>{
            if (!this._connected) {
                render(null, this.shadowRoot);
                this._instance = null;
            }
        });
    }
    /**
     * resolve inner component definition (handle possible async component)
     */ _resolveDef() {
        if (this._resolved) return;
        this._resolved = true;
        // set initial attrs
        for(let i = 0; i < this.attributes.length; i++)this._setAttr(this.attributes[i].name);
        // watch future attr changes
        new MutationObserver((mutations)=>{
            for (const m of mutations)this._setAttr(m.attributeName);
        }).observe(this, {
            attributes: true
        });
        const resolve = (def)=>{
            const { props , styles  } = def;
            const hasOptions = !_shared.isArray(props);
            const rawKeys = props ? hasOptions ? Object.keys(props) : props : [];
            // cast Number-type props set before resolve
            let numberProps;
            if (hasOptions) for(const key in this._props){
                const opt = props[key];
                if (opt === Number || opt && opt.type === Number) {
                    this._props[key] = _shared.toNumber(this._props[key]);
                    (numberProps || (numberProps = Object.create(null)))[key] = true;
                }
            }
            this._numberProps = numberProps;
            // check if there are props set pre-upgrade or connect
            for (const key1 of Object.keys(this))if (key1[0] !== '_') this._setProp(key1, this[key1], true, false);
            // defining getter/setters on prototype
            for (const key2 of rawKeys.map(_shared.camelize))Object.defineProperty(this, key2, {
                get () {
                    return this._getProp(key2);
                },
                set (val) {
                    this._setProp(key2, val);
                }
            });
            // apply CSS
            this._applyStyles(styles);
            // initial render
            this._update();
        };
        const asyncDef = this._def.__asyncLoader;
        if (asyncDef) asyncDef().then(resolve);
        else resolve(this._def);
    }
    _setAttr(key5) {
        let value = this.getAttribute(key5);
        if (this._numberProps && this._numberProps[key5]) value = _shared.toNumber(value);
        this._setProp(_shared.camelize(key5), value, false);
    }
    /**
     * @internal
     */ _getProp(key3) {
        return this._props[key3];
    }
    /**
     * @internal
     */ _setProp(key4, val1, shouldReflect = true, shouldUpdate = true) {
        if (val1 !== this._props[key4]) {
            this._props[key4] = val1;
            if (shouldUpdate && this._instance) this._update();
            // reflect
            if (shouldReflect) {
                if (val1 === true) this.setAttribute(_shared.hyphenate(key4), '');
                else if (typeof val1 === 'string' || typeof val1 === 'number') this.setAttribute(_shared.hyphenate(key4), val1 + '');
                else if (!val1) this.removeAttribute(_shared.hyphenate(key4));
            }
        }
    }
    _update() {
        render(this._createVNode(), this.shadowRoot);
    }
    _createVNode() {
        const vnode = _runtimeCore.createVNode(this._def, _shared.extend({
        }, this._props));
        if (!this._instance) vnode.ce = (instance)=>{
            this._instance = instance;
            instance.isCE = true;
            instance.ceReload = (newStyles)=>{
                // alawys reset styles
                if (this._styles) {
                    this._styles.forEach((s)=>this.shadowRoot.removeChild(s)
                    );
                    this._styles.length = 0;
                }
                this._applyStyles(newStyles);
                // if this is an async component, ceReload is called from the inner
                // component so no need to reload the async wrapper
                if (!this._def.__asyncLoader) {
                    // reload
                    this._instance = null;
                    this._update();
                }
            };
            // intercept emit
            instance.emit = (event, ...args)=>{
                this.dispatchEvent(new CustomEvent(event, {
                    detail: args
                }));
            };
            // locate nearest Vue custom element parent for provide/inject
            let parent = this;
            while(parent = parent && (parent.parentNode || parent.host))if (parent instanceof VueElement) {
                instance.parent = parent._instance;
                break;
            }
        };
        return vnode;
    }
    _applyStyles(styles1) {
        if (styles1) styles1.forEach((css)=>{
            const s = document.createElement('style');
            s.textContent = css;
            this.shadowRoot.appendChild(s);
            (this._styles || (this._styles = [])).push(s);
        });
    }
}
function useCssModule(name = '$style') {
    /* istanbul ignore else */ {
        const instance = _runtimeCore.getCurrentInstance();
        if (!instance) {
            _runtimeCore.warn(`useCssModule must be called inside setup()`);
            return _shared.EMPTY_OBJ;
        }
        const modules = instance.type.__cssModules;
        if (!modules) {
            _runtimeCore.warn(`Current instance does not have CSS modules injected.`);
            return _shared.EMPTY_OBJ;
        }
        const mod = modules[name];
        if (!mod) {
            _runtimeCore.warn(`Current instance does not have CSS module named "${name}".`);
            return _shared.EMPTY_OBJ;
        }
        return mod;
    }
}
/**
 * Runtime helper for SFC's CSS variable injection feature.
 * @private
 */ function useCssVars(getter) {
    const instance = _runtimeCore.getCurrentInstance();
    /* istanbul ignore next */ if (!instance) {
        _runtimeCore.warn(`useCssVars is called without current active component instance.`);
        return;
    }
    const setVars = ()=>setVarsOnVNode(instance.subTree, getter(instance.proxy))
    ;
    _runtimeCore.watchPostEffect(setVars);
    _runtimeCore.onMounted(()=>{
        const ob = new MutationObserver(setVars);
        ob.observe(instance.subTree.el.parentNode, {
            childList: true
        });
        _runtimeCore.onUnmounted(()=>ob.disconnect()
        );
    });
}
function setVarsOnVNode(vnode, vars) {
    if (vnode.shapeFlag & 128 /* SUSPENSE */ ) {
        const suspense = vnode.suspense;
        vnode = suspense.activeBranch;
        if (suspense.pendingBranch && !suspense.isHydrating) suspense.effects.push(()=>{
            setVarsOnVNode(suspense.activeBranch, vars);
        });
    }
    // drill down HOCs until it's a non-component vnode
    while(vnode.component)vnode = vnode.component.subTree;
    if (vnode.shapeFlag & 1 /* ELEMENT */  && vnode.el) setVarsOnNode(vnode.el, vars);
    else if (vnode.type === _runtimeCore.Fragment) vnode.children.forEach((c)=>setVarsOnVNode(c, vars)
    );
    else if (vnode.type === _runtimeCore.Static) {
        let { el , anchor  } = vnode;
        while(el){
            setVarsOnNode(el, vars);
            if (el === anchor) break;
            el = el.nextSibling;
        }
    }
}
function setVarsOnNode(el, vars) {
    if (el.nodeType === 1) {
        const style = el.style;
        for(const key in vars)style.setProperty(`--${key}`, vars[key]);
    }
}
const TRANSITION = 'transition';
const ANIMATION = 'animation';
// DOM Transition is a higher-order-component based on the platform-agnostic
// base Transition component, with DOM-specific logic.
const Transition = (props, { slots  })=>_runtimeCore.h(_runtimeCore.BaseTransition, resolveTransitionProps(props), slots)
;
Transition.displayName = 'Transition';
const DOMTransitionPropsValidators = {
    name: String,
    type: String,
    css: {
        type: Boolean,
        default: true
    },
    duration: [
        String,
        Number,
        Object
    ],
    enterFromClass: String,
    enterActiveClass: String,
    enterToClass: String,
    appearFromClass: String,
    appearActiveClass: String,
    appearToClass: String,
    leaveFromClass: String,
    leaveActiveClass: String,
    leaveToClass: String
};
const TransitionPropsValidators = Transition.props = /*#__PURE__*/ _shared.extend({
}, _runtimeCore.BaseTransition.props, DOMTransitionPropsValidators);
/**
 * #3227 Incoming hooks may be merged into arrays when wrapping Transition
 * with custom HOCs.
 */ const callHook = (hook, args = [])=>{
    if (_shared.isArray(hook)) hook.forEach((h)=>h(...args)
    );
    else if (hook) hook(...args);
};
/**
 * Check if a hook expects a callback (2nd arg), which means the user
 * intends to explicitly control the end of the transition.
 */ const hasExplicitCallback = (hook)=>{
    return hook ? _shared.isArray(hook) ? hook.some((h)=>h.length > 1
    ) : hook.length > 1 : false;
};
function resolveTransitionProps(rawProps) {
    const baseProps = {
    };
    for(const key in rawProps)if (!(key in DOMTransitionPropsValidators)) baseProps[key] = rawProps[key];
    if (rawProps.css === false) return baseProps;
    const { name ='v' , type , duration , enterFromClass =`${name}-enter-from` , enterActiveClass =`${name}-enter-active` , enterToClass =`${name}-enter-to` , appearFromClass =enterFromClass , appearActiveClass =enterActiveClass , appearToClass =enterToClass , leaveFromClass =`${name}-leave-from` , leaveActiveClass =`${name}-leave-active` , leaveToClass =`${name}-leave-to`  } = rawProps;
    const durations = normalizeDuration(duration);
    const enterDuration = durations && durations[0];
    const leaveDuration = durations && durations[1];
    const { onBeforeEnter , onEnter , onEnterCancelled , onLeave , onLeaveCancelled , onBeforeAppear =onBeforeEnter , onAppear =onEnter , onAppearCancelled =onEnterCancelled  } = baseProps;
    const finishEnter = (el, isAppear, done)=>{
        removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
        removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
        done && done();
    };
    const finishLeave = (el, done)=>{
        removeTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveActiveClass);
        done && done();
    };
    const makeEnterHook = (isAppear)=>{
        return (el, done)=>{
            const hook = isAppear ? onAppear : onEnter;
            const resolve = ()=>finishEnter(el, isAppear, done)
            ;
            callHook(hook, [
                el,
                resolve
            ]);
            nextFrame(()=>{
                removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
                addTransitionClass(el, isAppear ? appearToClass : enterToClass);
                if (!hasExplicitCallback(hook)) whenTransitionEnds(el, type, enterDuration, resolve);
            });
        };
    };
    return _shared.extend(baseProps, {
        onBeforeEnter (el) {
            callHook(onBeforeEnter, [
                el
            ]);
            addTransitionClass(el, enterFromClass);
            addTransitionClass(el, enterActiveClass);
        },
        onBeforeAppear (el) {
            callHook(onBeforeAppear, [
                el
            ]);
            addTransitionClass(el, appearFromClass);
            addTransitionClass(el, appearActiveClass);
        },
        onEnter: makeEnterHook(false),
        onAppear: makeEnterHook(true),
        onLeave (el, done) {
            const resolve = ()=>finishLeave(el, done)
            ;
            addTransitionClass(el, leaveFromClass);
            // force reflow so *-leave-from classes immediately take effect (#2593)
            forceReflow();
            addTransitionClass(el, leaveActiveClass);
            nextFrame(()=>{
                removeTransitionClass(el, leaveFromClass);
                addTransitionClass(el, leaveToClass);
                if (!hasExplicitCallback(onLeave)) whenTransitionEnds(el, type, leaveDuration, resolve);
            });
            callHook(onLeave, [
                el,
                resolve
            ]);
        },
        onEnterCancelled (el) {
            finishEnter(el, false);
            callHook(onEnterCancelled, [
                el
            ]);
        },
        onAppearCancelled (el) {
            finishEnter(el, true);
            callHook(onAppearCancelled, [
                el
            ]);
        },
        onLeaveCancelled (el) {
            finishLeave(el);
            callHook(onLeaveCancelled, [
                el
            ]);
        }
    });
}
function normalizeDuration(duration) {
    if (duration == null) return null;
    else if (_shared.isObject(duration)) return [
        NumberOf(duration.enter),
        NumberOf(duration.leave)
    ];
    else {
        const n = NumberOf(duration);
        return [
            n,
            n
        ];
    }
}
function NumberOf(val) {
    const res = _shared.toNumber(val);
    validateDuration(res);
    return res;
}
function validateDuration(val) {
    if (typeof val !== 'number') _runtimeCore.warn(`<transition> explicit duration is not a valid number - ` + `got ${JSON.stringify(val)}.`);
    else if (isNaN(val)) _runtimeCore.warn(`<transition> explicit duration is NaN - ` + 'the duration expression might be incorrect.');
}
function addTransitionClass(el, cls) {
    cls.split(/\s+/).forEach((c)=>c && el.classList.add(c)
    );
    (el._vtc || (el._vtc = new Set())).add(cls);
}
function removeTransitionClass(el, cls) {
    cls.split(/\s+/).forEach((c)=>c && el.classList.remove(c)
    );
    const { _vtc  } = el;
    if (_vtc) {
        _vtc.delete(cls);
        if (!_vtc.size) el._vtc = undefined;
    }
}
function nextFrame(cb) {
    requestAnimationFrame(()=>{
        requestAnimationFrame(cb);
    });
}
let endId = 0;
function whenTransitionEnds(el, expectedType, explicitTimeout, resolve) {
    const id = el._endId = ++endId;
    const resolveIfNotStale = ()=>{
        if (id === el._endId) resolve();
    };
    if (explicitTimeout) return setTimeout(resolveIfNotStale, explicitTimeout);
    const { type , timeout , propCount  } = getTransitionInfo(el, expectedType);
    if (!type) return resolve();
    const endEvent = type + 'end';
    let ended = 0;
    const end = ()=>{
        el.removeEventListener(endEvent, onEnd);
        resolveIfNotStale();
    };
    const onEnd = (e)=>{
        if (e.target === el && ++ended >= propCount) end();
    };
    setTimeout(()=>{
        if (ended < propCount) end();
    }, timeout + 1);
    el.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el, expectedType) {
    const styles = window.getComputedStyle(el);
    // JSDOM may return undefined for transition properties
    const getStyleProperties = (key)=>(styles[key] || '').split(', ')
    ;
    const transitionDelays = getStyleProperties(TRANSITION + 'Delay');
    const transitionDurations = getStyleProperties(TRANSITION + 'Duration');
    const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
    const animationDelays = getStyleProperties(ANIMATION + 'Delay');
    const animationDurations = getStyleProperties(ANIMATION + 'Duration');
    const animationTimeout = getTimeout(animationDelays, animationDurations);
    let type = null;
    let timeout = 0;
    let propCount = 0;
    /* istanbul ignore if */ if (expectedType === TRANSITION) {
        if (transitionTimeout > 0) {
            type = TRANSITION;
            timeout = transitionTimeout;
            propCount = transitionDurations.length;
        }
    } else if (expectedType === ANIMATION) {
        if (animationTimeout > 0) {
            type = ANIMATION;
            timeout = animationTimeout;
            propCount = animationDurations.length;
        }
    } else {
        timeout = Math.max(transitionTimeout, animationTimeout);
        type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
        propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
    }
    const hasTransform = type === TRANSITION && /\b(transform|all)(,|$)/.test(styles[TRANSITION + 'Property']);
    return {
        type,
        timeout,
        propCount,
        hasTransform
    };
}
function getTimeout(delays, durations) {
    while(delays.length < durations.length)delays = delays.concat(delays);
    return Math.max(...durations.map((d, i)=>toMs(d) + toMs(delays[i])
    ));
}
// Old versions of Chromium (below 61.0.3163.100) formats floating pointer
// numbers in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down
// (i.e. acting as a floor function) causing unexpected behaviors
function toMs(s) {
    return Number(s.slice(0, -1).replace(',', '.')) * 1000;
}
// synchronously force layout to put elements into a certain state
function forceReflow() {
    return document.body.offsetHeight;
}
const positionMap = new WeakMap();
const newPositionMap = new WeakMap();
const TransitionGroupImpl = {
    name: 'TransitionGroup',
    props: /*#__PURE__*/ _shared.extend({
    }, TransitionPropsValidators, {
        tag: String,
        moveClass: String
    }),
    setup (props, { slots  }) {
        const instance = _runtimeCore.getCurrentInstance();
        const state = _runtimeCore.useTransitionState();
        let prevChildren;
        let children;
        _runtimeCore.onUpdated(()=>{
            // children is guaranteed to exist after initial render
            if (!prevChildren.length) return;
            const moveClass = props.moveClass || `${props.name || 'v'}-move`;
            if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) return;
            // we divide the work into three loops to avoid mixing DOM reads and writes
            // in each iteration - which helps prevent layout thrashing.
            prevChildren.forEach(callPendingCbs);
            prevChildren.forEach(recordPosition);
            const movedChildren = prevChildren.filter(applyTranslation);
            // force reflow to put everything in position
            forceReflow();
            movedChildren.forEach((c)=>{
                const el = c.el;
                const style = el.style;
                addTransitionClass(el, moveClass);
                style.transform = style.webkitTransform = style.transitionDuration = '';
                const cb = el._moveCb = (e)=>{
                    if (e && e.target !== el) return;
                    if (!e || /transform$/.test(e.propertyName)) {
                        el.removeEventListener('transitionend', cb);
                        el._moveCb = null;
                        removeTransitionClass(el, moveClass);
                    }
                };
                el.addEventListener('transitionend', cb);
            });
        });
        return ()=>{
            const rawProps = _runtimeCore.toRaw(props);
            const cssTransitionProps = resolveTransitionProps(rawProps);
            let tag = rawProps.tag || _runtimeCore.Fragment;
            prevChildren = children;
            children = slots.default ? _runtimeCore.getTransitionRawChildren(slots.default()) : [];
            for(let i = 0; i < children.length; i++){
                const child = children[i];
                if (child.key != null) _runtimeCore.setTransitionHooks(child, _runtimeCore.resolveTransitionHooks(child, cssTransitionProps, state, instance));
                else _runtimeCore.warn(`<TransitionGroup> children must be keyed.`);
            }
            if (prevChildren) for(let i1 = 0; i1 < prevChildren.length; i1++){
                const child = prevChildren[i1];
                _runtimeCore.setTransitionHooks(child, _runtimeCore.resolveTransitionHooks(child, cssTransitionProps, state, instance));
                positionMap.set(child, child.el.getBoundingClientRect());
            }
            return _runtimeCore.createVNode(tag, null, children);
        };
    }
};
const TransitionGroup = TransitionGroupImpl;
function callPendingCbs(c) {
    const el = c.el;
    if (el._moveCb) el._moveCb();
    if (el._enterCb) el._enterCb();
}
function recordPosition(c) {
    newPositionMap.set(c, c.el.getBoundingClientRect());
}
function applyTranslation(c) {
    const oldPos = positionMap.get(c);
    const newPos = newPositionMap.get(c);
    const dx = oldPos.left - newPos.left;
    const dy = oldPos.top - newPos.top;
    if (dx || dy) {
        const s = c.el.style;
        s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
        s.transitionDuration = '0s';
        return c;
    }
}
function hasCSSTransform(el, root, moveClass) {
    // Detect whether an element with the move class applied has
    // CSS transitions. Since the element may be inside an entering
    // transition at this very moment, we make a clone of it and remove
    // all other transition classes applied to ensure only the move class
    // is applied.
    const clone = el.cloneNode();
    if (el._vtc) el._vtc.forEach((cls)=>{
        cls.split(/\s+/).forEach((c)=>c && clone.classList.remove(c)
        );
    });
    moveClass.split(/\s+/).forEach((c)=>c && clone.classList.add(c)
    );
    clone.style.display = 'none';
    const container = root.nodeType === 1 ? root : root.parentNode;
    container.appendChild(clone);
    const { hasTransform  } = getTransitionInfo(clone);
    container.removeChild(clone);
    return hasTransform;
}
const getModelAssigner = (vnode)=>{
    const fn = vnode.props['onUpdate:modelValue'];
    return _shared.isArray(fn) ? (value)=>_shared.invokeArrayFns(fn, value)
     : fn;
};
function onCompositionStart(e) {
    e.target.composing = true;
}
function onCompositionEnd(e) {
    const target = e.target;
    if (target.composing) {
        target.composing = false;
        trigger(target, 'input');
    }
}
function trigger(el, type) {
    const e = document.createEvent('HTMLEvents');
    e.initEvent(type, true, true);
    el.dispatchEvent(e);
}
// We are exporting the v-model runtime directly as vnode hooks so that it can
// be tree-shaken in case v-model is never used.
const vModelText = {
    created (el, { modifiers: { lazy , trim , number  }  }, vnode) {
        el._assign = getModelAssigner(vnode);
        const castToNumber = number || vnode.props && vnode.props.type === 'number';
        addEventListener(el, lazy ? 'change' : 'input', (e)=>{
            if (e.target.composing) return;
            let domValue = el.value;
            if (trim) domValue = domValue.trim();
            else if (castToNumber) domValue = _shared.toNumber(domValue);
            el._assign(domValue);
        });
        if (trim) addEventListener(el, 'change', ()=>{
            el.value = el.value.trim();
        });
        if (!lazy) {
            addEventListener(el, 'compositionstart', onCompositionStart);
            addEventListener(el, 'compositionend', onCompositionEnd);
            // Safari < 10.2 & UIWebView doesn't fire compositionend when
            // switching focus before confirming composition choice
            // this also fixes the issue where some browsers e.g. iOS Chrome
            // fires "change" instead of "input" on autocomplete.
            addEventListener(el, 'change', onCompositionEnd);
        }
    },
    // set value on mounted so it's after min/max for type="range"
    mounted (el, { value  }) {
        el.value = value == null ? '' : value;
    },
    beforeUpdate (el, { value , modifiers: { lazy , trim , number  }  }, vnode) {
        el._assign = getModelAssigner(vnode);
        // avoid clearing unresolved text. #2302
        if (el.composing) return;
        if (document.activeElement === el) {
            if (lazy) return;
            if (trim && el.value.trim() === value) return;
            if ((number || el.type === 'number') && _shared.toNumber(el.value) === value) return;
        }
        const newValue = value == null ? '' : value;
        if (el.value !== newValue) el.value = newValue;
    }
};
const vModelCheckbox = {
    // #4096 array checkboxes need to be deep traversed
    deep: true,
    created (el, _, vnode) {
        el._assign = getModelAssigner(vnode);
        addEventListener(el, 'change', ()=>{
            const modelValue = el._modelValue;
            const elementValue = getValue(el);
            const checked = el.checked;
            const assign = el._assign;
            if (_shared.isArray(modelValue)) {
                const index = _shared.looseIndexOf(modelValue, elementValue);
                const found = index !== -1;
                if (checked && !found) assign(modelValue.concat(elementValue));
                else if (!checked && found) {
                    const filtered = [
                        ...modelValue
                    ];
                    filtered.splice(index, 1);
                    assign(filtered);
                }
            } else if (_shared.isSet(modelValue)) {
                const cloned = new Set(modelValue);
                if (checked) cloned.add(elementValue);
                else cloned.delete(elementValue);
                assign(cloned);
            } else assign(getCheckboxValue(el, checked));
        });
    },
    // set initial checked on mount to wait for true-value/false-value
    mounted: setChecked,
    beforeUpdate (el, binding, vnode) {
        el._assign = getModelAssigner(vnode);
        setChecked(el, binding, vnode);
    }
};
function setChecked(el, { value , oldValue  }, vnode) {
    el._modelValue = value;
    if (_shared.isArray(value)) el.checked = _shared.looseIndexOf(value, vnode.props.value) > -1;
    else if (_shared.isSet(value)) el.checked = value.has(vnode.props.value);
    else if (value !== oldValue) el.checked = _shared.looseEqual(value, getCheckboxValue(el, true));
}
const vModelRadio = {
    created (el, { value  }, vnode) {
        el.checked = _shared.looseEqual(value, vnode.props.value);
        el._assign = getModelAssigner(vnode);
        addEventListener(el, 'change', ()=>{
            el._assign(getValue(el));
        });
    },
    beforeUpdate (el, { value , oldValue  }, vnode) {
        el._assign = getModelAssigner(vnode);
        if (value !== oldValue) el.checked = _shared.looseEqual(value, vnode.props.value);
    }
};
const vModelSelect = {
    // <select multiple> value need to be deep traversed
    deep: true,
    created (el, { value , modifiers: { number  }  }, vnode) {
        const isSetModel = _shared.isSet(value);
        addEventListener(el, 'change', ()=>{
            const selectedVal = Array.prototype.filter.call(el.options, (o)=>o.selected
            ).map((o)=>number ? _shared.toNumber(getValue(o)) : getValue(o)
            );
            el._assign(el.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]);
        });
        el._assign = getModelAssigner(vnode);
    },
    // set value in mounted & updated because <select> relies on its children
    // <option>s.
    mounted (el, { value  }) {
        setSelected(el, value);
    },
    beforeUpdate (el, _binding, vnode) {
        el._assign = getModelAssigner(vnode);
    },
    updated (el, { value  }) {
        setSelected(el, value);
    }
};
function setSelected(el, value) {
    const isMultiple = el.multiple;
    if (isMultiple && !_shared.isArray(value) && !_shared.isSet(value)) {
        _runtimeCore.warn(`<select multiple v-model> expects an Array or Set value for its binding, ` + `but got ${Object.prototype.toString.call(value).slice(8, -1)}.`);
        return;
    }
    for(let i = 0, l = el.options.length; i < l; i++){
        const option = el.options[i];
        const optionValue = getValue(option);
        if (isMultiple) {
            if (_shared.isArray(value)) option.selected = _shared.looseIndexOf(value, optionValue) > -1;
            else option.selected = value.has(optionValue);
        } else if (_shared.looseEqual(getValue(option), value)) {
            if (el.selectedIndex !== i) el.selectedIndex = i;
            return;
        }
    }
    if (!isMultiple && el.selectedIndex !== -1) el.selectedIndex = -1;
}
// retrieve raw value set via :value bindings
function getValue(el) {
    return '_value' in el ? el._value : el.value;
}
// retrieve raw value for true-value and false-value set via :true-value or :false-value bindings
function getCheckboxValue(el, checked) {
    const key = checked ? '_trueValue' : '_falseValue';
    return key in el ? el[key] : checked;
}
const vModelDynamic = {
    created (el, binding, vnode) {
        callModelHook(el, binding, vnode, null, 'created');
    },
    mounted (el, binding, vnode) {
        callModelHook(el, binding, vnode, null, 'mounted');
    },
    beforeUpdate (el, binding, vnode, prevVNode) {
        callModelHook(el, binding, vnode, prevVNode, 'beforeUpdate');
    },
    updated (el, binding, vnode, prevVNode) {
        callModelHook(el, binding, vnode, prevVNode, 'updated');
    }
};
function callModelHook(el, binding, vnode, prevVNode, hook) {
    let modelToUse;
    switch(el.tagName){
        case 'SELECT':
            modelToUse = vModelSelect;
            break;
        case 'TEXTAREA':
            modelToUse = vModelText;
            break;
        default:
            switch(vnode.props && vnode.props.type){
                case 'checkbox':
                    modelToUse = vModelCheckbox;
                    break;
                case 'radio':
                    modelToUse = vModelRadio;
                    break;
                default:
                    modelToUse = vModelText;
            }
    }
    const fn = modelToUse[hook];
    fn && fn(el, binding, vnode, prevVNode);
}
// SSR vnode transforms, only used when user includes client-oriented render
// function in SSR
function initVModelForSSR() {
    vModelText.getSSRProps = ({ value  })=>({
            value
        })
    ;
    vModelRadio.getSSRProps = ({ value  }, vnode)=>{
        if (vnode.props && _shared.looseEqual(vnode.props.value, value)) return {
            checked: true
        };
    };
    vModelCheckbox.getSSRProps = ({ value  }, vnode)=>{
        if (_shared.isArray(value)) {
            if (vnode.props && _shared.looseIndexOf(value, vnode.props.value) > -1) return {
                checked: true
            };
        } else if (_shared.isSet(value)) {
            if (vnode.props && value.has(vnode.props.value)) return {
                checked: true
            };
        } else if (value) return {
            checked: true
        };
    };
}
const systemModifiers = [
    'ctrl',
    'shift',
    'alt',
    'meta'
];
const modifierGuards = {
    stop: (e)=>e.stopPropagation()
    ,
    prevent: (e)=>e.preventDefault()
    ,
    self: (e)=>e.target !== e.currentTarget
    ,
    ctrl: (e)=>!e.ctrlKey
    ,
    shift: (e)=>!e.shiftKey
    ,
    alt: (e)=>!e.altKey
    ,
    meta: (e)=>!e.metaKey
    ,
    left: (e)=>'button' in e && e.button !== 0
    ,
    middle: (e)=>'button' in e && e.button !== 1
    ,
    right: (e)=>'button' in e && e.button !== 2
    ,
    exact: (e, modifiers)=>systemModifiers.some((m)=>e[`${m}Key`] && !modifiers.includes(m)
        )
};
/**
 * @private
 */ const withModifiers = (fn, modifiers)=>{
    return (event, ...args)=>{
        for(let i = 0; i < modifiers.length; i++){
            const guard = modifierGuards[modifiers[i]];
            if (guard && guard(event, modifiers)) return;
        }
        return fn(event, ...args);
    };
};
// Kept for 2.x compat.
// Note: IE11 compat for `spacebar` and `del` is removed for now.
const keyNames = {
    esc: 'escape',
    space: ' ',
    up: 'arrow-up',
    left: 'arrow-left',
    right: 'arrow-right',
    down: 'arrow-down',
    delete: 'backspace'
};
/**
 * @private
 */ const withKeys = (fn, modifiers)=>{
    return (event)=>{
        if (!('key' in event)) return;
        const eventKey = _shared.hyphenate(event.key);
        if (modifiers.some((k)=>k === eventKey || keyNames[k] === eventKey
        )) return fn(event);
    };
};
const vShow = {
    beforeMount (el, { value  }, { transition  }) {
        el._vod = el.style.display === 'none' ? '' : el.style.display;
        if (transition && value) transition.beforeEnter(el);
        else setDisplay(el, value);
    },
    mounted (el, { value  }, { transition  }) {
        if (transition && value) transition.enter(el);
    },
    updated (el, { value , oldValue  }, { transition  }) {
        if (!value === !oldValue) return;
        if (transition) {
            if (value) {
                transition.beforeEnter(el);
                setDisplay(el, true);
                transition.enter(el);
            } else transition.leave(el, ()=>{
                setDisplay(el, false);
            });
        } else setDisplay(el, value);
    },
    beforeUnmount (el, { value  }) {
        setDisplay(el, value);
    }
};
function setDisplay(el, value) {
    el.style.display = value ? el._vod : 'none';
}
// SSR vnode transforms, only used when user includes client-oriented render
// function in SSR
function initVShowForSSR() {
    vShow.getSSRProps = ({ value  })=>{
        if (!value) return {
            style: {
                display: 'none'
            }
        };
    };
}
const rendererOptions = _shared.extend({
    patchProp
}, nodeOps);
// lazy create the renderer - this makes core renderer logic tree-shakable
// in case the user only imports reactivity utilities from Vue.
let renderer;
let enabledHydration = false;
function ensureRenderer() {
    return renderer || (renderer = _runtimeCore.createRenderer(rendererOptions));
}
function ensureHydrationRenderer() {
    renderer = enabledHydration ? renderer : _runtimeCore.createHydrationRenderer(rendererOptions);
    enabledHydration = true;
    return renderer;
}
// use explicit type casts here to avoid import() calls in rolled-up d.ts
const render = (...args)=>{
    ensureRenderer().render(...args);
};
const hydrate = (...args)=>{
    ensureHydrationRenderer().hydrate(...args);
};
const createApp = (...args)=>{
    const app = ensureRenderer().createApp(...args);
    injectNativeTagCheck(app);
    injectCompilerOptionsCheck(app);
    const { mount  } = app;
    app.mount = (containerOrSelector)=>{
        const container = normalizeContainer(containerOrSelector);
        if (!container) return;
        const component = app._component;
        if (!_shared.isFunction(component) && !component.render && !component.template) // __UNSAFE__
        // Reason: potential execution of JS expressions in in-DOM template.
        // The user must make sure the in-DOM template is trusted. If it's
        // rendered by the server, the template should not contain any user data.
        component.template = container.innerHTML;
        // clear content before mounting
        container.innerHTML = '';
        const proxy = mount(container, false, container instanceof SVGElement);
        if (container instanceof Element) {
            container.removeAttribute('v-cloak');
            container.setAttribute('data-v-app', '');
        }
        return proxy;
    };
    return app;
};
const createSSRApp = (...args)=>{
    const app = ensureHydrationRenderer().createApp(...args);
    injectNativeTagCheck(app);
    injectCompilerOptionsCheck(app);
    const { mount  } = app;
    app.mount = (containerOrSelector)=>{
        const container = normalizeContainer(containerOrSelector);
        if (container) return mount(container, true, container instanceof SVGElement);
    };
    return app;
};
function injectNativeTagCheck(app) {
    // Inject `isNativeTag`
    // this is used for component name validation (dev only)
    Object.defineProperty(app.config, 'isNativeTag', {
        value: (tag)=>_shared.isHTMLTag(tag) || _shared.isSVGTag(tag)
        ,
        writable: false
    });
}
// dev only
function injectCompilerOptionsCheck(app) {
    if (_runtimeCore.isRuntimeOnly()) {
        const isCustomElement = app.config.isCustomElement;
        Object.defineProperty(app.config, 'isCustomElement', {
            get () {
                return isCustomElement;
            },
            set () {
                _runtimeCore.warn(`The \`isCustomElement\` config option is deprecated. Use ` + `\`compilerOptions.isCustomElement\` instead.`);
            }
        });
        const compilerOptions = app.config.compilerOptions;
        const msg = `The \`compilerOptions\` config option is only respected when using ` + `a build of Vue.js that includes the runtime compiler (aka "full build"). ` + `Since you are using the runtime-only build, \`compilerOptions\` ` + `must be passed to \`@vue/compiler-dom\` in the build setup instead.\n` + `- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.\n` + `- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\n` + `- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-dom`;
        Object.defineProperty(app.config, 'compilerOptions', {
            get () {
                _runtimeCore.warn(msg);
                return compilerOptions;
            },
            set () {
                _runtimeCore.warn(msg);
            }
        });
    }
}
function normalizeContainer(container) {
    if (_shared.isString(container)) {
        const res = document.querySelector(container);
        if (!res) _runtimeCore.warn(`Failed to mount app: mount target selector "${container}" returned null.`);
        return res;
    }
    if (window.ShadowRoot && container instanceof window.ShadowRoot && container.mode === 'closed') _runtimeCore.warn(`mounting on a ShadowRoot with \`{mode: "closed"}\` may lead to unpredictable bugs`);
    return container;
}
let ssrDirectiveInitialized = false;
/**
 * @internal
 */ const initDirectivesForSSR = ()=>{
    if (!ssrDirectiveInitialized) {
        ssrDirectiveInitialized = true;
        initVModelForSSR();
        initVShowForSSR();
    }
};

},{"@vue/runtime-core":"687Jt","@vue/shared":"gBrWj","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"687Jt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EffectScope", ()=>_reactivity.EffectScope
);
parcelHelpers.export(exports, "ReactiveEffect", ()=>_reactivity.ReactiveEffect
);
parcelHelpers.export(exports, "computed", ()=>_reactivity.computed
);
parcelHelpers.export(exports, "customRef", ()=>_reactivity.customRef
);
parcelHelpers.export(exports, "effect", ()=>_reactivity.effect
);
parcelHelpers.export(exports, "effectScope", ()=>_reactivity.effectScope
);
parcelHelpers.export(exports, "getCurrentScope", ()=>_reactivity.getCurrentScope
);
parcelHelpers.export(exports, "isProxy", ()=>_reactivity.isProxy
);
parcelHelpers.export(exports, "isReactive", ()=>_reactivity.isReactive
);
parcelHelpers.export(exports, "isReadonly", ()=>_reactivity.isReadonly
);
parcelHelpers.export(exports, "isRef", ()=>_reactivity.isRef
);
parcelHelpers.export(exports, "markRaw", ()=>_reactivity.markRaw
);
parcelHelpers.export(exports, "onScopeDispose", ()=>_reactivity.onScopeDispose
);
parcelHelpers.export(exports, "proxyRefs", ()=>_reactivity.proxyRefs
);
parcelHelpers.export(exports, "reactive", ()=>_reactivity.reactive
);
parcelHelpers.export(exports, "readonly", ()=>_reactivity.readonly
);
parcelHelpers.export(exports, "ref", ()=>_reactivity.ref
);
parcelHelpers.export(exports, "shallowReactive", ()=>_reactivity.shallowReactive
);
parcelHelpers.export(exports, "shallowReadonly", ()=>_reactivity.shallowReadonly
);
parcelHelpers.export(exports, "shallowRef", ()=>_reactivity.shallowRef
);
parcelHelpers.export(exports, "stop", ()=>_reactivity.stop
);
parcelHelpers.export(exports, "toRaw", ()=>_reactivity.toRaw
);
parcelHelpers.export(exports, "toRef", ()=>_reactivity.toRef
);
parcelHelpers.export(exports, "toRefs", ()=>_reactivity.toRefs
);
parcelHelpers.export(exports, "triggerRef", ()=>_reactivity.triggerRef
);
parcelHelpers.export(exports, "unref", ()=>_reactivity.unref
);
parcelHelpers.export(exports, "camelize", ()=>_shared.camelize
);
parcelHelpers.export(exports, "capitalize", ()=>_shared.capitalize
);
parcelHelpers.export(exports, "normalizeClass", ()=>_shared.normalizeClass
);
parcelHelpers.export(exports, "normalizeProps", ()=>_shared.normalizeProps
);
parcelHelpers.export(exports, "normalizeStyle", ()=>_shared.normalizeStyle
);
parcelHelpers.export(exports, "toDisplayString", ()=>_shared.toDisplayString
);
parcelHelpers.export(exports, "toHandlerKey", ()=>_shared.toHandlerKey
);
parcelHelpers.export(exports, "BaseTransition", ()=>BaseTransition
);
parcelHelpers.export(exports, "Comment", ()=>Comment
);
parcelHelpers.export(exports, "Fragment", ()=>Fragment
);
parcelHelpers.export(exports, "KeepAlive", ()=>KeepAlive
);
parcelHelpers.export(exports, "Static", ()=>Static
);
parcelHelpers.export(exports, "Suspense", ()=>Suspense
);
parcelHelpers.export(exports, "Teleport", ()=>Teleport
);
parcelHelpers.export(exports, "Text", ()=>Text
);
parcelHelpers.export(exports, "callWithAsyncErrorHandling", ()=>callWithAsyncErrorHandling
);
parcelHelpers.export(exports, "callWithErrorHandling", ()=>callWithErrorHandling
);
parcelHelpers.export(exports, "cloneVNode", ()=>cloneVNode
);
parcelHelpers.export(exports, "compatUtils", ()=>compatUtils
);
parcelHelpers.export(exports, "createBlock", ()=>createBlock
);
parcelHelpers.export(exports, "createCommentVNode", ()=>createCommentVNode
);
parcelHelpers.export(exports, "createElementBlock", ()=>createElementBlock
);
parcelHelpers.export(exports, "createElementVNode", ()=>createBaseVNode
);
parcelHelpers.export(exports, "createHydrationRenderer", ()=>createHydrationRenderer
);
parcelHelpers.export(exports, "createPropsRestProxy", ()=>createPropsRestProxy
);
parcelHelpers.export(exports, "createRenderer", ()=>createRenderer
);
parcelHelpers.export(exports, "createSlots", ()=>createSlots
);
parcelHelpers.export(exports, "createStaticVNode", ()=>createStaticVNode
);
parcelHelpers.export(exports, "createTextVNode", ()=>createTextVNode
);
parcelHelpers.export(exports, "createVNode", ()=>createVNode
);
parcelHelpers.export(exports, "defineAsyncComponent", ()=>defineAsyncComponent
);
parcelHelpers.export(exports, "defineComponent", ()=>defineComponent
);
parcelHelpers.export(exports, "defineEmits", ()=>defineEmits
);
parcelHelpers.export(exports, "defineExpose", ()=>defineExpose
);
parcelHelpers.export(exports, "defineProps", ()=>defineProps
);
parcelHelpers.export(exports, "devtools", ()=>devtools
);
parcelHelpers.export(exports, "getCurrentInstance", ()=>getCurrentInstance
);
parcelHelpers.export(exports, "getTransitionRawChildren", ()=>getTransitionRawChildren
);
parcelHelpers.export(exports, "guardReactiveProps", ()=>guardReactiveProps
);
parcelHelpers.export(exports, "h", ()=>h1
);
parcelHelpers.export(exports, "handleError", ()=>handleError
);
parcelHelpers.export(exports, "initCustomFormatter", ()=>initCustomFormatter
);
parcelHelpers.export(exports, "inject", ()=>inject
);
parcelHelpers.export(exports, "isMemoSame", ()=>isMemoSame
);
parcelHelpers.export(exports, "isRuntimeOnly", ()=>isRuntimeOnly
);
parcelHelpers.export(exports, "isVNode", ()=>isVNode
);
parcelHelpers.export(exports, "mergeDefaults", ()=>mergeDefaults
);
parcelHelpers.export(exports, "mergeProps", ()=>mergeProps
);
parcelHelpers.export(exports, "nextTick", ()=>nextTick
);
parcelHelpers.export(exports, "onActivated", ()=>onActivated
);
parcelHelpers.export(exports, "onBeforeMount", ()=>onBeforeMount
);
parcelHelpers.export(exports, "onBeforeUnmount", ()=>onBeforeUnmount
);
parcelHelpers.export(exports, "onBeforeUpdate", ()=>onBeforeUpdate
);
parcelHelpers.export(exports, "onDeactivated", ()=>onDeactivated
);
parcelHelpers.export(exports, "onErrorCaptured", ()=>onErrorCaptured
);
parcelHelpers.export(exports, "onMounted", ()=>onMounted
);
parcelHelpers.export(exports, "onRenderTracked", ()=>onRenderTracked
);
parcelHelpers.export(exports, "onRenderTriggered", ()=>onRenderTriggered
);
parcelHelpers.export(exports, "onServerPrefetch", ()=>onServerPrefetch
);
parcelHelpers.export(exports, "onUnmounted", ()=>onUnmounted
);
parcelHelpers.export(exports, "onUpdated", ()=>onUpdated
);
parcelHelpers.export(exports, "openBlock", ()=>openBlock
);
parcelHelpers.export(exports, "popScopeId", ()=>popScopeId
);
parcelHelpers.export(exports, "provide", ()=>provide
);
parcelHelpers.export(exports, "pushScopeId", ()=>pushScopeId
);
parcelHelpers.export(exports, "queuePostFlushCb", ()=>queuePostFlushCb
);
parcelHelpers.export(exports, "registerRuntimeCompiler", ()=>registerRuntimeCompiler
);
parcelHelpers.export(exports, "renderList", ()=>renderList
);
parcelHelpers.export(exports, "renderSlot", ()=>renderSlot
);
parcelHelpers.export(exports, "resolveComponent", ()=>resolveComponent
);
parcelHelpers.export(exports, "resolveDirective", ()=>resolveDirective
);
parcelHelpers.export(exports, "resolveDynamicComponent", ()=>resolveDynamicComponent
);
parcelHelpers.export(exports, "resolveFilter", ()=>resolveFilter
);
parcelHelpers.export(exports, "resolveTransitionHooks", ()=>resolveTransitionHooks
);
parcelHelpers.export(exports, "setBlockTracking", ()=>setBlockTracking
);
parcelHelpers.export(exports, "setDevtoolsHook", ()=>setDevtoolsHook
);
parcelHelpers.export(exports, "setTransitionHooks", ()=>setTransitionHooks
);
parcelHelpers.export(exports, "ssrContextKey", ()=>ssrContextKey
);
parcelHelpers.export(exports, "ssrUtils", ()=>ssrUtils
);
parcelHelpers.export(exports, "toHandlers", ()=>toHandlers
);
parcelHelpers.export(exports, "transformVNodeArgs", ()=>transformVNodeArgs
);
parcelHelpers.export(exports, "useAttrs", ()=>useAttrs
);
parcelHelpers.export(exports, "useSSRContext", ()=>useSSRContext
);
parcelHelpers.export(exports, "useSlots", ()=>useSlots
);
parcelHelpers.export(exports, "useTransitionState", ()=>useTransitionState
);
parcelHelpers.export(exports, "version", ()=>version1
);
parcelHelpers.export(exports, "warn", ()=>warn
);
parcelHelpers.export(exports, "watch", ()=>watch
);
parcelHelpers.export(exports, "watchEffect", ()=>watchEffect
);
parcelHelpers.export(exports, "watchPostEffect", ()=>watchPostEffect
);
parcelHelpers.export(exports, "watchSyncEffect", ()=>watchSyncEffect
);
parcelHelpers.export(exports, "withAsyncContext", ()=>withAsyncContext
);
parcelHelpers.export(exports, "withCtx", ()=>withCtx
);
parcelHelpers.export(exports, "withDefaults", ()=>withDefaults
);
parcelHelpers.export(exports, "withDirectives", ()=>withDirectives
);
parcelHelpers.export(exports, "withMemo", ()=>withMemo
);
parcelHelpers.export(exports, "withScopeId", ()=>withScopeId
);
var _reactivity = require("@vue/reactivity");
var _shared = require("@vue/shared");
/* eslint-disable no-restricted-globals */ let isHmrUpdating = false;
const hmrDirtyComponents = new Set();
_shared.getGlobalThis().__VUE_HMR_RUNTIME__ = {
    createRecord: tryWrap(createRecord),
    rerender: tryWrap(rerender),
    reload: tryWrap(reload)
};
const map = new Map();
function registerHMR(instance) {
    const id = instance.type.__hmrId;
    let record = map.get(id);
    if (!record) {
        createRecord(id, instance.type);
        record = map.get(id);
    }
    record.instances.add(instance);
}
function unregisterHMR(instance) {
    map.get(instance.type.__hmrId).instances.delete(instance);
}
function createRecord(id, initialDef) {
    if (map.has(id)) return false;
    map.set(id, {
        initialDef: normalizeClassComponent(initialDef),
        instances: new Set()
    });
    return true;
}
function normalizeClassComponent(component) {
    return isClassComponent(component) ? component.__vccOpts : component;
}
function rerender(id, newRender) {
    const record = map.get(id);
    if (!record) return;
    // update initial record (for not-yet-rendered component)
    record.initialDef.render = newRender;
    [
        ...record.instances
    ].forEach((instance)=>{
        if (newRender) {
            instance.render = newRender;
            normalizeClassComponent(instance.type).render = newRender;
        }
        instance.renderCache = [];
        // this flag forces child components with slot content to update
        isHmrUpdating = true;
        instance.update();
        isHmrUpdating = false;
    });
}
function reload(id, newComp) {
    const record = map.get(id);
    if (!record) return;
    newComp = normalizeClassComponent(newComp);
    // update initial def (for not-yet-rendered components)
    updateComponentDef(record.initialDef, newComp);
    // create a snapshot which avoids the set being mutated during updates
    const instances = [
        ...record.instances
    ];
    for (const instance1 of instances){
        const oldComp = normalizeClassComponent(instance1.type);
        if (!hmrDirtyComponents.has(oldComp)) {
            // 1. Update existing comp definition to match new one
            if (oldComp !== record.initialDef) updateComponentDef(oldComp, newComp);
            // 2. mark definition dirty. This forces the renderer to replace the
            // component on patch.
            hmrDirtyComponents.add(oldComp);
        }
        // 3. invalidate options resolution cache
        instance1.appContext.optionsCache.delete(instance1.type);
        // 4. actually update
        if (instance1.ceReload) {
            // custom element
            hmrDirtyComponents.add(oldComp);
            instance1.ceReload(newComp.styles);
            hmrDirtyComponents.delete(oldComp);
        } else if (instance1.parent) {
            // 4. Force the parent instance to re-render. This will cause all updated
            // components to be unmounted and re-mounted. Queue the update so that we
            // don't end up forcing the same parent to re-render multiple times.
            queueJob(instance1.parent.update);
            // instance is the inner component of an async custom element
            // invoke to reset styles
            if (instance1.parent.type.__asyncLoader && instance1.parent.ceReload) instance1.parent.ceReload(newComp.styles);
        } else if (instance1.appContext.reload) // root instance mounted via createApp() has a reload method
        instance1.appContext.reload();
        else if (typeof window !== 'undefined') // root instance inside tree created via raw render(). Force reload.
        window.location.reload();
        else console.warn('[HMR] Root or manually mounted instance modified. Full reload required.');
    }
    // 5. make sure to cleanup dirty hmr components after update
    queuePostFlushCb(()=>{
        for (const instance of instances)hmrDirtyComponents.delete(normalizeClassComponent(instance.type));
    });
}
function updateComponentDef(oldComp, newComp) {
    _shared.extend(oldComp, newComp);
    for(const key in oldComp)if (key !== '__file' && !(key in newComp)) delete oldComp[key];
}
function tryWrap(fn) {
    return (id, arg)=>{
        try {
            return fn(id, arg);
        } catch (e) {
            console.error(e);
            console.warn(`[HMR] Something went wrong during Vue component hot-reload. ` + `Full reload required.`);
        }
    };
}
let devtools;
let buffer = [];
let devtoolsNotInstalled = false;
function emit1(event, ...args) {
    if (devtools) devtools.emit(event, ...args);
    else if (!devtoolsNotInstalled) buffer.push({
        event,
        args
    });
}
function setDevtoolsHook(hook, target) {
    var _a, _b;
    devtools = hook;
    if (devtools) {
        devtools.enabled = true;
        buffer.forEach(({ event , args  })=>devtools.emit(event, ...args)
        );
        buffer = [];
    } else if (// handle late devtools injection - only do this if we are in an actual
    // browser environment to avoid the timer handle stalling test runner exit
    // (#4815)
    // eslint-disable-next-line no-restricted-globals
    typeof window !== 'undefined' && // some envs mock window but not fully
    window.HTMLElement && // also exclude jsdom
    !((_b = (_a = window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) === null || _b === void 0 ? void 0 : _b.includes('jsdom'))) {
        const replay = target.__VUE_DEVTOOLS_HOOK_REPLAY__ = target.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];
        replay.push((newHook)=>{
            setDevtoolsHook(newHook, target);
        });
        // clear buffer after 3s - the user probably doesn't have devtools installed
        // at all, and keeping the buffer will cause memory leaks (#4738)
        setTimeout(()=>{
            if (!devtools) {
                target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
                devtoolsNotInstalled = true;
                buffer = [];
            }
        }, 3000);
    } else {
        // non-browser env, assume not installed
        devtoolsNotInstalled = true;
        buffer = [];
    }
}
function devtoolsInitApp(app, version) {
    emit1("app:init" /* APP_INIT */ , app, version, {
        Fragment,
        Text,
        Comment,
        Static
    });
}
function devtoolsUnmountApp(app) {
    emit1("app:unmount" /* APP_UNMOUNT */ , app);
}
const devtoolsComponentAdded = /*#__PURE__*/ createDevtoolsComponentHook("component:added" /* COMPONENT_ADDED */ );
const devtoolsComponentUpdated = /*#__PURE__*/ createDevtoolsComponentHook("component:updated" /* COMPONENT_UPDATED */ );
const devtoolsComponentRemoved = /*#__PURE__*/ createDevtoolsComponentHook("component:removed" /* COMPONENT_REMOVED */ );
function createDevtoolsComponentHook(hook) {
    return (component)=>{
        emit1(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : undefined, component);
    };
}
const devtoolsPerfStart = /*#__PURE__*/ createDevtoolsPerformanceHook("perf:start" /* PERFORMANCE_START */ );
const devtoolsPerfEnd = /*#__PURE__*/ createDevtoolsPerformanceHook("perf:end" /* PERFORMANCE_END */ );
function createDevtoolsPerformanceHook(hook) {
    return (component, type, time)=>{
        emit1(hook, component.appContext.app, component.uid, component, type, time);
    };
}
function devtoolsComponentEmit(component, event, params) {
    emit1("component:emit" /* COMPONENT_EMIT */ , component.appContext.app, component, event, params);
}
function emit$1(instance, event, ...rawArgs) {
    const props = instance.vnode.props || _shared.EMPTY_OBJ;
    {
        const { emitsOptions , propsOptions: [propsOptions]  } = instance;
        if (emitsOptions) {
            if (!(event in emitsOptions) && true) {
                if (!propsOptions || !(_shared.toHandlerKey(event) in propsOptions)) warn(`Component emitted event "${event}" but it is neither declared in ` + `the emits option nor as an "${_shared.toHandlerKey(event)}" prop.`);
            } else {
                const validator = emitsOptions[event];
                if (_shared.isFunction(validator)) {
                    const isValid = validator(...rawArgs);
                    if (!isValid) warn(`Invalid event arguments: event validation failed for event "${event}".`);
                }
            }
        }
    }
    let args = rawArgs;
    const isModelListener = event.startsWith('update:');
    // for v-model update:xxx events, apply modifiers on args
    const modelArg = isModelListener && event.slice(7);
    if (modelArg && modelArg in props) {
        const modifiersKey = `${modelArg === 'modelValue' ? 'model' : modelArg}Modifiers`;
        const { number , trim  } = props[modifiersKey] || _shared.EMPTY_OBJ;
        if (trim) args = rawArgs.map((a)=>a.trim()
        );
        else if (number) args = rawArgs.map(_shared.toNumber);
    }
    devtoolsComponentEmit(instance, event, args);
    {
        const lowerCaseEvent = event.toLowerCase();
        if (lowerCaseEvent !== event && props[_shared.toHandlerKey(lowerCaseEvent)]) warn(`Event "${lowerCaseEvent}" is emitted in component ` + `${formatComponentName(instance, instance.type)} but the handler is registered for "${event}". ` + `Note that HTML attributes are case-insensitive and you cannot use ` + `v-on to listen to camelCase events when using in-DOM templates. ` + `You should probably use "${_shared.hyphenate(event)}" instead of "${event}".`);
    }
    let handlerName;
    let handler = props[handlerName = _shared.toHandlerKey(event)] || // also try camelCase event handler (#2249)
    props[handlerName = _shared.toHandlerKey(_shared.camelize(event))];
    // for v-model update:xxx events, also trigger kebab-case equivalent
    // for props passed via kebab-case
    if (!handler && isModelListener) handler = props[handlerName = _shared.toHandlerKey(_shared.hyphenate(event))];
    if (handler) callWithAsyncErrorHandling(handler, instance, 6 /* COMPONENT_EVENT_HANDLER */ , args);
    const onceHandler = props[handlerName + `Once`];
    if (onceHandler) {
        if (!instance.emitted) instance.emitted = {
        };
        else if (instance.emitted[handlerName]) return;
        instance.emitted[handlerName] = true;
        callWithAsyncErrorHandling(onceHandler, instance, 6 /* COMPONENT_EVENT_HANDLER */ , args);
    }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
    const cache = appContext.emitsCache;
    const cached = cache.get(comp);
    if (cached !== undefined) return cached;
    const raw1 = comp.emits;
    let normalized = {
    };
    // apply mixin/extends props
    let hasExtends = false;
    if (__VUE_OPTIONS_API__ && !_shared.isFunction(comp)) {
        const extendEmits = (raw)=>{
            const normalizedFromExtend = normalizeEmitsOptions(raw, appContext, true);
            if (normalizedFromExtend) {
                hasExtends = true;
                _shared.extend(normalized, normalizedFromExtend);
            }
        };
        if (!asMixin && appContext.mixins.length) appContext.mixins.forEach(extendEmits);
        if (comp.extends) extendEmits(comp.extends);
        if (comp.mixins) comp.mixins.forEach(extendEmits);
    }
    if (!raw1 && !hasExtends) {
        cache.set(comp, null);
        return null;
    }
    if (_shared.isArray(raw1)) raw1.forEach((key)=>normalized[key] = null
    );
    else _shared.extend(normalized, raw1);
    cache.set(comp, normalized);
    return normalized;
}
// Check if an incoming prop key is a declared emit event listener.
// e.g. With `emits: { click: null }`, props named `onClick` and `onclick` are
// both considered matched listeners.
function isEmitListener(options, key) {
    if (!options || !_shared.isOn(key)) return false;
    key = key.slice(2).replace(/Once$/, '');
    return _shared.hasOwn(options, key[0].toLowerCase() + key.slice(1)) || _shared.hasOwn(options, _shared.hyphenate(key)) || _shared.hasOwn(options, key);
}
/**
 * mark the current rendering instance for asset resolution (e.g.
 * resolveComponent, resolveDirective) during render
 */ let currentRenderingInstance = null;
let currentScopeId = null;
/**
 * Note: rendering calls maybe nested. The function returns the parent rendering
 * instance if present, which should be restored after the render is done:
 *
 * ```js
 * const prev = setCurrentRenderingInstance(i)
 * // ...render
 * setCurrentRenderingInstance(prev)
 * ```
 */ function setCurrentRenderingInstance(instance) {
    const prev = currentRenderingInstance;
    currentRenderingInstance = instance;
    currentScopeId = instance && instance.type.__scopeId || null;
    return prev;
}
/**
 * Set scope id when creating hoisted vnodes.
 * @private compiler helper
 */ function pushScopeId(id) {
    currentScopeId = id;
}
/**
 * Technically we no longer need this after 3.0.8 but we need to keep the same
 * API for backwards compat w/ code generated by compilers.
 * @private
 */ function popScopeId() {
    currentScopeId = null;
}
/**
 * Only for backwards compat
 * @private
 */ const withScopeId = (_id)=>withCtx
;
/**
 * Wrap a slot function to memoize current rendering instance
 * @private compiler helper
 */ function withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot // false only
) {
    if (!ctx) return fn;
    // already normalized
    if (fn._n) return fn;
    const renderFnWithContext = (...args)=>{
        // If a user calls a compiled slot inside a template expression (#1745), it
        // can mess up block tracking, so by default we disable block tracking and
        // force bail out when invoking a compiled slot (indicated by the ._d flag).
        // This isn't necessary if rendering a compiled `<slot>`, so we flip the
        // ._d flag off when invoking the wrapped fn inside `renderSlot`.
        if (renderFnWithContext._d) setBlockTracking(-1);
        const prevInstance = setCurrentRenderingInstance(ctx);
        const res = fn(...args);
        setCurrentRenderingInstance(prevInstance);
        if (renderFnWithContext._d) setBlockTracking(1);
        devtoolsComponentUpdated(ctx);
        return res;
    };
    // mark normalized to avoid duplicated wrapping
    renderFnWithContext._n = true;
    // mark this as compiled by default
    // this is used in vnode.ts -> normalizeChildren() to set the slot
    // rendering flag.
    renderFnWithContext._c = true;
    // disable block tracking by default
    renderFnWithContext._d = true;
    return renderFnWithContext;
}
/**
 * dev only flag to track whether $attrs was used during render.
 * If $attrs was used during render then the warning for failed attrs
 * fallthrough can be suppressed.
 */ let accessedAttrs = false;
function markAttrsAccessed() {
    accessedAttrs = true;
}
function renderComponentRoot(instance) {
    const { type: Component , vnode , proxy , withProxy , props , propsOptions: [propsOptions] , slots , attrs , emit , render , renderCache , data , setupState , ctx , inheritAttrs  } = instance;
    let result;
    let fallthroughAttrs;
    const prev = setCurrentRenderingInstance(instance);
    accessedAttrs = false;
    try {
        if (vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */ ) {
            // withProxy is a proxy with a different `has` trap only for
            // runtime-compiled render functions using `with` block.
            const proxyToUse = withProxy || proxy;
            result = normalizeVNode(render.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));
            fallthroughAttrs = attrs;
        } else {
            // functional
            const render = Component;
            // in dev, mark attrs accessed if optional props (attrs === props)
            if (attrs === props) markAttrsAccessed();
            result = normalizeVNode(render.length > 1 ? render(props, {
                get attrs () {
                    markAttrsAccessed();
                    return attrs;
                },
                slots,
                emit
            }) : render(props, null));
            fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
        }
    } catch (err) {
        blockStack.length = 0;
        handleError(err, instance, 1 /* RENDER_FUNCTION */ );
        result = createVNode(Comment);
    }
    // attr merging
    // in dev mode, comments are preserved, and it's possible for a template
    // to have comments along side the root element which makes it a fragment
    let root = result;
    let setRoot = undefined;
    if (result.patchFlag > 0 && result.patchFlag & 2048 /* DEV_ROOT_FRAGMENT */ ) [root, setRoot] = getChildRoot(result);
    if (fallthroughAttrs && inheritAttrs !== false) {
        const keys = Object.keys(fallthroughAttrs);
        const { shapeFlag  } = root;
        if (keys.length) {
            if (shapeFlag & 7 /* COMPONENT */ ) {
                if (propsOptions && keys.some(_shared.isModelListener)) // If a v-model listener (onUpdate:xxx) has a corresponding declared
                // prop, it indicates this component expects to handle v-model and
                // it should not fallthrough.
                // related: #1543, #1643, #1989
                fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);
                root = cloneVNode(root, fallthroughAttrs);
            } else if (!accessedAttrs && root.type !== Comment) {
                const allAttrs = Object.keys(attrs);
                const eventAttrs = [];
                const extraAttrs = [];
                for(let i = 0, l = allAttrs.length; i < l; i++){
                    const key = allAttrs[i];
                    if (_shared.isOn(key)) // ignore v-model handlers when they fail to fallthrough
                    {
                        if (!_shared.isModelListener(key)) // remove `on`, lowercase first letter to reflect event casing
                        // accurately
                        eventAttrs.push(key[2].toLowerCase() + key.slice(3));
                    } else extraAttrs.push(key);
                }
                if (extraAttrs.length) warn(`Extraneous non-props attributes (` + `${extraAttrs.join(', ')}) ` + `were passed to component but could not be automatically inherited ` + `because component renders fragment or text root nodes.`);
                if (eventAttrs.length) warn(`Extraneous non-emits event listeners (` + `${eventAttrs.join(', ')}) ` + `were passed to component but could not be automatically inherited ` + `because component renders fragment or text root nodes. ` + `If the listener is intended to be a component custom event listener only, ` + `declare it using the "emits" option.`);
            }
        }
    }
    // inherit directives
    if (vnode.dirs) {
        if (!isElementRoot(root)) warn(`Runtime directive used on component with non-element root node. ` + `The directives will not function as intended.`);
        root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
    }
    // inherit transition data
    if (vnode.transition) {
        if (!isElementRoot(root)) warn(`Component inside <Transition> renders non-element root node ` + `that cannot be animated.`);
        root.transition = vnode.transition;
    }
    if (setRoot) setRoot(root);
    else result = root;
    setCurrentRenderingInstance(prev);
    return result;
}
/**
 * dev only
 * In dev mode, template root level comments are rendered, which turns the
 * template into a fragment root, but we need to locate the single element
 * root for attrs and scope id processing.
 */ const getChildRoot = (vnode)=>{
    const rawChildren = vnode.children;
    const dynamicChildren = vnode.dynamicChildren;
    const childRoot = filterSingleRoot(rawChildren);
    if (!childRoot) return [
        vnode,
        undefined
    ];
    const index = rawChildren.indexOf(childRoot);
    const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
    const setRoot = (updatedRoot)=>{
        rawChildren[index] = updatedRoot;
        if (dynamicChildren) {
            if (dynamicIndex > -1) dynamicChildren[dynamicIndex] = updatedRoot;
            else if (updatedRoot.patchFlag > 0) vnode.dynamicChildren = [
                ...dynamicChildren,
                updatedRoot
            ];
        }
    };
    return [
        normalizeVNode(childRoot),
        setRoot
    ];
};
function filterSingleRoot(children) {
    let singleRoot;
    for(let i = 0; i < children.length; i++){
        const child = children[i];
        if (isVNode(child)) // ignore user comment
        {
            if (child.type !== Comment || child.children === 'v-if') {
                if (singleRoot) // has more than 1 non-comment child, return now
                return;
                else singleRoot = child;
            }
        } else return;
    }
    return singleRoot;
}
const getFunctionalFallthrough = (attrs)=>{
    let res;
    for(const key in attrs)if (key === 'class' || key === 'style' || _shared.isOn(key)) (res || (res = {
    }))[key] = attrs[key];
    return res;
};
const filterModelListeners = (attrs, props)=>{
    const res = {
    };
    for(const key in attrs)if (!_shared.isModelListener(key) || !(key.slice(9) in props)) res[key] = attrs[key];
    return res;
};
const isElementRoot = (vnode)=>{
    return vnode.shapeFlag & 7 /* ELEMENT */  || vnode.type === Comment // potential v-if branch switch
    ;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
    const { props: prevProps , children: prevChildren , component  } = prevVNode;
    const { props: nextProps , children: nextChildren , patchFlag  } = nextVNode;
    const emits = component.emitsOptions;
    // Parent component's render function was hot-updated. Since this may have
    // caused the child component's slots content to have changed, we need to
    // force the child to update as well.
    if ((prevChildren || nextChildren) && isHmrUpdating) return true;
    // force child update for runtime directive or transition on component vnode.
    if (nextVNode.dirs || nextVNode.transition) return true;
    if (optimized && patchFlag >= 0) {
        if (patchFlag & 1024 /* DYNAMIC_SLOTS */ ) // slot content that references values that might have changed,
        // e.g. in a v-for
        return true;
        if (patchFlag & 16 /* FULL_PROPS */ ) {
            if (!prevProps) return !!nextProps;
            // presence of this flag indicates props are always non-null
            return hasPropsChanged(prevProps, nextProps, emits);
        } else if (patchFlag & 8 /* PROPS */ ) {
            const dynamicProps = nextVNode.dynamicProps;
            for(let i = 0; i < dynamicProps.length; i++){
                const key = dynamicProps[i];
                if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) return true;
            }
        }
    } else {
        // this path is only taken by manually written render functions
        // so presence of any children leads to a forced update
        if (prevChildren || nextChildren) {
            if (!nextChildren || !nextChildren.$stable) return true;
        }
        if (prevProps === nextProps) return false;
        if (!prevProps) return !!nextProps;
        if (!nextProps) return true;
        return hasPropsChanged(prevProps, nextProps, emits);
    }
    return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
    const nextKeys = Object.keys(nextProps);
    if (nextKeys.length !== Object.keys(prevProps).length) return true;
    for(let i = 0; i < nextKeys.length; i++){
        const key = nextKeys[i];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) return true;
    }
    return false;
}
function updateHOCHostEl({ vnode , parent  }, el // HostNode
) {
    while(parent && parent.subTree === vnode){
        (vnode = parent.vnode).el = el;
        parent = parent.parent;
    }
}
const isSuspense = (type)=>type.__isSuspense
;
// Suspense exposes a component-like API, and is treated like a component
// in the compiler, but internally it's a special built-in type that hooks
// directly into the renderer.
const SuspenseImpl = {
    name: 'Suspense',
    // In order to make Suspense tree-shakable, we need to avoid importing it
    // directly in the renderer. The renderer checks for the __isSuspense flag
    // on a vnode's type and calls the `process` method, passing in renderer
    // internals.
    __isSuspense: true,
    process (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, // platform-specific impl passed from renderer
    rendererInternals) {
        if (n1 == null) mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals);
        else patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, rendererInternals);
    },
    hydrate: hydrateSuspense,
    create: createSuspenseBoundary,
    normalize: normalizeSuspenseChildren
};
// Force-casted public typing for h and TSX props inference
const Suspense = SuspenseImpl;
function triggerEvent(vnode, name) {
    const eventListener = vnode.props && vnode.props[name];
    if (_shared.isFunction(eventListener)) eventListener();
}
function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {
    const { p: patch , o: { createElement  }  } = rendererInternals;
    const hiddenContainer = createElement('div');
    const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals);
    // start mounting the content subtree in an off-dom container
    patch(null, suspense.pendingBranch = vnode.ssContent, hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds);
    // now check if we have encountered any async deps
    if (suspense.deps > 0) {
        // has async
        // invoke @fallback event
        triggerEvent(vnode, 'onPending');
        triggerEvent(vnode, 'onFallback');
        // mount the fallback tree
        patch(null, vnode.ssFallback, container, anchor, parentComponent, null, isSVG, slotScopeIds);
        setActiveBranch(suspense, vnode.ssFallback);
    } else // Suspense has no async deps. Just resolve.
    suspense.resolve();
}
function patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, { p: patch , um: unmount , o: { createElement  }  }) {
    const suspense = n2.suspense = n1.suspense;
    suspense.vnode = n2;
    n2.el = n1.el;
    const newBranch = n2.ssContent;
    const newFallback = n2.ssFallback;
    const { activeBranch , pendingBranch , isInFallback , isHydrating  } = suspense;
    if (pendingBranch) {
        suspense.pendingBranch = newBranch;
        if (isSameVNodeType(newBranch, pendingBranch)) {
            // same root type but content may have changed.
            patch(pendingBranch, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
            if (suspense.deps <= 0) suspense.resolve();
            else if (isInFallback) {
                patch(activeBranch, newFallback, container, anchor, parentComponent, null, isSVG, slotScopeIds, optimized);
                setActiveBranch(suspense, newFallback);
            }
        } else {
            // toggled before pending tree is resolved
            suspense.pendingId++;
            if (isHydrating) {
                // if toggled before hydration is finished, the current DOM tree is
                // no longer valid. set it as the active branch so it will be unmounted
                // when resolved
                suspense.isHydrating = false;
                suspense.activeBranch = pendingBranch;
            } else unmount(pendingBranch, parentComponent, suspense);
            // increment pending ID. this is used to invalidate async callbacks
            // reset suspense state
            suspense.deps = 0;
            // discard effects from pending branch
            suspense.effects.length = 0;
            // discard previous container
            suspense.hiddenContainer = createElement('div');
            if (isInFallback) {
                // already in fallback state
                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
                if (suspense.deps <= 0) suspense.resolve();
                else {
                    patch(activeBranch, newFallback, container, anchor, parentComponent, null, isSVG, slotScopeIds, optimized);
                    setActiveBranch(suspense, newFallback);
                }
            } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
                // toggled "back" to current active branch
                patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
                // force resolve
                suspense.resolve(true);
            } else {
                // switched to a 3rd branch
                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
                if (suspense.deps <= 0) suspense.resolve();
            }
        }
    } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
        // root did not change, just normal patch
        patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
        setActiveBranch(suspense, newBranch);
    } else {
        // root node toggled
        // invoke @pending event
        triggerEvent(n2, 'onPending');
        // mount pending branch in off-dom container
        suspense.pendingBranch = newBranch;
        suspense.pendingId++;
        patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
        if (suspense.deps <= 0) // incoming branch has no async deps, resolve now.
        suspense.resolve();
        else {
            const { timeout , pendingId  } = suspense;
            if (timeout > 0) setTimeout(()=>{
                if (suspense.pendingId === pendingId) suspense.fallback(newFallback);
            }, timeout);
            else if (timeout === 0) suspense.fallback(newFallback);
        }
    }
}
let hasWarned1 = false;
function createSuspenseBoundary(vnode1, parent1, parentComponent1, container1, hiddenContainer, anchor1, isSVG1, slotScopeIds, optimized, rendererInternals, isHydrating = false) {
    /* istanbul ignore if */ if (!hasWarned1) {
        hasWarned1 = true;
        // @ts-ignore `console.info` cannot be null error
        console[console.info ? 'info' : 'log'](`<Suspense> is an experimental feature and its API will likely change.`);
    }
    const { p: patch , m: move , um: unmount , n: next , o: { parentNode , remove  }  } = rendererInternals;
    const timeout = _shared.toNumber(vnode1.props && vnode1.props.timeout);
    const suspense = {
        vnode: vnode1,
        parent: parent1,
        parentComponent: parentComponent1,
        isSVG: isSVG1,
        container: container1,
        hiddenContainer,
        anchor: anchor1,
        deps: 0,
        pendingId: 0,
        timeout: typeof timeout === 'number' ? timeout : -1,
        activeBranch: null,
        pendingBranch: null,
        isInFallback: true,
        isHydrating,
        isUnmounted: false,
        effects: [],
        resolve (resume = false) {
            if (!resume && !suspense.pendingBranch) throw new Error(`suspense.resolve() is called without a pending branch.`);
            if (suspense.isUnmounted) throw new Error(`suspense.resolve() is called on an already unmounted suspense boundary.`);
            const { vnode , activeBranch , pendingBranch , pendingId , effects , parentComponent , container  } = suspense;
            if (suspense.isHydrating) suspense.isHydrating = false;
            else if (!resume) {
                const delayEnter = activeBranch && pendingBranch.transition && pendingBranch.transition.mode === 'out-in';
                if (delayEnter) activeBranch.transition.afterLeave = ()=>{
                    if (pendingId === suspense.pendingId) move(pendingBranch, container, anchor, 0 /* ENTER */ );
                };
                // this is initial anchor on mount
                let { anchor  } = suspense;
                // unmount current active tree
                if (activeBranch) {
                    // if the fallback tree was mounted, it may have been moved
                    // as part of a parent suspense. get the latest anchor for insertion
                    anchor = next(activeBranch);
                    unmount(activeBranch, parentComponent, suspense, true);
                }
                if (!delayEnter) // move content from off-dom container to actual container
                move(pendingBranch, container, anchor, 0 /* ENTER */ );
            }
            setActiveBranch(suspense, pendingBranch);
            suspense.pendingBranch = null;
            suspense.isInFallback = false;
            // flush buffered effects
            // check if there is a pending parent suspense
            let parent = suspense.parent;
            let hasUnresolvedAncestor = false;
            while(parent){
                if (parent.pendingBranch) {
                    // found a pending parent suspense, merge buffered post jobs
                    // into that parent
                    parent.effects.push(...effects);
                    hasUnresolvedAncestor = true;
                    break;
                }
                parent = parent.parent;
            }
            // no pending parent suspense, flush all jobs
            if (!hasUnresolvedAncestor) queuePostFlushCb(effects);
            suspense.effects = [];
            // invoke @resolve event
            triggerEvent(vnode, 'onResolve');
        },
        fallback (fallbackVNode) {
            if (!suspense.pendingBranch) return;
            const { vnode , activeBranch , parentComponent , container , isSVG  } = suspense;
            // invoke @fallback event
            triggerEvent(vnode, 'onFallback');
            const anchor = next(activeBranch);
            const mountFallback = ()=>{
                if (!suspense.isInFallback) return;
                // mount the fallback tree
                patch(null, fallbackVNode, container, anchor, parentComponent, null, isSVG, slotScopeIds, optimized);
                setActiveBranch(suspense, fallbackVNode);
            };
            const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === 'out-in';
            if (delayEnter) activeBranch.transition.afterLeave = mountFallback;
            suspense.isInFallback = true;
            // unmount current active branch
            unmount(activeBranch, parentComponent, null, true // shouldRemove
            );
            if (!delayEnter) mountFallback();
        },
        move (container, anchor, type) {
            suspense.activeBranch && move(suspense.activeBranch, container, anchor, type);
            suspense.container = container;
        },
        next () {
            return suspense.activeBranch && next(suspense.activeBranch);
        },
        registerDep (instance, setupRenderEffect) {
            const isInPendingSuspense = !!suspense.pendingBranch;
            if (isInPendingSuspense) suspense.deps++;
            const hydratedEl = instance.vnode.el;
            instance.asyncDep.catch((err)=>{
                handleError(err, instance, 0 /* SETUP_FUNCTION */ );
            }).then((asyncSetupResult)=>{
                // retry when the setup() promise resolves.
                // component may have been unmounted before resolve.
                if (instance.isUnmounted || suspense.isUnmounted || suspense.pendingId !== instance.suspenseId) return;
                // retry from this component
                instance.asyncResolved = true;
                const { vnode  } = instance;
                pushWarningContext(vnode);
                handleSetupResult(instance, asyncSetupResult, false);
                if (hydratedEl) // vnode may have been replaced if an update happened before the
                // async dep is resolved.
                vnode.el = hydratedEl;
                const placeholder = !hydratedEl && instance.subTree.el;
                setupRenderEffect(instance, vnode, // component may have been moved before resolve.
                // if this is not a hydration, instance.subTree will be the comment
                // placeholder.
                parentNode(hydratedEl || instance.subTree.el), // anchor will not be used if this is hydration, so only need to
                // consider the comment placeholder case.
                hydratedEl ? null : next(instance.subTree), suspense, isSVG1, optimized);
                if (placeholder) remove(placeholder);
                updateHOCHostEl(instance, vnode.el);
                popWarningContext();
                // only decrease deps count if suspense is not already resolved
                if (isInPendingSuspense && --suspense.deps === 0) suspense.resolve();
            });
        },
        unmount (parentSuspense, doRemove) {
            suspense.isUnmounted = true;
            if (suspense.activeBranch) unmount(suspense.activeBranch, parentComponent1, parentSuspense, doRemove);
            if (suspense.pendingBranch) unmount(suspense.pendingBranch, parentComponent1, parentSuspense, doRemove);
        }
    };
    return suspense;
}
function hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals, hydrateNode) {
    /* eslint-disable no-restricted-globals */ const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode, document.createElement('div'), null, isSVG, slotScopeIds, optimized, rendererInternals, true);
    // there are two possible scenarios for server-rendered suspense:
    // - success: ssr content should be fully resolved
    // - failure: ssr content should be the fallback branch.
    // however, on the client we don't really know if it has failed or not
    // attempt to hydrate the DOM assuming it has succeeded, but we still
    // need to construct a suspense boundary first
    const result = hydrateNode(node, suspense.pendingBranch = vnode.ssContent, parentComponent, suspense, slotScopeIds, optimized);
    if (suspense.deps === 0) suspense.resolve();
    return result;
/* eslint-enable no-restricted-globals */ }
function normalizeSuspenseChildren(vnode) {
    const { shapeFlag , children  } = vnode;
    const isSlotChildren = shapeFlag & 32 /* SLOTS_CHILDREN */ ;
    vnode.ssContent = normalizeSuspenseSlot(isSlotChildren ? children.default : children);
    vnode.ssFallback = isSlotChildren ? normalizeSuspenseSlot(children.fallback) : createVNode(Comment);
}
function normalizeSuspenseSlot(s) {
    let block;
    if (_shared.isFunction(s)) {
        const trackBlock = isBlockTreeEnabled && s._c;
        if (trackBlock) {
            // disableTracking: false
            // allow block tracking for compiled slots
            // (see ./componentRenderContext.ts)
            s._d = false;
            openBlock();
        }
        s = s();
        if (trackBlock) {
            s._d = true;
            block = currentBlock;
            closeBlock();
        }
    }
    if (_shared.isArray(s)) {
        const singleChild = filterSingleRoot(s);
        if (!singleChild) warn(`<Suspense> slots expect a single root node.`);
        s = singleChild;
    }
    s = normalizeVNode(s);
    if (block && !s.dynamicChildren) s.dynamicChildren = block.filter((c)=>c !== s
    );
    return s;
}
function queueEffectWithSuspense(fn, suspense) {
    if (suspense && suspense.pendingBranch) {
        if (_shared.isArray(fn)) suspense.effects.push(...fn);
        else suspense.effects.push(fn);
    } else queuePostFlushCb(fn);
}
function setActiveBranch(suspense, branch) {
    suspense.activeBranch = branch;
    const { vnode , parentComponent  } = suspense;
    const el = vnode.el = branch.el;
    // in case suspense is the root node of a component,
    // recursively update the HOC el
    if (parentComponent && parentComponent.subTree === vnode) {
        parentComponent.vnode.el = el;
        updateHOCHostEl(parentComponent, el);
    }
}
function provide(key, value) {
    if (!currentInstance) warn(`provide() can only be used inside setup().`);
    else {
        let provides = currentInstance.provides;
        // by default an instance inherits its parent's provides object
        // but when it needs to provide values of its own, it creates its
        // own provides object using parent provides object as prototype.
        // this way in `inject` we can simply look up injections from direct
        // parent and let the prototype chain do the work.
        const parentProvides = currentInstance.parent && currentInstance.parent.provides;
        if (parentProvides === provides) provides = currentInstance.provides = Object.create(parentProvides);
        // TS doesn't allow symbol as index type
        provides[key] = value;
    }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
    // fallback to `currentRenderingInstance` so that this can be called in
    // a functional component
    const instance = currentInstance || currentRenderingInstance;
    if (instance) {
        // #2400
        // to support `app.use` plugins,
        // fallback to appContext's `provides` if the intance is at root
        const provides = instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides;
        if (provides && key in provides) // TS doesn't allow symbol as index type
        return provides[key];
        else if (arguments.length > 1) return treatDefaultAsFactory && _shared.isFunction(defaultValue) ? defaultValue.call(instance.proxy) : defaultValue;
        else warn(`injection "${String(key)}" not found.`);
    } else warn(`inject() can only be used inside setup() or functional components.`);
}
function useTransitionState() {
    const state = {
        isMounted: false,
        isLeaving: false,
        isUnmounting: false,
        leavingVNodes: new Map()
    };
    onMounted(()=>{
        state.isMounted = true;
    });
    onBeforeUnmount(()=>{
        state.isUnmounting = true;
    });
    return state;
}
const TransitionHookValidator = [
    Function,
    Array
];
const BaseTransitionImpl = {
    name: `BaseTransition`,
    props: {
        mode: String,
        appear: Boolean,
        persisted: Boolean,
        // enter
        onBeforeEnter: TransitionHookValidator,
        onEnter: TransitionHookValidator,
        onAfterEnter: TransitionHookValidator,
        onEnterCancelled: TransitionHookValidator,
        // leave
        onBeforeLeave: TransitionHookValidator,
        onLeave: TransitionHookValidator,
        onAfterLeave: TransitionHookValidator,
        onLeaveCancelled: TransitionHookValidator,
        // appear
        onBeforeAppear: TransitionHookValidator,
        onAppear: TransitionHookValidator,
        onAfterAppear: TransitionHookValidator,
        onAppearCancelled: TransitionHookValidator
    },
    setup (props, { slots  }) {
        const instance = getCurrentInstance();
        const state = useTransitionState();
        let prevTransitionKey;
        return ()=>{
            const children = slots.default && getTransitionRawChildren(slots.default(), true);
            if (!children || !children.length) return;
            // warn multiple elements
            if (children.length > 1) warn("<transition> can only be used on a single element or component. Use <transition-group> for lists.");
            // there's no need to track reactivity for these props so use the raw
            // props for a bit better perf
            const rawProps = _reactivity.toRaw(props);
            const { mode  } = rawProps;
            // check mode
            if (mode && ![
                'in-out',
                'out-in',
                'default'
            ].includes(mode)) warn(`invalid <transition> mode: ${mode}`);
            // at this point children has a guaranteed length of 1.
            const child = children[0];
            if (state.isLeaving) return emptyPlaceholder(child);
            // in the case of <transition><keep-alive/></transition>, we need to
            // compare the type of the kept-alive children.
            const innerChild = getKeepAliveChild(child);
            if (!innerChild) return emptyPlaceholder(child);
            const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);
            setTransitionHooks(innerChild, enterHooks);
            const oldChild = instance.subTree;
            const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
            let transitionKeyChanged = false;
            const { getTransitionKey  } = innerChild.type;
            if (getTransitionKey) {
                const key = getTransitionKey();
                if (prevTransitionKey === undefined) prevTransitionKey = key;
                else if (key !== prevTransitionKey) {
                    prevTransitionKey = key;
                    transitionKeyChanged = true;
                }
            }
            // handle mode
            if (oldInnerChild && oldInnerChild.type !== Comment && (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {
                const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);
                // update old tree's hooks in case of dynamic transition
                setTransitionHooks(oldInnerChild, leavingHooks);
                // switching between different views
                if (mode === 'out-in') {
                    state.isLeaving = true;
                    // return placeholder node and queue update when leave finishes
                    leavingHooks.afterLeave = ()=>{
                        state.isLeaving = false;
                        instance.update();
                    };
                    return emptyPlaceholder(child);
                } else if (mode === 'in-out' && innerChild.type !== Comment) leavingHooks.delayLeave = (el, earlyRemove, delayedLeave)=>{
                    const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);
                    leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
                    // early removal callback
                    el._leaveCb = ()=>{
                        earlyRemove();
                        el._leaveCb = undefined;
                        delete enterHooks.delayedLeave;
                    };
                    enterHooks.delayedLeave = delayedLeave;
                };
            }
            return child;
        };
    }
};
// export the public type for h/tsx inference
// also to avoid inline import() in generated d.ts files
const BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(state, vnode) {
    const { leavingVNodes  } = state;
    let leavingVNodesCache = leavingVNodes.get(vnode.type);
    if (!leavingVNodesCache) {
        leavingVNodesCache = Object.create(null);
        leavingVNodes.set(vnode.type, leavingVNodesCache);
    }
    return leavingVNodesCache;
}
// The transition hooks are attached to the vnode as vnode.transition
// and will be called at appropriate timing in the renderer.
function resolveTransitionHooks(vnode2, props, state, instance) {
    const { appear , mode , persisted =false , onBeforeEnter , onEnter , onAfterEnter , onEnterCancelled , onBeforeLeave , onLeave , onAfterLeave , onLeaveCancelled , onBeforeAppear , onAppear , onAfterAppear , onAppearCancelled  } = props;
    const key = String(vnode2.key);
    const leavingVNodesCache = getLeavingNodesForType(state, vnode2);
    const callHook = (hook, args)=>{
        hook && callWithAsyncErrorHandling(hook, instance, 9 /* TRANSITION_HOOK */ , args);
    };
    const hooks = {
        mode,
        persisted,
        beforeEnter (el) {
            let hook = onBeforeEnter;
            if (!state.isMounted) {
                if (appear) hook = onBeforeAppear || onBeforeEnter;
                else return;
            }
            // for same element (v-show)
            if (el._leaveCb) el._leaveCb(true);
            // for toggled element with same key (v-if)
            const leavingVNode = leavingVNodesCache[key];
            if (leavingVNode && isSameVNodeType(vnode2, leavingVNode) && leavingVNode.el._leaveCb) // force early removal (not cancelled)
            leavingVNode.el._leaveCb();
            callHook(hook, [
                el
            ]);
        },
        enter (el) {
            let hook = onEnter;
            let afterHook = onAfterEnter;
            let cancelHook = onEnterCancelled;
            if (!state.isMounted) {
                if (appear) {
                    hook = onAppear || onEnter;
                    afterHook = onAfterAppear || onAfterEnter;
                    cancelHook = onAppearCancelled || onEnterCancelled;
                } else return;
            }
            let called = false;
            const done = el._enterCb = (cancelled)=>{
                if (called) return;
                called = true;
                if (cancelled) callHook(cancelHook, [
                    el
                ]);
                else callHook(afterHook, [
                    el
                ]);
                if (hooks.delayedLeave) hooks.delayedLeave();
                el._enterCb = undefined;
            };
            if (hook) {
                hook(el, done);
                if (hook.length <= 1) done();
            } else done();
        },
        leave (el, remove) {
            const key = String(vnode2.key);
            if (el._enterCb) el._enterCb(true);
            if (state.isUnmounting) return remove();
            callHook(onBeforeLeave, [
                el
            ]);
            let called = false;
            const done = el._leaveCb = (cancelled)=>{
                if (called) return;
                called = true;
                remove();
                if (cancelled) callHook(onLeaveCancelled, [
                    el
                ]);
                else callHook(onAfterLeave, [
                    el
                ]);
                el._leaveCb = undefined;
                if (leavingVNodesCache[key] === vnode2) delete leavingVNodesCache[key];
            };
            leavingVNodesCache[key] = vnode2;
            if (onLeave) {
                onLeave(el, done);
                if (onLeave.length <= 1) done();
            } else done();
        },
        clone (vnode) {
            return resolveTransitionHooks(vnode, props, state, instance);
        }
    };
    return hooks;
}
// the placeholder really only handles one special case: KeepAlive
// in the case of a KeepAlive in a leave phase we need to return a KeepAlive
// placeholder with empty content to avoid the KeepAlive instance from being
// unmounted.
function emptyPlaceholder(vnode) {
    if (isKeepAlive(vnode)) {
        vnode = cloneVNode(vnode);
        vnode.children = null;
        return vnode;
    }
}
function getKeepAliveChild(vnode) {
    return isKeepAlive(vnode) ? vnode.children ? vnode.children[0] : undefined : vnode;
}
function setTransitionHooks(vnode, hooks) {
    if (vnode.shapeFlag & 6 /* COMPONENT */  && vnode.component) setTransitionHooks(vnode.component.subTree, hooks);
    else if (vnode.shapeFlag & 128 /* SUSPENSE */ ) {
        vnode.ssContent.transition = hooks.clone(vnode.ssContent);
        vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
    } else vnode.transition = hooks;
}
function getTransitionRawChildren(children, keepComment = false) {
    let ret = [];
    let keyedFragmentCount = 0;
    for(let i = 0; i < children.length; i++){
        const child = children[i];
        // handle fragment children case, e.g. v-for
        if (child.type === Fragment) {
            if (child.patchFlag & 128 /* KEYED_FRAGMENT */ ) keyedFragmentCount++;
            ret = ret.concat(getTransitionRawChildren(child.children, keepComment));
        } else if (keepComment || child.type !== Comment) ret.push(child);
    }
    // #1126 if a transition children list contains multiple sub fragments, these
    // fragments will be merged into a flat children array. Since each v-for
    // fragment may contain different static bindings inside, we need to de-op
    // these children to force full diffs to ensure correct behavior.
    if (keyedFragmentCount > 1) for(let i1 = 0; i1 < ret.length; i1++)ret[i1].patchFlag = -2 /* BAIL */ ;
    return ret;
}
// implementation, close to no-op
function defineComponent(options) {
    return _shared.isFunction(options) ? {
        setup: options,
        name: options.name
    } : options;
}
const isAsyncWrapper = (i)=>!!i.type.__asyncLoader
;
function defineAsyncComponent(source) {
    if (_shared.isFunction(source)) source = {
        loader: source
    };
    const { loader , loadingComponent , errorComponent , delay =200 , timeout , suspensible =true , onError: userOnError  } = source;
    let pendingRequest = null;
    let resolvedComp;
    let retries = 0;
    const retry = ()=>{
        retries++;
        pendingRequest = null;
        return load();
    };
    const load = ()=>{
        let thisRequest;
        return pendingRequest || (thisRequest = pendingRequest = loader().catch((err)=>{
            err = err instanceof Error ? err : new Error(String(err));
            if (userOnError) return new Promise((resolve, reject)=>{
                const userRetry = ()=>resolve(retry())
                ;
                const userFail = ()=>reject(err)
                ;
                userOnError(err, userRetry, userFail, retries + 1);
            });
            else throw err;
        }).then((comp)=>{
            if (thisRequest !== pendingRequest && pendingRequest) return pendingRequest;
            if (!comp) warn(`Async component loader resolved to undefined. ` + `If you are using retry(), make sure to return its return value.`);
            // interop module default
            if (comp && (comp.__esModule || comp[Symbol.toStringTag] === 'Module')) comp = comp.default;
            if (comp && !_shared.isObject(comp) && !_shared.isFunction(comp)) throw new Error(`Invalid async component load result: ${comp}`);
            resolvedComp = comp;
            return comp;
        }));
    };
    return defineComponent({
        name: 'AsyncComponentWrapper',
        __asyncLoader: load,
        get __asyncResolved () {
            return resolvedComp;
        },
        setup () {
            const instance = currentInstance;
            // already resolved
            if (resolvedComp) return ()=>createInnerComp(resolvedComp, instance)
            ;
            const onError = (err)=>{
                pendingRequest = null;
                handleError(err, instance, 13 /* ASYNC_COMPONENT_LOADER */ , !errorComponent /* do not throw in dev if user provided error component */ );
            };
            // suspense-controlled or SSR.
            if (suspensible && instance.suspense || isInSSRComponentSetup) return load().then((comp)=>{
                return ()=>createInnerComp(comp, instance)
                ;
            }).catch((err)=>{
                onError(err);
                return ()=>errorComponent ? createVNode(errorComponent, {
                        error: err
                    }) : null
                ;
            });
            const loaded = _reactivity.ref(false);
            const error = _reactivity.ref();
            const delayed = _reactivity.ref(!!delay);
            if (delay) setTimeout(()=>{
                delayed.value = false;
            }, delay);
            if (timeout != null) setTimeout(()=>{
                if (!loaded.value && !error.value) {
                    const err = new Error(`Async component timed out after ${timeout}ms.`);
                    onError(err);
                    error.value = err;
                }
            }, timeout);
            load().then(()=>{
                loaded.value = true;
                if (instance.parent && isKeepAlive(instance.parent.vnode)) // parent is keep-alive, force update so the loaded component's
                // name is taken into account
                queueJob(instance.parent.update);
            }).catch((err)=>{
                onError(err);
                error.value = err;
            });
            return ()=>{
                if (loaded.value && resolvedComp) return createInnerComp(resolvedComp, instance);
                else if (error.value && errorComponent) return createVNode(errorComponent, {
                    error: error.value
                });
                else if (loadingComponent && !delayed.value) return createVNode(loadingComponent);
            };
        }
    });
}
function createInnerComp(comp, { vnode: { ref , props , children  }  }) {
    const vnode = createVNode(comp, props, children);
    // ensure inner component inherits the async wrapper's ref owner
    vnode.ref = ref;
    return vnode;
}
const isKeepAlive = (vnode)=>vnode.type.__isKeepAlive
;
const KeepAliveImpl = {
    name: `KeepAlive`,
    // Marker for special handling inside the renderer. We are not using a ===
    // check directly on KeepAlive in the renderer, because importing it directly
    // would prevent it from being tree-shaken.
    __isKeepAlive: true,
    props: {
        include: [
            String,
            RegExp,
            Array
        ],
        exclude: [
            String,
            RegExp,
            Array
        ],
        max: [
            String,
            Number
        ]
    },
    setup (props, { slots  }) {
        const instance2 = getCurrentInstance();
        // KeepAlive communicates with the instantiated renderer via the
        // ctx where the renderer passes in its internals,
        // and the KeepAlive instance exposes activate/deactivate implementations.
        // The whole point of this is to avoid importing KeepAlive directly in the
        // renderer to facilitate tree-shaking.
        const sharedContext = instance2.ctx;
        // if the internal renderer is not registered, it indicates that this is server-side rendering,
        // for KeepAlive, we just need to render its children
        if (!sharedContext.renderer) return slots.default;
        const cache = new Map();
        const keys = new Set();
        let current = null;
        instance2.__v_cache = cache;
        const parentSuspense = instance2.suspense;
        const { renderer: { p: patch , m: move , um: _unmount , o: { createElement  }  }  } = sharedContext;
        const storageContainer = createElement('div');
        sharedContext.activate = (vnode, container, anchor, isSVG, optimized)=>{
            const instance = vnode.component;
            move(vnode, container, anchor, 0 /* ENTER */ , parentSuspense);
            // in case props have changed
            patch(instance.vnode, vnode, container, anchor, instance, parentSuspense, isSVG, vnode.slotScopeIds, optimized);
            queuePostRenderEffect(()=>{
                instance.isDeactivated = false;
                if (instance.a) _shared.invokeArrayFns(instance.a);
                const vnodeHook = vnode.props && vnode.props.onVnodeMounted;
                if (vnodeHook) invokeVNodeHook(vnodeHook, instance.parent, vnode);
            }, parentSuspense);
            // Update components tree
            devtoolsComponentAdded(instance);
        };
        sharedContext.deactivate = (vnode)=>{
            const instance = vnode.component;
            move(vnode, storageContainer, null, 1 /* LEAVE */ , parentSuspense);
            queuePostRenderEffect(()=>{
                if (instance.da) _shared.invokeArrayFns(instance.da);
                const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;
                if (vnodeHook) invokeVNodeHook(vnodeHook, instance.parent, vnode);
                instance.isDeactivated = true;
            }, parentSuspense);
            // Update components tree
            devtoolsComponentAdded(instance);
        };
        function unmount(vnode) {
            // reset the shapeFlag so it can be properly unmounted
            resetShapeFlag(vnode);
            _unmount(vnode, instance2, parentSuspense);
        }
        function pruneCache(filter) {
            cache.forEach((vnode, key)=>{
                const name = getComponentName(vnode.type);
                if (name && (!filter || !filter(name))) pruneCacheEntry(key);
            });
        }
        function pruneCacheEntry(key) {
            const cached = cache.get(key);
            if (!current || cached.type !== current.type) unmount(cached);
            else if (current) // current active instance should no longer be kept-alive.
            // we can't unmount it now but it might be later, so reset its flag now.
            resetShapeFlag(current);
            cache.delete(key);
            keys.delete(key);
        }
        // prune cache on include/exclude prop change
        watch(()=>[
                props.include,
                props.exclude
            ]
        , ([include, exclude])=>{
            include && pruneCache((name)=>matches(include, name)
            );
            exclude && pruneCache((name)=>!matches(exclude, name)
            );
        }, // prune post-render after `current` has been updated
        {
            flush: 'post',
            deep: true
        });
        // cache sub tree after render
        let pendingCacheKey = null;
        const cacheSubtree = ()=>{
            // fix #1621, the pendingCacheKey could be 0
            if (pendingCacheKey != null) cache.set(pendingCacheKey, getInnerChild(instance2.subTree));
        };
        onMounted(cacheSubtree);
        onUpdated(cacheSubtree);
        onBeforeUnmount(()=>{
            cache.forEach((cached)=>{
                const { subTree , suspense  } = instance2;
                const vnode = getInnerChild(subTree);
                if (cached.type === vnode.type) {
                    // current instance will be unmounted as part of keep-alive's unmount
                    resetShapeFlag(vnode);
                    // but invoke its deactivated hook here
                    const da = vnode.component.da;
                    da && queuePostRenderEffect(da, suspense);
                    return;
                }
                unmount(cached);
            });
        });
        return ()=>{
            pendingCacheKey = null;
            if (!slots.default) return null;
            const children = slots.default();
            const rawVNode = children[0];
            if (children.length > 1) {
                warn(`KeepAlive should contain exactly one component child.`);
                current = null;
                return children;
            } else if (!isVNode(rawVNode) || !(rawVNode.shapeFlag & 4 /* STATEFUL_COMPONENT */ ) && !(rawVNode.shapeFlag & 128 /* SUSPENSE */ )) {
                current = null;
                return rawVNode;
            }
            let vnode = getInnerChild(rawVNode);
            const comp = vnode.type;
            // for async components, name check should be based in its loaded
            // inner component if available
            const name = getComponentName(isAsyncWrapper(vnode) ? vnode.type.__asyncResolved || {
            } : comp);
            const { include , exclude , max  } = props;
            if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
                current = vnode;
                return rawVNode;
            }
            const key = vnode.key == null ? comp : vnode.key;
            const cachedVNode = cache.get(key);
            // clone vnode if it's reused because we are going to mutate it
            if (vnode.el) {
                vnode = cloneVNode(vnode);
                if (rawVNode.shapeFlag & 128 /* SUSPENSE */ ) rawVNode.ssContent = vnode;
            }
            // #1513 it's possible for the returned vnode to be cloned due to attr
            // fallthrough or scopeId, so the vnode here may not be the final vnode
            // that is mounted. Instead of caching it directly, we store the pending
            // key and cache `instance.subTree` (the normalized vnode) in
            // beforeMount/beforeUpdate hooks.
            pendingCacheKey = key;
            if (cachedVNode) {
                // copy over mounted state
                vnode.el = cachedVNode.el;
                vnode.component = cachedVNode.component;
                if (vnode.transition) // recursively update transition hooks on subTree
                setTransitionHooks(vnode, vnode.transition);
                // avoid vnode being mounted as fresh
                vnode.shapeFlag |= 512 /* COMPONENT_KEPT_ALIVE */ ;
                // make this key the freshest
                keys.delete(key);
                keys.add(key);
            } else {
                keys.add(key);
                // prune oldest entry
                if (max && keys.size > parseInt(max, 10)) pruneCacheEntry(keys.values().next().value);
            }
            // avoid vnode being unmounted
            vnode.shapeFlag |= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */ ;
            current = vnode;
            return rawVNode;
        };
    }
};
// export the public type for h/tsx inference
// also to avoid inline import() in generated d.ts files
const KeepAlive = KeepAliveImpl;
function matches(pattern, name) {
    if (_shared.isArray(pattern)) return pattern.some((p)=>matches(p, name)
    );
    else if (_shared.isString(pattern)) return pattern.split(',').indexOf(name) > -1;
    else if (pattern.test) return pattern.test(name);
    /* istanbul ignore next */ return false;
}
function onActivated(hook, target) {
    registerKeepAliveHook(hook, "a" /* ACTIVATED */ , target);
}
function onDeactivated(hook, target) {
    registerKeepAliveHook(hook, "da" /* DEACTIVATED */ , target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
    // cache the deactivate branch check wrapper for injected hooks so the same
    // hook can be properly deduped by the scheduler. "__wdc" stands for "with
    // deactivation check".
    const wrappedHook = hook.__wdc || (hook.__wdc = ()=>{
        // only fire the hook if the target instance is NOT in a deactivated branch.
        let current = target;
        while(current){
            if (current.isDeactivated) return;
            current = current.parent;
        }
        hook();
    });
    injectHook(type, wrappedHook, target);
    // In addition to registering it on the target instance, we walk up the parent
    // chain and register it on all ancestor instances that are keep-alive roots.
    // This avoids the need to walk the entire component tree when invoking these
    // hooks, and more importantly, avoids the need to track child components in
    // arrays.
    if (target) {
        let current = target.parent;
        while(current && current.parent){
            if (isKeepAlive(current.parent.vnode)) injectToKeepAliveRoot(wrappedHook, type, target, current);
            current = current.parent;
        }
    }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
    // injectHook wraps the original for error handling, so make sure to remove
    // the wrapped version.
    const injected = injectHook(type, hook, keepAliveRoot, true);
    onUnmounted(()=>{
        _shared.remove(keepAliveRoot[type], injected);
    }, target);
}
function resetShapeFlag(vnode) {
    let shapeFlag = vnode.shapeFlag;
    if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */ ) shapeFlag -= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */ ;
    if (shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */ ) shapeFlag -= 512 /* COMPONENT_KEPT_ALIVE */ ;
    vnode.shapeFlag = shapeFlag;
}
function getInnerChild(vnode) {
    return vnode.shapeFlag & 128 /* SUSPENSE */  ? vnode.ssContent : vnode;
}
function injectHook(type, hook, target = currentInstance, prepend = false) {
    if (target) {
        const hooks = target[type] || (target[type] = []);
        // cache the error handling wrapper for injected hooks so the same hook
        // can be properly deduped by the scheduler. "__weh" stands for "with error
        // handling".
        const wrappedHook = hook.__weh || (hook.__weh = (...args)=>{
            if (target.isUnmounted) return;
            // disable tracking inside all lifecycle hooks
            // since they can potentially be called inside effects.
            _reactivity.pauseTracking();
            // Set currentInstance during hook invocation.
            // This assumes the hook does not synchronously trigger other hooks, which
            // can only be false when the user does something really funky.
            setCurrentInstance(target);
            const res = callWithAsyncErrorHandling(hook, target, type, args);
            unsetCurrentInstance();
            _reactivity.resetTracking();
            return res;
        });
        if (prepend) hooks.unshift(wrappedHook);
        else hooks.push(wrappedHook);
        return wrappedHook;
    } else {
        const apiName = _shared.toHandlerKey(ErrorTypeStrings[type].replace(/ hook$/, ''));
        warn(`${apiName} is called when there is no active component instance to be ` + `associated with. ` + `Lifecycle injection APIs can only be used during execution of setup().` + (` If you are using async setup(), make sure to register lifecycle ` + `hooks before the first await statement.`));
    }
}
const createHook = (lifecycle)=>(hook, target = currentInstance)=>// post-create lifecycle registrations are noops during SSR (except for serverPrefetch)
        (!isInSSRComponentSetup || lifecycle === "sp" /* SERVER_PREFETCH */ ) && injectHook(lifecycle, hook, target)
;
const onBeforeMount = createHook("bm" /* BEFORE_MOUNT */ );
const onMounted = createHook("m" /* MOUNTED */ );
const onBeforeUpdate = createHook("bu" /* BEFORE_UPDATE */ );
const onUpdated = createHook("u" /* UPDATED */ );
const onBeforeUnmount = createHook("bum" /* BEFORE_UNMOUNT */ );
const onUnmounted = createHook("um" /* UNMOUNTED */ );
const onServerPrefetch = createHook("sp" /* SERVER_PREFETCH */ );
const onRenderTriggered = createHook("rtg" /* RENDER_TRIGGERED */ );
const onRenderTracked = createHook("rtc" /* RENDER_TRACKED */ );
function onErrorCaptured(hook, target = currentInstance) {
    injectHook("ec" /* ERROR_CAPTURED */ , hook, target);
}
function createDuplicateChecker() {
    const cache = Object.create(null);
    return (type, key)=>{
        if (cache[key]) warn(`${type} property "${key}" is already defined in ${cache[key]}.`);
        else cache[key] = type;
    };
}
let shouldCacheAccess = true;
function applyOptions(instance) {
    const options = resolveMergedOptions(instance);
    const publicThis = instance.proxy;
    const ctx = instance.ctx;
    // do not cache property access on public proxy during state initialization
    shouldCacheAccess = false;
    // call beforeCreate first before accessing other options since
    // the hook may mutate resolved options (#2791)
    if (options.beforeCreate) callHook1(options.beforeCreate, instance, "bc" /* BEFORE_CREATE */ );
    const { // state
    data: dataOptions , computed: computedOptions , methods , watch: watchOptions , provide: provideOptions , inject: injectOptions , // lifecycle
    created , beforeMount , mounted , beforeUpdate , updated , activated , deactivated , beforeDestroy , beforeUnmount , destroyed , unmounted , render , renderTracked , renderTriggered , errorCaptured , serverPrefetch , // public API
    expose , inheritAttrs , // assets
    components , directives , filters  } = options;
    const checkDuplicateProperties = createDuplicateChecker();
    {
        const [propsOptions] = instance.propsOptions;
        if (propsOptions) for(const key in propsOptions)checkDuplicateProperties("Props" /* PROPS */ , key);
    }
    // options initialization order (to be consistent with Vue 2):
    // - props (already done outside of this function)
    // - inject
    // - methods
    // - data (deferred since it relies on `this` access)
    // - computed
    // - watch (deferred since it relies on `this` access)
    if (injectOptions) resolveInjections(injectOptions, ctx, checkDuplicateProperties, instance.appContext.config.unwrapInjectedRef);
    if (methods) for(const key3 in methods){
        const methodHandler = methods[key3];
        if (_shared.isFunction(methodHandler)) {
            Object.defineProperty(ctx, key3, {
                value: methodHandler.bind(publicThis),
                configurable: true,
                enumerable: true,
                writable: true
            });
            checkDuplicateProperties("Methods" /* METHODS */ , key3);
        } else warn(`Method "${key3}" has type "${typeof methodHandler}" in the component definition. ` + `Did you reference the function correctly?`);
    }
    if (dataOptions) {
        if (!_shared.isFunction(dataOptions)) warn(`The data option must be a function. ` + `Plain object usage is no longer supported.`);
        const data = dataOptions.call(publicThis, publicThis);
        if (_shared.isPromise(data)) warn(`data() returned a Promise - note data() cannot be async; If you ` + `intend to perform data fetching before component renders, use ` + `async setup() + <Suspense>.`);
        if (!_shared.isObject(data)) warn(`data() should return an object.`);
        else {
            instance.data = _reactivity.reactive(data);
            for(const key in data){
                checkDuplicateProperties("Data" /* DATA */ , key);
                // expose data on ctx during dev
                if (key[0] !== '$' && key[0] !== '_') Object.defineProperty(ctx, key, {
                    configurable: true,
                    enumerable: true,
                    get: ()=>data[key]
                    ,
                    set: _shared.NOOP
                });
            }
        }
    }
    // state initialization complete at this point - start caching access
    shouldCacheAccess = true;
    if (computedOptions) for(const key1 in computedOptions){
        const opt = computedOptions[key1];
        const get = _shared.isFunction(opt) ? opt.bind(publicThis, publicThis) : _shared.isFunction(opt.get) ? opt.get.bind(publicThis, publicThis) : _shared.NOOP;
        if (get === _shared.NOOP) warn(`Computed property "${key1}" has no getter.`);
        const set = !_shared.isFunction(opt) && _shared.isFunction(opt.set) ? opt.set.bind(publicThis) : ()=>{
            warn(`Write operation failed: computed property "${key1}" is readonly.`);
        };
        const c = _reactivity.computed({
            get,
            set
        });
        Object.defineProperty(ctx, key1, {
            enumerable: true,
            configurable: true,
            get: ()=>c.value
            ,
            set: (v)=>c.value = v
        });
        checkDuplicateProperties("Computed" /* COMPUTED */ , key1);
    }
    if (watchOptions) for(const key2 in watchOptions)createWatcher(watchOptions[key2], ctx, publicThis, key2);
    if (provideOptions) {
        const provides = _shared.isFunction(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
        Reflect.ownKeys(provides).forEach((key)=>{
            provide(key, provides[key]);
        });
    }
    if (created) callHook1(created, instance, "c" /* CREATED */ );
    function registerLifecycleHook(register, hook) {
        if (_shared.isArray(hook)) hook.forEach((_hook)=>register(_hook.bind(publicThis))
        );
        else if (hook) register(hook.bind(publicThis));
    }
    registerLifecycleHook(onBeforeMount, beforeMount);
    registerLifecycleHook(onMounted, mounted);
    registerLifecycleHook(onBeforeUpdate, beforeUpdate);
    registerLifecycleHook(onUpdated, updated);
    registerLifecycleHook(onActivated, activated);
    registerLifecycleHook(onDeactivated, deactivated);
    registerLifecycleHook(onErrorCaptured, errorCaptured);
    registerLifecycleHook(onRenderTracked, renderTracked);
    registerLifecycleHook(onRenderTriggered, renderTriggered);
    registerLifecycleHook(onBeforeUnmount, beforeUnmount);
    registerLifecycleHook(onUnmounted, unmounted);
    registerLifecycleHook(onServerPrefetch, serverPrefetch);
    if (_shared.isArray(expose)) {
        if (expose.length) {
            const exposed = instance.exposed || (instance.exposed = {
            });
            expose.forEach((key)=>{
                Object.defineProperty(exposed, key, {
                    get: ()=>publicThis[key]
                    ,
                    set: (val)=>publicThis[key] = val
                });
            });
        } else if (!instance.exposed) instance.exposed = {
        };
    }
    // options that are handled when creating the instance but also need to be
    // applied from mixins
    if (render && instance.render === _shared.NOOP) instance.render = render;
    if (inheritAttrs != null) instance.inheritAttrs = inheritAttrs;
    // asset options.
    if (components) instance.components = components;
    if (directives) instance.directives = directives;
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = _shared.NOOP, unwrapRef = false) {
    if (_shared.isArray(injectOptions)) injectOptions = normalizeInject(injectOptions);
    for(const key in injectOptions){
        const opt = injectOptions[key];
        let injected;
        if (_shared.isObject(opt)) {
            if ('default' in opt) injected = inject(opt.from || key, opt.default, true);
            else injected = inject(opt.from || key);
        } else injected = inject(opt);
        if (_reactivity.isRef(injected)) {
            // TODO remove the check in 3.3
            if (unwrapRef) Object.defineProperty(ctx, key, {
                enumerable: true,
                configurable: true,
                get: ()=>injected.value
                ,
                set: (v)=>injected.value = v
            });
            else {
                warn(`injected property "${key}" is a ref and will be auto-unwrapped ` + `and no longer needs \`.value\` in the next minor release. ` + `To opt-in to the new behavior now, ` + `set \`app.config.unwrapInjectedRef = true\` (this config is ` + `temporary and will not be needed in the future.)`);
                ctx[key] = injected;
            }
        } else ctx[key] = injected;
        checkDuplicateProperties("Inject" /* INJECT */ , key);
    }
}
function callHook1(hook, instance, type) {
    callWithAsyncErrorHandling(_shared.isArray(hook) ? hook.map((h)=>h.bind(instance.proxy)
    ) : hook.bind(instance.proxy), instance, type);
}
function createWatcher(raw, ctx, publicThis, key) {
    const getter = key.includes('.') ? createPathGetter(publicThis, key) : ()=>publicThis[key]
    ;
    if (_shared.isString(raw)) {
        const handler = ctx[raw];
        if (_shared.isFunction(handler)) watch(getter, handler);
        else warn(`Invalid watch handler specified by key "${raw}"`, handler);
    } else if (_shared.isFunction(raw)) watch(getter, raw.bind(publicThis));
    else if (_shared.isObject(raw)) {
        if (_shared.isArray(raw)) raw.forEach((r)=>createWatcher(r, ctx, publicThis, key)
        );
        else {
            const handler = _shared.isFunction(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
            if (_shared.isFunction(handler)) watch(getter, handler, raw);
            else warn(`Invalid watch handler specified by key "${raw.handler}"`, handler);
        }
    } else warn(`Invalid watch option: "${key}"`, raw);
}
/**
 * Resolve merged options and cache it on the component.
 * This is done only once per-component since the merging does not involve
 * instances.
 */ function resolveMergedOptions(instance) {
    const base = instance.type;
    const { mixins , extends: extendsOptions  } = base;
    const { mixins: globalMixins , optionsCache: cache , config: { optionMergeStrategies  }  } = instance.appContext;
    const cached = cache.get(base);
    let resolved;
    if (cached) resolved = cached;
    else if (!globalMixins.length && !mixins && !extendsOptions) resolved = base;
    else {
        resolved = {
        };
        if (globalMixins.length) globalMixins.forEach((m)=>mergeOptions(resolved, m, optionMergeStrategies, true)
        );
        mergeOptions(resolved, base, optionMergeStrategies);
    }
    cache.set(base, resolved);
    return resolved;
}
function mergeOptions(to, from, strats, asMixin = false) {
    const { mixins , extends: extendsOptions  } = from;
    if (extendsOptions) mergeOptions(to, extendsOptions, strats, true);
    if (mixins) mixins.forEach((m)=>mergeOptions(to, m, strats, true)
    );
    for(const key in from)if (asMixin && key === 'expose') warn(`"expose" option is ignored when declared in mixins or extends. ` + `It should only be declared in the base component itself.`);
    else {
        const strat = internalOptionMergeStrats[key] || strats && strats[key];
        to[key] = strat ? strat(to[key], from[key]) : from[key];
    }
    return to;
}
const internalOptionMergeStrats = {
    data: mergeDataFn,
    props: mergeObjectOptions,
    emits: mergeObjectOptions,
    // objects
    methods: mergeObjectOptions,
    computed: mergeObjectOptions,
    // lifecycle
    beforeCreate: mergeAsArray,
    created: mergeAsArray,
    beforeMount: mergeAsArray,
    mounted: mergeAsArray,
    beforeUpdate: mergeAsArray,
    updated: mergeAsArray,
    beforeDestroy: mergeAsArray,
    beforeUnmount: mergeAsArray,
    destroyed: mergeAsArray,
    unmounted: mergeAsArray,
    activated: mergeAsArray,
    deactivated: mergeAsArray,
    errorCaptured: mergeAsArray,
    serverPrefetch: mergeAsArray,
    // assets
    components: mergeObjectOptions,
    directives: mergeObjectOptions,
    // watch
    watch: mergeWatchOptions,
    // provide / inject
    provide: mergeDataFn,
    inject: mergeInject
};
function mergeDataFn(to, from) {
    if (!from) return to;
    if (!to) return from;
    return function mergedDataFn() {
        return _shared.extend(_shared.isFunction(to) ? to.call(this, this) : to, _shared.isFunction(from) ? from.call(this, this) : from);
    };
}
function mergeInject(to, from) {
    return mergeObjectOptions(normalizeInject(to), normalizeInject(from));
}
function normalizeInject(raw) {
    if (_shared.isArray(raw)) {
        const res = {
        };
        for(let i = 0; i < raw.length; i++)res[raw[i]] = raw[i];
        return res;
    }
    return raw;
}
function mergeAsArray(to, from) {
    return to ? [
        ...new Set([].concat(to, from))
    ] : from;
}
function mergeObjectOptions(to, from) {
    return to ? _shared.extend(_shared.extend(Object.create(null), to), from) : from;
}
function mergeWatchOptions(to, from) {
    if (!to) return from;
    if (!from) return to;
    const merged = _shared.extend(Object.create(null), to);
    for(const key in from)merged[key] = mergeAsArray(to[key], from[key]);
    return merged;
}
function initProps(instance, rawProps, isStateful, isSSR = false) {
    const props = {
    };
    const attrs = {
    };
    _shared.def(attrs, InternalObjectKey, 1);
    instance.propsDefaults = Object.create(null);
    setFullProps(instance, rawProps, props, attrs);
    // ensure all declared prop keys are present
    for(const key in instance.propsOptions[0])if (!(key in props)) props[key] = undefined;
    validateProps(rawProps || {
    }, props, instance);
    if (isStateful) // stateful
    instance.props = isSSR ? props : _reactivity.shallowReactive(props);
    else if (!instance.type.props) // functional w/ optional props, props === attrs
    instance.props = attrs;
    else // functional w/ declared props
    instance.props = props;
    instance.attrs = attrs;
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
    const { props , attrs , vnode: { patchFlag  }  } = instance;
    const rawCurrentProps = _reactivity.toRaw(props);
    const [options] = instance.propsOptions;
    let hasAttrsChanged = false;
    if (// always force full diff in dev
    // - #1942 if hmr is enabled with sfc component
    // - vite#872 non-sfc component used by sfc component
    !(instance.type.__hmrId || instance.parent && instance.parent.type.__hmrId) && (optimized || patchFlag > 0) && !(patchFlag & 16 /* FULL_PROPS */ )) {
        if (patchFlag & 8 /* PROPS */ ) {
            // Compiler-generated props & no keys change, just set the updated
            // the props.
            const propsToUpdate = instance.vnode.dynamicProps;
            for(let i = 0; i < propsToUpdate.length; i++){
                let key = propsToUpdate[i];
                // PROPS flag guarantees rawProps to be non-null
                const value = rawProps[key];
                if (options) {
                    // attr / props separation was done on init and will be consistent
                    // in this code path, so just check if attrs have it.
                    if (_shared.hasOwn(attrs, key)) {
                        if (value !== attrs[key]) {
                            attrs[key] = value;
                            hasAttrsChanged = true;
                        }
                    } else {
                        const camelizedKey = _shared.camelize(key);
                        props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance, false);
                    }
                } else if (value !== attrs[key]) {
                    attrs[key] = value;
                    hasAttrsChanged = true;
                }
            }
        }
    } else {
        // full props update.
        if (setFullProps(instance, rawProps, props, attrs)) hasAttrsChanged = true;
        // in case of dynamic props, check if we need to delete keys from
        // the props object
        let kebabKey;
        for(const key in rawCurrentProps)if (!rawProps || !_shared.hasOwn(rawProps, key) && ((kebabKey = _shared.hyphenate(key)) === key || !_shared.hasOwn(rawProps, kebabKey))) {
            if (options) {
                if (rawPrevProps && (rawPrevProps[key] !== undefined || // for kebab-case
                rawPrevProps[kebabKey] !== undefined)) props[key] = resolvePropValue(options, rawCurrentProps, key, undefined, instance, true);
            } else delete props[key];
        }
        // in the case of functional component w/o props declaration, props and
        // attrs point to the same object so it should already have been updated.
        if (attrs !== rawCurrentProps) {
            for(const key in attrs)if (!rawProps || !_shared.hasOwn(rawProps, key)) {
                delete attrs[key];
                hasAttrsChanged = true;
            }
        }
    }
    // trigger updates for $attrs in case it's used in component slots
    if (hasAttrsChanged) _reactivity.trigger(instance, "set" /* SET */ , '$attrs');
    validateProps(rawProps || {
    }, props, instance);
}
function setFullProps(instance, rawProps, props, attrs) {
    const [options, needCastKeys] = instance.propsOptions;
    let hasAttrsChanged = false;
    let rawCastValues;
    if (rawProps) for(let key in rawProps){
        // key, ref are reserved and never passed down
        if (_shared.isReservedProp(key)) continue;
        const value = rawProps[key];
        // prop option names are camelized during normalization, so to support
        // kebab -> camel conversion here we need to camelize the key.
        let camelKey;
        if (options && _shared.hasOwn(options, camelKey = _shared.camelize(key))) {
            if (!needCastKeys || !needCastKeys.includes(camelKey)) props[camelKey] = value;
            else (rawCastValues || (rawCastValues = {
            }))[camelKey] = value;
        } else if (!isEmitListener(instance.emitsOptions, key)) {
            if (value !== attrs[key]) {
                attrs[key] = value;
                hasAttrsChanged = true;
            }
        }
    }
    if (needCastKeys) {
        const rawCurrentProps = _reactivity.toRaw(props);
        const castValues = rawCastValues || _shared.EMPTY_OBJ;
        for(let i = 0; i < needCastKeys.length; i++){
            const key = needCastKeys[i];
            props[key] = resolvePropValue(options, rawCurrentProps, key, castValues[key], instance, !_shared.hasOwn(castValues, key));
        }
    }
    return hasAttrsChanged;
}
function resolvePropValue(options, props, key, value, instance, isAbsent) {
    const opt = options[key];
    if (opt != null) {
        const hasDefault = _shared.hasOwn(opt, 'default');
        // default values
        if (hasDefault && value === undefined) {
            const defaultValue = opt.default;
            if (opt.type !== Function && _shared.isFunction(defaultValue)) {
                const { propsDefaults  } = instance;
                if (key in propsDefaults) value = propsDefaults[key];
                else {
                    setCurrentInstance(instance);
                    value = propsDefaults[key] = defaultValue.call(null, props);
                    unsetCurrentInstance();
                }
            } else value = defaultValue;
        }
        // boolean casting
        if (opt[0 /* shouldCast */ ]) {
            if (isAbsent && !hasDefault) value = false;
            else if (opt[1 /* shouldCastTrue */ ] && (value === '' || value === _shared.hyphenate(key))) value = true;
        }
    }
    return value;
}
function normalizePropsOptions(comp, appContext, asMixin = false) {
    const cache = appContext.propsCache;
    const cached = cache.get(comp);
    if (cached) return cached;
    const raw2 = comp.props;
    const normalized = {
    };
    const needCastKeys = [];
    // apply mixin/extends props
    let hasExtends = false;
    if (__VUE_OPTIONS_API__ && !_shared.isFunction(comp)) {
        const extendProps = (raw)=>{
            hasExtends = true;
            const [props, keys] = normalizePropsOptions(raw, appContext, true);
            _shared.extend(normalized, props);
            if (keys) needCastKeys.push(...keys);
        };
        if (!asMixin && appContext.mixins.length) appContext.mixins.forEach(extendProps);
        if (comp.extends) extendProps(comp.extends);
        if (comp.mixins) comp.mixins.forEach(extendProps);
    }
    if (!raw2 && !hasExtends) {
        cache.set(comp, _shared.EMPTY_ARR);
        return _shared.EMPTY_ARR;
    }
    if (_shared.isArray(raw2)) for(let i = 0; i < raw2.length; i++){
        if (!_shared.isString(raw2[i])) warn(`props must be strings when using array syntax.`, raw2[i]);
        const normalizedKey = _shared.camelize(raw2[i]);
        if (validatePropName(normalizedKey)) normalized[normalizedKey] = _shared.EMPTY_OBJ;
    }
    else if (raw2) {
        if (!_shared.isObject(raw2)) warn(`invalid props options`, raw2);
        for(const key in raw2){
            const normalizedKey = _shared.camelize(key);
            if (validatePropName(normalizedKey)) {
                const opt = raw2[key];
                const prop = normalized[normalizedKey] = _shared.isArray(opt) || _shared.isFunction(opt) ? {
                    type: opt
                } : opt;
                if (prop) {
                    const booleanIndex = getTypeIndex(Boolean, prop.type);
                    const stringIndex = getTypeIndex(String, prop.type);
                    prop[0 /* shouldCast */ ] = booleanIndex > -1;
                    prop[1 /* shouldCastTrue */ ] = stringIndex < 0 || booleanIndex < stringIndex;
                    // if the prop needs boolean casting or default value
                    if (booleanIndex > -1 || _shared.hasOwn(prop, 'default')) needCastKeys.push(normalizedKey);
                }
            }
        }
    }
    const res = [
        normalized,
        needCastKeys
    ];
    cache.set(comp, res);
    return res;
}
function validatePropName(key) {
    if (key[0] !== '$') return true;
    else warn(`Invalid prop name: "${key}" is a reserved property.`);
    return false;
}
// use function string name to check type constructors
// so that it works across vms / iframes.
function getType(ctor) {
    const match = ctor && ctor.toString().match(/^\s*function (\w+)/);
    return match ? match[1] : ctor === null ? 'null' : '';
}
function isSameType(a, b) {
    return getType(a) === getType(b);
}
function getTypeIndex(type, expectedTypes) {
    if (_shared.isArray(expectedTypes)) return expectedTypes.findIndex((t)=>isSameType(t, type)
    );
    else if (_shared.isFunction(expectedTypes)) return isSameType(expectedTypes, type) ? 0 : -1;
    return -1;
}
/**
 * dev only
 */ function validateProps(rawProps, props, instance) {
    const resolvedValues = _reactivity.toRaw(props);
    const options = instance.propsOptions[0];
    for(const key in options){
        let opt = options[key];
        if (opt == null) continue;
        validateProp(key, resolvedValues[key], opt, !_shared.hasOwn(rawProps, key) && !_shared.hasOwn(rawProps, _shared.hyphenate(key)));
    }
}
/**
 * dev only
 */ function validateProp(name, value, prop, isAbsent) {
    const { type , required , validator  } = prop;
    // required!
    if (required && isAbsent) {
        warn('Missing required prop: "' + name + '"');
        return;
    }
    // missing but optional
    if (value == null && !prop.required) return;
    // type check
    if (type != null && type !== true) {
        let isValid = false;
        const types = _shared.isArray(type) ? type : [
            type
        ];
        const expectedTypes = [];
        // value is valid as long as one of the specified types match
        for(let i = 0; i < types.length && !isValid; i++){
            const { valid , expectedType  } = assertType(value, types[i]);
            expectedTypes.push(expectedType || '');
            isValid = valid;
        }
        if (!isValid) {
            warn(getInvalidTypeMessage(name, value, expectedTypes));
            return;
        }
    }
    // custom validator
    if (validator && !validator(value)) warn('Invalid prop: custom validator check failed for prop "' + name + '".');
}
const isSimpleType = /*#__PURE__*/ _shared.makeMap('String,Number,Boolean,Function,Symbol,BigInt');
/**
 * dev only
 */ function assertType(value, type) {
    let valid;
    const expectedType = getType(type);
    if (isSimpleType(expectedType)) {
        const t = typeof value;
        valid = t === expectedType.toLowerCase();
        // for primitive wrapper objects
        if (!valid && t === 'object') valid = value instanceof type;
    } else if (expectedType === 'Object') valid = _shared.isObject(value);
    else if (expectedType === 'Array') valid = _shared.isArray(value);
    else if (expectedType === 'null') valid = value === null;
    else valid = value instanceof type;
    return {
        valid,
        expectedType
    };
}
/**
 * dev only
 */ function getInvalidTypeMessage(name, value, expectedTypes) {
    let message = `Invalid prop: type check failed for prop "${name}".` + ` Expected ${expectedTypes.map(_shared.capitalize).join(' | ')}`;
    const expectedType = expectedTypes[0];
    const receivedType = _shared.toRawType(value);
    const expectedValue = styleValue(value, expectedType);
    const receivedValue = styleValue(value, receivedType);
    // check if we need to specify expected value
    if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) message += ` with value ${expectedValue}`;
    message += `, got ${receivedType} `;
    // check if we need to specify received value
    if (isExplicable(receivedType)) message += `with value ${receivedValue}.`;
    return message;
}
/**
 * dev only
 */ function styleValue(value, type) {
    if (type === 'String') return `"${value}"`;
    else if (type === 'Number') return `${Number(value)}`;
    else return `${value}`;
}
/**
 * dev only
 */ function isExplicable(type) {
    const explicitTypes = [
        'string',
        'number',
        'boolean'
    ];
    return explicitTypes.some((elem)=>type.toLowerCase() === elem
    );
}
/**
 * dev only
 */ function isBoolean(...args) {
    return args.some((elem)=>elem.toLowerCase() === 'boolean'
    );
}
const isInternalKey = (key)=>key[0] === '_' || key === '$stable'
;
const normalizeSlotValue = (value)=>_shared.isArray(value) ? value.map(normalizeVNode) : [
        normalizeVNode(value)
    ]
;
const normalizeSlot = (key, rawSlot, ctx)=>{
    const normalized = withCtx((...args)=>{
        if (currentInstance) warn(`Slot "${key}" invoked outside of the render function: ` + `this will not track dependencies used in the slot. ` + `Invoke the slot function inside the render function instead.`);
        return normalizeSlotValue(rawSlot(...args));
    }, ctx);
    normalized._c = false;
    return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance)=>{
    const ctx = rawSlots._ctx;
    for(const key in rawSlots){
        if (isInternalKey(key)) continue;
        const value = rawSlots[key];
        if (_shared.isFunction(value)) slots[key] = normalizeSlot(key, value, ctx);
        else if (value != null) {
            warn(`Non-function value encountered for slot "${key}". ` + `Prefer function slots for better performance.`);
            const normalized = normalizeSlotValue(value);
            slots[key] = ()=>normalized
            ;
        }
    }
};
const normalizeVNodeSlots = (instance, children)=>{
    if (!isKeepAlive(instance.vnode) && true) warn(`Non-function value encountered for default slot. ` + `Prefer function slots for better performance.`);
    const normalized = normalizeSlotValue(children);
    instance.slots.default = ()=>normalized
    ;
};
const initSlots = (instance, children)=>{
    if (instance.vnode.shapeFlag & 32 /* SLOTS_CHILDREN */ ) {
        const type = children._;
        if (type) {
            // users can get the shallow readonly version of the slots object through `this.$slots`,
            // we should avoid the proxy object polluting the slots of the internal instance
            instance.slots = _reactivity.toRaw(children);
            // make compiler marker non-enumerable
            _shared.def(children, '_', type);
        } else normalizeObjectSlots(children, instance.slots = {
        });
    } else {
        instance.slots = {
        };
        if (children) normalizeVNodeSlots(instance, children);
    }
    _shared.def(instance.slots, InternalObjectKey, 1);
};
const updateSlots = (instance, children, optimized)=>{
    const { vnode , slots  } = instance;
    let needDeletionCheck = true;
    let deletionComparisonTarget = _shared.EMPTY_OBJ;
    if (vnode.shapeFlag & 32 /* SLOTS_CHILDREN */ ) {
        const type = children._;
        if (type) {
            // compiled slots.
            if (isHmrUpdating) // Parent was HMR updated so slot content may have changed.
            // force update slots and mark instance for hmr as well
            _shared.extend(slots, children);
            else if (optimized && type === 1 /* STABLE */ ) // compiled AND stable.
            // no need to update, and skip stale slots removal.
            needDeletionCheck = false;
            else {
                // compiled but dynamic (v-if/v-for on slots) - update slots, but skip
                // normalization.
                _shared.extend(slots, children);
                // #2893
                // when rendering the optimized slots by manually written render function,
                // we need to delete the `slots._` flag if necessary to make subsequent updates reliable,
                // i.e. let the `renderSlot` create the bailed Fragment
                if (!optimized && type === 1 /* STABLE */ ) delete slots._;
            }
        } else {
            needDeletionCheck = !children.$stable;
            normalizeObjectSlots(children, slots);
        }
        deletionComparisonTarget = children;
    } else if (children) {
        // non slot object children (direct value) passed to a component
        normalizeVNodeSlots(instance, children);
        deletionComparisonTarget = {
            default: 1
        };
    }
    // delete stale slots
    if (needDeletionCheck) {
        for(const key in slots)if (!isInternalKey(key) && !(key in deletionComparisonTarget)) delete slots[key];
    }
};
/**
Runtime helper for applying directives to a vnode. Example usage:

const comp = resolveComponent('comp')
const foo = resolveDirective('foo')
const bar = resolveDirective('bar')

return withDirectives(h(comp), [
  [foo, this.x],
  [bar, this.y]
])
*/ const isBuiltInDirective = /*#__PURE__*/ _shared.makeMap('bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo');
function validateDirectiveName(name) {
    if (isBuiltInDirective(name)) warn('Do not use built-in directive ids as custom directive id: ' + name);
}
/**
 * Adds directives to a VNode.
 */ function withDirectives(vnode, directives) {
    const internalInstance = currentRenderingInstance;
    if (internalInstance === null) {
        warn(`withDirectives can only be used inside render functions.`);
        return vnode;
    }
    const instance = internalInstance.proxy;
    const bindings = vnode.dirs || (vnode.dirs = []);
    for(let i = 0; i < directives.length; i++){
        let [dir, value, arg, modifiers = _shared.EMPTY_OBJ] = directives[i];
        if (_shared.isFunction(dir)) dir = {
            mounted: dir,
            updated: dir
        };
        if (dir.deep) traverse(value);
        bindings.push({
            dir,
            instance,
            value,
            oldValue: void 0,
            arg,
            modifiers
        });
    }
    return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name) {
    const bindings = vnode.dirs;
    const oldBindings = prevVNode && prevVNode.dirs;
    for(let i = 0; i < bindings.length; i++){
        const binding = bindings[i];
        if (oldBindings) binding.oldValue = oldBindings[i].value;
        let hook = binding.dir[name];
        if (hook) {
            // disable tracking inside all lifecycle hooks
            // since they can potentially be called inside effects.
            _reactivity.pauseTracking();
            callWithAsyncErrorHandling(hook, instance, 8 /* DIRECTIVE_HOOK */ , [
                vnode.el,
                binding,
                vnode,
                prevVNode
            ]);
            _reactivity.resetTracking();
        }
    }
}
function createAppContext() {
    return {
        app: null,
        config: {
            isNativeTag: _shared.NO,
            performance: false,
            globalProperties: {
            },
            optionMergeStrategies: {
            },
            errorHandler: undefined,
            warnHandler: undefined,
            compilerOptions: {
            }
        },
        mixins: [],
        components: {
        },
        directives: {
        },
        provides: Object.create(null),
        optionsCache: new WeakMap(),
        propsCache: new WeakMap(),
        emitsCache: new WeakMap()
    };
}
let uid = 0;
function createAppAPI(render, hydrate) {
    return function createApp(rootComponent, rootProps = null) {
        if (rootProps != null && !_shared.isObject(rootProps)) {
            warn(`root props passed to app.mount() must be an object.`);
            rootProps = null;
        }
        const context = createAppContext();
        const installedPlugins = new Set();
        let isMounted = false;
        const app = context.app = {
            _uid: uid++,
            _component: rootComponent,
            _props: rootProps,
            _container: null,
            _context: context,
            _instance: null,
            version: version1,
            get config () {
                return context.config;
            },
            set config (v){
                warn(`app.config cannot be replaced. Modify individual options instead.`);
            },
            use (plugin, ...options) {
                if (installedPlugins.has(plugin)) warn(`Plugin has already been applied to target app.`);
                else if (plugin && _shared.isFunction(plugin.install)) {
                    installedPlugins.add(plugin);
                    plugin.install(app, ...options);
                } else if (_shared.isFunction(plugin)) {
                    installedPlugins.add(plugin);
                    plugin(app, ...options);
                } else warn(`A plugin must either be a function or an object with an "install" ` + `function.`);
                return app;
            },
            mixin (mixin) {
                if (__VUE_OPTIONS_API__) {
                    if (!context.mixins.includes(mixin)) context.mixins.push(mixin);
                    else warn('Mixin has already been applied to target app' + (mixin.name ? `: ${mixin.name}` : ''));
                } else warn('Mixins are only available in builds supporting Options API');
                return app;
            },
            component (name, component) {
                validateComponentName(name, context.config);
                if (!component) return context.components[name];
                if (context.components[name]) warn(`Component "${name}" has already been registered in target app.`);
                context.components[name] = component;
                return app;
            },
            directive (name, directive) {
                validateDirectiveName(name);
                if (!directive) return context.directives[name];
                if (context.directives[name]) warn(`Directive "${name}" has already been registered in target app.`);
                context.directives[name] = directive;
                return app;
            },
            mount (rootContainer, isHydrate, isSVG) {
                if (!isMounted) {
                    const vnode = createVNode(rootComponent, rootProps);
                    // store app context on the root VNode.
                    // this will be set on the root instance on initial mount.
                    vnode.appContext = context;
                    context.reload = ()=>{
                        render(cloneVNode(vnode), rootContainer, isSVG);
                    };
                    if (isHydrate && hydrate) hydrate(vnode, rootContainer);
                    else render(vnode, rootContainer, isSVG);
                    isMounted = true;
                    app._container = rootContainer;
                    rootContainer.__vue_app__ = app;
                    app._instance = vnode.component;
                    devtoolsInitApp(app, version1);
                    return getExposeProxy(vnode.component) || vnode.component.proxy;
                } else warn(`App has already been mounted.\n` + `If you want to remount the same app, move your app creation logic ` + `into a factory function and create fresh app instances for each ` + `mount - e.g. \`const createMyApp = () => createApp(App)\``);
            },
            unmount () {
                if (isMounted) {
                    render(null, app._container);
                    app._instance = null;
                    devtoolsUnmountApp(app);
                    delete app._container.__vue_app__;
                } else warn(`Cannot unmount an app that is not mounted.`);
            },
            provide (key, value) {
                if (key in context.provides) warn(`App already provides property with key "${String(key)}". ` + `It will be overwritten with the new value.`);
                // TypeScript doesn't allow symbols as index type
                // https://github.com/Microsoft/TypeScript/issues/24587
                context.provides[key] = value;
                return app;
            }
        };
        return app;
    };
}
let hasMismatch = false;
const isSVGContainer = (container)=>/svg/.test(container.namespaceURI) && container.tagName !== 'foreignObject'
;
const isComment = (node)=>node.nodeType === 8 /* COMMENT */ 
;
// Note: hydration is DOM-specific
// But we have to place it in core due to tight coupling with core - splitting
// it out creates a ton of unnecessary complexity.
// Hydration also depends on some renderer internal logic which needs to be
// passed in via arguments.
function createHydrationFunctions(rendererInternals) {
    const { mt: mountComponent , p: patch , o: { patchProp , nextSibling , parentNode , remove , insert , createComment  }  } = rendererInternals;
    const hydrate = (vnode, container)=>{
        if (!container.hasChildNodes()) {
            warn(`Attempting to hydrate existing markup but container is empty. ` + `Performing full mount instead.`);
            patch(null, vnode, container);
            flushPostFlushCbs();
            return;
        }
        hasMismatch = false;
        hydrateNode(container.firstChild, vnode, null, null, null);
        flushPostFlushCbs();
        if (hasMismatch && true) // this error should show up in production
        console.error(`Hydration completed but contains mismatches.`);
    };
    const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false)=>{
        const isFragmentStart = isComment(node) && node.data === '[';
        const onMismatch = ()=>handleMismatch(node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragmentStart)
        ;
        const { type , ref , shapeFlag  } = vnode;
        const domType = node.nodeType;
        vnode.el = node;
        let nextNode = null;
        switch(type){
            case Text:
                if (domType !== 3 /* TEXT */ ) nextNode = onMismatch();
                else {
                    if (node.data !== vnode.children) {
                        hasMismatch = true;
                        warn(`Hydration text mismatch:` + `\n- Client: ${JSON.stringify(node.data)}` + `\n- Server: ${JSON.stringify(vnode.children)}`);
                        node.data = vnode.children;
                    }
                    nextNode = nextSibling(node);
                }
                break;
            case Comment:
                if (domType !== 8 /* COMMENT */  || isFragmentStart) nextNode = onMismatch();
                else nextNode = nextSibling(node);
                break;
            case Static:
                if (domType !== 1 /* ELEMENT */ ) nextNode = onMismatch();
                else {
                    // determine anchor, adopt content
                    nextNode = node;
                    // if the static vnode has its content stripped during build,
                    // adopt it from the server-rendered HTML.
                    const needToAdoptContent = !vnode.children.length;
                    for(let i = 0; i < vnode.staticCount; i++){
                        if (needToAdoptContent) vnode.children += nextNode.outerHTML;
                        if (i === vnode.staticCount - 1) vnode.anchor = nextNode;
                        nextNode = nextSibling(nextNode);
                    }
                    return nextNode;
                }
                break;
            case Fragment:
                if (!isFragmentStart) nextNode = onMismatch();
                else nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
                break;
            default:
                if (shapeFlag & 1 /* ELEMENT */ ) {
                    if (domType !== 1 /* ELEMENT */  || vnode.type.toLowerCase() !== node.tagName.toLowerCase()) nextNode = onMismatch();
                    else nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
                } else if (shapeFlag & 6 /* COMPONENT */ ) {
                    // when setting up the render effect, if the initial vnode already
                    // has .el set, the component will perform hydration instead of mount
                    // on its sub-tree.
                    vnode.slotScopeIds = slotScopeIds;
                    const container = parentNode(node);
                    mountComponent(vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), optimized);
                    // component may be async, so in the case of fragments we cannot rely
                    // on component's rendered output to determine the end of the fragment
                    // instead, we do a lookahead to find the end anchor node.
                    nextNode = isFragmentStart ? locateClosingAsyncAnchor(node) : nextSibling(node);
                    // #3787
                    // if component is async, it may get moved / unmounted before its
                    // inner component is loaded, so we need to give it a placeholder
                    // vnode that matches its adopted DOM.
                    if (isAsyncWrapper(vnode)) {
                        let subTree;
                        if (isFragmentStart) {
                            subTree = createVNode(Fragment);
                            subTree.anchor = nextNode ? nextNode.previousSibling : container.lastChild;
                        } else subTree = node.nodeType === 3 ? createTextVNode('') : createVNode('div');
                        subTree.el = node;
                        vnode.component.subTree = subTree;
                    }
                } else if (shapeFlag & 64 /* TELEPORT */ ) {
                    if (domType !== 8 /* COMMENT */ ) nextNode = onMismatch();
                    else nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, rendererInternals, hydrateChildren);
                } else if (shapeFlag & 128 /* SUSPENSE */ ) nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, isSVGContainer(parentNode(node)), slotScopeIds, optimized, rendererInternals, hydrateNode);
                else warn('Invalid HostVNode type:', type, `(${typeof type})`);
        }
        if (ref != null) setRef(ref, null, parentSuspense, vnode);
        return nextNode;
    };
    const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized)=>{
        optimized = optimized || !!vnode.dynamicChildren;
        const { type , props , patchFlag , shapeFlag , dirs  } = vnode;
        // #4006 for form elements with non-string v-model value bindings
        // e.g. <option :value="obj">, <input type="checkbox" :true-value="1">
        const forcePatchValue = type === 'input' && dirs || type === 'option';
        // skip props & children if this is hoisted static nodes
        if (forcePatchValue || patchFlag !== -1 /* HOISTED */ ) {
            if (dirs) invokeDirectiveHook(vnode, null, parentComponent, 'created');
            // props
            if (props) {
                if (forcePatchValue || !optimized || patchFlag & 48 /* HYDRATE_EVENTS */ ) {
                    for(const key in props)if (forcePatchValue && key.endsWith('value') || _shared.isOn(key) && !_shared.isReservedProp(key)) patchProp(el, key, null, props[key], false, undefined, parentComponent);
                } else if (props.onClick) // Fast path for click listeners (which is most often) to avoid
                // iterating through props.
                patchProp(el, 'onClick', null, props.onClick, false, undefined, parentComponent);
            }
            // vnode / directive hooks
            let vnodeHooks;
            if (vnodeHooks = props && props.onVnodeBeforeMount) invokeVNodeHook(vnodeHooks, parentComponent, vnode);
            if (dirs) invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');
            if ((vnodeHooks = props && props.onVnodeMounted) || dirs) queueEffectWithSuspense(()=>{
                vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);
                dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');
            }, parentSuspense);
            // children
            if (shapeFlag & 16 /* ARRAY_CHILDREN */  && // skip if element has innerHTML / textContent
            !(props && (props.innerHTML || props.textContent))) {
                let next = hydrateChildren(el.firstChild, vnode, el, parentComponent, parentSuspense, slotScopeIds, optimized);
                let hasWarned = false;
                while(next){
                    hasMismatch = true;
                    if (!hasWarned) {
                        warn(`Hydration children mismatch in <${vnode.type}>: ` + `server rendered element contains more child nodes than client vdom.`);
                        hasWarned = true;
                    }
                    // The SSRed DOM contains more nodes than it should. Remove them.
                    const cur = next;
                    next = next.nextSibling;
                    remove(cur);
                }
            } else if (shapeFlag & 8 /* TEXT_CHILDREN */ ) {
                if (el.textContent !== vnode.children) {
                    hasMismatch = true;
                    warn(`Hydration text content mismatch in <${vnode.type}>:\n` + `- Client: ${el.textContent}\n` + `- Server: ${vnode.children}`);
                    el.textContent = vnode.children;
                }
            }
        }
        return el.nextSibling;
    };
    const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized)=>{
        optimized = optimized || !!parentVNode.dynamicChildren;
        const children = parentVNode.children;
        const l = children.length;
        let hasWarned = false;
        for(let i = 0; i < l; i++){
            const vnode = optimized ? children[i] : children[i] = normalizeVNode(children[i]);
            if (node) node = hydrateNode(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
            else if (vnode.type === Text && !vnode.children) continue;
            else {
                hasMismatch = true;
                if (!hasWarned) {
                    warn(`Hydration children mismatch in <${container.tagName.toLowerCase()}>: ` + `server rendered element contains fewer child nodes than client vdom.`);
                    hasWarned = true;
                }
                // the SSRed DOM didn't contain enough nodes. Mount the missing ones.
                patch(null, vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
            }
        }
        return node;
    };
    const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized)=>{
        const { slotScopeIds: fragmentSlotScopeIds  } = vnode;
        if (fragmentSlotScopeIds) slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
        const container = parentNode(node);
        const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, slotScopeIds, optimized);
        if (next && isComment(next) && next.data === ']') return nextSibling(vnode.anchor = next);
        else {
            // fragment didn't hydrate successfully, since we didn't get a end anchor
            // back. This should have led to node/children mismatch warnings.
            hasMismatch = true;
            // since the anchor is missing, we need to create one and insert it
            insert(vnode.anchor = createComment(`]`), container, next);
            return next;
        }
    };
    const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment)=>{
        hasMismatch = true;
        warn(`Hydration node mismatch:\n- Client vnode:`, vnode.type, `\n- Server rendered DOM:`, node, node.nodeType === 3 /* TEXT */  ? `(text)` : isComment(node) && node.data === '[' ? `(start of fragment)` : ``);
        vnode.el = null;
        if (isFragment) {
            // remove excessive fragment nodes
            const end = locateClosingAsyncAnchor(node);
            while(true){
                const next = nextSibling(node);
                if (next && next !== end) remove(next);
                else break;
            }
        }
        const next = nextSibling(node);
        const container = parentNode(node);
        remove(node);
        patch(null, vnode, container, next, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
        return next;
    };
    const locateClosingAsyncAnchor = (node)=>{
        let match = 0;
        while(node){
            node = nextSibling(node);
            if (node && isComment(node)) {
                if (node.data === '[') match++;
                if (node.data === ']') {
                    if (match === 0) return nextSibling(node);
                    else match--;
                }
            }
        }
        return node;
    };
    return [
        hydrate,
        hydrateNode
    ];
}
let supported;
let perf;
function startMeasure(instance, type) {
    if (instance.appContext.config.performance && isSupported()) perf.mark(`vue-${type}-${instance.uid}`);
    devtoolsPerfStart(instance, type, supported ? perf.now() : Date.now());
}
function endMeasure(instance, type) {
    if (instance.appContext.config.performance && isSupported()) {
        const startTag = `vue-${type}-${instance.uid}`;
        const endTag = startTag + `:end`;
        perf.mark(endTag);
        perf.measure(`<${formatComponentName(instance, instance.type)}> ${type}`, startTag, endTag);
        perf.clearMarks(startTag);
        perf.clearMarks(endTag);
    }
    devtoolsPerfEnd(instance, type, supported ? perf.now() : Date.now());
}
function isSupported() {
    if (supported !== undefined) return supported;
    /* eslint-disable no-restricted-globals */ if (typeof window !== 'undefined' && window.performance) {
        supported = true;
        perf = window.performance;
    } else supported = false;
    /* eslint-enable no-restricted-globals */ return supported;
}
/**
 * This is only called in esm-bundler builds.
 * It is called when a renderer is created, in `baseCreateRenderer` so that
 * importing runtime-core is side-effects free.
 *
 * istanbul-ignore-next
 */ function initFeatureFlags() {
    const needWarn = [];
    if (typeof __VUE_OPTIONS_API__ !== 'boolean') {
        needWarn.push(`__VUE_OPTIONS_API__`);
        _shared.getGlobalThis().__VUE_OPTIONS_API__ = true;
    }
    if (typeof __VUE_PROD_DEVTOOLS__ !== 'boolean') {
        needWarn.push(`__VUE_PROD_DEVTOOLS__`);
        _shared.getGlobalThis().__VUE_PROD_DEVTOOLS__ = false;
    }
    if (needWarn.length) {
        const multi = needWarn.length > 1;
        console.warn(`Feature flag${multi ? `s` : ``} ${needWarn.join(', ')} ${multi ? `are` : `is`} not explicitly defined. You are running the esm-bundler build of Vue, ` + `which expects these compile-time feature flags to be globally injected ` + `via the bundler config in order to get better tree-shaking in the ` + `production bundle.\n\n` + `For more details, see http://link.vuejs.org/feature-flags.`);
    }
}
const queuePostRenderEffect = queueEffectWithSuspense;
/**
 * The createRenderer function accepts two generic arguments:
 * HostNode and HostElement, corresponding to Node and Element types in the
 * host environment. For example, for runtime-dom, HostNode would be the DOM
 * `Node` interface and HostElement would be the DOM `Element` interface.
 *
 * Custom renderers can pass in the platform specific types like this:
 *
 * ``` js
 * const { render, createApp } = createRenderer<Node, Element>({
 *   patchProp,
 *   ...nodeOps
 * })
 * ```
 */ function createRenderer(options) {
    return baseCreateRenderer(options);
}
// Separate API for creating hydration-enabled renderer.
// Hydration logic is only used when calling this function, making it
// tree-shakable.
function createHydrationRenderer(options) {
    return baseCreateRenderer(options, createHydrationFunctions);
}
// implementation
function baseCreateRenderer(options, createHydrationFns) {
    initFeatureFlags();
    const target = _shared.getGlobalThis();
    target.__VUE__ = true;
    setDevtoolsHook(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);
    const { insert: hostInsert , remove: hostRemove , patchProp: hostPatchProp , createElement: hostCreateElement , createText: hostCreateText , createComment: hostCreateComment , setText: hostSetText , setElementText: hostSetElementText , parentNode: hostParentNode , nextSibling: hostNextSibling , setScopeId: hostSetScopeId = _shared.NOOP , cloneNode: hostCloneNode , insertStaticContent: hostInsertStaticContent  } = options;
    // Note: functions inside this closure should use `const xxx = () => {}`
    // style in order to prevent being inlined by minifiers.
    const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = isHmrUpdating ? false : !!n2.dynamicChildren)=>{
        if (n1 === n2) return;
        // patching & not same type, unmount old tree
        if (n1 && !isSameVNodeType(n1, n2)) {
            anchor = getNextHostNode(n1);
            unmount(n1, parentComponent, parentSuspense, true);
            n1 = null;
        }
        if (n2.patchFlag === -2 /* BAIL */ ) {
            optimized = false;
            n2.dynamicChildren = null;
        }
        const { type , ref , shapeFlag  } = n2;
        switch(type){
            case Text:
                processText(n1, n2, container, anchor);
                break;
            case Comment:
                processCommentNode(n1, n2, container, anchor);
                break;
            case Static:
                if (n1 == null) mountStaticNode(n2, container, anchor, isSVG);
                else patchStaticNode(n1, n2, container, isSVG);
                break;
            case Fragment:
                processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                break;
            default:
                if (shapeFlag & 1 /* ELEMENT */ ) processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                else if (shapeFlag & 6 /* COMPONENT */ ) processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                else if (shapeFlag & 64 /* TELEPORT */ ) type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
                else if (shapeFlag & 128 /* SUSPENSE */ ) type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
                else warn('Invalid VNode type:', type, `(${typeof type})`);
        }
        // set ref
        if (ref != null && parentComponent) setRef(ref, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    };
    const processText = (n1, n2, container, anchor)=>{
        if (n1 == null) hostInsert(n2.el = hostCreateText(n2.children), container, anchor);
        else {
            const el = n2.el = n1.el;
            if (n2.children !== n1.children) hostSetText(el, n2.children);
        }
    };
    const processCommentNode = (n1, n2, container, anchor)=>{
        if (n1 == null) hostInsert(n2.el = hostCreateComment(n2.children || ''), container, anchor);
        else // there's no support for dynamic comments
        n2.el = n1.el;
    };
    const mountStaticNode = (n2, container, anchor, isSVG)=>{
        [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
    };
    /**
     * Dev / HMR only
     */ const patchStaticNode = (n1, n2, container, isSVG)=>{
        // static nodes are only patched during dev for HMR
        if (n2.children !== n1.children) {
            const anchor = hostNextSibling(n1.anchor);
            // remove existing
            removeStaticNode(n1);
            [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
        } else {
            n2.el = n1.el;
            n2.anchor = n1.anchor;
        }
    };
    const moveStaticNode = ({ el , anchor  }, container, nextSibling)=>{
        let next;
        while(el && el !== anchor){
            next = hostNextSibling(el);
            hostInsert(el, container, nextSibling);
            el = next;
        }
        hostInsert(anchor, container, nextSibling);
    };
    const removeStaticNode = ({ el , anchor  })=>{
        let next;
        while(el && el !== anchor){
            next = hostNextSibling(el);
            hostRemove(el);
            el = next;
        }
        hostRemove(anchor);
    };
    const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        isSVG = isSVG || n2.type === 'svg';
        if (n1 == null) mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        else patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    };
    const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        let el;
        let vnodeHook;
        const { type , props , shapeFlag , transition , patchFlag , dirs  } = vnode;
        el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);
        // mount children first, since some props may rely on child content
        // being already rendered, e.g. `<select value>`
        if (shapeFlag & 8 /* TEXT_CHILDREN */ ) hostSetElementText(el, vnode.children);
        else if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== 'foreignObject', slotScopeIds, optimized);
        if (dirs) invokeDirectiveHook(vnode, null, parentComponent, 'created');
        // props
        if (props) {
            for(const key in props)if (key !== 'value' && !_shared.isReservedProp(key)) hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
            /**
                 * Special case for setting value on DOM elements:
                 * - it can be order-sensitive (e.g. should be set *after* min/max, #2325, #4024)
                 * - it needs to be forced (#1471)
                 * #2353 proposes adding another renderer option to configure this, but
                 * the properties affects are so finite it is worth special casing it
                 * here to reduce the complexity. (Special casing it also should not
                 * affect non-DOM renderers)
                 */ if ('value' in props) hostPatchProp(el, 'value', null, props.value);
            if (vnodeHook = props.onVnodeBeforeMount) invokeVNodeHook(vnodeHook, parentComponent, vnode);
        }
        // scopeId
        setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
        Object.defineProperty(el, '__vnode', {
            value: vnode,
            enumerable: false
        });
        Object.defineProperty(el, '__vueParentComponent', {
            value: parentComponent,
            enumerable: false
        });
        if (dirs) invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');
        // #1583 For inside suspense + suspense not resolved case, enter hook should call when suspense resolved
        // #1689 For inside suspense + suspense resolved case, just call it
        const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
        if (needCallTransitionHooks) transition.beforeEnter(el);
        hostInsert(el, container, anchor);
        if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) queuePostRenderEffect(()=>{
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
            needCallTransitionHooks && transition.enter(el);
            dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');
        }, parentSuspense);
    };
    const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent)=>{
        if (scopeId) hostSetScopeId(el, scopeId);
        if (slotScopeIds) for(let i = 0; i < slotScopeIds.length; i++)hostSetScopeId(el, slotScopeIds[i]);
        if (parentComponent) {
            let subTree = parentComponent.subTree;
            if (subTree.patchFlag > 0 && subTree.patchFlag & 2048 /* DEV_ROOT_FRAGMENT */ ) subTree = filterSingleRoot(subTree.children) || subTree;
            if (vnode === subTree) {
                const parentVNode = parentComponent.vnode;
                setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);
            }
        }
    };
    const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0)=>{
        for(let i = start; i < children.length; i++){
            const child = children[i] = optimized ? cloneIfMounted(children[i]) : normalizeVNode(children[i]);
            patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
    };
    const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        const el = n2.el = n1.el;
        let { patchFlag , dynamicChildren , dirs  } = n2;
        // #1426 take the old vnode's patch flag into account since user may clone a
        // compiler-generated vnode, which de-opts to FULL_PROPS
        patchFlag |= n1.patchFlag & 16 /* FULL_PROPS */ ;
        const oldProps = n1.props || _shared.EMPTY_OBJ;
        const newProps = n2.props || _shared.EMPTY_OBJ;
        let vnodeHook;
        if (vnodeHook = newProps.onVnodeBeforeUpdate) invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        if (dirs) invokeDirectiveHook(n2, n1, parentComponent, 'beforeUpdate');
        if (isHmrUpdating) {
            // HMR updated, force full diff
            patchFlag = 0;
            optimized = false;
            dynamicChildren = null;
        }
        const areChildrenSVG = isSVG && n2.type !== 'foreignObject';
        if (dynamicChildren) {
            patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);
            if (parentComponent && parentComponent.type.__hmrId) traverseStaticChildren(n1, n2);
        } else if (!optimized) // full diff
        patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);
        if (patchFlag > 0) {
            // the presence of a patchFlag means this element's render code was
            // generated by the compiler and can take the fast path.
            // in this path old node and new node are guaranteed to have the same shape
            // (i.e. at the exact same position in the source template)
            if (patchFlag & 16 /* FULL_PROPS */ ) // element props contain dynamic keys, full diff needed
            patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
            else {
                // class
                // this flag is matched when the element has dynamic class bindings.
                if (patchFlag & 2 /* CLASS */ ) {
                    if (oldProps.class !== newProps.class) hostPatchProp(el, 'class', null, newProps.class, isSVG);
                }
                // style
                // this flag is matched when the element has dynamic style bindings
                if (patchFlag & 4 /* STYLE */ ) hostPatchProp(el, 'style', oldProps.style, newProps.style, isSVG);
                // props
                // This flag is matched when the element has dynamic prop/attr bindings
                // other than class and style. The keys of dynamic prop/attrs are saved for
                // faster iteration.
                // Note dynamic keys like :[foo]="bar" will cause this optimization to
                // bail out and go through a full diff because we need to unset the old key
                if (patchFlag & 8 /* PROPS */ ) {
                    // if the flag is present then dynamicProps must be non-null
                    const propsToUpdate = n2.dynamicProps;
                    for(let i = 0; i < propsToUpdate.length; i++){
                        const key = propsToUpdate[i];
                        const prev = oldProps[key];
                        const next = newProps[key];
                        // #1471 force patch value
                        if (next !== prev || key === 'value') hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);
                    }
                }
            }
            // text
            // This flag is matched when the element has only dynamic text children.
            if (patchFlag & 1 /* TEXT */ ) {
                if (n1.children !== n2.children) hostSetElementText(el, n2.children);
            }
        } else if (!optimized && dynamicChildren == null) // unoptimized, full diff
        patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
        if ((vnodeHook = newProps.onVnodeUpdated) || dirs) queuePostRenderEffect(()=>{
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
            dirs && invokeDirectiveHook(n2, n1, parentComponent, 'updated');
        }, parentSuspense);
    };
    // The fast path for blocks.
    const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds)=>{
        for(let i = 0; i < newChildren.length; i++){
            const oldVNode = oldChildren[i];
            const newVNode = newChildren[i];
            // Determine the container (parent element) for the patch.
            const container = // oldVNode may be an errored async setup() component inside Suspense
            // which will not have a mounted element
            oldVNode.el && (oldVNode.type === Fragment || // - In the case of different nodes, there is going to be a replacement
            // which also requires the correct parent container
            !isSameVNodeType(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
            oldVNode.shapeFlag & 70 /* TELEPORT */ ) ? hostParentNode(oldVNode.el) : // just pass the block element here to avoid a DOM parentNode call.
            fallbackContainer;
            patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);
        }
    };
    const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG)=>{
        if (oldProps !== newProps) {
            for(const key in newProps){
                // empty string is not valid prop
                if (_shared.isReservedProp(key)) continue;
                const next = newProps[key];
                const prev = oldProps[key];
                // defer patching value
                if (next !== prev && key !== 'value') hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
            }
            if (oldProps !== _shared.EMPTY_OBJ) {
                for(const key in oldProps)if (!_shared.isReservedProp(key) && !(key in newProps)) hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
            }
            if ('value' in newProps) hostPatchProp(el, 'value', oldProps.value, newProps.value);
        }
    };
    const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText('');
        const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText('');
        let { patchFlag , dynamicChildren , slotScopeIds: fragmentSlotScopeIds  } = n2;
        if (isHmrUpdating) {
            // HMR updated, force full diff
            patchFlag = 0;
            optimized = false;
            dynamicChildren = null;
        }
        // check if this is a slot fragment with :slotted scope ids
        if (fragmentSlotScopeIds) slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
        if (n1 == null) {
            hostInsert(fragmentStartAnchor, container, anchor);
            hostInsert(fragmentEndAnchor, container, anchor);
            // a fragment can only have array children
            // since they are either generated by the compiler, or implicitly created
            // from arrays.
            mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (patchFlag > 0 && patchFlag & 64 /* STABLE_FRAGMENT */  && dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
        // of renderSlot() with no valid children
        n1.dynamicChildren) {
            // a stable fragment (template root or <template v-for>) doesn't need to
            // patch children order, but it may contain dynamicChildren.
            patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);
            if (parentComponent && parentComponent.type.__hmrId) traverseStaticChildren(n1, n2);
            else if (// #2080 if the stable fragment has a key, it's a <template v-for> that may
            //  get moved around. Make sure all root level vnodes inherit el.
            // #2134 or if it's a component root, it may also get moved around
            // as the component is being moved.
            n2.key != null || parentComponent && n2 === parentComponent.subTree) traverseStaticChildren(n1, n2, true);
        } else // keyed / unkeyed, or manual fragments.
        // for keyed & unkeyed, since they are compiler generated from v-for,
        // each child is guaranteed to be a block so the fragment will never
        // have dynamicChildren.
        patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    };
    const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        n2.slotScopeIds = slotScopeIds;
        if (n1 == null) {
            if (n2.shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */ ) parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);
            else mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
        } else updateComponent(n1, n2, optimized);
    };
    const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized)=>{
        const instance = initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense);
        if (instance.type.__hmrId) registerHMR(instance);
        pushWarningContext(initialVNode);
        startMeasure(instance, `mount`);
        // inject renderer internals for keepAlive
        if (isKeepAlive(initialVNode)) instance.ctx.renderer = internals;
        startMeasure(instance, `init`);
        setupComponent(instance);
        endMeasure(instance, `init`);
        // setup() is async. This component relies on async logic to be resolved
        // before proceeding
        if (instance.asyncDep) {
            parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
            // Give it a placeholder if this is not hydration
            // TODO handle self-defined fallback
            if (!initialVNode.el) {
                const placeholder = instance.subTree = createVNode(Comment);
                processCommentNode(null, placeholder, container, anchor);
            }
            return;
        }
        setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);
        popWarningContext();
        endMeasure(instance, `mount`);
    };
    const updateComponent = (n1, n2, optimized)=>{
        const instance = n2.component = n1.component;
        if (shouldUpdateComponent(n1, n2, optimized)) {
            if (instance.asyncDep && !instance.asyncResolved) {
                pushWarningContext(n2);
                updateComponentPreRender(instance, n2, optimized);
                popWarningContext();
                return;
            } else {
                // normal update
                instance.next = n2;
                // in case the child component is also queued, remove it to avoid
                // double updating the same child component in the same flush.
                invalidateJob(instance.update);
                // instance.update is the reactive effect.
                instance.update();
            }
        } else {
            // no update needed. just copy over properties
            n2.component = n1.component;
            n2.el = n1.el;
            instance.vnode = n2;
        }
    };
    const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized)=>{
        const componentUpdateFn = ()=>{
            if (!instance.isMounted) {
                let vnodeHook;
                const { el , props  } = initialVNode;
                const { bm , m , parent  } = instance;
                const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
                effect.allowRecurse = false;
                // beforeMount hook
                if (bm) _shared.invokeArrayFns(bm);
                // onVnodeBeforeMount
                if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) invokeVNodeHook(vnodeHook, parent, initialVNode);
                effect.allowRecurse = true;
                if (el && hydrateNode) {
                    // vnode has adopted host node - perform hydration instead of mount.
                    const hydrateSubTree = ()=>{
                        startMeasure(instance, `render`);
                        instance.subTree = renderComponentRoot(instance);
                        endMeasure(instance, `render`);
                        startMeasure(instance, `hydrate`);
                        hydrateNode(el, instance.subTree, instance, parentSuspense, null);
                        endMeasure(instance, `hydrate`);
                    };
                    if (isAsyncWrapperVNode) initialVNode.type.__asyncLoader().then(// note: we are moving the render call into an async callback,
                    // which means it won't track dependencies - but it's ok because
                    // a server-rendered async wrapper is already in resolved state
                    // and it will never need to change.
                    ()=>!instance.isUnmounted && hydrateSubTree()
                    );
                    else hydrateSubTree();
                } else {
                    startMeasure(instance, `render`);
                    const subTree = instance.subTree = renderComponentRoot(instance);
                    endMeasure(instance, `render`);
                    startMeasure(instance, `patch`);
                    patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);
                    endMeasure(instance, `patch`);
                    initialVNode.el = subTree.el;
                }
                // mounted hook
                if (m) queuePostRenderEffect(m, parentSuspense);
                // onVnodeMounted
                if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
                    const scopedInitialVNode = initialVNode;
                    queuePostRenderEffect(()=>invokeVNodeHook(vnodeHook, parent, scopedInitialVNode)
                    , parentSuspense);
                }
                // activated hook for keep-alive roots.
                // #1742 activated hook must be accessed after first render
                // since the hook may be injected by a child keep-alive
                if (initialVNode.shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */ ) instance.a && queuePostRenderEffect(instance.a, parentSuspense);
                instance.isMounted = true;
                devtoolsComponentAdded(instance);
                // #2458: deference mount-only object parameters to prevent memleaks
                initialVNode = container = anchor = null;
            } else {
                // updateComponent
                // This is triggered by mutation of component's own state (next: null)
                // OR parent calling processComponent (next: VNode)
                let { next , bu , u , parent , vnode  } = instance;
                let originNext = next;
                let vnodeHook;
                pushWarningContext(next || instance.vnode);
                // Disallow component effect recursion during pre-lifecycle hooks.
                effect.allowRecurse = false;
                if (next) {
                    next.el = vnode.el;
                    updateComponentPreRender(instance, next, optimized);
                } else next = vnode;
                // beforeUpdate hook
                if (bu) _shared.invokeArrayFns(bu);
                // onVnodeBeforeUpdate
                if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) invokeVNodeHook(vnodeHook, parent, next, vnode);
                effect.allowRecurse = true;
                startMeasure(instance, `render`);
                const nextTree = renderComponentRoot(instance);
                endMeasure(instance, `render`);
                const prevTree = instance.subTree;
                instance.subTree = nextTree;
                startMeasure(instance, `patch`);
                patch(prevTree, nextTree, // parent may have changed if it's in a teleport
                hostParentNode(prevTree.el), // anchor may have changed if it's in a fragment
                getNextHostNode(prevTree), instance, parentSuspense, isSVG);
                endMeasure(instance, `patch`);
                next.el = nextTree.el;
                if (originNext === null) // self-triggered update. In case of HOC, update parent component
                // vnode el. HOC is indicated by parent instance's subTree pointing
                // to child component's vnode
                updateHOCHostEl(instance, nextTree.el);
                // updated hook
                if (u) queuePostRenderEffect(u, parentSuspense);
                // onVnodeUpdated
                if (vnodeHook = next.props && next.props.onVnodeUpdated) queuePostRenderEffect(()=>invokeVNodeHook(vnodeHook, parent, next, vnode)
                , parentSuspense);
                devtoolsComponentUpdated(instance);
                popWarningContext();
            }
        };
        // create reactive effect for rendering
        const effect = new _reactivity.ReactiveEffect(componentUpdateFn, ()=>queueJob(instance.update)
        , instance.scope // track it in component's effect scope
        );
        const update = instance.update = effect.run.bind(effect);
        update.id = instance.uid;
        // allowRecurse
        // #1801, #2043 component render effects should allow recursive updates
        effect.allowRecurse = update.allowRecurse = true;
        effect.onTrack = instance.rtc ? (e)=>_shared.invokeArrayFns(instance.rtc, e)
         : void 0;
        effect.onTrigger = instance.rtg ? (e)=>_shared.invokeArrayFns(instance.rtg, e)
         : void 0;
        // @ts-ignore (for scheduler)
        update.ownerInstance = instance;
        update();
    };
    const updateComponentPreRender = (instance, nextVNode, optimized)=>{
        nextVNode.component = instance;
        const prevProps = instance.vnode.props;
        instance.vnode = nextVNode;
        instance.next = null;
        updateProps(instance, nextVNode.props, prevProps, optimized);
        updateSlots(instance, nextVNode.children, optimized);
        _reactivity.pauseTracking();
        // props update may have triggered pre-flush watchers.
        // flush them before the render update.
        flushPreFlushCbs(undefined, instance.update);
        _reactivity.resetTracking();
    };
    const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false)=>{
        const c1 = n1 && n1.children;
        const prevShapeFlag = n1 ? n1.shapeFlag : 0;
        const c2 = n2.children;
        const { patchFlag , shapeFlag  } = n2;
        // fast path
        if (patchFlag > 0) {
            if (patchFlag & 128 /* KEYED_FRAGMENT */ ) {
                // this could be either fully-keyed or mixed (some keyed some not)
                // presence of patchFlag means children are guaranteed to be arrays
                patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                return;
            } else if (patchFlag & 256 /* UNKEYED_FRAGMENT */ ) {
                // unkeyed
                patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                return;
            }
        }
        // children has 3 possibilities: text, array or no children.
        if (shapeFlag & 8 /* TEXT_CHILDREN */ ) {
            // text children fast path
            if (prevShapeFlag & 16 /* ARRAY_CHILDREN */ ) unmountChildren(c1, parentComponent, parentSuspense);
            if (c2 !== c1) hostSetElementText(container, c2);
        } else if (prevShapeFlag & 16 /* ARRAY_CHILDREN */ ) {
            // prev children was array
            if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) // two arrays, cannot assume anything, do full diff
            patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            else // no new children, just unmount old
            unmountChildren(c1, parentComponent, parentSuspense, true);
        } else {
            // prev children was text OR null
            // new children is array OR null
            if (prevShapeFlag & 8 /* TEXT_CHILDREN */ ) hostSetElementText(container, '');
            // mount new if array
            if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
    };
    const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        c1 = c1 || _shared.EMPTY_ARR;
        c2 = c2 || _shared.EMPTY_ARR;
        const oldLength = c1.length;
        const newLength = c2.length;
        const commonLength = Math.min(oldLength, newLength);
        let i;
        for(i = 0; i < commonLength; i++){
            const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
            patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
        if (oldLength > newLength) // remove old
        unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);
        else // mount new
        mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);
    };
    // can be all-keyed or mixed
    const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        let i = 0;
        const l2 = c2.length;
        let e1 = c1.length - 1; // prev ending index
        let e2 = l2 - 1; // next ending index
        // 1. sync from start
        // (a b) c
        // (a b) d e
        while(i <= e1 && i <= e2){
            const n1 = c1[i];
            const n2 = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
            if (isSameVNodeType(n1, n2)) patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            else break;
            i++;
        }
        // 2. sync from end
        // a (b c)
        // d e (b c)
        while(i <= e1 && i <= e2){
            const n1 = c1[e1];
            const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
            if (isSameVNodeType(n1, n2)) patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            else break;
            e1--;
            e2--;
        }
        // 3. common sequence + mount
        // (a b)
        // (a b) c
        // i = 2, e1 = 1, e2 = 2
        // (a b)
        // c (a b)
        // i = 0, e1 = -1, e2 = 0
        if (i > e1) {
            if (i <= e2) {
                const nextPos = e2 + 1;
                const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
                while(i <= e2){
                    patch(null, c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                    i++;
                }
            }
        } else if (i > e2) while(i <= e1){
            unmount(c1[i], parentComponent, parentSuspense, true);
            i++;
        }
        else {
            const s1 = i; // prev starting index
            const s2 = i; // next starting index
            // 5.1 build key:index map for newChildren
            const keyToNewIndexMap = new Map();
            for(i = s2; i <= e2; i++){
                const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
                if (nextChild.key != null) {
                    if (keyToNewIndexMap.has(nextChild.key)) warn(`Duplicate keys found during update:`, JSON.stringify(nextChild.key), `Make sure keys are unique.`);
                    keyToNewIndexMap.set(nextChild.key, i);
                }
            }
            // 5.2 loop through old children left to be patched and try to patch
            // matching nodes & remove nodes that are no longer present
            let j;
            let patched = 0;
            const toBePatched = e2 - s2 + 1;
            let moved = false;
            // used to track whether any node has moved
            let maxNewIndexSoFar = 0;
            // works as Map<newIndex, oldIndex>
            // Note that oldIndex is offset by +1
            // and oldIndex = 0 is a special value indicating the new node has
            // no corresponding old node.
            // used for determining longest stable subsequence
            const newIndexToOldIndexMap = new Array(toBePatched);
            for(i = 0; i < toBePatched; i++)newIndexToOldIndexMap[i] = 0;
            for(i = s1; i <= e1; i++){
                const prevChild = c1[i];
                if (patched >= toBePatched) {
                    // all new children have been patched so this can only be a removal
                    unmount(prevChild, parentComponent, parentSuspense, true);
                    continue;
                }
                let newIndex;
                if (prevChild.key != null) newIndex = keyToNewIndexMap.get(prevChild.key);
                else {
                    // key-less node, try to locate a key-less node of the same type
                    for(j = s2; j <= e2; j++)if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {
                        newIndex = j;
                        break;
                    }
                }
                if (newIndex === undefined) unmount(prevChild, parentComponent, parentSuspense, true);
                else {
                    newIndexToOldIndexMap[newIndex - s2] = i + 1;
                    if (newIndex >= maxNewIndexSoFar) maxNewIndexSoFar = newIndex;
                    else moved = true;
                    patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                    patched++;
                }
            }
            // 5.3 move and mount
            // generate longest stable subsequence only when nodes have moved
            const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : _shared.EMPTY_ARR;
            j = increasingNewIndexSequence.length - 1;
            // looping backwards so that we can use last patched node as anchor
            for(i = toBePatched - 1; i >= 0; i--){
                const nextIndex = s2 + i;
                const nextChild = c2[nextIndex];
                const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
                if (newIndexToOldIndexMap[i] === 0) // mount new
                patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                else if (moved) {
                    // move if:
                    // There is no stable subsequence (e.g. a reverse)
                    // OR current node is not among the stable sequence
                    if (j < 0 || i !== increasingNewIndexSequence[j]) move(nextChild, container, anchor, 2 /* REORDER */ );
                    else j--;
                }
            }
        }
    };
    const move = (vnode, container, anchor, moveType, parentSuspense = null)=>{
        const { el , type , transition , children , shapeFlag  } = vnode;
        if (shapeFlag & 6 /* COMPONENT */ ) {
            move(vnode.component.subTree, container, anchor, moveType);
            return;
        }
        if (shapeFlag & 128 /* SUSPENSE */ ) {
            vnode.suspense.move(container, anchor, moveType);
            return;
        }
        if (shapeFlag & 64 /* TELEPORT */ ) {
            type.move(vnode, container, anchor, internals);
            return;
        }
        if (type === Fragment) {
            hostInsert(el, container, anchor);
            for(let i = 0; i < children.length; i++)move(children[i], container, anchor, moveType);
            hostInsert(vnode.anchor, container, anchor);
            return;
        }
        if (type === Static) {
            moveStaticNode(vnode, container, anchor);
            return;
        }
        // single nodes
        const needTransition = moveType !== 2 /* REORDER */  && shapeFlag & 1 /* ELEMENT */  && transition;
        if (needTransition) {
            if (moveType === 0 /* ENTER */ ) {
                transition.beforeEnter(el);
                hostInsert(el, container, anchor);
                queuePostRenderEffect(()=>transition.enter(el)
                , parentSuspense);
            } else {
                const { leave , delayLeave , afterLeave  } = transition;
                const remove = ()=>hostInsert(el, container, anchor)
                ;
                const performLeave = ()=>{
                    leave(el, ()=>{
                        remove();
                        afterLeave && afterLeave();
                    });
                };
                if (delayLeave) delayLeave(el, remove, performLeave);
                else performLeave();
            }
        } else hostInsert(el, container, anchor);
    };
    const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false)=>{
        const { type , props , ref , children , dynamicChildren , shapeFlag , patchFlag , dirs  } = vnode;
        // unset ref
        if (ref != null) setRef(ref, null, parentSuspense, vnode, true);
        if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */ ) {
            parentComponent.ctx.deactivate(vnode);
            return;
        }
        const shouldInvokeDirs = shapeFlag & 1 /* ELEMENT */  && dirs;
        const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
        let vnodeHook;
        if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) invokeVNodeHook(vnodeHook, parentComponent, vnode);
        if (shapeFlag & 6 /* COMPONENT */ ) unmountComponent(vnode.component, parentSuspense, doRemove);
        else {
            if (shapeFlag & 128 /* SUSPENSE */ ) {
                vnode.suspense.unmount(parentSuspense, doRemove);
                return;
            }
            if (shouldInvokeDirs) invokeDirectiveHook(vnode, null, parentComponent, 'beforeUnmount');
            if (shapeFlag & 64 /* TELEPORT */ ) vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);
            else if (dynamicChildren && (type !== Fragment || patchFlag > 0 && patchFlag & 64 /* STABLE_FRAGMENT */ )) // fast path for block nodes: only need to unmount dynamic children.
            unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);
            else if (type === Fragment && patchFlag & 384 /* UNKEYED_FRAGMENT */  || !optimized && shapeFlag & 16 /* ARRAY_CHILDREN */ ) unmountChildren(children, parentComponent, parentSuspense);
            if (doRemove) remove1(vnode);
        }
        if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) queuePostRenderEffect(()=>{
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
            shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, 'unmounted');
        }, parentSuspense);
    };
    const remove1 = (vnode)=>{
        const { type , el , anchor , transition  } = vnode;
        if (type === Fragment) {
            removeFragment(el, anchor);
            return;
        }
        if (type === Static) {
            removeStaticNode(vnode);
            return;
        }
        const performRemove = ()=>{
            hostRemove(el);
            if (transition && !transition.persisted && transition.afterLeave) transition.afterLeave();
        };
        if (vnode.shapeFlag & 1 /* ELEMENT */  && transition && !transition.persisted) {
            const { leave , delayLeave  } = transition;
            const performLeave = ()=>leave(el, performRemove)
            ;
            if (delayLeave) delayLeave(vnode.el, performRemove, performLeave);
            else performLeave();
        } else performRemove();
    };
    const removeFragment = (cur, end)=>{
        // For fragments, directly remove all contained DOM nodes.
        // (fragment child nodes cannot have transition)
        let next;
        while(cur !== end){
            next = hostNextSibling(cur);
            hostRemove(cur);
            cur = next;
        }
        hostRemove(end);
    };
    const unmountComponent = (instance, parentSuspense, doRemove)=>{
        if (instance.type.__hmrId) unregisterHMR(instance);
        const { bum , scope , update , subTree , um  } = instance;
        // beforeUnmount hook
        if (bum) _shared.invokeArrayFns(bum);
        // stop effects in component scope
        scope.stop();
        // update may be null if a component is unmounted before its async
        // setup has resolved.
        if (update) {
            // so that scheduler will no longer invoke it
            update.active = false;
            unmount(subTree, instance, parentSuspense, doRemove);
        }
        // unmounted hook
        if (um) queuePostRenderEffect(um, parentSuspense);
        queuePostRenderEffect(()=>{
            instance.isUnmounted = true;
        }, parentSuspense);
        // A component with async dep inside a pending suspense is unmounted before
        // its async dep resolves. This should remove the dep from the suspense, and
        // cause the suspense to resolve immediately if that was the last dep.
        if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
            parentSuspense.deps--;
            if (parentSuspense.deps === 0) parentSuspense.resolve();
        }
        devtoolsComponentRemoved(instance);
    };
    const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0)=>{
        for(let i = start; i < children.length; i++)unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);
    };
    const getNextHostNode = (vnode)=>{
        if (vnode.shapeFlag & 6 /* COMPONENT */ ) return getNextHostNode(vnode.component.subTree);
        if (vnode.shapeFlag & 128 /* SUSPENSE */ ) return vnode.suspense.next();
        return hostNextSibling(vnode.anchor || vnode.el);
    };
    const render = (vnode, container, isSVG)=>{
        if (vnode == null) {
            if (container._vnode) unmount(container._vnode, null, null, true);
        } else patch(container._vnode || null, vnode, container, null, null, null, isSVG);
        flushPostFlushCbs();
        container._vnode = vnode;
    };
    const internals = {
        p: patch,
        um: unmount,
        m: move,
        r: remove1,
        mt: mountComponent,
        mc: mountChildren,
        pc: patchChildren,
        pbc: patchBlockChildren,
        n: getNextHostNode,
        o: options
    };
    let hydrate;
    let hydrateNode;
    if (createHydrationFns) [hydrate, hydrateNode] = createHydrationFns(internals);
    return {
        render,
        hydrate,
        createApp: createAppAPI(render, hydrate)
    };
}
function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
    if (_shared.isArray(rawRef)) {
        rawRef.forEach((r, i)=>setRef(r, oldRawRef && (_shared.isArray(oldRawRef) ? oldRawRef[i] : oldRawRef), parentSuspense, vnode, isUnmount)
        );
        return;
    }
    if (isAsyncWrapper(vnode) && !isUnmount) // when mounting async components, nothing needs to be done,
    // because the template ref is forwarded to inner component
    return;
    const refValue = vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */  ? getExposeProxy(vnode.component) || vnode.component.proxy : vnode.el;
    const value = isUnmount ? null : refValue;
    const { i: owner , r: ref  } = rawRef;
    if (!owner) {
        warn(`Missing ref owner context. ref cannot be used on hoisted vnodes. ` + `A vnode with ref must be created inside the render function.`);
        return;
    }
    const oldRef = oldRawRef && oldRawRef.r;
    const refs = owner.refs === _shared.EMPTY_OBJ ? owner.refs = {
    } : owner.refs;
    const setupState = owner.setupState;
    // dynamic ref changed. unset old ref
    if (oldRef != null && oldRef !== ref) {
        if (_shared.isString(oldRef)) {
            refs[oldRef] = null;
            if (_shared.hasOwn(setupState, oldRef)) setupState[oldRef] = null;
        } else if (_reactivity.isRef(oldRef)) oldRef.value = null;
    }
    if (_shared.isString(ref)) {
        const doSet = ()=>{
            refs[ref] = value;
            if (_shared.hasOwn(setupState, ref)) setupState[ref] = value;
        };
        // #1789: for non-null values, set them after render
        // null values means this is unmount and it should not overwrite another
        // ref with the same key
        if (value) {
            doSet.id = -1;
            queuePostRenderEffect(doSet, parentSuspense);
        } else doSet();
    } else if (_reactivity.isRef(ref)) {
        const doSet = ()=>{
            ref.value = value;
        };
        if (value) {
            doSet.id = -1;
            queuePostRenderEffect(doSet, parentSuspense);
        } else doSet();
    } else if (_shared.isFunction(ref)) callWithErrorHandling(ref, owner, 12 /* FUNCTION_REF */ , [
        value,
        refs
    ]);
    else warn('Invalid template ref type:', value, `(${typeof value})`);
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
    callWithAsyncErrorHandling(hook, instance, 7 /* VNODE_HOOK */ , [
        vnode,
        prevVNode
    ]);
}
/**
 * #1156
 * When a component is HMR-enabled, we need to make sure that all static nodes
 * inside a block also inherit the DOM element from the previous tree so that
 * HMR updates (which are full updates) can retrieve the element for patching.
 *
 * #2080
 * Inside keyed `template` fragment static children, if a fragment is moved,
 * the children will always be moved. Therefore, in order to ensure correct move
 * position, el should be inherited from previous nodes.
 */ function traverseStaticChildren(n1, n2, shallow = false) {
    const ch1 = n1.children;
    const ch2 = n2.children;
    if (_shared.isArray(ch1) && _shared.isArray(ch2)) for(let i = 0; i < ch1.length; i++){
        // this is only called in the optimized path so array children are
        // guaranteed to be vnodes
        const c1 = ch1[i];
        let c2 = ch2[i];
        if (c2.shapeFlag & 1 /* ELEMENT */  && !c2.dynamicChildren) {
            if (c2.patchFlag <= 0 || c2.patchFlag === 32 /* HYDRATE_EVENTS */ ) {
                c2 = ch2[i] = cloneIfMounted(ch2[i]);
                c2.el = c1.el;
            }
            if (!shallow) traverseStaticChildren(c1, c2);
        }
        // also inherit for comment nodes, but not placeholders (e.g. v-if which
        // would have received .el during block patch)
        if (c2.type === Comment && !c2.el) c2.el = c1.el;
    }
}
// https://en.wikipedia.org/wiki/Longest_increasing_subsequence
function getSequence(arr) {
    const p = arr.slice();
    const result = [
        0
    ];
    let i, j, u, v, c;
    const len = arr.length;
    for(i = 0; i < len; i++){
        const arrI = arr[i];
        if (arrI !== 0) {
            j = result[result.length - 1];
            if (arr[j] < arrI) {
                p[i] = j;
                result.push(i);
                continue;
            }
            u = 0;
            v = result.length - 1;
            while(u < v){
                c = u + v >> 1;
                if (arr[result[c]] < arrI) u = c + 1;
                else v = c;
            }
            if (arrI < arr[result[u]]) {
                if (u > 0) p[i] = result[u - 1];
                result[u] = i;
            }
        }
    }
    u = result.length;
    v = result[u - 1];
    while(u-- > 0){
        result[u] = v;
        v = p[v];
    }
    return result;
}
const isTeleport = (type)=>type.__isTeleport
;
const isTeleportDisabled = (props)=>props && (props.disabled || props.disabled === '')
;
const isTargetSVG = (target)=>typeof SVGElement !== 'undefined' && target instanceof SVGElement
;
const resolveTarget = (props, select)=>{
    const targetSelector = props && props.to;
    if (_shared.isString(targetSelector)) {
        if (!select) {
            warn(`Current renderer does not support string target for Teleports. ` + `(missing querySelector renderer option)`);
            return null;
        } else {
            const target = select(targetSelector);
            if (!target) warn(`Failed to locate Teleport target with selector "${targetSelector}". ` + `Note the target element must exist before the component is mounted - ` + `i.e. the target cannot be rendered by the component itself, and ` + `ideally should be outside of the entire Vue component tree.`);
            return target;
        }
    } else {
        if (!targetSelector && !isTeleportDisabled(props)) warn(`Invalid Teleport target: ${targetSelector}`);
        return targetSelector;
    }
};
const TeleportImpl = {
    __isTeleport: true,
    process (n1, n2, container2, anchor2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {
        const { mc: mountChildren , pc: patchChildren , pbc: patchBlockChildren , o: { insert , querySelector , createText , createComment  }  } = internals;
        const disabled = isTeleportDisabled(n2.props);
        let { shapeFlag , children , dynamicChildren  } = n2;
        // #3302
        // HMR updated, force full diff
        if (isHmrUpdating) {
            optimized = false;
            dynamicChildren = null;
        }
        if (n1 == null) {
            // insert anchors in the main view
            const placeholder = n2.el = createComment('teleport start');
            const mainAnchor = n2.anchor = createComment('teleport end');
            insert(placeholder, container2, anchor2);
            insert(mainAnchor, container2, anchor2);
            const target = n2.target = resolveTarget(n2.props, querySelector);
            const targetAnchor = n2.targetAnchor = createText('');
            if (target) {
                insert(targetAnchor, target);
                // #2652 we could be teleporting from a non-SVG tree into an SVG tree
                isSVG = isSVG || isTargetSVG(target);
            } else if (!disabled) warn('Invalid Teleport target on mount:', target, `(${typeof target})`);
            const mount = (container, anchor)=>{
                // Teleport *always* has Array children. This is enforced in both the
                // compiler and vnode children normalization.
                if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) mountChildren(children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            };
            if (disabled) mount(container2, mainAnchor);
            else if (target) mount(target, targetAnchor);
        } else {
            // update content
            n2.el = n1.el;
            const mainAnchor = n2.anchor = n1.anchor;
            const target = n2.target = n1.target;
            const targetAnchor = n2.targetAnchor = n1.targetAnchor;
            const wasDisabled = isTeleportDisabled(n1.props);
            const currentContainer = wasDisabled ? container2 : target;
            const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
            isSVG = isSVG || isTargetSVG(target);
            if (dynamicChildren) {
                // fast path when the teleport happens to be a block root
                patchBlockChildren(n1.dynamicChildren, dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG, slotScopeIds);
                // even in block tree mode we need to make sure all root-level nodes
                // in the teleport inherit previous DOM references so that they can
                // be moved in future patches.
                traverseStaticChildren(n1, n2, true);
            } else if (!optimized) patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, false);
            if (disabled) {
                if (!wasDisabled) // enabled -> disabled
                // move into main container
                moveTeleport(n2, container2, mainAnchor, internals, 1 /* TOGGLE */ );
            } else {
                // target changed
                if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
                    const nextTarget = n2.target = resolveTarget(n2.props, querySelector);
                    if (nextTarget) moveTeleport(n2, nextTarget, null, internals, 0 /* TARGET_CHANGE */ );
                    else warn('Invalid Teleport target on update:', target, `(${typeof target})`);
                } else if (wasDisabled) // disabled -> enabled
                // move into teleport target
                moveTeleport(n2, target, targetAnchor, internals, 1 /* TOGGLE */ );
            }
        }
    },
    remove (vnode, parentComponent, parentSuspense, optimized, { um: unmount , o: { remove: hostRemove  }  }, doRemove) {
        const { shapeFlag , children , anchor , targetAnchor , target , props  } = vnode;
        if (target) hostRemove(targetAnchor);
        // an unmounted teleport should always remove its children if not disabled
        if (doRemove || !isTeleportDisabled(props)) {
            hostRemove(anchor);
            if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) for(let i = 0; i < children.length; i++){
                const child = children[i];
                unmount(child, parentComponent, parentSuspense, true, !!child.dynamicChildren);
            }
        }
    },
    move: moveTeleport,
    hydrate: hydrateTeleport
};
function moveTeleport(vnode, container, parentAnchor, { o: { insert  } , m: move  }, moveType = 2 /* REORDER */ ) {
    // move target anchor if this is a target change.
    if (moveType === 0 /* TARGET_CHANGE */ ) insert(vnode.targetAnchor, container, parentAnchor);
    const { el , anchor , shapeFlag , children , props  } = vnode;
    const isReorder = moveType === 2 /* REORDER */ ;
    // move main view anchor if this is a re-order.
    if (isReorder) insert(el, container, parentAnchor);
    // if this is a re-order and teleport is enabled (content is in target)
    // do not move children. So the opposite is: only move children if this
    // is not a reorder, or the teleport is disabled
    if (!isReorder || isTeleportDisabled(props)) {
        // Teleport has either Array children or no children.
        if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) for(let i = 0; i < children.length; i++)move(children[i], container, parentAnchor, 2 /* REORDER */ );
    }
    // move main view anchor if this is a re-order.
    if (isReorder) insert(anchor, container, parentAnchor);
}
function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, { o: { nextSibling , parentNode , querySelector  }  }, hydrateChildren) {
    const target = vnode.target = resolveTarget(vnode.props, querySelector);
    if (target) {
        // if multiple teleports rendered to the same target element, we need to
        // pick up from where the last teleport finished instead of the first node
        const targetNode = target._lpa || target.firstChild;
        if (vnode.shapeFlag & 16 /* ARRAY_CHILDREN */ ) {
            if (isTeleportDisabled(vnode.props)) {
                vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, slotScopeIds, optimized);
                vnode.targetAnchor = targetNode;
            } else {
                vnode.anchor = nextSibling(node);
                vnode.targetAnchor = hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, slotScopeIds, optimized);
            }
            target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
        }
    }
    return vnode.anchor && nextSibling(vnode.anchor);
}
// Force-casted public typing for h and TSX props inference
const Teleport = TeleportImpl;
const COMPONENTS = 'components';
const DIRECTIVES = 'directives';
/**
 * @private
 */ function resolveComponent(name, maybeSelfReference) {
    return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
}
const NULL_DYNAMIC_COMPONENT = Symbol();
/**
 * @private
 */ function resolveDynamicComponent(component) {
    if (_shared.isString(component)) return resolveAsset(COMPONENTS, component, false) || component;
    else // invalid types will fallthrough to createVNode and raise warning
    return component || NULL_DYNAMIC_COMPONENT;
}
/**
 * @private
 */ function resolveDirective(name) {
    return resolveAsset(DIRECTIVES, name);
}
// implementation
function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
    const instance = currentRenderingInstance || currentInstance;
    if (instance) {
        const Component = instance.type;
        // explicit self name has highest priority
        if (type === COMPONENTS) {
            const selfName = getComponentName(Component);
            if (selfName && (selfName === name || selfName === _shared.camelize(name) || selfName === _shared.capitalize(_shared.camelize(name)))) return Component;
        }
        const res = // local registration
        // check instance[type] first which is resolved for options API
        resolve1(instance[type] || Component[type], name) || // global registration
        resolve1(instance.appContext[type], name);
        if (!res && maybeSelfReference) // fallback to implicit self-reference
        return Component;
        if (warnMissing && !res) {
            const extra = type === COMPONENTS ? `\nIf this is a native custom element, make sure to exclude it from ` + `component resolution via compilerOptions.isCustomElement.` : ``;
            warn(`Failed to resolve ${type.slice(0, -1)}: ${name}${extra}`);
        }
        return res;
    } else warn(`resolve${_shared.capitalize(type.slice(0, -1))} ` + `can only be used in render() or setup().`);
}
function resolve1(registry, name) {
    return registry && (registry[name] || registry[_shared.camelize(name)] || registry[_shared.capitalize(_shared.camelize(name))]);
}
const Fragment = Symbol('Fragment');
const Text = Symbol('Text');
const Comment = Symbol('Comment');
const Static = Symbol('Static');
// Since v-if and v-for are the two possible ways node structure can dynamically
// change, once we consider v-if branches and each v-for fragment a block, we
// can divide a template into nested blocks, and within each block the node
// structure would be stable. This allows us to skip most children diffing
// and only worry about the dynamic nodes (indicated by patch flags).
const blockStack = [];
let currentBlock = null;
/**
 * Open a block.
 * This must be called before `createBlock`. It cannot be part of `createBlock`
 * because the children of the block are evaluated before `createBlock` itself
 * is called. The generated code typically looks like this:
 *
 * ```js
 * function render() {
 *   return (openBlock(),createBlock('div', null, [...]))
 * }
 * ```
 * disableTracking is true when creating a v-for fragment block, since a v-for
 * fragment always diffs its children.
 *
 * @private
 */ function openBlock(disableTracking = false) {
    blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
    blockStack.pop();
    currentBlock = blockStack[blockStack.length - 1] || null;
}
// Whether we should be tracking dynamic child nodes inside a block.
// Only tracks when this value is > 0
// We are not using a simple boolean because this value may need to be
// incremented/decremented by nested usage of v-once (see below)
let isBlockTreeEnabled = 1;
/**
 * Block tracking sometimes needs to be disabled, for example during the
 * creation of a tree that needs to be cached by v-once. The compiler generates
 * code like this:
 *
 * ``` js
 * _cache[1] || (
 *   setBlockTracking(-1),
 *   _cache[1] = createVNode(...),
 *   setBlockTracking(1),
 *   _cache[1]
 * )
 * ```
 *
 * @private
 */ function setBlockTracking(value) {
    isBlockTreeEnabled += value;
}
function setupBlock(vnode) {
    // save current block children on the block vnode
    vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || _shared.EMPTY_ARR : null;
    // close block
    closeBlock();
    // a block is always going to be patched, so track it as a child of its
    // parent block
    if (isBlockTreeEnabled > 0 && currentBlock) currentBlock.push(vnode);
    return vnode;
}
/**
 * @private
 */ function createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {
    return setupBlock(createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, true));
}
/**
 * Create a block root vnode. Takes the same exact arguments as `createVNode`.
 * A block root keeps track of dynamic nodes within the block in the
 * `dynamicChildren` array.
 *
 * @private
 */ function createBlock(type, props, children, patchFlag, dynamicProps) {
    return setupBlock(createVNode(type, props, children, patchFlag, dynamicProps, true));
}
function isVNode(value) {
    return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
    if (n2.shapeFlag & 6 /* COMPONENT */  && hmrDirtyComponents.has(n2.type)) // HMR only: if the component has been hot-updated, force a reload.
    return false;
    return n1.type === n2.type && n1.key === n2.key;
}
let vnodeArgsTransformer;
/**
 * Internal API for registering an arguments transform for createVNode
 * used for creating stubs in the test-utils
 * It is *internal* but needs to be exposed for test-utils to pick up proper
 * typings
 */ function transformVNodeArgs(transformer) {
    vnodeArgsTransformer = transformer;
}
const createVNodeWithArgsTransform = (...args)=>{
    return _createVNode(...vnodeArgsTransformer ? vnodeArgsTransformer(args, currentRenderingInstance) : args);
};
const InternalObjectKey = `__vInternal`;
const normalizeKey = ({ key  })=>key != null ? key : null
;
const normalizeRef = ({ ref  })=>{
    return ref != null ? _shared.isString(ref) || _reactivity.isRef(ref) || _shared.isFunction(ref) ? {
        i: currentRenderingInstance,
        r: ref
    } : ref : null;
};
function createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1 /* ELEMENT */ , isBlockNode = false, needFullChildrenNormalization = false) {
    const vnode = {
        __v_isVNode: true,
        __v_skip: true,
        type,
        props,
        key: props && normalizeKey(props),
        ref: props && normalizeRef(props),
        scopeId: currentScopeId,
        slotScopeIds: null,
        children,
        component: null,
        suspense: null,
        ssContent: null,
        ssFallback: null,
        dirs: null,
        transition: null,
        el: null,
        anchor: null,
        target: null,
        targetAnchor: null,
        staticCount: 0,
        shapeFlag,
        patchFlag,
        dynamicProps,
        dynamicChildren: null,
        appContext: null
    };
    if (needFullChildrenNormalization) {
        normalizeChildren(vnode, children);
        // normalize suspense children
        if (shapeFlag & 128 /* SUSPENSE */ ) type.normalize(vnode);
    } else if (children) // compiled element vnode - if children is passed, only possible types are
    // string or Array.
    vnode.shapeFlag |= _shared.isString(children) ? 8 /* TEXT_CHILDREN */  : 16 /* ARRAY_CHILDREN */ ;
    // validate key
    if (vnode.key !== vnode.key) warn(`VNode created with invalid key (NaN). VNode type:`, vnode.type);
    // track vnode for block tree
    if (isBlockTreeEnabled > 0 && // avoid a block node from tracking itself
    !isBlockNode && // has current parent block
    currentBlock && (vnode.patchFlag > 0 || shapeFlag & 6 /* COMPONENT */ ) && // the EVENTS flag is only for hydration and if it is the only flag, the
    // vnode should not be considered dynamic due to handler caching.
    vnode.patchFlag !== 32 /* HYDRATE_EVENTS */ ) currentBlock.push(vnode);
    return vnode;
}
const createVNode = createVNodeWithArgsTransform;
function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
    if (!type || type === NULL_DYNAMIC_COMPONENT) {
        if (!type) warn(`Invalid vnode type when creating vnode: ${type}.`);
        type = Comment;
    }
    if (isVNode(type)) {
        // createVNode receiving an existing vnode. This happens in cases like
        // <component :is="vnode"/>
        // #2078 make sure to merge refs during the clone instead of overwriting it
        const cloned = cloneVNode(type, props, true);
        if (children) normalizeChildren(cloned, children);
        return cloned;
    }
    // class component normalization.
    if (isClassComponent(type)) type = type.__vccOpts;
    // class & style normalization.
    if (props) {
        // for reactive or proxy objects, we need to clone it to enable mutation.
        props = guardReactiveProps(props);
        let { class: klass , style  } = props;
        if (klass && !_shared.isString(klass)) props.class = _shared.normalizeClass(klass);
        if (_shared.isObject(style)) {
            // reactive state objects need to be cloned since they are likely to be
            // mutated
            if (_reactivity.isProxy(style) && !_shared.isArray(style)) style = _shared.extend({
            }, style);
            props.style = _shared.normalizeStyle(style);
        }
    }
    // encode the vnode type information into a bitmap
    const shapeFlag = _shared.isString(type) ? 1 /* ELEMENT */  : isSuspense(type) ? 128 /* SUSPENSE */  : isTeleport(type) ? 64 /* TELEPORT */  : _shared.isObject(type) ? 4 /* STATEFUL_COMPONENT */  : _shared.isFunction(type) ? 2 /* FUNCTIONAL_COMPONENT */  : 0;
    if (shapeFlag & 4 /* STATEFUL_COMPONENT */  && _reactivity.isProxy(type)) {
        type = _reactivity.toRaw(type);
        warn(`Vue received a Component which was made a reactive object. This can ` + `lead to unnecessary performance overhead, and should be avoided by ` + `marking the component with \`markRaw\` or using \`shallowRef\` ` + `instead of \`ref\`.`, `\nComponent that was made reactive: `, type);
    }
    return createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, isBlockNode, true);
}
function guardReactiveProps(props) {
    if (!props) return null;
    return _reactivity.isProxy(props) || InternalObjectKey in props ? _shared.extend({
    }, props) : props;
}
function cloneVNode(vnode, extraProps, mergeRef = false) {
    // This is intentionally NOT using spread or extend to avoid the runtime
    // key enumeration cost.
    const { props , ref , patchFlag , children  } = vnode;
    const mergedProps = extraProps ? mergeProps(props || {
    }, extraProps) : props;
    const cloned = {
        __v_isVNode: true,
        __v_skip: true,
        type: vnode.type,
        props: mergedProps,
        key: mergedProps && normalizeKey(mergedProps),
        ref: extraProps && extraProps.ref ? // if the vnode itself already has a ref, cloneVNode will need to merge
        // the refs so the single vnode can be set on multiple refs
        mergeRef && ref ? _shared.isArray(ref) ? ref.concat(normalizeRef(extraProps)) : [
            ref,
            normalizeRef(extraProps)
        ] : normalizeRef(extraProps) : ref,
        scopeId: vnode.scopeId,
        slotScopeIds: vnode.slotScopeIds,
        children: patchFlag === -1 /* HOISTED */  && _shared.isArray(children) ? children.map(deepCloneVNode) : children,
        target: vnode.target,
        targetAnchor: vnode.targetAnchor,
        staticCount: vnode.staticCount,
        shapeFlag: vnode.shapeFlag,
        // if the vnode is cloned with extra props, we can no longer assume its
        // existing patch flag to be reliable and need to add the FULL_PROPS flag.
        // note: perserve flag for fragments since they use the flag for children
        // fast paths only.
        patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 // hoisted node
         ? 16 /* FULL_PROPS */  : patchFlag | 16 /* FULL_PROPS */  : patchFlag,
        dynamicProps: vnode.dynamicProps,
        dynamicChildren: vnode.dynamicChildren,
        appContext: vnode.appContext,
        dirs: vnode.dirs,
        transition: vnode.transition,
        // These should technically only be non-null on mounted VNodes. However,
        // they *should* be copied for kept-alive vnodes. So we just always copy
        // them since them being non-null during a mount doesn't affect the logic as
        // they will simply be overwritten.
        component: vnode.component,
        suspense: vnode.suspense,
        ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
        ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
        el: vnode.el,
        anchor: vnode.anchor
    };
    return cloned;
}
/**
 * Dev only, for HMR of hoisted vnodes reused in v-for
 * https://github.com/vitejs/vite/issues/2022
 */ function deepCloneVNode(vnode) {
    const cloned = cloneVNode(vnode);
    if (_shared.isArray(vnode.children)) cloned.children = vnode.children.map(deepCloneVNode);
    return cloned;
}
/**
 * @private
 */ function createTextVNode(text = ' ', flag = 0) {
    return createVNode(Text, null, text, flag);
}
/**
 * @private
 */ function createStaticVNode(content, numberOfNodes) {
    // A static vnode can contain multiple stringified elements, and the number
    // of elements is necessary for hydration.
    const vnode = createVNode(Static, null, content);
    vnode.staticCount = numberOfNodes;
    return vnode;
}
/**
 * @private
 */ function createCommentVNode(text = '', // when used as the v-else branch, the comment node must be created as a
// block to ensure correct updates.
asBlock = false) {
    return asBlock ? (openBlock(), createBlock(Comment, null, text)) : createVNode(Comment, null, text);
}
function normalizeVNode(child) {
    if (child == null || typeof child === 'boolean') // empty placeholder
    return createVNode(Comment);
    else if (_shared.isArray(child)) // fragment
    return createVNode(Fragment, null, // #3666, avoid reference pollution when reusing vnode
    child.slice());
    else if (typeof child === 'object') // already vnode, this should be the most common since compiled templates
    // always produce all-vnode children arrays
    return cloneIfMounted(child);
    else // strings and numbers
    return createVNode(Text, null, String(child));
}
// optimized normalization for template-compiled render fns
function cloneIfMounted(child) {
    return child.el === null || child.memo ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
    let type = 0;
    const { shapeFlag  } = vnode;
    if (children == null) children = null;
    else if (_shared.isArray(children)) type = 16 /* ARRAY_CHILDREN */ ;
    else if (typeof children === 'object') {
        if (shapeFlag & 65 /* TELEPORT */ ) {
            // Normalize slot to plain children for plain element and Teleport
            const slot = children.default;
            if (slot) {
                // _c marker is added by withCtx() indicating this is a compiled slot
                slot._c && (slot._d = false);
                normalizeChildren(vnode, slot());
                slot._c && (slot._d = true);
            }
            return;
        } else {
            type = 32 /* SLOTS_CHILDREN */ ;
            const slotFlag = children._;
            if (!slotFlag && !(InternalObjectKey in children)) children._ctx = currentRenderingInstance;
            else if (slotFlag === 3 /* FORWARDED */  && currentRenderingInstance) {
                // a child component receives forwarded slots from the parent.
                // its slot type is determined by its parent's slot type.
                if (currentRenderingInstance.slots._ === 1 /* STABLE */ ) children._ = 1 /* STABLE */ ;
                else {
                    children._ = 2 /* DYNAMIC */ ;
                    vnode.patchFlag |= 1024 /* DYNAMIC_SLOTS */ ;
                }
            }
        }
    } else if (_shared.isFunction(children)) {
        children = {
            default: children,
            _ctx: currentRenderingInstance
        };
        type = 32 /* SLOTS_CHILDREN */ ;
    } else {
        children = String(children);
        // force teleport children to array so it can be moved around
        if (shapeFlag & 64 /* TELEPORT */ ) {
            type = 16 /* ARRAY_CHILDREN */ ;
            children = [
                createTextVNode(children)
            ];
        } else type = 8 /* TEXT_CHILDREN */ ;
    }
    vnode.children = children;
    vnode.shapeFlag |= type;
}
function mergeProps(...args) {
    const ret = {
    };
    for(let i = 0; i < args.length; i++){
        const toMerge = args[i];
        for(const key in toMerge){
            if (key === 'class') {
                if (ret.class !== toMerge.class) ret.class = _shared.normalizeClass([
                    ret.class,
                    toMerge.class
                ]);
            } else if (key === 'style') ret.style = _shared.normalizeStyle([
                ret.style,
                toMerge.style
            ]);
            else if (_shared.isOn(key)) {
                const existing = ret[key];
                const incoming = toMerge[key];
                if (existing !== incoming && !(_shared.isArray(existing) && existing.includes(incoming))) ret[key] = existing ? [].concat(existing, incoming) : incoming;
            } else if (key !== '') ret[key] = toMerge[key];
        }
    }
    return ret;
}
/**
 * Actual implementation
 */ function renderList(source, renderItem, cache, index) {
    let ret;
    const cached = cache && cache[index];
    if (_shared.isArray(source) || _shared.isString(source)) {
        ret = new Array(source.length);
        for(let i = 0, l = source.length; i < l; i++)ret[i] = renderItem(source[i], i, undefined, cached && cached[i]);
    } else if (typeof source === 'number') {
        if (!Number.isInteger(source)) {
            warn(`The v-for range expect an integer value but got ${source}.`);
            return [];
        }
        ret = new Array(source);
        for(let i = 0; i < source; i++)ret[i] = renderItem(i + 1, i, undefined, cached && cached[i]);
    } else if (_shared.isObject(source)) {
        if (source[Symbol.iterator]) ret = Array.from(source, (item, i)=>renderItem(item, i, undefined, cached && cached[i])
        );
        else {
            const keys = Object.keys(source);
            ret = new Array(keys.length);
            for(let i = 0, l = keys.length; i < l; i++){
                const key = keys[i];
                ret[i] = renderItem(source[key], key, i, cached && cached[i]);
            }
        }
    } else ret = [];
    if (cache) cache[index] = ret;
    return ret;
}
/**
 * Compiler runtime helper for creating dynamic slots object
 * @private
 */ function createSlots(slots, dynamicSlots) {
    for(let i = 0; i < dynamicSlots.length; i++){
        const slot = dynamicSlots[i];
        // array of dynamic slot generated by <template v-for="..." #[...]>
        if (_shared.isArray(slot)) for(let j = 0; j < slot.length; j++)slots[slot[j].name] = slot[j].fn;
        else if (slot) // conditional single slot generated by <template v-if="..." #foo>
        slots[slot.name] = slot.fn;
    }
    return slots;
}
/**
 * Compiler runtime helper for rendering `<slot/>`
 * @private
 */ function renderSlot(slots, name, props = {
}, // this is not a user-facing function, so the fallback is always generated by
// the compiler and guaranteed to be a function returning an array
fallback, noSlotted) {
    if (currentRenderingInstance.isCE) return createVNode('slot', name === 'default' ? null : {
        name
    }, fallback && fallback());
    let slot = slots[name];
    if (slot && slot.length > 1) {
        warn(`SSR-optimized slot function detected in a non-SSR-optimized render ` + `function. You need to mark this component with $dynamic-slots in the ` + `parent template.`);
        slot = ()=>[]
        ;
    }
    // a compiled slot disables block tracking by default to avoid manual
    // invocation interfering with template-based block tracking, but in
    // `renderSlot` we can be sure that it's template-based so we can force
    // enable it.
    if (slot && slot._c) slot._d = false;
    openBlock();
    const validSlotContent = slot && ensureValidVNode(slot(props));
    const rendered = createBlock(Fragment, {
        key: props.key || `_${name}`
    }, validSlotContent || (fallback ? fallback() : []), validSlotContent && slots._ === 1 /* STABLE */  ? 64 /* STABLE_FRAGMENT */  : -2 /* BAIL */ );
    if (!noSlotted && rendered.scopeId) rendered.slotScopeIds = [
        rendered.scopeId + '-s'
    ];
    if (slot && slot._c) slot._d = true;
    return rendered;
}
function ensureValidVNode(vnodes) {
    return vnodes.some((child)=>{
        if (!isVNode(child)) return true;
        if (child.type === Comment) return false;
        if (child.type === Fragment && !ensureValidVNode(child.children)) return false;
        return true;
    }) ? vnodes : null;
}
/**
 * For prefixing keys in v-on="obj" with "on"
 * @private
 */ function toHandlers(obj) {
    const ret = {
    };
    if (!_shared.isObject(obj)) {
        warn(`v-on with no argument expects an object value.`);
        return ret;
    }
    for(const key in obj)ret[_shared.toHandlerKey(key)] = obj[key];
    return ret;
}
/**
 * #2437 In Vue 3, functional components do not have a public instance proxy but
 * they exist in the internal parent chain. For code that relies on traversing
 * public $parent chains, skip functional ones and go to the parent instead.
 */ const getPublicInstance = (i)=>{
    if (!i) return null;
    if (isStatefulComponent(i)) return getExposeProxy(i) || i.proxy;
    return getPublicInstance(i.parent);
};
const publicPropertiesMap = _shared.extend(Object.create(null), {
    $: (i)=>i
    ,
    $el: (i)=>i.vnode.el
    ,
    $data: (i)=>i.data
    ,
    $props: (i)=>_reactivity.shallowReadonly(i.props)
    ,
    $attrs: (i)=>_reactivity.shallowReadonly(i.attrs)
    ,
    $slots: (i)=>_reactivity.shallowReadonly(i.slots)
    ,
    $refs: (i)=>_reactivity.shallowReadonly(i.refs)
    ,
    $parent: (i)=>getPublicInstance(i.parent)
    ,
    $root: (i)=>getPublicInstance(i.root)
    ,
    $emit: (i)=>i.emit
    ,
    $options: (i)=>__VUE_OPTIONS_API__ ? resolveMergedOptions(i) : i.type
    ,
    $forceUpdate: (i)=>()=>queueJob(i.update)
    ,
    $nextTick: (i)=>nextTick.bind(i.proxy)
    ,
    $watch: (i)=>__VUE_OPTIONS_API__ ? instanceWatch.bind(i) : _shared.NOOP
});
const PublicInstanceProxyHandlers = {
    get ({ _: instance  }, key) {
        const { ctx , setupState , data , props , accessCache , type , appContext  } = instance;
        // for internal formatters to know that this is a Vue instance
        if (key === '__isVue') return true;
        // prioritize <script setup> bindings during dev.
        // this allows even properties that start with _ or $ to be used - so that
        // it aligns with the production behavior where the render fn is inlined and
        // indeed has access to all declared variables.
        if (setupState !== _shared.EMPTY_OBJ && setupState.__isScriptSetup && _shared.hasOwn(setupState, key)) return setupState[key];
        // data / props / ctx
        // This getter gets called for every property access on the render context
        // during render and is a major hotspot. The most expensive part of this
        // is the multiple hasOwn() calls. It's much faster to do a simple property
        // access on a plain object, so we use an accessCache object (with null
        // prototype) to memoize what access type a key corresponds to.
        let normalizedProps;
        if (key[0] !== '$') {
            const n = accessCache[key];
            if (n !== undefined) switch(n){
                case 0 /* SETUP */ :
                    return setupState[key];
                case 1 /* DATA */ :
                    return data[key];
                case 3 /* CONTEXT */ :
                    return ctx[key];
                case 2 /* PROPS */ :
                    return props[key];
            }
            else if (setupState !== _shared.EMPTY_OBJ && _shared.hasOwn(setupState, key)) {
                accessCache[key] = 0 /* SETUP */ ;
                return setupState[key];
            } else if (data !== _shared.EMPTY_OBJ && _shared.hasOwn(data, key)) {
                accessCache[key] = 1 /* DATA */ ;
                return data[key];
            } else if (// only cache other properties when instance has declared (thus stable)
            // props
            (normalizedProps = instance.propsOptions[0]) && _shared.hasOwn(normalizedProps, key)) {
                accessCache[key] = 2 /* PROPS */ ;
                return props[key];
            } else if (ctx !== _shared.EMPTY_OBJ && _shared.hasOwn(ctx, key)) {
                accessCache[key] = 3 /* CONTEXT */ ;
                return ctx[key];
            } else if (!__VUE_OPTIONS_API__ || shouldCacheAccess) accessCache[key] = 4 /* OTHER */ ;
        }
        const publicGetter = publicPropertiesMap[key];
        let cssModule, globalProperties;
        // public $xxx properties
        if (publicGetter) {
            if (key === '$attrs') {
                _reactivity.track(instance, "get" /* GET */ , key);
                markAttrsAccessed();
            }
            return publicGetter(instance);
        } else if (// css module (injected by vue-loader)
        (cssModule = type.__cssModules) && (cssModule = cssModule[key])) return cssModule;
        else if (ctx !== _shared.EMPTY_OBJ && _shared.hasOwn(ctx, key)) {
            // user may set custom properties to `this` that start with `$`
            accessCache[key] = 3 /* CONTEXT */ ;
            return ctx[key];
        } else if (globalProperties = appContext.config.globalProperties, _shared.hasOwn(globalProperties, key)) return globalProperties[key];
        else if (currentRenderingInstance && (!_shared.isString(key) || // #1091 avoid internal isRef/isVNode checks on component instance leading
        // to infinite warning loop
        key.indexOf('__v') !== 0)) {
            if (data !== _shared.EMPTY_OBJ && (key[0] === '$' || key[0] === '_') && _shared.hasOwn(data, key)) warn(`Property ${JSON.stringify(key)} must be accessed via $data because it starts with a reserved ` + `character ("$" or "_") and is not proxied on the render context.`);
            else if (instance === currentRenderingInstance) warn(`Property ${JSON.stringify(key)} was accessed during render ` + `but is not defined on instance.`);
        }
    },
    set ({ _: instance  }, key, value) {
        const { data , setupState , ctx  } = instance;
        if (setupState !== _shared.EMPTY_OBJ && _shared.hasOwn(setupState, key)) setupState[key] = value;
        else if (data !== _shared.EMPTY_OBJ && _shared.hasOwn(data, key)) data[key] = value;
        else if (_shared.hasOwn(instance.props, key)) {
            warn(`Attempting to mutate prop "${key}". Props are readonly.`, instance);
            return false;
        }
        if (key[0] === '$' && key.slice(1) in instance) {
            warn(`Attempting to mutate public property "${key}". ` + `Properties starting with $ are reserved and readonly.`, instance);
            return false;
        } else if (key in instance.appContext.config.globalProperties) Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            value
        });
        else ctx[key] = value;
        return true;
    },
    has ({ _: { data , setupState , accessCache , ctx , appContext , propsOptions  }  }, key) {
        let normalizedProps;
        return accessCache[key] !== undefined || data !== _shared.EMPTY_OBJ && _shared.hasOwn(data, key) || setupState !== _shared.EMPTY_OBJ && _shared.hasOwn(setupState, key) || (normalizedProps = propsOptions[0]) && _shared.hasOwn(normalizedProps, key) || _shared.hasOwn(ctx, key) || _shared.hasOwn(publicPropertiesMap, key) || _shared.hasOwn(appContext.config.globalProperties, key);
    }
};
PublicInstanceProxyHandlers.ownKeys = (target)=>{
    warn(`Avoid app logic that relies on enumerating keys on a component instance. ` + `The keys will be empty in production mode to avoid performance overhead.`);
    return Reflect.ownKeys(target);
};
const RuntimeCompiledPublicInstanceProxyHandlers = /*#__PURE__*/ _shared.extend({
}, PublicInstanceProxyHandlers, {
    get (target, key) {
        // fast path for unscopables when using `with` block
        if (key === Symbol.unscopables) return;
        return PublicInstanceProxyHandlers.get(target, key, target);
    },
    has (_, key) {
        const has = key[0] !== '_' && !_shared.isGloballyWhitelisted(key);
        if (!has && PublicInstanceProxyHandlers.has(_, key)) warn(`Property ${JSON.stringify(key)} should not start with _ which is a reserved prefix for Vue internals.`);
        return has;
    }
});
// dev only
// In dev mode, the proxy target exposes the same properties as seen on `this`
// for easier console inspection. In prod mode it will be an empty object so
// these properties definitions can be skipped.
function createDevRenderContext(instance) {
    const target = {
    };
    // expose internal instance for proxy handlers
    Object.defineProperty(target, `_`, {
        configurable: true,
        enumerable: false,
        get: ()=>instance
    });
    // expose public properties
    Object.keys(publicPropertiesMap).forEach((key)=>{
        Object.defineProperty(target, key, {
            configurable: true,
            enumerable: false,
            get: ()=>publicPropertiesMap[key](instance)
            ,
            // intercepted by the proxy so no need for implementation,
            // but needed to prevent set errors
            set: _shared.NOOP
        });
    });
    return target;
}
// dev only
function exposePropsOnRenderContext(instance) {
    const { ctx , propsOptions: [propsOptions]  } = instance;
    if (propsOptions) Object.keys(propsOptions).forEach((key)=>{
        Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            get: ()=>instance.props[key]
            ,
            set: _shared.NOOP
        });
    });
}
// dev only
function exposeSetupStateOnRenderContext(instance) {
    const { ctx , setupState  } = instance;
    Object.keys(_reactivity.toRaw(setupState)).forEach((key)=>{
        if (!setupState.__isScriptSetup) {
            if (key[0] === '$' || key[0] === '_') {
                warn(`setup() return property ${JSON.stringify(key)} should not start with "$" or "_" ` + `which are reserved prefixes for Vue internals.`);
                return;
            }
            Object.defineProperty(ctx, key, {
                enumerable: true,
                configurable: true,
                get: ()=>setupState[key]
                ,
                set: _shared.NOOP
            });
        }
    });
}
const emptyAppContext = createAppContext();
let uid$1 = 0;
function createComponentInstance(vnode, parent, suspense) {
    const type = vnode.type;
    // inherit parent app context - or - if root, adopt from root vnode
    const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
    const instance = {
        uid: uid$1++,
        vnode,
        type,
        parent,
        appContext,
        root: null,
        next: null,
        subTree: null,
        update: null,
        scope: new _reactivity.EffectScope(true),
        render: null,
        proxy: null,
        exposed: null,
        exposeProxy: null,
        withProxy: null,
        provides: parent ? parent.provides : Object.create(appContext.provides),
        accessCache: null,
        renderCache: [],
        // local resovled assets
        components: null,
        directives: null,
        // resolved props and emits options
        propsOptions: normalizePropsOptions(type, appContext),
        emitsOptions: normalizeEmitsOptions(type, appContext),
        // emit
        emit: null,
        emitted: null,
        // props default value
        propsDefaults: _shared.EMPTY_OBJ,
        // inheritAttrs
        inheritAttrs: type.inheritAttrs,
        // state
        ctx: _shared.EMPTY_OBJ,
        data: _shared.EMPTY_OBJ,
        props: _shared.EMPTY_OBJ,
        attrs: _shared.EMPTY_OBJ,
        slots: _shared.EMPTY_OBJ,
        refs: _shared.EMPTY_OBJ,
        setupState: _shared.EMPTY_OBJ,
        setupContext: null,
        // suspense related
        suspense,
        suspenseId: suspense ? suspense.pendingId : 0,
        asyncDep: null,
        asyncResolved: false,
        // lifecycle hooks
        // not using enums here because it results in computed properties
        isMounted: false,
        isUnmounted: false,
        isDeactivated: false,
        bc: null,
        c: null,
        bm: null,
        m: null,
        bu: null,
        u: null,
        um: null,
        bum: null,
        da: null,
        a: null,
        rtg: null,
        rtc: null,
        ec: null,
        sp: null
    };
    instance.ctx = createDevRenderContext(instance);
    instance.root = parent ? parent.root : instance;
    instance.emit = emit$1.bind(null, instance);
    // apply custom element special handling
    if (vnode.ce) vnode.ce(instance);
    return instance;
}
let currentInstance = null;
const getCurrentInstance = ()=>currentInstance || currentRenderingInstance
;
const setCurrentInstance = (instance)=>{
    currentInstance = instance;
    instance.scope.on();
};
const unsetCurrentInstance = ()=>{
    currentInstance && currentInstance.scope.off();
    currentInstance = null;
};
const isBuiltInTag = /*#__PURE__*/ _shared.makeMap('slot,component');
function validateComponentName(name, config) {
    const appIsNativeTag = config.isNativeTag || _shared.NO;
    if (isBuiltInTag(name) || appIsNativeTag(name)) warn('Do not use built-in or reserved HTML elements as component id: ' + name);
}
function isStatefulComponent(instance) {
    return instance.vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */ ;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false) {
    isInSSRComponentSetup = isSSR;
    const { props , children  } = instance.vnode;
    const isStateful = isStatefulComponent(instance);
    initProps(instance, props, isStateful, isSSR);
    initSlots(instance, children);
    const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : undefined;
    isInSSRComponentSetup = false;
    return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
    const Component = instance.type;
    if (Component.name) validateComponentName(Component.name, instance.appContext.config);
    if (Component.components) {
        const names = Object.keys(Component.components);
        for(let i = 0; i < names.length; i++)validateComponentName(names[i], instance.appContext.config);
    }
    if (Component.directives) {
        const names = Object.keys(Component.directives);
        for(let i = 0; i < names.length; i++)validateDirectiveName(names[i]);
    }
    if (Component.compilerOptions && isRuntimeOnly()) warn(`"compilerOptions" is only supported when using a build of Vue that ` + `includes the runtime compiler. Since you are using a runtime-only ` + `build, the options should be passed via your build tool config instead.`);
    // 0. create render proxy property access cache
    instance.accessCache = Object.create(null);
    // 1. create public instance / render proxy
    // also mark it raw so it's never observed
    instance.proxy = _reactivity.markRaw(new Proxy(instance.ctx, PublicInstanceProxyHandlers));
    exposePropsOnRenderContext(instance);
    // 2. call setup()
    const { setup  } = Component;
    if (setup) {
        const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
        setCurrentInstance(instance);
        _reactivity.pauseTracking();
        const setupResult = callWithErrorHandling(setup, instance, 0 /* SETUP_FUNCTION */ , [
            _reactivity.shallowReadonly(instance.props),
            setupContext
        ]);
        _reactivity.resetTracking();
        unsetCurrentInstance();
        if (_shared.isPromise(setupResult)) {
            setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
            if (isSSR) // return the promise so server-renderer can wait on it
            return setupResult.then((resolvedResult)=>{
                handleSetupResult(instance, resolvedResult, isSSR);
            }).catch((e)=>{
                handleError(e, instance, 0 /* SETUP_FUNCTION */ );
            });
            else // async setup returned Promise.
            // bail here and wait for re-entry.
            instance.asyncDep = setupResult;
        } else handleSetupResult(instance, setupResult, isSSR);
    } else finishComponentSetup(instance, isSSR);
}
function handleSetupResult(instance, setupResult, isSSR) {
    if (_shared.isFunction(setupResult)) {
        // setup returned an inline render function
        if (instance.type.__ssrInlineRender) // when the function's name is `ssrRender` (compiled by SFC inline mode),
        // set it as ssrRender instead.
        instance.ssrRender = setupResult;
        else instance.render = setupResult;
    } else if (_shared.isObject(setupResult)) {
        if (isVNode(setupResult)) warn(`setup() should not return VNodes directly - ` + `return a render function instead.`);
        instance.devtoolsRawSetupState = setupResult;
        instance.setupState = _reactivity.proxyRefs(setupResult);
        exposeSetupStateOnRenderContext(instance);
    } else if (setupResult !== undefined) warn(`setup() should return an object. Received: ${setupResult === null ? 'null' : typeof setupResult}`);
    finishComponentSetup(instance, isSSR);
}
let compile;
let installWithProxy;
/**
 * For runtime-dom to register the compiler.
 * Note the exported method uses any to avoid d.ts relying on the compiler types.
 */ function registerRuntimeCompiler(_compile) {
    compile = _compile;
    installWithProxy = (i)=>{
        if (i.render._rc) i.withProxy = new Proxy(i.ctx, RuntimeCompiledPublicInstanceProxyHandlers);
    };
}
// dev only
const isRuntimeOnly = ()=>!compile
;
function finishComponentSetup(instance, isSSR, skipOptions) {
    const Component = instance.type;
    // template / render function normalization
    // could be already set when returned from setup()
    if (!instance.render) {
        // only do on-the-fly compile if not in SSR - SSR on-the-fly compliation
        // is done by server-renderer
        if (!isSSR && compile && !Component.render) {
            const template = Component.template;
            if (template) {
                startMeasure(instance, `compile`);
                const { isCustomElement , compilerOptions  } = instance.appContext.config;
                const { delimiters , compilerOptions: componentCompilerOptions  } = Component;
                const finalCompilerOptions = _shared.extend(_shared.extend({
                    isCustomElement,
                    delimiters
                }, compilerOptions), componentCompilerOptions);
                Component.render = compile(template, finalCompilerOptions);
                endMeasure(instance, `compile`);
            }
        }
        instance.render = Component.render || _shared.NOOP;
        // for runtime-compiled render functions using `with` blocks, the render
        // proxy used needs a different `has` handler which is more performant and
        // also only allows a whitelist of globals to fallthrough.
        if (installWithProxy) installWithProxy(instance);
    }
    // support for 2.x options
    if (__VUE_OPTIONS_API__ && true) {
        setCurrentInstance(instance);
        _reactivity.pauseTracking();
        applyOptions(instance);
        _reactivity.resetTracking();
        unsetCurrentInstance();
    }
    // warn missing template/render
    // the runtime compilation of template in SSR is done by server-render
    if (!Component.render && instance.render === _shared.NOOP && !isSSR) {
        /* istanbul ignore if */ if (!compile && Component.template) warn(`Component provided template option but ` + `runtime compilation is not supported in this build of Vue.` + ` Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`);
        else warn(`Component is missing template or render function.`);
    }
}
function createAttrsProxy(instance) {
    return new Proxy(instance.attrs, {
        get (target, key) {
            markAttrsAccessed();
            _reactivity.track(instance, "get" /* GET */ , '$attrs');
            return target[key];
        },
        set () {
            warn(`setupContext.attrs is readonly.`);
            return false;
        },
        deleteProperty () {
            warn(`setupContext.attrs is readonly.`);
            return false;
        }
    });
}
function createSetupContext(instance) {
    const expose = (exposed)=>{
        if (instance.exposed) warn(`expose() should be called only once per setup().`);
        instance.exposed = exposed || {
        };
    };
    let attrs;
    // We use getters in dev in case libs like test-utils overwrite instance
    // properties (overwrites should not be done in prod)
    return Object.freeze({
        get attrs () {
            return attrs || (attrs = createAttrsProxy(instance));
        },
        get slots () {
            return _reactivity.shallowReadonly(instance.slots);
        },
        get emit () {
            return (event, ...args)=>instance.emit(event, ...args)
            ;
        },
        expose
    });
}
function getExposeProxy(instance) {
    if (instance.exposed) return instance.exposeProxy || (instance.exposeProxy = new Proxy(_reactivity.proxyRefs(_reactivity.markRaw(instance.exposed)), {
        get (target, key) {
            if (key in target) return target[key];
            else if (key in publicPropertiesMap) return publicPropertiesMap[key](instance);
        }
    }));
}
const classifyRE = /(?:^|[-_])(\w)/g;
const classify = (str)=>str.replace(classifyRE, (c)=>c.toUpperCase()
    ).replace(/[-_]/g, '')
;
function getComponentName(Component) {
    return _shared.isFunction(Component) ? Component.displayName || Component.name : Component.name;
}
/* istanbul ignore next */ function formatComponentName(instance, Component, isRoot = false) {
    let name = getComponentName(Component);
    if (!name && Component.__file) {
        const match = Component.__file.match(/([^/\\]+)\.\w+$/);
        if (match) name = match[1];
    }
    if (!name && instance && instance.parent) {
        // try to infer the name based on reverse resolution
        const inferFromRegistry = (registry)=>{
            for(const key in registry){
                if (registry[key] === Component) return key;
            }
        };
        name = inferFromRegistry(instance.components || instance.parent.type.components) || inferFromRegistry(instance.appContext.components);
    }
    return name ? classify(name) : isRoot ? `App` : `Anonymous`;
}
function isClassComponent(value) {
    return _shared.isFunction(value) && '__vccOpts' in value;
}
const stack = [];
function pushWarningContext(vnode) {
    stack.push(vnode);
}
function popWarningContext() {
    stack.pop();
}
function warn(msg, ...args) {
    // avoid props formatting or warn handler tracking deps that might be mutated
    // during patch, leading to infinite recursion.
    _reactivity.pauseTracking();
    const instance = stack.length ? stack[stack.length - 1].component : null;
    const appWarnHandler = instance && instance.appContext.config.warnHandler;
    const trace = getComponentTrace();
    if (appWarnHandler) callWithErrorHandling(appWarnHandler, instance, 11 /* APP_WARN_HANDLER */ , [
        msg + args.join(''),
        instance && instance.proxy,
        trace.map(({ vnode  })=>`at <${formatComponentName(instance, vnode.type)}>`
        ).join('\n'),
        trace
    ]);
    else {
        const warnArgs = [
            `[Vue warn]: ${msg}`,
            ...args
        ];
        /* istanbul ignore if */ if (trace.length && // avoid spamming console during tests
        true) warnArgs.push(`\n`, ...formatTrace(trace));
        console.warn(...warnArgs);
    }
    _reactivity.resetTracking();
}
function getComponentTrace() {
    let currentVNode = stack[stack.length - 1];
    if (!currentVNode) return [];
    // we can't just use the stack because it will be incomplete during updates
    // that did not start from the root. Re-construct the parent chain using
    // instance parent pointers.
    const normalizedStack = [];
    while(currentVNode){
        const last = normalizedStack[0];
        if (last && last.vnode === currentVNode) last.recurseCount++;
        else normalizedStack.push({
            vnode: currentVNode,
            recurseCount: 0
        });
        const parentInstance = currentVNode.component && currentVNode.component.parent;
        currentVNode = parentInstance && parentInstance.vnode;
    }
    return normalizedStack;
}
/* istanbul ignore next */ function formatTrace(trace) {
    const logs = [];
    trace.forEach((entry, i)=>{
        logs.push(...i === 0 ? [] : [
            `\n`
        ], ...formatTraceEntry(entry));
    });
    return logs;
}
function formatTraceEntry({ vnode , recurseCount  }) {
    const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
    const isRoot = vnode.component ? vnode.component.parent == null : false;
    const open = ` at <${formatComponentName(vnode.component, vnode.type, isRoot)}`;
    const close = `>` + postfix;
    return vnode.props ? [
        open,
        ...formatProps(vnode.props),
        close
    ] : [
        open + close
    ];
}
/* istanbul ignore next */ function formatProps(props) {
    const res = [];
    const keys = Object.keys(props);
    keys.slice(0, 3).forEach((key)=>{
        res.push(...formatProp(key, props[key]));
    });
    if (keys.length > 3) res.push(` ...`);
    return res;
}
/* istanbul ignore next */ function formatProp(key, value, raw) {
    if (_shared.isString(value)) {
        value = JSON.stringify(value);
        return raw ? value : [
            `${key}=${value}`
        ];
    } else if (typeof value === 'number' || typeof value === 'boolean' || value == null) return raw ? value : [
        `${key}=${value}`
    ];
    else if (_reactivity.isRef(value)) {
        value = formatProp(key, _reactivity.toRaw(value.value), true);
        return raw ? value : [
            `${key}=Ref<`,
            value,
            `>`
        ];
    } else if (_shared.isFunction(value)) return [
        `${key}=fn${value.name ? `<${value.name}>` : ``}`
    ];
    else {
        value = _reactivity.toRaw(value);
        return raw ? value : [
            `${key}=`,
            value
        ];
    }
}
const ErrorTypeStrings = {
    ["sp" /* SERVER_PREFETCH */ ]: 'serverPrefetch hook',
    ["bc" /* BEFORE_CREATE */ ]: 'beforeCreate hook',
    ["c" /* CREATED */ ]: 'created hook',
    ["bm" /* BEFORE_MOUNT */ ]: 'beforeMount hook',
    ["m" /* MOUNTED */ ]: 'mounted hook',
    ["bu" /* BEFORE_UPDATE */ ]: 'beforeUpdate hook',
    ["u" /* UPDATED */ ]: 'updated',
    ["bum" /* BEFORE_UNMOUNT */ ]: 'beforeUnmount hook',
    ["um" /* UNMOUNTED */ ]: 'unmounted hook',
    ["a" /* ACTIVATED */ ]: 'activated hook',
    ["da" /* DEACTIVATED */ ]: 'deactivated hook',
    ["ec" /* ERROR_CAPTURED */ ]: 'errorCaptured hook',
    ["rtc" /* RENDER_TRACKED */ ]: 'renderTracked hook',
    ["rtg" /* RENDER_TRIGGERED */ ]: 'renderTriggered hook',
    [0 /* SETUP_FUNCTION */ ]: 'setup function',
    [1 /* RENDER_FUNCTION */ ]: 'render function',
    [2 /* WATCH_GETTER */ ]: 'watcher getter',
    [3 /* WATCH_CALLBACK */ ]: 'watcher callback',
    [4 /* WATCH_CLEANUP */ ]: 'watcher cleanup function',
    [5 /* NATIVE_EVENT_HANDLER */ ]: 'native event handler',
    [6 /* COMPONENT_EVENT_HANDLER */ ]: 'component event handler',
    [7 /* VNODE_HOOK */ ]: 'vnode hook',
    [8 /* DIRECTIVE_HOOK */ ]: 'directive hook',
    [9 /* TRANSITION_HOOK */ ]: 'transition hook',
    [10 /* APP_ERROR_HANDLER */ ]: 'app errorHandler',
    [11 /* APP_WARN_HANDLER */ ]: 'app warnHandler',
    [12 /* FUNCTION_REF */ ]: 'ref function',
    [13 /* ASYNC_COMPONENT_LOADER */ ]: 'async component loader',
    [14 /* SCHEDULER */ ]: "scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-next"
};
function callWithErrorHandling(fn, instance, type, args) {
    let res;
    try {
        res = args ? fn(...args) : fn();
    } catch (err) {
        handleError(err, instance, type);
    }
    return res;
}
function callWithAsyncErrorHandling(fn, instance, type, args) {
    if (_shared.isFunction(fn)) {
        const res = callWithErrorHandling(fn, instance, type, args);
        if (res && _shared.isPromise(res)) res.catch((err)=>{
            handleError(err, instance, type);
        });
        return res;
    }
    const values = [];
    for(let i = 0; i < fn.length; i++)values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));
    return values;
}
function handleError(err, instance, type, throwInDev = true) {
    const contextVNode = instance ? instance.vnode : null;
    if (instance) {
        let cur = instance.parent;
        // the exposed instance is the render proxy to keep it consistent with 2.x
        const exposedInstance = instance.proxy;
        // in production the hook receives only the error code
        const errorInfo = ErrorTypeStrings[type];
        while(cur){
            const errorCapturedHooks = cur.ec;
            if (errorCapturedHooks) for(let i = 0; i < errorCapturedHooks.length; i++){
                if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) return;
            }
            cur = cur.parent;
        }
        // app-level handling
        const appErrorHandler = instance.appContext.config.errorHandler;
        if (appErrorHandler) {
            callWithErrorHandling(appErrorHandler, null, 10 /* APP_ERROR_HANDLER */ , [
                err,
                exposedInstance,
                errorInfo
            ]);
            return;
        }
    }
    logError(err, type, contextVNode, throwInDev);
}
function logError(err, type, contextVNode, throwInDev = true) {
    {
        const info = ErrorTypeStrings[type];
        if (contextVNode) pushWarningContext(contextVNode);
        warn(`Unhandled error${info ? ` during execution of ${info}` : ``}`);
        if (contextVNode) popWarningContext();
        // crash in dev by default so it's more noticeable
        if (throwInDev) throw err;
        else console.error(err);
    }
}
let isFlushing = false;
let isFlushPending = false;
const queue = [];
let flushIndex = 0;
const pendingPreFlushCbs = [];
let activePreFlushCbs = null;
let preFlushIndex = 0;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = Promise.resolve();
let currentFlushPromise = null;
let currentPreFlushParentJob = null;
const RECURSION_LIMIT = 100;
function nextTick(fn) {
    const p = currentFlushPromise || resolvedPromise;
    return fn ? p.then(this ? fn.bind(this) : fn) : p;
}
// #2768
// Use binary-search to find a suitable position in the queue,
// so that the queue maintains the increasing order of job's id,
// which can prevent the job from being skipped and also can avoid repeated patching.
function findInsertionIndex(id) {
    // the start index should be `flushIndex + 1`
    let start = flushIndex + 1;
    let end = queue.length;
    while(start < end){
        const middle = start + end >>> 1;
        const middleJobId = getId(queue[middle]);
        middleJobId < id ? start = middle + 1 : end = middle;
    }
    return start;
}
function queueJob(job) {
    // the dedupe search uses the startIndex argument of Array.includes()
    // by default the search index includes the current job that is being run
    // so it cannot recursively trigger itself again.
    // if the job is a watch() callback, the search will start with a +1 index to
    // allow it recursively trigger itself - it is the user's responsibility to
    // ensure it doesn't end up in an infinite loop.
    if ((!queue.length || !queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) && job !== currentPreFlushParentJob) {
        if (job.id == null) queue.push(job);
        else queue.splice(findInsertionIndex(job.id), 0, job);
        queueFlush();
    }
}
function queueFlush() {
    if (!isFlushing && !isFlushPending) {
        isFlushPending = true;
        currentFlushPromise = resolvedPromise.then(flushJobs);
    }
}
function invalidateJob(job) {
    const i = queue.indexOf(job);
    if (i > flushIndex) queue.splice(i, 1);
}
function queueCb(cb, activeQueue, pendingQueue, index) {
    if (!_shared.isArray(cb)) {
        if (!activeQueue || !activeQueue.includes(cb, cb.allowRecurse ? index + 1 : index)) pendingQueue.push(cb);
    } else // if cb is an array, it is a component lifecycle hook which can only be
    // triggered by a job, which is already deduped in the main queue, so
    // we can skip duplicate check here to improve perf
    pendingQueue.push(...cb);
    queueFlush();
}
function queuePreFlushCb(cb) {
    queueCb(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);
}
function queuePostFlushCb(cb) {
    queueCb(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);
}
function flushPreFlushCbs(seen, parentJob = null) {
    if (pendingPreFlushCbs.length) {
        currentPreFlushParentJob = parentJob;
        activePreFlushCbs = [
            ...new Set(pendingPreFlushCbs)
        ];
        pendingPreFlushCbs.length = 0;
        seen = seen || new Map();
        for(preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++){
            if (checkRecursiveUpdates(seen, activePreFlushCbs[preFlushIndex])) continue;
            activePreFlushCbs[preFlushIndex]();
        }
        activePreFlushCbs = null;
        preFlushIndex = 0;
        currentPreFlushParentJob = null;
        // recursively flush until it drains
        flushPreFlushCbs(seen, parentJob);
    }
}
function flushPostFlushCbs(seen) {
    if (pendingPostFlushCbs.length) {
        const deduped = [
            ...new Set(pendingPostFlushCbs)
        ];
        pendingPostFlushCbs.length = 0;
        // #1947 already has active queue, nested flushPostFlushCbs call
        if (activePostFlushCbs) {
            activePostFlushCbs.push(...deduped);
            return;
        }
        activePostFlushCbs = deduped;
        seen = seen || new Map();
        activePostFlushCbs.sort((a, b)=>getId(a) - getId(b)
        );
        for(postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++){
            if (checkRecursiveUpdates(seen, activePostFlushCbs[postFlushIndex])) continue;
            activePostFlushCbs[postFlushIndex]();
        }
        activePostFlushCbs = null;
        postFlushIndex = 0;
    }
}
const getId = (job)=>job.id == null ? Infinity : job.id
;
function flushJobs(seen) {
    isFlushPending = false;
    isFlushing = true;
    seen = seen || new Map();
    flushPreFlushCbs(seen);
    // Sort queue before flush.
    // This ensures that:
    // 1. Components are updated from parent to child. (because parent is always
    //    created before the child so its render effect will have smaller
    //    priority number)
    // 2. If a component is unmounted during a parent component's update,
    //    its update can be skipped.
    queue.sort((a, b)=>getId(a) - getId(b)
    );
    // conditional usage of checkRecursiveUpdate must be determined out of
    // try ... catch block since Rollup by default de-optimizes treeshaking
    // inside try-catch. This can leave all warning code unshaked. Although
    // they would get eventually shaken by a minifier like terser, some minifiers
    // would fail to do that (e.g. https://github.com/evanw/esbuild/issues/1610)
    const check = (job)=>checkRecursiveUpdates(seen, job)
    ;
    try {
        for(flushIndex = 0; flushIndex < queue.length; flushIndex++){
            const job = queue[flushIndex];
            if (job && job.active !== false) {
                if (check(job)) continue;
                // console.log(`running:`, job.id)
                callWithErrorHandling(job, null, 14 /* SCHEDULER */ );
            }
        }
    } finally{
        flushIndex = 0;
        queue.length = 0;
        flushPostFlushCbs(seen);
        isFlushing = false;
        currentFlushPromise = null;
        // some postFlushCb queued jobs!
        // keep flushing until it drains.
        if (queue.length || pendingPreFlushCbs.length || pendingPostFlushCbs.length) flushJobs(seen);
    }
}
function checkRecursiveUpdates(seen, fn) {
    if (!seen.has(fn)) seen.set(fn, 1);
    else {
        const count = seen.get(fn);
        if (count > RECURSION_LIMIT) {
            const instance = fn.ownerInstance;
            const componentName = instance && getComponentName(instance.type);
            warn(`Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. ` + `This means you have a reactive effect that is mutating its own ` + `dependencies and thus recursively triggering itself. Possible sources ` + `include component template, render function, updated hook or ` + `watcher source function.`);
            return true;
        } else seen.set(fn, count + 1);
    }
}
// Simple effect.
function watchEffect(effect, options) {
    return doWatch(effect, null, options);
}
function watchPostEffect(effect, options) {
    return doWatch(effect, null, Object.assign(options || {
    }, {
        flush: 'post'
    }));
}
function watchSyncEffect(effect, options) {
    return doWatch(effect, null, Object.assign(options || {
    }, {
        flush: 'sync'
    }));
}
// initial value for watchers to trigger on undefined initial values
const INITIAL_WATCHER_VALUE = {
};
// implementation
function watch(source, cb, options) {
    if (!_shared.isFunction(cb)) warn(`\`watch(fn, options?)\` signature has been moved to a separate API. ` + `Use \`watchEffect(fn, options?)\` instead. \`watch\` now only ` + `supports \`watch(source, cb, options?) signature.`);
    return doWatch(source, cb, options);
}
function doWatch(source, cb, { immediate , deep , flush , onTrack , onTrigger  } = _shared.EMPTY_OBJ) {
    if (!cb) {
        if (immediate !== undefined) warn(`watch() "immediate" option is only respected when using the ` + `watch(source, callback, options?) signature.`);
        if (deep !== undefined) warn(`watch() "deep" option is only respected when using the ` + `watch(source, callback, options?) signature.`);
    }
    const warnInvalidSource = (s)=>{
        warn(`Invalid watch source: `, s, `A watch source can only be a getter/effect function, a ref, ` + `a reactive object, or an array of these types.`);
    };
    const instance = currentInstance;
    let getter;
    let forceTrigger = false;
    let isMultiSource = false;
    if (_reactivity.isRef(source)) {
        getter = ()=>source.value
        ;
        forceTrigger = !!source._shallow;
    } else if (_reactivity.isReactive(source)) {
        getter = ()=>source
        ;
        deep = true;
    } else if (_shared.isArray(source)) {
        isMultiSource = true;
        forceTrigger = source.some(_reactivity.isReactive);
        getter = ()=>source.map((s)=>{
                if (_reactivity.isRef(s)) return s.value;
                else if (_reactivity.isReactive(s)) return traverse(s);
                else if (_shared.isFunction(s)) return callWithErrorHandling(s, instance, 2 /* WATCH_GETTER */ );
                else warnInvalidSource(s);
            })
        ;
    } else if (_shared.isFunction(source)) {
        if (cb) // getter with cb
        getter = ()=>callWithErrorHandling(source, instance, 2 /* WATCH_GETTER */ )
        ;
        else // no cb -> simple effect
        getter = ()=>{
            if (instance && instance.isUnmounted) return;
            if (cleanup) cleanup();
            return callWithAsyncErrorHandling(source, instance, 3 /* WATCH_CALLBACK */ , [
                onInvalidate
            ]);
        };
    } else {
        getter = _shared.NOOP;
        warnInvalidSource(source);
    }
    if (cb && deep) {
        const baseGetter = getter;
        getter = ()=>traverse(baseGetter())
        ;
    }
    let cleanup;
    let onInvalidate = (fn)=>{
        cleanup = effect.onStop = ()=>{
            callWithErrorHandling(fn, instance, 4 /* WATCH_CLEANUP */ );
        };
    };
    // in SSR there is no need to setup an actual effect, and it should be noop
    // unless it's eager
    if (isInSSRComponentSetup) {
        // we will also not call the invalidate callback (+ runner is not set up)
        onInvalidate = _shared.NOOP;
        if (!cb) getter();
        else if (immediate) callWithAsyncErrorHandling(cb, instance, 3 /* WATCH_CALLBACK */ , [
            getter(),
            isMultiSource ? [] : undefined,
            onInvalidate
        ]);
        return _shared.NOOP;
    }
    let oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;
    const job = ()=>{
        if (!effect.active) return;
        if (cb) {
            // watch(source, cb)
            const newValue = effect.run();
            if (deep || forceTrigger || (isMultiSource ? newValue.some((v, i)=>_shared.hasChanged(v, oldValue[i])
            ) : _shared.hasChanged(newValue, oldValue)) || false) {
                // cleanup before running cb again
                if (cleanup) cleanup();
                callWithAsyncErrorHandling(cb, instance, 3 /* WATCH_CALLBACK */ , [
                    newValue,
                    // pass undefined as the old value when it's changed for the first time
                    oldValue === INITIAL_WATCHER_VALUE ? undefined : oldValue,
                    onInvalidate
                ]);
                oldValue = newValue;
            }
        } else // watchEffect
        effect.run();
    };
    // important: mark the job as a watcher callback so that scheduler knows
    // it is allowed to self-trigger (#1727)
    job.allowRecurse = !!cb;
    let scheduler;
    if (flush === 'sync') scheduler = job; // the scheduler function gets called directly
    else if (flush === 'post') scheduler = ()=>queuePostRenderEffect(job, instance && instance.suspense)
    ;
    else // default: 'pre'
    scheduler = ()=>{
        if (!instance || instance.isMounted) queuePreFlushCb(job);
        else // with 'pre' option, the first call must happen before
        // the component is mounted so it is called synchronously.
        job();
    };
    const effect = new _reactivity.ReactiveEffect(getter, scheduler);
    effect.onTrack = onTrack;
    effect.onTrigger = onTrigger;
    // initial run
    if (cb) {
        if (immediate) job();
        else oldValue = effect.run();
    } else if (flush === 'post') queuePostRenderEffect(effect.run.bind(effect), instance && instance.suspense);
    else effect.run();
    return ()=>{
        effect.stop();
        if (instance && instance.scope) _shared.remove(instance.scope.effects, effect);
    };
}
// this.$watch
function instanceWatch(source, value, options) {
    const publicThis = this.proxy;
    const getter = _shared.isString(source) ? source.includes('.') ? createPathGetter(publicThis, source) : ()=>publicThis[source]
     : source.bind(publicThis, publicThis);
    let cb;
    if (_shared.isFunction(value)) cb = value;
    else {
        cb = value.handler;
        options = value;
    }
    const cur = currentInstance;
    setCurrentInstance(this);
    const res = doWatch(getter, cb.bind(publicThis), options);
    if (cur) setCurrentInstance(cur);
    else unsetCurrentInstance();
    return res;
}
function createPathGetter(ctx, path) {
    const segments = path.split('.');
    return ()=>{
        let cur = ctx;
        for(let i = 0; i < segments.length && cur; i++)cur = cur[segments[i]];
        return cur;
    };
}
function traverse(value, seen) {
    if (!_shared.isObject(value) || value["__v_skip" /* SKIP */ ]) return value;
    seen = seen || new Set();
    if (seen.has(value)) return value;
    seen.add(value);
    if (_reactivity.isRef(value)) traverse(value.value, seen);
    else if (_shared.isArray(value)) for(let i = 0; i < value.length; i++)traverse(value[i], seen);
    else if (_shared.isSet(value) || _shared.isMap(value)) value.forEach((v)=>{
        traverse(v, seen);
    });
    else if (_shared.isPlainObject(value)) for(const key in value)traverse(value[key], seen);
    return value;
}
// dev only
const warnRuntimeUsage = (method)=>warn(`${method}() is a compiler-hint helper that is only usable inside ` + `<script setup> of a single file component. Its arguments should be ` + `compiled away and passing it at runtime has no effect.`)
;
// implementation
function defineProps() {
    warnRuntimeUsage(`defineProps`);
    return null;
}
// implementation
function defineEmits() {
    warnRuntimeUsage(`defineEmits`);
    return null;
}
/**
 * Vue `<script setup>` compiler macro for declaring a component's exposed
 * instance properties when it is accessed by a parent component via template
 * refs.
 *
 * `<script setup>` components are closed by default - i.e. varaibles inside
 * the `<script setup>` scope is not exposed to parent unless explicitly exposed
 * via `defineExpose`.
 *
 * This is only usable inside `<script setup>`, is compiled away in the
 * output and should **not** be actually called at runtime.
 */ function defineExpose(exposed) {
    warnRuntimeUsage(`defineExpose`);
}
/**
 * Vue `<script setup>` compiler macro for providing props default values when
 * using type-based `defineProps` declaration.
 *
 * Example usage:
 * ```ts
 * withDefaults(defineProps<{
 *   size?: number
 *   labels?: string[]
 * }>(), {
 *   size: 3,
 *   labels: () => ['default label']
 * })
 * ```
 *
 * This is only usable inside `<script setup>`, is compiled away in the output
 * and should **not** be actually called at runtime.
 */ function withDefaults(props, defaults) {
    warnRuntimeUsage(`withDefaults`);
    return null;
}
function useSlots() {
    return getContext().slots;
}
function useAttrs() {
    return getContext().attrs;
}
function getContext() {
    const i = getCurrentInstance();
    if (!i) warn(`useContext() called without active instance.`);
    return i.setupContext || (i.setupContext = createSetupContext(i));
}
/**
 * Runtime helper for merging default declarations. Imported by compiled code
 * only.
 * @internal
 */ function mergeDefaults(raw, defaults) {
    const props = _shared.isArray(raw) ? raw.reduce((normalized, p)=>(normalized[p] = {
        }, normalized)
    , {
    }) : raw;
    for(const key in defaults){
        const opt = props[key];
        if (opt) {
            if (_shared.isArray(opt) || _shared.isFunction(opt)) props[key] = {
                type: opt,
                default: defaults[key]
            };
            else opt.default = defaults[key];
        } else if (opt === null) props[key] = {
            default: defaults[key]
        };
        else warn(`props default key "${key}" has no corresponding declaration.`);
    }
    return props;
}
/**
 * Used to create a proxy for the rest element when destructuring props with
 * defineProps().
 * @internal
 */ function createPropsRestProxy(props, excludedKeys) {
    const ret = {
    };
    for(const key in props)if (!excludedKeys.includes(key)) Object.defineProperty(ret, key, {
        enumerable: true,
        get: ()=>props[key]
    });
    return ret;
}
/**
 * `<script setup>` helper for persisting the current instance context over
 * async/await flows.
 *
 * `@vue/compiler-sfc` converts the following:
 *
 * ```ts
 * const x = await foo()
 * ```
 *
 * into:
 *
 * ```ts
 * let __temp, __restore
 * const x = (([__temp, __restore] = withAsyncContext(() => foo())),__temp=await __temp,__restore(),__temp)
 * ```
 * @internal
 */ function withAsyncContext(getAwaitable) {
    const ctx = getCurrentInstance();
    if (!ctx) warn(`withAsyncContext called without active current instance. ` + `This is likely a bug.`);
    let awaitable = getAwaitable();
    unsetCurrentInstance();
    if (_shared.isPromise(awaitable)) awaitable = awaitable.catch((e)=>{
        setCurrentInstance(ctx);
        throw e;
    });
    return [
        awaitable,
        ()=>setCurrentInstance(ctx)
    ];
}
// Actual implementation
function h1(type, propsOrChildren, children) {
    const l = arguments.length;
    if (l === 2) {
        if (_shared.isObject(propsOrChildren) && !_shared.isArray(propsOrChildren)) {
            // single vnode without props
            if (isVNode(propsOrChildren)) return createVNode(type, null, [
                propsOrChildren
            ]);
            // props without children
            return createVNode(type, propsOrChildren);
        } else // omit props
        return createVNode(type, null, propsOrChildren);
    } else {
        if (l > 3) children = Array.prototype.slice.call(arguments, 2);
        else if (l === 3 && isVNode(children)) children = [
            children
        ];
        return createVNode(type, propsOrChildren, children);
    }
}
const ssrContextKey = Symbol(`ssrContext`);
const useSSRContext = ()=>{
    {
        const ctx = inject(ssrContextKey);
        if (!ctx) warn(`Server rendering context not provided. Make sure to only call ` + `useSSRContext() conditionally in the server build.`);
        return ctx;
    }
};
function initCustomFormatter() {
    /* eslint-disable no-restricted-globals */ if (typeof window === 'undefined') return;
    const vueStyle = {
        style: 'color:#3ba776'
    };
    const numberStyle = {
        style: 'color:#0b1bc9'
    };
    const stringStyle = {
        style: 'color:#b62e24'
    };
    const keywordStyle = {
        style: 'color:#9d288c'
    };
    // custom formatter for Chrome
    // https://www.mattzeunert.com/2016/02/19/custom-chrome-devtools-object-formatters.html
    const formatter = {
        header (obj) {
            // TODO also format ComponentPublicInstance & ctx.slots/attrs in setup
            if (!_shared.isObject(obj)) return null;
            if (obj.__isVue) return [
                'div',
                vueStyle,
                `VueInstance`
            ];
            else if (_reactivity.isRef(obj)) return [
                'div',
                {
                },
                [
                    'span',
                    vueStyle,
                    genRefFlag(obj)
                ],
                '<',
                formatValue(obj.value),
                `>`
            ];
            else if (_reactivity.isReactive(obj)) return [
                'div',
                {
                },
                [
                    'span',
                    vueStyle,
                    'Reactive'
                ],
                '<',
                formatValue(obj),
                `>${_reactivity.isReadonly(obj) ? ` (readonly)` : ``}`
            ];
            else if (_reactivity.isReadonly(obj)) return [
                'div',
                {
                },
                [
                    'span',
                    vueStyle,
                    'Readonly'
                ],
                '<',
                formatValue(obj),
                '>'
            ];
            return null;
        },
        hasBody (obj) {
            return obj && obj.__isVue;
        },
        body (obj) {
            if (obj && obj.__isVue) return [
                'div',
                {
                },
                ...formatInstance(obj.$)
            ];
        }
    };
    function formatInstance(instance) {
        const blocks = [];
        if (instance.type.props && instance.props) blocks.push(createInstanceBlock('props', _reactivity.toRaw(instance.props)));
        if (instance.setupState !== _shared.EMPTY_OBJ) blocks.push(createInstanceBlock('setup', instance.setupState));
        if (instance.data !== _shared.EMPTY_OBJ) blocks.push(createInstanceBlock('data', _reactivity.toRaw(instance.data)));
        const computed = extractKeys(instance, 'computed');
        if (computed) blocks.push(createInstanceBlock('computed', computed));
        const injected = extractKeys(instance, 'inject');
        if (injected) blocks.push(createInstanceBlock('injected', injected));
        blocks.push([
            'div',
            {
            },
            [
                'span',
                {
                    style: keywordStyle.style + ';opacity:0.66'
                },
                '$ (internal): '
            ],
            [
                'object',
                {
                    object: instance
                }
            ]
        ]);
        return blocks;
    }
    function createInstanceBlock(type, target) {
        target = _shared.extend({
        }, target);
        if (!Object.keys(target).length) return [
            'span',
            {
            }
        ];
        return [
            'div',
            {
                style: 'line-height:1.25em;margin-bottom:0.6em'
            },
            [
                'div',
                {
                    style: 'color:#476582'
                },
                type
            ],
            [
                'div',
                {
                    style: 'padding-left:1.25em'
                },
                ...Object.keys(target).map((key)=>{
                    return [
                        'div',
                        {
                        },
                        [
                            'span',
                            keywordStyle,
                            key + ': '
                        ],
                        formatValue(target[key], false)
                    ];
                })
            ]
        ];
    }
    function formatValue(v, asRaw = true) {
        if (typeof v === 'number') return [
            'span',
            numberStyle,
            v
        ];
        else if (typeof v === 'string') return [
            'span',
            stringStyle,
            JSON.stringify(v)
        ];
        else if (typeof v === 'boolean') return [
            'span',
            keywordStyle,
            v
        ];
        else if (_shared.isObject(v)) return [
            'object',
            {
                object: asRaw ? _reactivity.toRaw(v) : v
            }
        ];
        else return [
            'span',
            stringStyle,
            String(v)
        ];
    }
    function extractKeys(instance, type) {
        const Comp = instance.type;
        if (_shared.isFunction(Comp)) return;
        const extracted = {
        };
        for(const key in instance.ctx)if (isKeyOfType(Comp, key, type)) extracted[key] = instance.ctx[key];
        return extracted;
    }
    function isKeyOfType(Comp, key, type) {
        const opts = Comp[type];
        if (_shared.isArray(opts) && opts.includes(key) || _shared.isObject(opts) && key in opts) return true;
        if (Comp.extends && isKeyOfType(Comp.extends, key, type)) return true;
        if (Comp.mixins && Comp.mixins.some((m)=>isKeyOfType(m, key, type)
        )) return true;
    }
    function genRefFlag(v) {
        if (v._shallow) return `ShallowRef`;
        if (v.effect) return `ComputedRef`;
        return `Ref`;
    }
    if (window.devtoolsFormatters) window.devtoolsFormatters.push(formatter);
    else window.devtoolsFormatters = [
        formatter
    ];
}
function withMemo(memo, render, cache, index) {
    const cached = cache[index];
    if (cached && isMemoSame(cached, memo)) return cached;
    const ret = render();
    // shallow clone
    ret.memo = memo.slice();
    return cache[index] = ret;
}
function isMemoSame(cached, memo) {
    const prev = cached.memo;
    if (prev.length != memo.length) return false;
    for(let i = 0; i < prev.length; i++){
        if (prev[i] !== memo[i]) return false;
    }
    // make sure to let parent block track it when returning cached
    if (isBlockTreeEnabled > 0 && currentBlock) currentBlock.push(cached);
    return true;
}
// Core API ------------------------------------------------------------------
const version1 = "3.2.22";
const _ssrUtils = {
    createComponentInstance,
    setupComponent,
    renderComponentRoot,
    setCurrentRenderingInstance,
    isVNode,
    normalizeVNode
};
/**
 * SSR utils for \@vue/server-renderer. Only exposed in cjs builds.
 * @internal
 */ const ssrUtils = _ssrUtils;
/**
 * @internal only exposed in compat builds
 */ const resolveFilter = null;
/**
 * @internal only exposed in compat builds.
 */ const compatUtils = null;

},{"@vue/reactivity":"2XkY1","@vue/shared":"gBrWj","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2XkY1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EffectScope", ()=>EffectScope
);
parcelHelpers.export(exports, "ITERATE_KEY", ()=>ITERATE_KEY
);
parcelHelpers.export(exports, "ReactiveEffect", ()=>ReactiveEffect
);
parcelHelpers.export(exports, "computed", ()=>computed
);
parcelHelpers.export(exports, "customRef", ()=>customRef
);
parcelHelpers.export(exports, "deferredComputed", ()=>deferredComputed
);
parcelHelpers.export(exports, "effect", ()=>effect1
);
parcelHelpers.export(exports, "effectScope", ()=>effectScope
);
parcelHelpers.export(exports, "enableTracking", ()=>enableTracking
);
parcelHelpers.export(exports, "getCurrentScope", ()=>getCurrentScope
);
parcelHelpers.export(exports, "isProxy", ()=>isProxy
);
parcelHelpers.export(exports, "isReactive", ()=>isReactive
);
parcelHelpers.export(exports, "isReadonly", ()=>isReadonly1
);
parcelHelpers.export(exports, "isRef", ()=>isRef
);
parcelHelpers.export(exports, "markRaw", ()=>markRaw
);
parcelHelpers.export(exports, "onScopeDispose", ()=>onScopeDispose
);
parcelHelpers.export(exports, "pauseTracking", ()=>pauseTracking
);
parcelHelpers.export(exports, "proxyRefs", ()=>proxyRefs
);
parcelHelpers.export(exports, "reactive", ()=>reactive
);
parcelHelpers.export(exports, "readonly", ()=>readonly
);
parcelHelpers.export(exports, "ref", ()=>ref1
);
parcelHelpers.export(exports, "resetTracking", ()=>resetTracking
);
parcelHelpers.export(exports, "shallowReactive", ()=>shallowReactive
);
parcelHelpers.export(exports, "shallowReadonly", ()=>shallowReadonly
);
parcelHelpers.export(exports, "shallowRef", ()=>shallowRef
);
parcelHelpers.export(exports, "stop", ()=>stop
);
parcelHelpers.export(exports, "toRaw", ()=>toRaw
);
parcelHelpers.export(exports, "toRef", ()=>toRef
);
parcelHelpers.export(exports, "toRefs", ()=>toRefs
);
parcelHelpers.export(exports, "track", ()=>track
);
parcelHelpers.export(exports, "trigger", ()=>trigger
);
parcelHelpers.export(exports, "triggerRef", ()=>triggerRef
);
parcelHelpers.export(exports, "unref", ()=>unref
);
var _shared = require("@vue/shared");
function warn(msg, ...args) {
    console.warn(`[Vue warn] ${msg}`, ...args);
}
let activeEffectScope;
const effectScopeStack = [];
class EffectScope {
    constructor(detached1 = false){
        this.active = true;
        this.effects = [];
        this.cleanups = [];
        if (!detached1 && activeEffectScope) {
            this.parent = activeEffectScope;
            this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
        }
    }
    run(fn1) {
        if (this.active) try {
            this.on();
            return fn1();
        } finally{
            this.off();
        }
        else warn(`cannot run an inactive effect scope.`);
    }
    on() {
        if (this.active) {
            effectScopeStack.push(this);
            activeEffectScope = this;
        }
    }
    off() {
        if (this.active) {
            effectScopeStack.pop();
            activeEffectScope = effectScopeStack[effectScopeStack.length - 1];
        }
    }
    stop(fromParent) {
        if (this.active) {
            this.effects.forEach((e)=>e.stop()
            );
            this.cleanups.forEach((cleanup)=>cleanup()
            );
            if (this.scopes) this.scopes.forEach((e)=>e.stop(true)
            );
            // nested scope, dereference from parent to avoid memory leaks
            if (this.parent && !fromParent) {
                // optimized O(1) removal
                const last = this.parent.scopes.pop();
                if (last && last !== this) {
                    this.parent.scopes[this.index] = last;
                    last.index = this.index;
                }
            }
            this.active = false;
        }
    }
}
function effectScope(detached) {
    return new EffectScope(detached);
}
function recordEffectScope(effect, scope) {
    scope = scope || activeEffectScope;
    if (scope && scope.active) scope.effects.push(effect);
}
function getCurrentScope() {
    return activeEffectScope;
}
function onScopeDispose(fn) {
    if (activeEffectScope) activeEffectScope.cleanups.push(fn);
    else warn(`onScopeDispose() is called when there is no active effect scope` + ` to be associated with.`);
}
const createDep = (effects)=>{
    const dep = new Set(effects);
    dep.w = 0;
    dep.n = 0;
    return dep;
};
const wasTracked = (dep)=>(dep.w & trackOpBit) > 0
;
const newTracked = (dep)=>(dep.n & trackOpBit) > 0
;
const initDepMarkers = ({ deps  })=>{
    if (deps.length) for(let i = 0; i < deps.length; i++)deps[i].w |= trackOpBit; // set was tracked
};
const finalizeDepMarkers = (effect)=>{
    const { deps  } = effect;
    if (deps.length) {
        let ptr = 0;
        for(let i = 0; i < deps.length; i++){
            const dep = deps[i];
            if (wasTracked(dep) && !newTracked(dep)) dep.delete(effect);
            else deps[ptr++] = dep;
            // clear bits
            dep.w &= ~trackOpBit;
            dep.n &= ~trackOpBit;
        }
        deps.length = ptr;
    }
};
const targetMap = new WeakMap();
// The number of effects currently being tracked recursively.
let effectTrackDepth = 0;
let trackOpBit = 1;
/**
 * The bitwise track markers support at most 30 levels op recursion.
 * This value is chosen to enable modern JS engines to use a SMI on all platforms.
 * When recursion depth is greater, fall back to using a full cleanup.
 */ const maxMarkerBits = 30;
const effectStack = [];
let activeEffect;
const ITERATE_KEY = Symbol('iterate');
const MAP_KEY_ITERATE_KEY = Symbol('Map key iterate');
class ReactiveEffect {
    constructor(fn2, scheduler1 = null, scope){
        this.fn = fn2;
        this.scheduler = scheduler1;
        this.active = true;
        this.deps = [];
        recordEffectScope(this, scope);
    }
    run() {
        if (!this.active) return this.fn();
        if (!effectStack.includes(this)) try {
            effectStack.push(activeEffect = this);
            enableTracking();
            trackOpBit = 1 << ++effectTrackDepth;
            if (effectTrackDepth <= maxMarkerBits) initDepMarkers(this);
            else cleanupEffect(this);
            return this.fn();
        } finally{
            if (effectTrackDepth <= maxMarkerBits) finalizeDepMarkers(this);
            trackOpBit = 1 << --effectTrackDepth;
            resetTracking();
            effectStack.pop();
            const n = effectStack.length;
            activeEffect = n > 0 ? effectStack[n - 1] : undefined;
        }
    }
    stop() {
        if (this.active) {
            cleanupEffect(this);
            if (this.onStop) this.onStop();
            this.active = false;
        }
    }
}
function cleanupEffect(effect) {
    const { deps  } = effect;
    if (deps.length) {
        for(let i = 0; i < deps.length; i++)deps[i].delete(effect);
        deps.length = 0;
    }
}
function effect1(fn, options) {
    if (fn.effect) fn = fn.effect.fn;
    const _effect = new ReactiveEffect(fn);
    if (options) {
        _shared.extend(_effect, options);
        if (options.scope) recordEffectScope(_effect, options.scope);
    }
    if (!options || !options.lazy) _effect.run();
    const runner = _effect.run.bind(_effect);
    runner.effect = _effect;
    return runner;
}
function stop(runner) {
    runner.effect.stop();
}
let shouldTrack1 = true;
const trackStack = [];
function pauseTracking() {
    trackStack.push(shouldTrack1);
    shouldTrack1 = false;
}
function enableTracking() {
    trackStack.push(shouldTrack1);
    shouldTrack1 = true;
}
function resetTracking() {
    const last = trackStack.pop();
    shouldTrack1 = last === undefined ? true : last;
}
function track(target, type, key) {
    if (!isTracking()) return;
    let depsMap = targetMap.get(target);
    if (!depsMap) targetMap.set(target, depsMap = new Map());
    let dep = depsMap.get(key);
    if (!dep) depsMap.set(key, dep = createDep());
    const eventInfo = {
        effect: activeEffect,
        target,
        type,
        key
    };
    trackEffects(dep, eventInfo);
}
function isTracking() {
    return shouldTrack1 && activeEffect !== undefined;
}
function trackEffects(dep, debuggerEventExtraInfo) {
    let shouldTrack = false;
    if (effectTrackDepth <= maxMarkerBits) {
        if (!newTracked(dep)) {
            dep.n |= trackOpBit; // set newly tracked
            shouldTrack = !wasTracked(dep);
        }
    } else // Full cleanup mode.
    shouldTrack = !dep.has(activeEffect);
    if (shouldTrack) {
        dep.add(activeEffect);
        activeEffect.deps.push(dep);
        if (activeEffect.onTrack) activeEffect.onTrack(Object.assign({
            effect: activeEffect
        }, debuggerEventExtraInfo));
    }
}
function trigger(target, type, key1, newValue, oldValue, oldTarget) {
    const depsMap = targetMap.get(target);
    if (!depsMap) // never been tracked
    return;
    let deps = [];
    if (type === "clear" /* CLEAR */ ) // collection being cleared
    // trigger all effects for target
    deps = [
        ...depsMap.values()
    ];
    else if (key1 === 'length' && _shared.isArray(target)) depsMap.forEach((dep, key)=>{
        if (key === 'length' || key >= newValue) deps.push(dep);
    });
    else {
        // schedule runs for SET | ADD | DELETE
        if (key1 !== void 0) deps.push(depsMap.get(key1));
        // also run for iteration key on ADD | DELETE | Map.SET
        switch(type){
            case "add" /* ADD */ :
                if (!_shared.isArray(target)) {
                    deps.push(depsMap.get(ITERATE_KEY));
                    if (_shared.isMap(target)) deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
                } else if (_shared.isIntegerKey(key1)) // new index added to array -> length changes
                deps.push(depsMap.get('length'));
                break;
            case "delete" /* DELETE */ :
                if (!_shared.isArray(target)) {
                    deps.push(depsMap.get(ITERATE_KEY));
                    if (_shared.isMap(target)) deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
                }
                break;
            case "set" /* SET */ :
                if (_shared.isMap(target)) deps.push(depsMap.get(ITERATE_KEY));
                break;
        }
    }
    const eventInfo = {
        target,
        type,
        key: key1,
        newValue,
        oldValue,
        oldTarget
    };
    if (deps.length === 1) {
        if (deps[0]) triggerEffects(deps[0], eventInfo);
    } else {
        const effects = [];
        for (const dep of deps)if (dep) effects.push(...dep);
        triggerEffects(createDep(effects), eventInfo);
    }
}
function triggerEffects(dep, debuggerEventExtraInfo) {
    // spread into array for stabilization
    for (const effect of _shared.isArray(dep) ? dep : [
        ...dep
    ])if (effect !== activeEffect || effect.allowRecurse) {
        if (effect.onTrigger) effect.onTrigger(_shared.extend({
            effect
        }, debuggerEventExtraInfo));
        if (effect.scheduler) effect.scheduler();
        else effect.run();
    }
}
const isNonTrackableKeys = /*#__PURE__*/ _shared.makeMap(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map((key)=>Symbol[key]
).filter(_shared.isSymbol));
const get1 = /*#__PURE__*/ createGetter();
const shallowGet = /*#__PURE__*/ createGetter(false, true);
const readonlyGet = /*#__PURE__*/ createGetter(true);
const shallowReadonlyGet = /*#__PURE__*/ createGetter(true, true);
const arrayInstrumentations = /*#__PURE__*/ createArrayInstrumentations();
function createArrayInstrumentations() {
    const instrumentations = {
    };
    [
        'includes',
        'indexOf',
        'lastIndexOf'
    ].forEach((key)=>{
        instrumentations[key] = function(...args) {
            const arr = toRaw(this);
            for(let i = 0, l = this.length; i < l; i++)track(arr, "get" /* GET */ , i + '');
            // we run the method using the original args first (which may be reactive)
            const res = arr[key](...args);
            if (res === -1 || res === false) // if that didn't work, run it again using raw values.
            return arr[key](...args.map(toRaw));
            else return res;
        };
    });
    [
        'push',
        'pop',
        'shift',
        'unshift',
        'splice'
    ].forEach((key)=>{
        instrumentations[key] = function(...args) {
            pauseTracking();
            const res = toRaw(this)[key].apply(this, args);
            resetTracking();
            return res;
        };
    });
    return instrumentations;
}
function createGetter(isReadonly = false, shallow = false) {
    return function get(target, key, receiver) {
        if (key === "__v_isReactive" /* IS_REACTIVE */ ) return !isReadonly;
        else if (key === "__v_isReadonly" /* IS_READONLY */ ) return isReadonly;
        else if (key === "__v_raw" /* RAW */  && receiver === (isReadonly ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) return target;
        const targetIsArray = _shared.isArray(target);
        if (!isReadonly && targetIsArray && _shared.hasOwn(arrayInstrumentations, key)) return Reflect.get(arrayInstrumentations, key, receiver);
        const res = Reflect.get(target, key, receiver);
        if (_shared.isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) return res;
        if (!isReadonly) track(target, "get" /* GET */ , key);
        if (shallow) return res;
        if (isRef(res)) {
            // ref unwrapping - does not apply for Array + integer key.
            const shouldUnwrap = !targetIsArray || !_shared.isIntegerKey(key);
            return shouldUnwrap ? res.value : res;
        }
        if (_shared.isObject(res)) // Convert returned value into a proxy as well. we do the isObject check
        // here to avoid invalid value warning. Also need to lazy access readonly
        // and reactive here to avoid circular dependency.
        return isReadonly ? readonly(res) : reactive(res);
        return res;
    };
}
const set = /*#__PURE__*/ createSetter();
const shallowSet = /*#__PURE__*/ createSetter(true);
function createSetter(shallow = false) {
    return function set(target, key, value, receiver) {
        let oldValue = target[key];
        if (!shallow) {
            value = toRaw(value);
            oldValue = toRaw(oldValue);
            if (!_shared.isArray(target) && isRef(oldValue) && !isRef(value)) {
                oldValue.value = value;
                return true;
            }
        }
        const hadKey = _shared.isArray(target) && _shared.isIntegerKey(key) ? Number(key) < target.length : _shared.hasOwn(target, key);
        const result = Reflect.set(target, key, value, receiver);
        // don't trigger if target is something up in the prototype chain of original
        if (target === toRaw(receiver)) {
            if (!hadKey) trigger(target, "add" /* ADD */ , key, value);
            else if (_shared.hasChanged(value, oldValue)) trigger(target, "set" /* SET */ , key, value, oldValue);
        }
        return result;
    };
}
function deleteProperty(target, key) {
    const hadKey = _shared.hasOwn(target, key);
    const oldValue = target[key];
    const result = Reflect.deleteProperty(target, key);
    if (result && hadKey) trigger(target, "delete" /* DELETE */ , key, undefined, oldValue);
    return result;
}
function has1(target, key) {
    const result = Reflect.has(target, key);
    if (!_shared.isSymbol(key) || !builtInSymbols.has(key)) track(target, "has" /* HAS */ , key);
    return result;
}
function ownKeys(target) {
    track(target, "iterate" /* ITERATE */ , _shared.isArray(target) ? 'length' : ITERATE_KEY);
    return Reflect.ownKeys(target);
}
const mutableHandlers = {
    get: get1,
    set,
    deleteProperty,
    has: has1,
    ownKeys
};
const readonlyHandlers = {
    get: readonlyGet,
    set (target, key) {
        console.warn(`Set operation on key "${String(key)}" failed: target is readonly.`, target);
        return true;
    },
    deleteProperty (target, key) {
        console.warn(`Delete operation on key "${String(key)}" failed: target is readonly.`, target);
        return true;
    }
};
const shallowReactiveHandlers = /*#__PURE__*/ _shared.extend({
}, mutableHandlers, {
    get: shallowGet,
    set: shallowSet
});
// Props handlers are special in the sense that it should not unwrap top-level
// refs (in order to allow refs to be explicitly passed down), but should
// retain the reactivity of the normal readonly object.
const shallowReadonlyHandlers = /*#__PURE__*/ _shared.extend({
}, readonlyHandlers, {
    get: shallowReadonlyGet
});
const toShallow = (value)=>value
;
const getProto = (v)=>Reflect.getPrototypeOf(v)
;
function get$1(target, key, isReadonly = false, isShallow = false) {
    // #1772: readonly(reactive(Map)) should return readonly + reactive version
    // of the value
    target = target["__v_raw" /* RAW */ ];
    const rawTarget = toRaw(target);
    const rawKey = toRaw(key);
    if (key !== rawKey) !isReadonly && track(rawTarget, "get" /* GET */ , key);
    !isReadonly && track(rawTarget, "get" /* GET */ , rawKey);
    const { has  } = getProto(rawTarget);
    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
    if (has.call(rawTarget, key)) return wrap(target.get(key));
    else if (has.call(rawTarget, rawKey)) return wrap(target.get(rawKey));
    else if (target !== rawTarget) // #3602 readonly(reactive(Map))
    // ensure that the nested reactive `Map` can do tracking for itself
    target.get(key);
}
function has$1(key, isReadonly = false) {
    const target = this["__v_raw" /* RAW */ ];
    const rawTarget = toRaw(target);
    const rawKey = toRaw(key);
    if (key !== rawKey) !isReadonly && track(rawTarget, "has" /* HAS */ , key);
    !isReadonly && track(rawTarget, "has" /* HAS */ , rawKey);
    return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly = false) {
    target = target["__v_raw" /* RAW */ ];
    !isReadonly && track(toRaw(target), "iterate" /* ITERATE */ , ITERATE_KEY);
    return Reflect.get(target, 'size', target);
}
function add(value) {
    value = toRaw(value);
    const target = toRaw(this);
    const proto = getProto(target);
    const hadKey = proto.has.call(target, value);
    if (!hadKey) {
        target.add(value);
        trigger(target, "add" /* ADD */ , value, value);
    }
    return this;
}
function set$1(key, value) {
    value = toRaw(value);
    const target = toRaw(this);
    const { has , get  } = getProto(target);
    let hadKey = has.call(target, key);
    if (!hadKey) {
        key = toRaw(key);
        hadKey = has.call(target, key);
    } else checkIdentityKeys(target, has, key);
    const oldValue = get.call(target, key);
    target.set(key, value);
    if (!hadKey) trigger(target, "add" /* ADD */ , key, value);
    else if (_shared.hasChanged(value, oldValue)) trigger(target, "set" /* SET */ , key, value, oldValue);
    return this;
}
function deleteEntry(key) {
    const target = toRaw(this);
    const { has , get  } = getProto(target);
    let hadKey = has.call(target, key);
    if (!hadKey) {
        key = toRaw(key);
        hadKey = has.call(target, key);
    } else checkIdentityKeys(target, has, key);
    const oldValue = get ? get.call(target, key) : undefined;
    // forward the operation before queueing reactions
    const result = target.delete(key);
    if (hadKey) trigger(target, "delete" /* DELETE */ , key, undefined, oldValue);
    return result;
}
function clear() {
    const target = toRaw(this);
    const hadItems = target.size !== 0;
    const oldTarget = _shared.isMap(target) ? new Map(target) : new Set(target);
    // forward the operation before queueing reactions
    const result = target.clear();
    if (hadItems) trigger(target, "clear" /* CLEAR */ , undefined, undefined, oldTarget);
    return result;
}
function createForEach(isReadonly, isShallow) {
    return function forEach(callback, thisArg) {
        const observed = this;
        const target = observed["__v_raw" /* RAW */ ];
        const rawTarget = toRaw(target);
        const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
        !isReadonly && track(rawTarget, "iterate" /* ITERATE */ , ITERATE_KEY);
        return target.forEach((value, key)=>{
            // important: make sure the callback is
            // 1. invoked with the reactive map as `this` and 3rd arg
            // 2. the value received should be a corresponding reactive/readonly.
            return callback.call(thisArg, wrap(value), wrap(key), observed);
        });
    };
}
function createIterableMethod(method, isReadonly, isShallow) {
    return function(...args) {
        const target = this["__v_raw" /* RAW */ ];
        const rawTarget = toRaw(target);
        const targetIsMap = _shared.isMap(rawTarget);
        const isPair = method === 'entries' || method === Symbol.iterator && targetIsMap;
        const isKeyOnly = method === 'keys' && targetIsMap;
        const innerIterator = target[method](...args);
        const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
        !isReadonly && track(rawTarget, "iterate" /* ITERATE */ , isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
        // return a wrapped iterator which returns observed versions of the
        // values emitted from the real iterator
        return {
            // iterator protocol
            next () {
                const { value , done  } = innerIterator.next();
                return done ? {
                    value,
                    done
                } : {
                    value: isPair ? [
                        wrap(value[0]),
                        wrap(value[1])
                    ] : wrap(value),
                    done
                };
            },
            // iterable protocol
            [Symbol.iterator] () {
                return this;
            }
        };
    };
}
function createReadonlyMethod(type) {
    return function(...args) {
        {
            const key = args[0] ? `on key "${args[0]}" ` : ``;
            console.warn(`${_shared.capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));
        }
        return type === "delete" /* DELETE */  ? false : this;
    };
}
function createInstrumentations() {
    const mutableInstrumentations = {
        get (key) {
            return get$1(this, key);
        },
        get size () {
            return size(this);
        },
        has: has$1,
        add,
        set: set$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, false)
    };
    const shallowInstrumentations = {
        get (key) {
            return get$1(this, key, false, true);
        },
        get size () {
            return size(this);
        },
        has: has$1,
        add,
        set: set$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, true)
    };
    const readonlyInstrumentations = {
        get (key) {
            return get$1(this, key, true);
        },
        get size () {
            return size(this, true);
        },
        has (key) {
            return has$1.call(this, key, true);
        },
        add: createReadonlyMethod("add" /* ADD */ ),
        set: createReadonlyMethod("set" /* SET */ ),
        delete: createReadonlyMethod("delete" /* DELETE */ ),
        clear: createReadonlyMethod("clear" /* CLEAR */ ),
        forEach: createForEach(true, false)
    };
    const shallowReadonlyInstrumentations = {
        get (key) {
            return get$1(this, key, true, true);
        },
        get size () {
            return size(this, true);
        },
        has (key) {
            return has$1.call(this, key, true);
        },
        add: createReadonlyMethod("add" /* ADD */ ),
        set: createReadonlyMethod("set" /* SET */ ),
        delete: createReadonlyMethod("delete" /* DELETE */ ),
        clear: createReadonlyMethod("clear" /* CLEAR */ ),
        forEach: createForEach(true, true)
    };
    const iteratorMethods = [
        'keys',
        'values',
        'entries',
        Symbol.iterator
    ];
    iteratorMethods.forEach((method)=>{
        mutableInstrumentations[method] = createIterableMethod(method, false, false);
        readonlyInstrumentations[method] = createIterableMethod(method, true, false);
        shallowInstrumentations[method] = createIterableMethod(method, false, true);
        shallowReadonlyInstrumentations[method] = createIterableMethod(method, true, true);
    });
    return [
        mutableInstrumentations,
        readonlyInstrumentations,
        shallowInstrumentations,
        shallowReadonlyInstrumentations
    ];
}
const [mutableInstrumentations1, readonlyInstrumentations1, shallowInstrumentations1, shallowReadonlyInstrumentations1] = /* #__PURE__*/ createInstrumentations();
function createInstrumentationGetter(isReadonly, shallow) {
    const instrumentations = shallow ? isReadonly ? shallowReadonlyInstrumentations1 : shallowInstrumentations1 : isReadonly ? readonlyInstrumentations1 : mutableInstrumentations1;
    return (target, key, receiver)=>{
        if (key === "__v_isReactive" /* IS_REACTIVE */ ) return !isReadonly;
        else if (key === "__v_isReadonly" /* IS_READONLY */ ) return isReadonly;
        else if (key === "__v_raw" /* RAW */ ) return target;
        return Reflect.get(_shared.hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
    };
}
const mutableCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(true, false)
};
const shallowReadonlyCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(true, true)
};
function checkIdentityKeys(target, has, key) {
    const rawKey = toRaw(key);
    if (rawKey !== key && has.call(target, rawKey)) {
        const type = _shared.toRawType(target);
        console.warn(`Reactive ${type} contains both the raw and reactive ` + `versions of the same object${type === `Map` ? ` as keys` : ``}, ` + `which can lead to inconsistencies. ` + `Avoid differentiating between the raw and reactive versions ` + `of an object and only use the reactive version if possible.`);
    }
}
const reactiveMap = new WeakMap();
const shallowReactiveMap = new WeakMap();
const readonlyMap = new WeakMap();
const shallowReadonlyMap = new WeakMap();
function targetTypeMap(rawType) {
    switch(rawType){
        case 'Object':
        case 'Array':
            return 1 /* COMMON */ ;
        case 'Map':
        case 'Set':
        case 'WeakMap':
        case 'WeakSet':
            return 2 /* COLLECTION */ ;
        default:
            return 0 /* INVALID */ ;
    }
}
function getTargetType(value) {
    return value["__v_skip" /* SKIP */ ] || !Object.isExtensible(value) ? 0 /* INVALID */  : targetTypeMap(_shared.toRawType(value));
}
function reactive(target) {
    // if trying to observe a readonly proxy, return the readonly version.
    if (target && target["__v_isReadonly" /* IS_READONLY */ ]) return target;
    return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
}
/**
 * Return a shallowly-reactive copy of the original object, where only the root
 * level properties are reactive. It also does not auto-unwrap refs (even at the
 * root level).
 */ function shallowReactive(target) {
    return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
}
/**
 * Creates a readonly copy of the original object. Note the returned copy is not
 * made reactive, but `readonly` can be called on an already reactive object.
 */ function readonly(target) {
    return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
}
/**
 * Returns a reactive-copy of the original object, where only the root level
 * properties are readonly, and does NOT unwrap refs nor recursively convert
 * returned properties.
 * This is used for creating the props proxy object for stateful components.
 */ function shallowReadonly(target) {
    return createReactiveObject(target, true, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);
}
function createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers, proxyMap) {
    if (!_shared.isObject(target)) {
        console.warn(`value cannot be made reactive: ${String(target)}`);
        return target;
    }
    // target is already a Proxy, return it.
    // exception: calling readonly() on a reactive object
    if (target["__v_raw" /* RAW */ ] && !(isReadonly && target["__v_isReactive" /* IS_REACTIVE */ ])) return target;
    // target already has corresponding Proxy
    const existingProxy = proxyMap.get(target);
    if (existingProxy) return existingProxy;
    // only a whitelist of value types can be observed.
    const targetType = getTargetType(target);
    if (targetType === 0 /* INVALID */ ) return target;
    const proxy = new Proxy(target, targetType === 2 /* COLLECTION */  ? collectionHandlers : baseHandlers);
    proxyMap.set(target, proxy);
    return proxy;
}
function isReactive(value) {
    if (isReadonly1(value)) return isReactive(value["__v_raw" /* RAW */ ]);
    return !!(value && value["__v_isReactive" /* IS_REACTIVE */ ]);
}
function isReadonly1(value) {
    return !!(value && value["__v_isReadonly" /* IS_READONLY */ ]);
}
function isProxy(value) {
    return isReactive(value) || isReadonly1(value);
}
function toRaw(observed) {
    const raw = observed && observed["__v_raw" /* RAW */ ];
    return raw ? toRaw(raw) : observed;
}
function markRaw(value) {
    _shared.def(value, "__v_skip" /* SKIP */ , true);
    return value;
}
const toReactive = (value)=>_shared.isObject(value) ? reactive(value) : value
;
const toReadonly = (value)=>_shared.isObject(value) ? readonly(value) : value
;
function trackRefValue(ref) {
    if (isTracking()) {
        ref = toRaw(ref);
        if (!ref.dep) ref.dep = createDep();
        trackEffects(ref.dep, {
            target: ref,
            type: "get" /* GET */ ,
            key: 'value'
        });
    }
}
function triggerRefValue(ref, newVal) {
    ref = toRaw(ref);
    if (ref.dep) triggerEffects(ref.dep, {
        target: ref,
        type: "set" /* SET */ ,
        key: 'value',
        newValue: newVal
    });
}
function isRef(r) {
    return Boolean(r && r.__v_isRef === true);
}
function ref1(value) {
    return createRef(value, false);
}
function shallowRef(value) {
    return createRef(value, true);
}
function createRef(rawValue, shallow) {
    if (isRef(rawValue)) return rawValue;
    return new RefImpl(rawValue, shallow);
}
class RefImpl {
    constructor(value1, _shallow){
        this._shallow = _shallow;
        this.dep = undefined;
        this.__v_isRef = true;
        this._rawValue = _shallow ? value1 : toRaw(value1);
        this._value = _shallow ? value1 : toReactive(value1);
    }
    get value() {
        trackRefValue(this);
        return this._value;
    }
    set value(newVal) {
        newVal = this._shallow ? newVal : toRaw(newVal);
        if (_shared.hasChanged(newVal, this._rawValue)) {
            this._rawValue = newVal;
            this._value = this._shallow ? newVal : toReactive(newVal);
            triggerRefValue(this, newVal);
        }
    }
}
function triggerRef(ref) {
    triggerRefValue(ref, ref.value);
}
function unref(ref) {
    return isRef(ref) ? ref.value : ref;
}
const shallowUnwrapHandlers = {
    get: (target, key, receiver)=>unref(Reflect.get(target, key, receiver))
    ,
    set: (target, key, value, receiver)=>{
        const oldValue = target[key];
        if (isRef(oldValue) && !isRef(value)) {
            oldValue.value = value;
            return true;
        } else return Reflect.set(target, key, value, receiver);
    }
};
function proxyRefs(objectWithRefs) {
    return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
class CustomRefImpl {
    constructor(factory1){
        this.dep = undefined;
        this.__v_isRef = true;
        const { get , set  } = factory1(()=>trackRefValue(this)
        , ()=>triggerRefValue(this)
        );
        this._get = get;
        this._set = set;
    }
    get value() {
        return this._get();
    }
    set value(newVal1) {
        this._set(newVal1);
    }
}
function customRef(factory) {
    return new CustomRefImpl(factory);
}
function toRefs(object) {
    if (!isProxy(object)) console.warn(`toRefs() expects a reactive object but received a plain one.`);
    const ret = _shared.isArray(object) ? new Array(object.length) : {
    };
    for(const key in object)ret[key] = toRef(object, key);
    return ret;
}
class ObjectRefImpl {
    constructor(_object, _key){
        this._object = _object;
        this._key = _key;
        this.__v_isRef = true;
    }
    get value() {
        return this._object[this._key];
    }
    set value(newVal2) {
        this._object[this._key] = newVal2;
    }
}
function toRef(object, key) {
    const val = object[key];
    return isRef(val) ? val : new ObjectRefImpl(object, key);
}
class ComputedRefImpl {
    constructor(getter1, _setter, isReadonly){
        this._setter = _setter;
        this.dep = undefined;
        this._dirty = true;
        this.__v_isRef = true;
        this.effect = new ReactiveEffect(getter1, ()=>{
            if (!this._dirty) {
                this._dirty = true;
                triggerRefValue(this);
            }
        });
        this["__v_isReadonly" /* IS_READONLY */ ] = isReadonly;
    }
    get value() {
        // the computed ref may get wrapped by other proxies e.g. readonly() #3376
        const self = toRaw(this);
        trackRefValue(self);
        if (self._dirty) {
            self._dirty = false;
            self._value = self.effect.run();
        }
        return self._value;
    }
    set value(newValue) {
        this._setter(newValue);
    }
}
function computed(getterOrOptions, debugOptions) {
    let getter;
    let setter;
    const onlyGetter = _shared.isFunction(getterOrOptions);
    if (onlyGetter) {
        getter = getterOrOptions;
        setter = ()=>{
            console.warn('Write operation failed: computed value is readonly');
        };
    } else {
        getter = getterOrOptions.get;
        setter = getterOrOptions.set;
    }
    const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter);
    if (debugOptions) {
        cRef.effect.onTrack = debugOptions.onTrack;
        cRef.effect.onTrigger = debugOptions.onTrigger;
    }
    return cRef;
}
var _a;
const tick = Promise.resolve();
const queue = [];
let queued = false;
const scheduler = (fn)=>{
    queue.push(fn);
    if (!queued) {
        queued = true;
        tick.then(flush);
    }
};
const flush = ()=>{
    for(let i = 0; i < queue.length; i++)queue[i]();
    queue.length = 0;
    queued = false;
};
class DeferredComputedRefImpl {
    constructor(getter2){
        this.dep = undefined;
        this._dirty = true;
        this.__v_isRef = true;
        this[_a] = true;
        let compareTarget;
        let hasCompareTarget = false;
        let scheduled = false;
        this.effect = new ReactiveEffect(getter2, (computedTrigger)=>{
            if (this.dep) {
                if (computedTrigger) {
                    compareTarget = this._value;
                    hasCompareTarget = true;
                } else if (!scheduled) {
                    const valueToCompare = hasCompareTarget ? compareTarget : this._value;
                    scheduled = true;
                    hasCompareTarget = false;
                    scheduler(()=>{
                        if (this.effect.active && this._get() !== valueToCompare) triggerRefValue(this);
                        scheduled = false;
                    });
                }
                // chained upstream computeds are notified synchronously to ensure
                // value invalidation in case of sync access; normal effects are
                // deferred to be triggered in scheduler.
                for (const e of this.dep)if (e.computed) e.scheduler(true);
            }
            this._dirty = true;
        });
        this.effect.computed = true;
    }
    _get() {
        if (this._dirty) {
            this._dirty = false;
            return this._value = this.effect.run();
        }
        return this._value;
    }
    get value() {
        trackRefValue(this);
        // the computed ref may get wrapped by other proxies e.g. readonly() #3376
        return toRaw(this)._get();
    }
}
_a = "__v_isReadonly" /* IS_READONLY */ ;
function deferredComputed(getter) {
    return new DeferredComputedRefImpl(getter);
}

},{"@vue/shared":"gBrWj","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gBrWj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EMPTY_ARR", ()=>EMPTY_ARR
);
parcelHelpers.export(exports, "EMPTY_OBJ", ()=>EMPTY_OBJ
);
parcelHelpers.export(exports, "NO", ()=>NO
);
parcelHelpers.export(exports, "NOOP", ()=>NOOP
);
parcelHelpers.export(exports, "PatchFlagNames", ()=>PatchFlagNames
);
parcelHelpers.export(exports, "camelize", ()=>camelize
);
parcelHelpers.export(exports, "capitalize", ()=>capitalize
);
parcelHelpers.export(exports, "def", ()=>def
);
parcelHelpers.export(exports, "escapeHtml", ()=>escapeHtml
);
parcelHelpers.export(exports, "escapeHtmlComment", ()=>escapeHtmlComment
);
parcelHelpers.export(exports, "extend", ()=>extend
);
parcelHelpers.export(exports, "generateCodeFrame", ()=>generateCodeFrame
);
parcelHelpers.export(exports, "getGlobalThis", ()=>getGlobalThis
);
parcelHelpers.export(exports, "hasChanged", ()=>hasChanged
);
parcelHelpers.export(exports, "hasOwn", ()=>hasOwn
);
parcelHelpers.export(exports, "hyphenate", ()=>hyphenate
);
parcelHelpers.export(exports, "includeBooleanAttr", ()=>includeBooleanAttr
);
parcelHelpers.export(exports, "invokeArrayFns", ()=>invokeArrayFns
);
parcelHelpers.export(exports, "isArray", ()=>isArray
);
parcelHelpers.export(exports, "isBooleanAttr", ()=>isBooleanAttr
);
parcelHelpers.export(exports, "isDate", ()=>isDate
);
parcelHelpers.export(exports, "isFunction", ()=>isFunction
);
parcelHelpers.export(exports, "isGloballyWhitelisted", ()=>isGloballyWhitelisted
);
parcelHelpers.export(exports, "isHTMLTag", ()=>isHTMLTag
);
parcelHelpers.export(exports, "isIntegerKey", ()=>isIntegerKey
);
parcelHelpers.export(exports, "isKnownHtmlAttr", ()=>isKnownHtmlAttr
);
parcelHelpers.export(exports, "isKnownSvgAttr", ()=>isKnownSvgAttr
);
parcelHelpers.export(exports, "isMap", ()=>isMap
);
parcelHelpers.export(exports, "isModelListener", ()=>isModelListener
);
parcelHelpers.export(exports, "isNoUnitNumericStyleProp", ()=>isNoUnitNumericStyleProp
);
parcelHelpers.export(exports, "isObject", ()=>isObject
);
parcelHelpers.export(exports, "isOn", ()=>isOn
);
parcelHelpers.export(exports, "isPlainObject", ()=>isPlainObject
);
parcelHelpers.export(exports, "isPromise", ()=>isPromise
);
parcelHelpers.export(exports, "isReservedProp", ()=>isReservedProp
);
parcelHelpers.export(exports, "isSSRSafeAttrName", ()=>isSSRSafeAttrName
);
parcelHelpers.export(exports, "isSVGTag", ()=>isSVGTag
);
parcelHelpers.export(exports, "isSet", ()=>isSet
);
parcelHelpers.export(exports, "isSpecialBooleanAttr", ()=>isSpecialBooleanAttr
);
parcelHelpers.export(exports, "isString", ()=>isString
);
parcelHelpers.export(exports, "isSymbol", ()=>isSymbol
);
parcelHelpers.export(exports, "isVoidTag", ()=>isVoidTag
);
parcelHelpers.export(exports, "looseEqual", ()=>looseEqual
);
parcelHelpers.export(exports, "looseIndexOf", ()=>looseIndexOf
);
parcelHelpers.export(exports, "makeMap", ()=>makeMap
);
parcelHelpers.export(exports, "normalizeClass", ()=>normalizeClass
);
parcelHelpers.export(exports, "normalizeProps", ()=>normalizeProps
);
parcelHelpers.export(exports, "normalizeStyle", ()=>normalizeStyle
);
parcelHelpers.export(exports, "objectToString", ()=>objectToString
);
parcelHelpers.export(exports, "parseStringStyle", ()=>parseStringStyle
);
parcelHelpers.export(exports, "propsToAttrMap", ()=>propsToAttrMap
);
parcelHelpers.export(exports, "remove", ()=>remove
);
parcelHelpers.export(exports, "slotFlagsText", ()=>slotFlagsText
);
parcelHelpers.export(exports, "stringifyStyle", ()=>stringifyStyle
);
parcelHelpers.export(exports, "toDisplayString", ()=>toDisplayString
);
parcelHelpers.export(exports, "toHandlerKey", ()=>toHandlerKey
);
parcelHelpers.export(exports, "toNumber", ()=>toNumber
);
parcelHelpers.export(exports, "toRawType", ()=>toRawType
);
parcelHelpers.export(exports, "toTypeString", ()=>toTypeString
);
var global = arguments[3];
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 * IMPORTANT: all calls of this function must be prefixed with
 * \/\*#\_\_PURE\_\_\*\/
 * So that rollup can tree-shake them if necessary.
 */ function makeMap(str, expectsLowerCase) {
    const map = Object.create(null);
    const list = str.split(',');
    for(let i = 0; i < list.length; i++)map[list[i]] = true;
    return expectsLowerCase ? (val)=>!!map[val.toLowerCase()]
     : (val)=>!!map[val]
    ;
}
/**
 * dev only flag -> name mapping
 */ const PatchFlagNames = {
    [1 /* TEXT */ ]: `TEXT`,
    [2 /* CLASS */ ]: `CLASS`,
    [4 /* STYLE */ ]: `STYLE`,
    [8 /* PROPS */ ]: `PROPS`,
    [16 /* FULL_PROPS */ ]: `FULL_PROPS`,
    [32 /* HYDRATE_EVENTS */ ]: `HYDRATE_EVENTS`,
    [64 /* STABLE_FRAGMENT */ ]: `STABLE_FRAGMENT`,
    [128 /* KEYED_FRAGMENT */ ]: `KEYED_FRAGMENT`,
    [256 /* UNKEYED_FRAGMENT */ ]: `UNKEYED_FRAGMENT`,
    [512 /* NEED_PATCH */ ]: `NEED_PATCH`,
    [1024 /* DYNAMIC_SLOTS */ ]: `DYNAMIC_SLOTS`,
    [2048 /* DEV_ROOT_FRAGMENT */ ]: `DEV_ROOT_FRAGMENT`,
    [-1 /* HOISTED */ ]: `HOISTED`,
    [-2 /* BAIL */ ]: `BAIL`
};
/**
 * Dev only
 */ const slotFlagsText = {
    [1 /* STABLE */ ]: 'STABLE',
    [2 /* DYNAMIC */ ]: 'DYNAMIC',
    [3 /* FORWARDED */ ]: 'FORWARDED'
};
const GLOBALS_WHITE_LISTED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt";
const isGloballyWhitelisted = /*#__PURE__*/ makeMap(GLOBALS_WHITE_LISTED);
const range = 2;
function generateCodeFrame(source, start = 0, end = source.length) {
    // Split the content into individual lines but capture the newline sequence
    // that separated each line. This is important because the actual sequence is
    // needed to properly take into account the full line length for offset
    // comparison
    let lines = source.split(/(\r?\n)/);
    // Separate the lines and newline sequences into separate arrays for easier referencing
    const newlineSequences = lines.filter((_, idx)=>idx % 2 === 1
    );
    lines = lines.filter((_, idx)=>idx % 2 === 0
    );
    let count = 0;
    const res = [];
    for(let i = 0; i < lines.length; i++){
        count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);
        if (count >= start) {
            for(let j = i - range; j <= i + range || end > count; j++){
                if (j < 0 || j >= lines.length) continue;
                const line = j + 1;
                res.push(`${line}${' '.repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);
                const lineLength = lines[j].length;
                const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;
                if (j === i) {
                    // push underline
                    const pad = start - (count - (lineLength + newLineSeqLength));
                    const length = Math.max(1, end > count ? lineLength - pad : end - start);
                    res.push(`   |  ` + ' '.repeat(pad) + '^'.repeat(length));
                } else if (j > i) {
                    if (end > count) {
                        const length = Math.max(Math.min(end - count, lineLength), 1);
                        res.push(`   |  ` + '^'.repeat(length));
                    }
                    count += lineLength + newLineSeqLength;
                }
            }
            break;
        }
    }
    return res.join('\n');
}
/**
 * On the client we only need to offer special cases for boolean attributes that
 * have different names from their corresponding dom properties:
 * - itemscope -> N/A
 * - allowfullscreen -> allowFullscreen
 * - formnovalidate -> formNoValidate
 * - ismap -> isMap
 * - nomodule -> noModule
 * - novalidate -> noValidate
 * - readonly -> readOnly
 */ const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs);
/**
 * The full list is needed during SSR to produce the correct initial markup.
 */ const isBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,` + `loop,open,required,reversed,scoped,seamless,` + `checked,muted,multiple,selected`);
/**
 * Boolean attributes should be included if the value is truthy or ''.
 * e.g. <select multiple> compiles to { multiple: '' }
 */ function includeBooleanAttr(value) {
    return !!value || value === '';
}
const unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
const attrValidationCache = {
};
function isSSRSafeAttrName(name) {
    if (attrValidationCache.hasOwnProperty(name)) return attrValidationCache[name];
    const isUnsafe = unsafeAttrCharRE.test(name);
    if (isUnsafe) console.error(`unsafe attribute name: ${name}`);
    return attrValidationCache[name] = !isUnsafe;
}
const propsToAttrMap = {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
};
/**
 * CSS properties that accept plain numbers
 */ const isNoUnitNumericStyleProp = /*#__PURE__*/ makeMap(`animation-iteration-count,border-image-outset,border-image-slice,` + `border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,` + `columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,` + `grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,` + `grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,` + `line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,` + // SVG
`fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,` + `stroke-miterlimit,stroke-opacity,stroke-width`);
/**
 * Known attributes, this is used for stringification of runtime static nodes
 * so that we don't stringify bindings that cannot be set from HTML.
 * Don't also forget to allow `data-*` and `aria-*`!
 * Generated from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes
 */ const isKnownHtmlAttr = /*#__PURE__*/ makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,` + `autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,` + `border,buffered,capture,challenge,charset,checked,cite,class,code,` + `codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,` + `coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,` + `disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,` + `formaction,formenctype,formmethod,formnovalidate,formtarget,headers,` + `height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,` + `ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,` + `manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,` + `open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,` + `referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,` + `selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,` + `start,step,style,summary,tabindex,target,title,translate,type,usemap,` + `value,width,wrap`);
/**
 * Generated from https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute
 */ const isKnownSvgAttr = /*#__PURE__*/ makeMap(`xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,` + `arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,` + `baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,` + `clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,` + `color-interpolation-filters,color-profile,color-rendering,` + `contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,` + `descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,` + `dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,` + `fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,` + `font-family,font-size,font-size-adjust,font-stretch,font-style,` + `font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,` + `glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,` + `gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,` + `horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,` + `k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,` + `lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,` + `marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,` + `mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,` + `name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,` + `overflow,overline-position,overline-thickness,panose-1,paint-order,path,` + `pathLength,patternContentUnits,patternTransform,patternUnits,ping,` + `pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,` + `preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,` + `rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,` + `restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,` + `specularConstant,specularExponent,speed,spreadMethod,startOffset,` + `stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,` + `strikethrough-position,strikethrough-thickness,string,stroke,` + `stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,` + `stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,` + `systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,` + `text-decoration,text-rendering,textLength,to,transform,transform-origin,` + `type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,` + `unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,` + `v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,` + `vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,` + `writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,` + `xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,` + `xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`);
function normalizeStyle(value) {
    if (isArray(value)) {
        const res = {
        };
        for(let i = 0; i < value.length; i++){
            const item = value[i];
            const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
            if (normalized) for(const key in normalized)res[key] = normalized[key];
        }
        return res;
    } else if (isString(value)) return value;
    else if (isObject(value)) return value;
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:(.+)/;
function parseStringStyle(cssText) {
    const ret = {
    };
    cssText.split(listDelimiterRE).forEach((item)=>{
        if (item) {
            const tmp = item.split(propertyDelimiterRE);
            tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
        }
    });
    return ret;
}
function stringifyStyle(styles) {
    let ret = '';
    if (!styles || isString(styles)) return ret;
    for(const key in styles){
        const value = styles[key];
        const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);
        if (isString(value) || typeof value === 'number' && isNoUnitNumericStyleProp(normalizedKey)) // only render valid values
        ret += `${normalizedKey}:${value};`;
    }
    return ret;
}
function normalizeClass(value) {
    let res = '';
    if (isString(value)) res = value;
    else if (isArray(value)) for(let i = 0; i < value.length; i++){
        const normalized = normalizeClass(value[i]);
        if (normalized) res += normalized + ' ';
    }
    else if (isObject(value)) {
        for(const name in value)if (value[name]) res += name + ' ';
    }
    return res.trim();
}
function normalizeProps(props) {
    if (!props) return null;
    let { class: klass , style  } = props;
    if (klass && !isString(klass)) props.class = normalizeClass(klass);
    if (style) props.style = normalizeStyle(style);
    return props;
}
// These tag configs are shared between compiler-dom and runtime-dom, so they
// https://developer.mozilla.org/en-US/docs/Web/HTML/Element
const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
// https://developer.mozilla.org/en-US/docs/Web/SVG/Element
const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const VOID_TAGS = 'area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr';
const isHTMLTag = /*#__PURE__*/ makeMap(HTML_TAGS);
const isSVGTag = /*#__PURE__*/ makeMap(SVG_TAGS);
const isVoidTag = /*#__PURE__*/ makeMap(VOID_TAGS);
const escapeRE = /["'&<>]/;
function escapeHtml(string) {
    const str = '' + string;
    const match = escapeRE.exec(str);
    if (!match) return str;
    let html = '';
    let escaped;
    let index;
    let lastIndex = 0;
    for(index = match.index; index < str.length; index++){
        switch(str.charCodeAt(index)){
            case 34:
                escaped = '&quot;';
                break;
            case 38:
                escaped = '&amp;';
                break;
            case 39:
                escaped = '&#39;';
                break;
            case 60:
                escaped = '&lt;';
                break;
            case 62:
                escaped = '&gt;';
                break;
            default:
                continue;
        }
        if (lastIndex !== index) html += str.slice(lastIndex, index);
        lastIndex = index + 1;
        html += escaped;
    }
    return lastIndex !== index ? html + str.slice(lastIndex, index) : html;
}
// https://www.w3.org/TR/html52/syntax.html#comments
const commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
function escapeHtmlComment(src) {
    return src.replace(commentStripRE, '');
}
function looseCompareArrays(a, b) {
    if (a.length !== b.length) return false;
    let equal = true;
    for(let i = 0; equal && i < a.length; i++)equal = looseEqual(a[i], b[i]);
    return equal;
}
function looseEqual(a, b) {
    if (a === b) return true;
    let aValidType = isDate(a);
    let bValidType = isDate(b);
    if (aValidType || bValidType) return aValidType && bValidType ? a.getTime() === b.getTime() : false;
    aValidType = isArray(a);
    bValidType = isArray(b);
    if (aValidType || bValidType) return aValidType && bValidType ? looseCompareArrays(a, b) : false;
    aValidType = isObject(a);
    bValidType = isObject(b);
    if (aValidType || bValidType) {
        /* istanbul ignore if: this if will probably never be called */ if (!aValidType || !bValidType) return false;
        const aKeysCount = Object.keys(a).length;
        const bKeysCount = Object.keys(b).length;
        if (aKeysCount !== bKeysCount) return false;
        for(const key in a){
            const aHasKey = a.hasOwnProperty(key);
            const bHasKey = b.hasOwnProperty(key);
            if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) return false;
        }
    }
    return String(a) === String(b);
}
function looseIndexOf(arr, val) {
    return arr.findIndex((item)=>looseEqual(item, val)
    );
}
/**
 * For converting {{ interpolation }} values to displayed strings.
 * @private
 */ const toDisplayString = (val)=>{
    return val == null ? '' : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val1)=>{
    // can't use isRef here since @vue/shared has no deps
    if (val1 && val1.__v_isRef) return replacer(_key, val1.value);
    else if (isMap(val1)) return {
        [`Map(${val1.size})`]: [
            ...val1.entries()
        ].reduce((entries, [key, val])=>{
            entries[`${key} =>`] = val;
            return entries;
        }, {
        })
    };
    else if (isSet(val1)) return {
        [`Set(${val1.size})`]: [
            ...val1.values()
        ]
    };
    else if (isObject(val1) && !isArray(val1) && !isPlainObject(val1)) return String(val1);
    return val1;
};
const EMPTY_OBJ = Object.freeze({
});
const EMPTY_ARR = Object.freeze([]);
const NOOP = ()=>{
};
/**
 * Always return false.
 */ const NO = ()=>false
;
const onRE = /^on[^a-z]/;
const isOn = (key)=>onRE.test(key)
;
const isModelListener = (key)=>key.startsWith('onUpdate:')
;
const extend = Object.assign;
const remove = (arr, el)=>{
    const i = arr.indexOf(el);
    if (i > -1) arr.splice(i, 1);
};
const hasOwnProperty = Object.prototype.hasOwnProperty;
const hasOwn = (val, key)=>hasOwnProperty.call(val, key)
;
const isArray = Array.isArray;
const isMap = (val)=>toTypeString(val) === '[object Map]'
;
const isSet = (val)=>toTypeString(val) === '[object Set]'
;
const isDate = (val)=>val instanceof Date
;
const isFunction = (val)=>typeof val === 'function'
;
const isString = (val)=>typeof val === 'string'
;
const isSymbol = (val)=>typeof val === 'symbol'
;
const isObject = (val)=>val !== null && typeof val === 'object'
;
const isPromise = (val)=>{
    return isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value)=>objectToString.call(value)
;
const toRawType = (value)=>{
    // extract "RawType" from strings like "[object RawType]"
    return toTypeString(value).slice(8, -1);
};
const isPlainObject = (val)=>toTypeString(val) === '[object Object]'
;
const isIntegerKey = (key)=>isString(key) && key !== 'NaN' && key[0] !== '-' && '' + parseInt(key, 10) === key
;
const isReservedProp = /*#__PURE__*/ makeMap(// the leading comma is intentional so empty string "" is also included
",key,ref,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");
const cacheStringFunction = (fn)=>{
    const cache = Object.create(null);
    return (str)=>{
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
    };
};
const camelizeRE = /-(\w)/g;
/**
 * @private
 */ const camelize = cacheStringFunction((str)=>{
    return str.replace(camelizeRE, (_, c)=>c ? c.toUpperCase() : ''
    );
});
const hyphenateRE = /\B([A-Z])/g;
/**
 * @private
 */ const hyphenate = cacheStringFunction((str)=>str.replace(hyphenateRE, '-$1').toLowerCase()
);
/**
 * @private
 */ const capitalize = cacheStringFunction((str)=>str.charAt(0).toUpperCase() + str.slice(1)
);
/**
 * @private
 */ const toHandlerKey = cacheStringFunction((str)=>str ? `on${capitalize(str)}` : ``
);
// compare whether a value has changed, accounting for NaN.
const hasChanged = (value, oldValue)=>!Object.is(value, oldValue)
;
const invokeArrayFns = (fns, arg)=>{
    for(let i = 0; i < fns.length; i++)fns[i](arg);
};
const def = (obj, key, value)=>{
    Object.defineProperty(obj, key, {
        configurable: true,
        enumerable: false,
        value
    });
};
const toNumber = (val)=>{
    const n = parseFloat(val);
    return isNaN(n) ? val : n;
};
let _globalThis;
const getGlobalThis = ()=>{
    return _globalThis || (_globalThis = typeof globalThis !== 'undefined' ? globalThis : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {
    });
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ciiiV":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"053an":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AddressbarColor", ()=>AddressbarColor
);
parcelHelpers.export(exports, "AppFullscreen", ()=>Plugin$5
);
parcelHelpers.export(exports, "AppVisibility", ()=>Plugin$4
);
parcelHelpers.export(exports, "BottomSheet", ()=>BottomSheet
);
parcelHelpers.export(exports, "ClosePopup", ()=>ClosePopup
);
parcelHelpers.export(exports, "Cookies", ()=>Plugin$3
);
parcelHelpers.export(exports, "Dark", ()=>Plugin$8
);
parcelHelpers.export(exports, "Dialog", ()=>Dialog
);
parcelHelpers.export(exports, "Intersection", ()=>Intersection
);
parcelHelpers.export(exports, "Loading", ()=>Plugin$2
);
parcelHelpers.export(exports, "LoadingBar", ()=>LoadingBar
);
parcelHelpers.export(exports, "LocalStorage", ()=>Plugin$1
);
parcelHelpers.export(exports, "Meta", ()=>Meta
);
parcelHelpers.export(exports, "Morph", ()=>Morph
);
parcelHelpers.export(exports, "Mutation", ()=>Mutation
);
parcelHelpers.export(exports, "Notify", ()=>Notify
);
parcelHelpers.export(exports, "Platform", ()=>Platform
);
parcelHelpers.export(exports, "QAjaxBar", ()=>QAjaxBar
);
parcelHelpers.export(exports, "QAvatar", ()=>QAvatar
);
parcelHelpers.export(exports, "QBadge", ()=>QBadge
);
parcelHelpers.export(exports, "QBanner", ()=>QBanner
);
parcelHelpers.export(exports, "QBar", ()=>QBar
);
parcelHelpers.export(exports, "QBreadcrumbs", ()=>QBreadcrumbs
);
parcelHelpers.export(exports, "QBreadcrumbsEl", ()=>QBreadcrumbsEl
);
parcelHelpers.export(exports, "QBtn", ()=>QBtn
);
parcelHelpers.export(exports, "QBtnDropdown", ()=>QBtnDropdown
);
parcelHelpers.export(exports, "QBtnGroup", ()=>QBtnGroup
);
parcelHelpers.export(exports, "QBtnToggle", ()=>QBtnToggle
);
parcelHelpers.export(exports, "QCard", ()=>QCard
);
parcelHelpers.export(exports, "QCardActions", ()=>QCardActions
);
parcelHelpers.export(exports, "QCardSection", ()=>QCardSection
);
parcelHelpers.export(exports, "QCarousel", ()=>QCarousel
);
parcelHelpers.export(exports, "QCarouselControl", ()=>QCarouselControl
);
parcelHelpers.export(exports, "QCarouselSlide", ()=>QCarouselSlide
);
parcelHelpers.export(exports, "QChatMessage", ()=>QChatMessage
);
parcelHelpers.export(exports, "QCheckbox", ()=>QCheckbox
);
parcelHelpers.export(exports, "QChip", ()=>QChip
);
parcelHelpers.export(exports, "QCircularProgress", ()=>QCircularProgress
);
parcelHelpers.export(exports, "QColor", ()=>QColor
);
parcelHelpers.export(exports, "QDate", ()=>QDate
);
parcelHelpers.export(exports, "QDialog", ()=>QDialog
);
parcelHelpers.export(exports, "QDrawer", ()=>QDrawer
);
parcelHelpers.export(exports, "QEditor", ()=>QEditor
);
parcelHelpers.export(exports, "QExpansionItem", ()=>QExpansionItem
);
parcelHelpers.export(exports, "QFab", ()=>QFab
);
parcelHelpers.export(exports, "QFabAction", ()=>QFabAction
);
parcelHelpers.export(exports, "QField", ()=>QField
);
parcelHelpers.export(exports, "QFile", ()=>QFile
);
parcelHelpers.export(exports, "QFooter", ()=>QFooter
);
parcelHelpers.export(exports, "QForm", ()=>QForm
);
parcelHelpers.export(exports, "QFormChildMixin", ()=>QFormChildMixin
);
parcelHelpers.export(exports, "QHeader", ()=>QHeader
);
parcelHelpers.export(exports, "QIcon", ()=>QIcon
);
parcelHelpers.export(exports, "QImg", ()=>QImg
);
parcelHelpers.export(exports, "QInfiniteScroll", ()=>QInfiniteScroll
);
parcelHelpers.export(exports, "QInnerLoading", ()=>QInnerLoading
);
parcelHelpers.export(exports, "QInput", ()=>QInput
);
parcelHelpers.export(exports, "QIntersection", ()=>QIntersection
);
parcelHelpers.export(exports, "QItem", ()=>QItem
);
parcelHelpers.export(exports, "QItemLabel", ()=>QItemLabel
);
parcelHelpers.export(exports, "QItemSection", ()=>QItemSection
);
parcelHelpers.export(exports, "QKnob", ()=>QKnob
);
parcelHelpers.export(exports, "QLayout", ()=>QLayout
);
parcelHelpers.export(exports, "QLinearProgress", ()=>QLinearProgress
);
parcelHelpers.export(exports, "QList", ()=>QList
);
parcelHelpers.export(exports, "QMarkupTable", ()=>QMarkupTable
);
parcelHelpers.export(exports, "QMenu", ()=>QMenu
);
parcelHelpers.export(exports, "QNoSsr", ()=>QNoSsr
);
parcelHelpers.export(exports, "QOptionGroup", ()=>QOptionGroup
);
parcelHelpers.export(exports, "QPage", ()=>QPage
);
parcelHelpers.export(exports, "QPageContainer", ()=>QPageContainer
);
parcelHelpers.export(exports, "QPageScroller", ()=>QPageScroller
);
parcelHelpers.export(exports, "QPageSticky", ()=>QPageSticky
);
parcelHelpers.export(exports, "QPagination", ()=>QPagination
);
parcelHelpers.export(exports, "QParallax", ()=>QParallax
);
parcelHelpers.export(exports, "QPopupEdit", ()=>QPopupEdit
);
parcelHelpers.export(exports, "QPopupProxy", ()=>QPopupProxy
);
parcelHelpers.export(exports, "QPullToRefresh", ()=>QPullToRefresh
);
parcelHelpers.export(exports, "QRadio", ()=>QRadio
);
parcelHelpers.export(exports, "QRange", ()=>QRange
);
parcelHelpers.export(exports, "QRating", ()=>QRating
);
parcelHelpers.export(exports, "QResizeObserver", ()=>QResizeObserver
);
parcelHelpers.export(exports, "QResponsive", ()=>QResponsive
);
parcelHelpers.export(exports, "QRouteTab", ()=>QRouteTab
);
parcelHelpers.export(exports, "QScrollArea", ()=>QScrollArea
);
parcelHelpers.export(exports, "QScrollObserver", ()=>QScrollObserver
);
parcelHelpers.export(exports, "QSelect", ()=>QSelect
);
parcelHelpers.export(exports, "QSeparator", ()=>QSeparator
);
parcelHelpers.export(exports, "QSkeleton", ()=>QSkeleton
);
parcelHelpers.export(exports, "QSlideItem", ()=>QSlideItem
);
parcelHelpers.export(exports, "QSlideTransition", ()=>QSlideTransition
);
parcelHelpers.export(exports, "QSlider", ()=>QSlider
);
parcelHelpers.export(exports, "QSpace", ()=>QSpace
);
parcelHelpers.export(exports, "QSpinner", ()=>QSpinner
);
parcelHelpers.export(exports, "QSpinnerAudio", ()=>QSpinnerAudio
);
parcelHelpers.export(exports, "QSpinnerBall", ()=>QSpinnerBall
);
parcelHelpers.export(exports, "QSpinnerBars", ()=>QSpinnerBars
);
parcelHelpers.export(exports, "QSpinnerBox", ()=>QSpinnerBox
);
parcelHelpers.export(exports, "QSpinnerClock", ()=>QSpinnerClock
);
parcelHelpers.export(exports, "QSpinnerComment", ()=>QSpinnerComment
);
parcelHelpers.export(exports, "QSpinnerCube", ()=>QSpinnerCube
);
parcelHelpers.export(exports, "QSpinnerDots", ()=>QSpinnerDots
);
parcelHelpers.export(exports, "QSpinnerFacebook", ()=>QSpinnerFacebook
);
parcelHelpers.export(exports, "QSpinnerGears", ()=>QSpinnerGears
);
parcelHelpers.export(exports, "QSpinnerGrid", ()=>QSpinnerGrid
);
parcelHelpers.export(exports, "QSpinnerHearts", ()=>QSpinnerHearts
);
parcelHelpers.export(exports, "QSpinnerHourglass", ()=>QSpinnerHourglass
);
parcelHelpers.export(exports, "QSpinnerInfinity", ()=>QSpinnerInfinity
);
parcelHelpers.export(exports, "QSpinnerIos", ()=>QSpinnerIos
);
parcelHelpers.export(exports, "QSpinnerOrbit", ()=>QSpinnerOrbit
);
parcelHelpers.export(exports, "QSpinnerOval", ()=>QSpinnerOval
);
parcelHelpers.export(exports, "QSpinnerPie", ()=>QSpinnerPie
);
parcelHelpers.export(exports, "QSpinnerPuff", ()=>QSpinnerPuff
);
parcelHelpers.export(exports, "QSpinnerRadio", ()=>QSpinnerRadio
);
parcelHelpers.export(exports, "QSpinnerRings", ()=>QSpinnerRings
);
parcelHelpers.export(exports, "QSpinnerTail", ()=>QSpinnerTail
);
parcelHelpers.export(exports, "QSplitter", ()=>QSplitter
);
parcelHelpers.export(exports, "QStep", ()=>QStep
);
parcelHelpers.export(exports, "QStepper", ()=>QStepper
);
parcelHelpers.export(exports, "QStepperNavigation", ()=>QStepperNavigation
);
parcelHelpers.export(exports, "QTab", ()=>QTab
);
parcelHelpers.export(exports, "QTabPanel", ()=>QTabPanel
);
parcelHelpers.export(exports, "QTabPanels", ()=>QTabPanels
);
parcelHelpers.export(exports, "QTable", ()=>QTable
);
parcelHelpers.export(exports, "QTabs", ()=>QTabs
);
parcelHelpers.export(exports, "QTd", ()=>QTd
);
parcelHelpers.export(exports, "QTh", ()=>QTh
);
parcelHelpers.export(exports, "QTime", ()=>QTime
);
parcelHelpers.export(exports, "QTimeline", ()=>QTimeline
);
parcelHelpers.export(exports, "QTimelineEntry", ()=>QTimelineEntry
);
parcelHelpers.export(exports, "QToggle", ()=>QToggle
);
parcelHelpers.export(exports, "QToolbar", ()=>QToolbar
);
parcelHelpers.export(exports, "QToolbarTitle", ()=>QToolbarTitle
);
parcelHelpers.export(exports, "QTooltip", ()=>QTooltip
);
parcelHelpers.export(exports, "QTr", ()=>QTr
);
parcelHelpers.export(exports, "QTree", ()=>QTree
);
parcelHelpers.export(exports, "QUploader", ()=>QUploader
);
parcelHelpers.export(exports, "QUploaderAddTrigger", ()=>QUploaderAddTrigger
);
parcelHelpers.export(exports, "QVideo", ()=>QVideo
);
parcelHelpers.export(exports, "QVirtualScroll", ()=>QVirtualScroll
);
parcelHelpers.export(exports, "Quasar", ()=>Quasar
);
parcelHelpers.export(exports, "Ripple", ()=>Ripple
);
parcelHelpers.export(exports, "Screen", ()=>Screen
);
parcelHelpers.export(exports, "Scroll", ()=>Scroll
);
parcelHelpers.export(exports, "ScrollFire", ()=>ScrollFire
);
parcelHelpers.export(exports, "SessionStorage", ()=>Plugin
);
parcelHelpers.export(exports, "TouchHold", ()=>TouchHold
);
parcelHelpers.export(exports, "TouchPan", ()=>TouchPan
);
parcelHelpers.export(exports, "TouchRepeat", ()=>TouchRepeat
);
parcelHelpers.export(exports, "TouchSwipe", ()=>TouchSwipe
);
parcelHelpers.export(exports, "clone", ()=>clone
);
parcelHelpers.export(exports, "colors", ()=>colors
);
parcelHelpers.export(exports, "copyToClipboard", ()=>copyToClipboard
);
parcelHelpers.export(exports, "createMetaMixin", ()=>createMetaMixin
);
parcelHelpers.export(exports, "createUploaderComponent", ()=>createUploaderComponent
);
parcelHelpers.export(exports, "date", ()=>date
);
parcelHelpers.export(exports, "debounce", ()=>debounce
);
parcelHelpers.export(exports, "dom", ()=>dom
);
parcelHelpers.export(exports, "event", ()=>event
);
parcelHelpers.export(exports, "exportFile", ()=>exportFile
);
parcelHelpers.export(exports, "extend", ()=>extend
);
parcelHelpers.export(exports, "format", ()=>format
);
parcelHelpers.export(exports, "frameDebounce", ()=>frameDebounce
);
parcelHelpers.export(exports, "getCssVar", ()=>getCssVar
);
parcelHelpers.export(exports, "morph", ()=>morph
);
parcelHelpers.export(exports, "noop", ()=>noop
);
parcelHelpers.export(exports, "openURL", ()=>openUrl
);
parcelHelpers.export(exports, "patterns", ()=>patterns
);
parcelHelpers.export(exports, "scroll", ()=>scroll
);
parcelHelpers.export(exports, "setCssVar", ()=>setCssVar
);
parcelHelpers.export(exports, "throttle", ()=>throttle
);
parcelHelpers.export(exports, "uid", ()=>uid$2
);
parcelHelpers.export(exports, "useDialogPluginComponent", ()=>useDialogPluginComponent
);
parcelHelpers.export(exports, "useFormChild", ()=>useFormChild
);
parcelHelpers.export(exports, "useMeta", ()=>useMeta
);
parcelHelpers.export(exports, "useQuasar", ()=>useQuasar
);
/*!
 * Quasar Framework v2.3.3
 * (c) 2015-present Razvan Stoenescu
 * Released under the MIT License.
 */ var _vue = require("vue");
const isRuntimeSsrPreHydration = _vue.ref(!1);
let iosCorrection;
function getMatch(e, t) {
    const o = /(edge|edga|edgios)\/([\w.]+)/.exec(e) || /(opr)[\/]([\w.]+)/.exec(e) || /(vivaldi)[\/]([\w.]+)/.exec(e) || /(chrome|crios)[\/]([\w.]+)/.exec(e) || /(iemobile)[\/]([\w.]+)/.exec(e) || /(version)(applewebkit)[\/]([\w.]+).*(safari)[\/]([\w.]+)/.exec(e) || /(webkit)[\/]([\w.]+).*(version)[\/]([\w.]+).*(safari)[\/]([\w.]+)/.exec(e) || /(firefox|fxios)[\/]([\w.]+)/.exec(e) || /(webkit)[\/]([\w.]+)/.exec(e) || /(opera)(?:.*version|)[\/]([\w.]+)/.exec(e) || /(msie) ([\w.]+)/.exec(e) || e.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec(e) || e.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e) || [];
    return {
        browser: o[5] || o[3] || o[1] || "",
        version: o[2] || o[4] || "0",
        versionNumber: o[4] || o[2] || "0",
        platform: t[0] || ""
    };
}
function getPlatformMatch(e) {
    return /(ipad)/.exec(e) || /(ipod)/.exec(e) || /(windows phone)/.exec(e) || /(iphone)/.exec(e) || /(kindle)/.exec(e) || /(silk)/.exec(e) || /(android)/.exec(e) || /(win)/.exec(e) || /(mac)/.exec(e) || /(linux)/.exec(e) || /(cros)/.exec(e) || /(playbook)/.exec(e) || /(bb)/.exec(e) || /(blackberry)/.exec(e) || [];
}
const hasTouch = "ontouchstart" in window || window.navigator.maxTouchPoints > 0;
function applyIosCorrection(e) {
    iosCorrection = {
        is: {
            ...e
        }
    }, delete e.mac, delete e.desktop;
    const t = Math.min(window.innerHeight, window.innerWidth) > 414 ? "ipad" : "iphone";
    Object.assign(e, {
        mobile: !0,
        ios: !0,
        platform: t,
        [t]: !0
    });
}
function getPlatform(e) {
    const t = e.toLowerCase(), o = getPlatformMatch(t), n = getMatch(t, o), a = {
    };
    n.browser && (a[n.browser] = !0, a.version = n.version, a.versionNumber = parseInt(n.versionNumber, 10)), n.platform && (a[n.platform] = !0);
    const l = a.android || a.ios || a.bb || a.blackberry || a.ipad || a.iphone || a.ipod || a.kindle || a.playbook || a.silk || a["windows phone"];
    return !0 === l || t.indexOf("mobile") > -1 ? (a.mobile = !0, a.edga || a.edgios ? (a.edge = !0, n.browser = "edge") : a.crios ? (a.chrome = !0, n.browser = "chrome") : a.fxios && (a.firefox = !0, n.browser = "firefox")) : a.desktop = !0, (a.ipod || a.ipad || a.iphone) && (a.ios = !0), a["windows phone"] && (a.winphone = !0, delete a["windows phone"]), (a.chrome || a.opr || a.safari || a.vivaldi || !0 === a.mobile && !0 !== a.ios && !0 !== l) && (a.webkit = !0), (a.safari && a.blackberry || a.bb) && (n.browser = "blackberry", a.blackberry = !0), a.safari && a.playbook && (n.browser = "playbook", a.playbook = !0), a.opr && (n.browser = "opera", a.opera = !0), a.safari && a.android && (n.browser = "android", a.android = !0), a.safari && a.kindle && (n.browser = "kindle", a.kindle = !0), a.safari && a.silk && (n.browser = "silk", a.silk = !0), a.vivaldi && (n.browser = "vivaldi", a.vivaldi = !0), a.name = n.browser, a.platform = n.platform, t.indexOf("electron") > -1 ? a.electron = !0 : document.location.href.indexOf("-extension://") > -1 ? a.bex = !0 : (void 0 !== window.Capacitor ? (a.capacitor = !0, a.nativeMobile = !0, a.nativeMobileWrapper = "capacitor") : void 0 === window._cordovaNative && void 0 === window.cordova || (a.cordova = !0, a.nativeMobile = !0, a.nativeMobileWrapper = "cordova"), !0 === hasTouch && !0 === a.mac && (!0 === a.desktop && !0 === a.safari || !0 === a.nativeMobile && !0 !== a.android && !0 !== a.ios && !0 !== a.ipad) && applyIosCorrection(a)), a;
}
const userAgent = navigator.userAgent || navigator.vendor || window.opera, ssrClient = {
    has: {
        touch: !1,
        webStorage: !1
    },
    within: {
        iframe: !1
    }
}, client = {
    userAgent: userAgent,
    is: getPlatform(userAgent),
    has: {
        touch: hasTouch
    },
    within: {
        iframe: window.self !== window.top
    }
}, Platform = {
    install (e) {
        const { $q: t  } = e;
        !0 === isRuntimeSsrPreHydration.value ? (e.onSSRHydrated.push(()=>{
            isRuntimeSsrPreHydration.value = !1, Object.assign(t.platform, client), iosCorrection = void 0;
        }), t.platform = _vue.reactive(this)) : t.platform = this;
    }
};
{
    let e;
    Object.defineProperty(client.has, "webStorage", {
        get: ()=>{
            if (void 0 !== e) return e;
            try {
                if (window.localStorage) return e = !0, !0;
            } catch (e2) {
            }
            return e = !1, !1;
        }
    }), !0 === client.is.ios && window.navigator.vendor.toLowerCase().indexOf("apple"), !0 === isRuntimeSsrPreHydration.value ? Object.assign(Platform, client, iosCorrection, ssrClient) : Object.assign(Platform, client);
}var defineReactivePlugin = (e, t1)=>{
    const o = {
    }, n = _vue.reactive(e);
    return Object.keys(e).forEach((e)=>{
        o[e] = {
            get: ()=>n[e]
            ,
            set: (t)=>{
                n[e] = t;
            }
        };
    }), Object.defineProperties(t1, o), t1;
};
const listenOpts = {
    hasPassive: !1,
    passiveCapture: !0,
    notPassiveCapture: !0
};
try {
    const e = Object.defineProperty({
    }, "passive", {
        get () {
            Object.assign(listenOpts, {
                hasPassive: !0,
                passive: {
                    passive: !0
                },
                notPassive: {
                    passive: !1
                },
                passiveCapture: {
                    passive: !0,
                    capture: !0
                },
                notPassiveCapture: {
                    passive: !1,
                    capture: !0
                }
            });
        }
    });
    window.addEventListener("qtest", null, e), window.removeEventListener("qtest", null, e);
} catch (e3) {
}
function noop() {
}
function leftClick(e) {
    return 0 === e.button;
}
function middleClick(e) {
    return 1 === e.button;
}
function rightClick(e) {
    return 2 === e.button;
}
function position(e) {
    return e.touches && e.touches[0] ? e = e.touches[0] : e.changedTouches && e.changedTouches[0] ? e = e.changedTouches[0] : e.targetTouches && e.targetTouches[0] && (e = e.targetTouches[0]), {
        top: e.clientY,
        left: e.clientX
    };
}
function getEventPath(e) {
    if (e.path) return e.path;
    if (e.composedPath) return e.composedPath();
    const t = [];
    let o = e.target;
    while(o){
        if (t.push(o), "HTML" === o.tagName) return t.push(document), t.push(window), t;
        o = o.parentElement;
    }
}
const LINE_HEIGHT = 40, PAGE_HEIGHT = 800;
function getMouseWheelDistance(e) {
    let t = e.deltaX, o = e.deltaY;
    if ((t || o) && e.deltaMode) {
        const n = 1 === e.deltaMode ? LINE_HEIGHT : PAGE_HEIGHT;
        t *= n, o *= n;
    }
    return e.shiftKey && !t && ([o, t] = [
        t,
        o
    ]), {
        x: t,
        y: o
    };
}
function stop(e) {
    e.stopPropagation();
}
function prevent(e) {
    !1 !== e.cancelable && e.preventDefault();
}
function stopAndPrevent(e) {
    !1 !== e.cancelable && e.preventDefault(), e.stopPropagation();
}
function preventDraggable(e4, t) {
    if (void 0 === e4 || !0 === t && !0 === e4.__dragPrevented) return;
    const o = !0 === t ? (e)=>{
        e.__dragPrevented = !0, e.addEventListener("dragstart", prevent, listenOpts.notPassiveCapture);
    } : (e)=>{
        delete e.__dragPrevented, e.removeEventListener("dragstart", prevent, listenOpts.notPassiveCapture);
    };
    e4.querySelectorAll("a, img").forEach(o);
}
function addEvt(e, t2, o) {
    const n = `__q_${t2}_evt`;
    e[n] = void 0 !== e[n] ? e[n].concat(o) : o, o.forEach((t)=>{
        t[0].addEventListener(t[1], e[t[2]], listenOpts[t[3]]);
    });
}
function cleanEvt(e, t3) {
    const o = `__q_${t3}_evt`;
    void 0 !== e[o] && (e[o].forEach((t)=>{
        t[0].removeEventListener(t[1], e[t[2]], listenOpts[t[3]]);
    }), e[o] = void 0);
}
var event = {
    listenOpts: listenOpts,
    leftClick: leftClick,
    middleClick: middleClick,
    rightClick: rightClick,
    position: position,
    getEventPath: getEventPath,
    getMouseWheelDistance: getMouseWheelDistance,
    stop: stop,
    prevent: prevent,
    stopAndPrevent: stopAndPrevent,
    preventDraggable: preventDraggable
};
function debounce(e, t = 250, o) {
    let n;
    function a1() {
        const a = arguments, l = ()=>{
            n = void 0, !0 !== o && e.apply(this, a);
        };
        clearTimeout(n), !0 === o && void 0 === n && e.apply(this, a), n = setTimeout(l, t);
    }
    return a1.cancel = ()=>{
        clearTimeout(n);
    }, a1;
}
const SIZE_LIST = [
    "sm",
    "md",
    "lg",
    "xl"
], { passive: passive$4  } = listenOpts;
var Screen = defineReactivePlugin({
    width: 0,
    height: 0,
    name: "xs",
    sizes: {
        sm: 600,
        md: 1024,
        lg: 1440,
        xl: 1920
    },
    lt: {
        sm: !0,
        md: !0,
        lg: !0,
        xl: !0
    },
    gt: {
        xs: !1,
        sm: !1,
        md: !1,
        lg: !1
    },
    xs: !0,
    sm: !1,
    md: !1,
    lg: !1,
    xl: !1
}, {
    setSizes: noop,
    setDebounce: noop,
    install ({ $q: e5 , onSSRHydrated: t4  }) {
        if (e5.screen = this, !0 === this.__installed) return void (void 0 !== e5.config.screen && (!1 === e5.config.screen.bodyClasses ? document.body.classList.remove(`screen--${this.name}`) : this.__update(!0)));
        const o = void 0 !== e5.config.screen && !0 === e5.config.screen.bodyClasses;
        this.__update = (e)=>{
            const t = window.innerWidth, n = window.innerHeight;
            if (n !== this.height && (this.height = n), t !== this.width) this.width = t;
            else if (!0 !== e) return;
            let a = this.sizes;
            this.gt.xs = t >= a.sm, this.gt.sm = t >= a.md, this.gt.md = t >= a.lg, this.gt.lg = t >= a.xl, this.lt.sm = t < a.sm, this.lt.md = t < a.md, this.lt.lg = t < a.lg, this.lt.xl = t < a.xl, this.xs = this.lt.sm, this.sm = !0 === this.gt.xs && !0 === this.lt.md, this.md = !0 === this.gt.sm && !0 === this.lt.lg, this.lg = !0 === this.gt.md && !0 === this.lt.xl, this.xl = this.gt.lg, a = (!0 === this.xs ? "xs" : !0 === this.sm && "sm") || !0 === this.md && "md" || !0 === this.lg && "lg" || "xl", a !== this.name && (!0 === o && (document.body.classList.remove(`screen--${this.name}`), document.body.classList.add(`screen--${a}`)), this.name = a);
        };
        let n1, a2 = {
        }, l = 16;
        this.setSizes = (e)=>{
            SIZE_LIST.forEach((t)=>{
                void 0 !== e[t] && (a2[t] = e[t]);
            });
        }, this.setDebounce = (e)=>{
            l = e;
        };
        const i = ()=>{
            const e6 = getComputedStyle(document.body), t5 = void 0 !== window.visualViewport ? window.visualViewport : window;
            e6.getPropertyValue("--q-size-sm") && SIZE_LIST.forEach((t)=>{
                this.sizes[t] = parseInt(e6.getPropertyValue(`--q-size-${t}`), 10);
            }), this.setSizes = (e)=>{
                SIZE_LIST.forEach((t)=>{
                    e[t] && (this.sizes[t] = e[t]);
                }), this.__update(!0);
            }, this.setDebounce = (e)=>{
                void 0 !== n1 && t5.removeEventListener("resize", n1, passive$4), n1 = e > 0 ? debounce(this.__update, e) : this.__update, t5.addEventListener("resize", n1, passive$4);
            }, this.setDebounce(l), Object.keys(a2).length > 0 ? (this.setSizes(a2), a2 = void 0) : this.__update(), !0 === o && "xs" === this.name && document.body.classList.add("screen--xs");
        };
        !0 === isRuntimeSsrPreHydration.value ? t4.push(i) : i();
    }
});
const Plugin$8 = defineReactivePlugin({
    isActive: !1,
    mode: !1
}, {
    __media: void 0,
    set (e) {
        Plugin$8.mode = e, "auto" === e ? (void 0 === Plugin$8.__media && (Plugin$8.__media = window.matchMedia("(prefers-color-scheme: dark)"), Plugin$8.__updateMedia = ()=>{
            Plugin$8.set("auto");
        }, Plugin$8.__media.addListener(Plugin$8.__updateMedia)), e = Plugin$8.__media.matches) : void 0 !== Plugin$8.__media && (Plugin$8.__media.removeListener(Plugin$8.__updateMedia), Plugin$8.__media = void 0), Plugin$8.isActive = !0 === e, document.body.classList.remove(`body--${!0 === e ? "light" : "dark"}`), document.body.classList.add(`body--${!0 === e ? "dark" : "light"}`);
    },
    toggle () {
        Plugin$8.set(!1 === Plugin$8.isActive);
    },
    install ({ $q: e , onSSRHydrated: t , ssrContext: o  }) {
        const { dark: n  } = e.config;
        if (e.dark = this, !0 === this.__installed && void 0 === n) return;
        this.isActive = !0 === n;
        const a = void 0 !== n && n;
        if (!0 === isRuntimeSsrPreHydration.value) {
            const e7 = (e)=>{
                this.__fromSSR = e;
            }, o = this.set;
            this.set = e7, e7(a), t.push(()=>{
                this.set = o, this.set(this.__fromSSR);
            });
        } else this.set(a);
    }
}), getTrue = ()=>!0
;
function filterInvalidPath(e) {
    return "string" === typeof e && "" !== e && "/" !== e && "#/" !== e;
}
function normalizeExitPath(e) {
    return !0 === e.startsWith("#") && (e = e.substr(1)), !1 === e.startsWith("/") && (e = "/" + e), !0 === e.endsWith("/") && (e = e.substr(0, e.length - 1)), "#" + e;
}
function getShouldExitFn(e) {
    if (!1 === e.backButtonExit) return ()=>!1
    ;
    if ("*" === e.backButtonExit) return getTrue;
    const t = [
        "#/"
    ];
    return !0 === Array.isArray(e.backButtonExit) && t.push(...e.backButtonExit.filter(filterInvalidPath).map(normalizeExitPath)), ()=>t.includes(window.location.hash)
    ;
}
var History = {
    __history: [],
    add: noop,
    remove: noop,
    install ({ $q: e8  }) {
        if (!0 === this.__installed) return;
        const { cordova: t6 , capacitor: o  } = client.is;
        if (!0 !== t6 && !0 !== o) return;
        const n = e8.config[!0 === t6 ? "cordova" : "capacitor"];
        if (void 0 !== n && !1 === n.backButton) return;
        if (!0 === o && (void 0 === window.Capacitor || void 0 === window.Capacitor.Plugins.App)) return;
        this.add = (e)=>{
            void 0 === e.condition && (e.condition = getTrue), this.__history.push(e);
        }, this.remove = (e)=>{
            const t = this.__history.indexOf(e);
            t >= 0 && this.__history.splice(t, 1);
        };
        const a = getShouldExitFn(Object.assign({
            backButtonExit: !0
        }, n)), l = ()=>{
            if (this.__history.length) {
                const e = this.__history[this.__history.length - 1];
                !0 === e.condition() && (this.__history.pop(), e.handler());
            } else !0 === a() ? navigator.app.exitApp() : window.history.back();
        };
        !0 === t6 ? document.addEventListener("deviceready", ()=>{
            document.addEventListener("backbutton", l, !1);
        }) : window.Capacitor.Plugins.App.addListener("backButton", l);
    }
}, defaultLang = {
    isoName: "en-US",
    nativeName: "English (US)",
    label: {
        clear: "Clear",
        ok: "OK",
        cancel: "Cancel",
        close: "Close",
        set: "Set",
        select: "Select",
        reset: "Reset",
        remove: "Remove",
        update: "Update",
        create: "Create",
        search: "Search",
        filter: "Filter",
        refresh: "Refresh"
    },
    date: {
        days: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        daysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        firstDayOfWeek: 0,
        format24h: !1,
        pluralDay: "days"
    },
    table: {
        noData: "No data available",
        noResults: "No matching records found",
        loading: "Loading...",
        selectedRecords: (e)=>1 === e ? "1 record selected." : (0 === e ? "No" : e) + " records selected."
        ,
        recordsPerPage: "Records per page:",
        allRows: "All",
        pagination: (e, t, o)=>e + "-" + t + " of " + o
        ,
        columns: "Columns"
    },
    editor: {
        url: "URL",
        bold: "Bold",
        italic: "Italic",
        strikethrough: "Strikethrough",
        underline: "Underline",
        unorderedList: "Unordered List",
        orderedList: "Ordered List",
        subscript: "Subscript",
        superscript: "Superscript",
        hyperlink: "Hyperlink",
        toggleFullscreen: "Toggle Fullscreen",
        quote: "Quote",
        left: "Left align",
        center: "Center align",
        right: "Right align",
        justify: "Justify align",
        print: "Print",
        outdent: "Decrease indentation",
        indent: "Increase indentation",
        removeFormat: "Remove formatting",
        formatting: "Formatting",
        fontSize: "Font Size",
        align: "Align",
        hr: "Insert Horizontal Rule",
        undo: "Undo",
        redo: "Redo",
        heading1: "Heading 1",
        heading2: "Heading 2",
        heading3: "Heading 3",
        heading4: "Heading 4",
        heading5: "Heading 5",
        heading6: "Heading 6",
        paragraph: "Paragraph",
        code: "Code",
        size1: "Very small",
        size2: "A bit small",
        size3: "Normal",
        size4: "Medium-large",
        size5: "Big",
        size6: "Very big",
        size7: "Maximum",
        defaultFont: "Default Font",
        viewSource: "View Source"
    },
    tree: {
        noNodes: "No nodes available",
        noResults: "No matching nodes found"
    }
};
function getLocale() {
    const e9 = !0 === Array.isArray(navigator.languages) && navigator.languages.length > 0 ? navigator.languages[0] : navigator.language;
    if ("string" === typeof e9) return e9.split(/[-_]/).map((e, t)=>0 === t ? e.toLowerCase() : t > 1 || e.length < 4 ? e.toUpperCase() : e[0].toUpperCase() + e.slice(1).toLowerCase()
    ).join("-");
}
const Plugin$7 = defineReactivePlugin({
    __langPack: {
    }
}, {
    getLocale: getLocale,
    set (e = defaultLang, t) {
        const o = {
            ...e,
            rtl: !0 === e.rtl,
            getLocale: getLocale
        };
        {
            const e = document.documentElement;
            e.setAttribute("dir", !0 === o.rtl ? "rtl" : "ltr"), e.setAttribute("lang", o.isoName), o.set = Plugin$7.set, Object.assign(Plugin$7.__langPack, o), Plugin$7.props = o, Plugin$7.isoName = o.isoName, Plugin$7.nativeName = o.nativeName;
        }
    },
    install ({ $q: e , lang: t , ssrContext: o  }) {
        e.lang = Plugin$7.__langPack, !0 === this.__installed ? void 0 !== t && this.set(t) : this.set(t || defaultLang);
    }
});
function setCssVar(e, t, o = document.body) {
    if ("string" !== typeof e) throw new TypeError("Expected a string as propName");
    if ("string" !== typeof t) throw new TypeError("Expected a string as value");
    if (!(o instanceof Element)) throw new TypeError("Expected a DOM element");
    o.style.setProperty(`--q-${e}`, t);
}
let lastKeyCompositionStatus = !1;
function onKeyDownComposition(e) {
    lastKeyCompositionStatus = !0 === e.isComposing;
}
function shouldIgnoreKey(e) {
    return !0 === lastKeyCompositionStatus || e !== Object(e) || !0 === e.isComposing || !0 === e.qKeyEvent;
}
function isKeyCode(e, t) {
    return !0 !== shouldIgnoreKey(e) && [].concat(t).includes(e.keyCode);
}
function getMobilePlatform(e) {
    return !0 === e.ios ? "ios" : !0 === e.android ? "android" : void 0;
}
function getBodyClasses({ is: e , has: t , within: o  }, n) {
    const a = [
        !0 === e.desktop ? "desktop" : "mobile",
        `${!1 === t.touch ? "no-" : ""}touch`
    ];
    if (!0 === e.mobile) {
        const t = getMobilePlatform(e);
        void 0 !== t && a.push("platform-" + t);
    }
    if (!0 === e.nativeMobile) {
        const t = e.nativeMobileWrapper;
        a.push(t), a.push("native-mobile"), !0 !== e.ios || void 0 !== n[t] && !1 === n[t].iosStatusBarPadding || a.push("q-ios-padding");
    } else !0 === e.electron ? a.push("electron") : !0 === e.bex && a.push("bex");
    return !0 === o.iframe && a.push("within-iframe"), a;
}
function applyClientSsrCorrections() {
    const e = document.body.className;
    let t = e;
    void 0 !== iosCorrection && (t = t.replace("desktop", "platform-ios mobile")), !0 === client.has.touch && (t = t.replace("no-touch", "touch")), !0 === client.within.iframe && (t += " within-iframe"), e !== t && (document.body.className = t);
}
function setColors(e) {
    for(const t in e)setCssVar(t, e[t]);
}
var Body = {
    install (e) {
        if (!0 !== this.__installed) {
            if (!0 === isRuntimeSsrPreHydration.value) applyClientSsrCorrections();
            else {
                const { $q: t  } = e;
                void 0 !== t.config.brand && setColors(t.config.brand);
                const o = getBodyClasses(client, t.config);
                document.body.classList.add.apply(document.body.classList, o);
            }
            !0 === client.is.ios && document.body.addEventListener("touchstart", noop), window.addEventListener("keydown", onKeyDownComposition, !0);
        }
    }
}, materialIcons = {
    name: "material-icons",
    type: {
        positive: "check_circle",
        negative: "warning",
        info: "info",
        warning: "priority_high"
    },
    arrow: {
        up: "arrow_upward",
        right: "arrow_forward",
        down: "arrow_downward",
        left: "arrow_back",
        dropdown: "arrow_drop_down"
    },
    chevron: {
        left: "chevron_left",
        right: "chevron_right"
    },
    colorPicker: {
        spectrum: "gradient",
        tune: "tune",
        palette: "style"
    },
    pullToRefresh: {
        icon: "refresh"
    },
    carousel: {
        left: "chevron_left",
        right: "chevron_right",
        up: "keyboard_arrow_up",
        down: "keyboard_arrow_down",
        navigationIcon: "lens"
    },
    chip: {
        remove: "cancel",
        selected: "check"
    },
    datetime: {
        arrowLeft: "chevron_left",
        arrowRight: "chevron_right",
        now: "access_time",
        today: "today"
    },
    editor: {
        bold: "format_bold",
        italic: "format_italic",
        strikethrough: "strikethrough_s",
        underline: "format_underlined",
        unorderedList: "format_list_bulleted",
        orderedList: "format_list_numbered",
        subscript: "vertical_align_bottom",
        superscript: "vertical_align_top",
        hyperlink: "link",
        toggleFullscreen: "fullscreen",
        quote: "format_quote",
        left: "format_align_left",
        center: "format_align_center",
        right: "format_align_right",
        justify: "format_align_justify",
        print: "print",
        outdent: "format_indent_decrease",
        indent: "format_indent_increase",
        removeFormat: "format_clear",
        formatting: "text_format",
        fontSize: "format_size",
        align: "format_align_left",
        hr: "remove",
        undo: "undo",
        redo: "redo",
        heading: "format_size",
        code: "code",
        size: "format_size",
        font: "font_download",
        viewSource: "code"
    },
    expansionItem: {
        icon: "keyboard_arrow_down",
        denseIcon: "arrow_drop_down"
    },
    fab: {
        icon: "add",
        activeIcon: "close"
    },
    field: {
        clear: "cancel",
        error: "error"
    },
    pagination: {
        first: "first_page",
        prev: "keyboard_arrow_left",
        next: "keyboard_arrow_right",
        last: "last_page"
    },
    rating: {
        icon: "grade"
    },
    stepper: {
        done: "check",
        active: "edit",
        error: "warning"
    },
    tabs: {
        left: "chevron_left",
        right: "chevron_right",
        up: "keyboard_arrow_up",
        down: "keyboard_arrow_down"
    },
    table: {
        arrowUp: "arrow_upward",
        warning: "warning",
        firstPage: "first_page",
        prevPage: "chevron_left",
        nextPage: "chevron_right",
        lastPage: "last_page"
    },
    tree: {
        icon: "play_arrow"
    },
    uploader: {
        done: "done",
        clear: "clear",
        add: "add_box",
        upload: "cloud_upload",
        removeQueue: "clear_all",
        removeUploaded: "done_all"
    }
};
const Plugin$6 = defineReactivePlugin({
    iconMapFn: null,
    __icons: {
    }
}, {
    set (e, t) {
        const o = {
            ...e,
            rtl: !0 === e.rtl
        };
        o.set = Plugin$6.set, Object.assign(Plugin$6.__icons, o);
    },
    install ({ $q: e10 , iconSet: t , ssrContext: o  }) {
        void 0 !== e10.config.iconMapFn && (this.iconMapFn = e10.config.iconMapFn), e10.iconSet = this.__icons, Object.defineProperty(e10, "iconMapFn", {
            get: ()=>this.iconMapFn
            ,
            set: (e)=>{
                this.iconMapFn = e;
            }
        }), !0 === this.__installed ? void 0 !== t && this.set(t) : this.set(t || materialIcons);
    }
}), quasarKey = "_q_", timelineKey = "_q_t_", stepperKey = "_q_s_", layoutKey = "_q_l_", pageContainerKey = "_q_pc_", fabKey = "_q_f_", formKey = "_q_fo_", tabsKey = "_q_tabs_", uploaderKey = "_q_u_", globalConfig = {
};
let globalConfigIsFrozen = !1;
function freezeGlobalConfig() {
    globalConfigIsFrozen = !0;
}
const autoInstalledPlugins = [
    Platform,
    Body,
    Plugin$8,
    Screen,
    History,
    Plugin$7,
    Plugin$6
];
function createChildApp(e, t) {
    const o = _vue.createApp(e);
    o.config.globalProperties = t.config.globalProperties;
    const { reload: n , ...a } = t._context;
    return Object.assign(o._context, a), o;
}
function installPlugins(e, t7) {
    t7.forEach((t)=>{
        t.install(e), t.__installed = !0;
    });
}
function prepareApp(e11, t8, o) {
    e11.config.globalProperties.$q = o.$q, e11.provide(quasarKey, o.$q), installPlugins(o, autoInstalledPlugins), void 0 !== t8.components && Object.values(t8.components).forEach((t)=>{
        Object(t) === t && void 0 !== t.name && e11.component(t.name, t);
    }), void 0 !== t8.directives && Object.values(t8.directives).forEach((t)=>{
        Object(t) === t && void 0 !== t.name && e11.directive(t.name, t);
    }), void 0 !== t8.plugins && installPlugins(o, Object.values(t8.plugins).filter((e)=>"function" === typeof e.install && !1 === autoInstalledPlugins.includes(e)
    )), !0 === isRuntimeSsrPreHydration.value && (o.$q.onSSRHydrated = ()=>{
        o.onSSRHydrated.forEach((e)=>{
            e();
        }), o.$q.onSSRHydrated = ()=>{
        };
    });
}
var installQuasar = function(e, t = {
}) {
    const o = {
        version: "2.3.3"
    };
    !1 === globalConfigIsFrozen ? (void 0 !== t.config && Object.assign(globalConfig, t.config), o.config = {
        ...globalConfig
    }, freezeGlobalConfig()) : o.config = t.config || {
    }, prepareApp(e, t, {
        parentApp: e,
        $q: o,
        lang: t.lang,
        iconSet: t.iconSet,
        onSSRHydrated: []
    });
};
const createComponent = (e)=>_vue.markRaw(_vue.defineComponent(e))
, createDirective = (e)=>_vue.markRaw(e)
, units = [
    "B",
    "KB",
    "MB",
    "GB",
    "TB",
    "PB"
];
function humanStorageSize(e) {
    let t = 0;
    while(parseInt(e, 10) >= 1024 && t < units.length - 1)e /= 1024, ++t;
    return `${e.toFixed(1)}${units[t]}`;
}
function capitalize(e) {
    return e.charAt(0).toUpperCase() + e.slice(1);
}
function between(e, t, o) {
    return o <= t ? t : Math.min(o, Math.max(t, e));
}
function normalizeToInterval(e, t, o) {
    if (o <= t) return t;
    const n = o - t + 1;
    let a = t + (e - t) % n;
    return a < t && (a = n + a), 0 === a ? 0 : a;
}
function pad(e, t = 2, o = "0") {
    if (void 0 === e || null === e) return e;
    const n = "" + e;
    return n.length >= t ? n : new Array(t - n.length + 1).join(o) + n;
}
var format = {
    humanStorageSize: humanStorageSize,
    capitalize: capitalize,
    between: between,
    normalizeToInterval: normalizeToInterval,
    pad: pad
};
const xhr = XMLHttpRequest, send = xhr.prototype.send, stackStart = [], stackStop = [];
let highjackCount = 0;
function translate({ p: e , pos: t , active: o , horiz: n , reverse: a , dir: l  }) {
    let i = 1, r = 1;
    return n ? (a && (i = -1), "bottom" === t && (r = -1), {
        transform: `translate3d(${i * (e - 100)}%,${o ? 0 : -200 * r}%,0)`
    }) : (a && (r = -1), "right" === t && (i = -1), {
        transform: `translate3d(${o ? 0 : l * i * -200}%,${r * (e - 100)}%,0)`
    });
}
function inc(e, t) {
    return "number" !== typeof t && (t = e < 25 ? 3 * Math.random() + 3 : e < 65 ? 3 * Math.random() : e < 85 ? 2 * Math.random() : e < 99 ? 0.6 : 0), between(e + t, 0, 100);
}
function highjackAjax(e12, t) {
    function o() {
        stackStop.forEach((e)=>{
            e();
        });
    }
    stackStart.push(e12), stackStop.push(t), highjackCount++, highjackCount > 1 || (xhr.prototype.send = function() {
        stackStart.forEach((e)=>{
            e();
        }), this.addEventListener("loadend", o, !1), send.apply(this, arguments);
    });
}
function restoreAjax(e, t) {
    stackStart.splice(stackStart.indexOf(e), 1), stackStop.splice(stackStop.indexOf(t), 1), highjackCount = Math.max(0, highjackCount - 1), 0 === highjackCount && (xhr.prototype.send = send);
}
var QAjaxBar = createComponent({
    name: "QAjaxBar",
    props: {
        position: {
            type: String,
            default: "top",
            validator: (e)=>[
                    "top",
                    "right",
                    "bottom",
                    "left"
                ].includes(e)
        },
        size: {
            type: String,
            default: "2px"
        },
        color: String,
        skipHijack: Boolean,
        reverse: Boolean
    },
    emits: [
        "start",
        "stop"
    ],
    setup (e13, { emit: t9  }) {
        const { proxy: o1  } = _vue.getCurrentInstance(), n = _vue.ref(0), a = _vue.ref(!1), l1 = _vue.ref(!0);
        let i, r, s = 0;
        const u = _vue.computed(()=>`q-loading-bar q-loading-bar--${e13.position}` + (void 0 !== e13.color ? ` bg-${e13.color}` : "") + (!0 === l1.value ? "" : " no-transition")
        ), c = _vue.computed(()=>"top" === e13.position || "bottom" === e13.position
        ), d = _vue.computed(()=>!0 === c.value ? "height" : "width"
        ), p = _vue.computed(()=>{
            const t = a.value, l = translate({
                p: n.value,
                pos: e13.position,
                active: t,
                horiz: c.value,
                reverse: !0 === o1.$q.lang.rtl && [
                    "top",
                    "bottom"
                ].includes(e13.position) ? !e13.reverse : e13.reverse,
                dir: !0 === o1.$q.lang.rtl ? -1 : 1
            });
            return l[d.value] = e13.size, l.opacity = t ? 1 : 0, l;
        }), v = _vue.computed(()=>!0 === a.value ? {
                role: "progressbar",
                "aria-valuemin": 0,
                "aria-valuemax": 100,
                "aria-valuenow": n.value
            } : {
                "aria-hidden": "true"
            }
        );
        function m(e = 300) {
            const o = r;
            r = Math.max(0, e) || 0, s++, s > 1 ? 0 === o && e > 0 ? b() : o > 0 && e <= 0 && clearTimeout(i) : (clearTimeout(i), t9("start"), n.value = 0, !0 !== a.value && (a.value = !0, l1.value = !1, i = setTimeout(()=>{
                l1.value = !0, e > 0 && b();
            }, 100)));
        }
        function f(e) {
            s > 0 && (n.value = inc(n.value, e));
        }
        function g() {
            if (s = Math.max(0, s - 1), s > 0) return;
            clearTimeout(i), t9("stop");
            const e = ()=>{
                l1.value = !0, n.value = 100, i = setTimeout(()=>{
                    a.value = !1;
                }, 1000);
            };
            0 === n.value ? i = setTimeout(e, 1) : e();
        }
        function b() {
            n.value < 100 && (i = setTimeout(()=>{
                f(), b();
            }, r));
        }
        let y;
        return _vue.onMounted(()=>{
            !0 !== e13.skipHijack && (y = !0, highjackAjax(m, g));
        }), _vue.onBeforeUnmount(()=>{
            clearTimeout(i), !0 === y && restoreAjax(m, g);
        }), Object.assign(o1, {
            start: m,
            stop: g,
            increment: f
        }), ()=>_vue.h("div", {
                class: u.value,
                style: p.value,
                ...v.value
            })
        ;
    }
});
const useSizeDefaults = {
    xs: 18,
    sm: 24,
    md: 32,
    lg: 38,
    xl: 46
}, useSizeProps = {
    size: String
};
function useSize(e, t = useSizeDefaults) {
    return _vue.computed(()=>void 0 !== e.size ? {
            fontSize: e.size in t ? `${t[e.size]}px` : e.size
        } : null
    );
}
function hSlot(e, t) {
    return void 0 !== e && e() || t;
}
function hUniqueSlot(e, t) {
    if (void 0 !== e) {
        const t = e();
        if (void 0 !== t && null !== t) return t.slice();
    }
    return t;
}
function hMergeSlot(e, t) {
    return void 0 !== e ? t.concat(e()) : t;
}
function hMergeSlotSafely(e, t) {
    return void 0 === e ? t : void 0 !== t ? t.concat(e()) : e();
}
function hDir(e, t, o, n, a, l) {
    t.key = n + a;
    const i = _vue.h(e, t, o);
    return !0 === a ? _vue.withDirectives(i, l()) : i;
}
const sameFn = (e)=>e
, ionFn = (e)=>`ionicons ${e}`
, libMap = {
    "icon-": sameFn,
    "bt-": (e)=>`bt ${e}`
    ,
    "eva-": (e)=>`eva ${e}`
    ,
    "ion-md": ionFn,
    "ion-ios": ionFn,
    "ion-logo": ionFn,
    "mdi-": (e)=>`mdi ${e}`
    ,
    "iconfont ": sameFn,
    "ti-": (e)=>`themify-icon ${e}`
    ,
    "bi-": (e)=>`bootstrap-icons ${e}`
}, matMap = {
    o_: "-outlined",
    r_: "-round",
    s_: "-sharp"
}, libRE = new RegExp("^(" + Object.keys(libMap).join("|") + ")"), matRE = new RegExp("^(" + Object.keys(matMap).join("|") + ")"), mRE = /^M/, imgRE = /^img:/, svgUseRE = /^svguse:/, ionRE = /^ion-/, faLaRE = /^[l|f]a[s|r|l|b|d|k]? /;
var QIcon = createComponent({
    name: "QIcon",
    props: {
        ...useSizeProps,
        tag: {
            type: String,
            default: "i"
        },
        name: String,
        color: String,
        left: Boolean,
        right: Boolean
    },
    setup (e14, { slots: t10  }) {
        const { proxy: { $q: o2  }  } = _vue.getCurrentInstance(), n2 = useSize(e14), a = _vue.computed(()=>"q-icon" + (!0 === e14.left ? " on-left" : "") + (!0 === e14.right ? " on-right" : "") + (void 0 !== e14.color ? ` text-${e14.color}` : "")
        ), l2 = _vue.computed(()=>{
            let t, n3 = e14.name;
            if (!n3) return {
                none: !0,
                cls: a.value
            };
            if (null !== o2.iconMapFn) {
                const e = o2.iconMapFn(n3);
                if (void 0 !== e) {
                    if (void 0 === e.icon) return {
                        cls: e.cls + " " + a.value,
                        content: void 0 !== e.content ? e.content : " "
                    };
                    n3 = e.icon;
                }
            }
            if (!0 === mRE.test(n3)) {
                const [e15, t11] = n3.split("|");
                return {
                    svg: !0,
                    cls: a.value,
                    nodes: e15.split("&&").map((e)=>{
                        const [t, o, n] = e.split("@@");
                        return _vue.h("path", {
                            style: o,
                            d: t,
                            transform: n
                        });
                    }),
                    viewBox: void 0 !== t11 ? t11 : "0 0 24 24"
                };
            }
            if (!0 === imgRE.test(n3)) return {
                img: !0,
                cls: a.value,
                src: n3.substring(4)
            };
            if (!0 === svgUseRE.test(n3)) {
                const [e, t] = n3.split("|");
                return {
                    svguse: !0,
                    cls: a.value,
                    src: e.substring(7),
                    viewBox: void 0 !== t ? t : "0 0 24 24"
                };
            }
            let l = " ";
            const i = n3.match(libRE);
            if (null !== i) t = libMap[i[1]](n3);
            else if (!0 === faLaRE.test(n3)) t = n3;
            else if (!0 === ionRE.test(n3)) t = `ionicons ion-${!0 === o2.platform.is.ios ? "ios" : "md"}${n3.substr(3)}`;
            else {
                t = "notranslate material-icons";
                const e = n3.match(matRE);
                null !== e && (n3 = n3.substring(2), t += matMap[e[1]]), l = n3;
            }
            return {
                cls: t + " " + a.value,
                content: l
            };
        });
        return ()=>{
            const o = {
                class: l2.value.cls,
                style: n2.value,
                "aria-hidden": "true",
                role: "presentation"
            };
            return !0 === l2.value.none ? _vue.h(e14.tag, o, hSlot(t10.default)) : !0 === l2.value.img ? (o.src = l2.value.src, _vue.h("img", o)) : !0 === l2.value.svg ? (o.viewBox = l2.value.viewBox, _vue.h("svg", o, hMergeSlot(t10.default, l2.value.nodes))) : !0 === l2.value.svguse ? (o.viewBox = l2.value.viewBox, _vue.h("svg", o, hMergeSlot(t10.default, [
                _vue.h("use", {
                    "xlink:href": l2.value.src
                })
            ]))) : _vue.h(e14.tag, o, hMergeSlot(t10.default, [
                l2.value.content
            ]));
        };
    }
}), QAvatar = createComponent({
    name: "QAvatar",
    props: {
        ...useSizeProps,
        fontSize: String,
        color: String,
        textColor: String,
        icon: String,
        square: Boolean,
        rounded: Boolean
    },
    setup (e, { slots: t  }) {
        const o = useSize(e), n = _vue.computed(()=>"q-avatar" + (e.color ? ` bg-${e.color}` : "") + (e.textColor ? ` text-${e.textColor} q-chip--colored` : "") + (!0 === e.square ? " q-avatar--square" : !0 === e.rounded ? " rounded-borders" : "")
        ), a = _vue.computed(()=>e.fontSize ? {
                fontSize: e.fontSize
            } : null
        );
        return ()=>{
            const l = void 0 !== e.icon ? [
                _vue.h(QIcon, {
                    name: e.icon
                })
            ] : void 0;
            return _vue.h("div", {
                class: n.value,
                style: o.value
            }, [
                _vue.h("div", {
                    class: "q-avatar__content row flex-center overflow-hidden",
                    style: a.value
                }, hMergeSlotSafely(t.default, l))
            ]);
        };
    }
});
const alignValues$3 = [
    "top",
    "middle",
    "bottom"
];
var QBadge = createComponent({
    name: "QBadge",
    props: {
        color: String,
        textColor: String,
        floating: Boolean,
        transparent: Boolean,
        multiLine: Boolean,
        outline: Boolean,
        rounded: Boolean,
        label: [
            Number,
            String
        ],
        align: {
            type: String,
            validator: (e)=>alignValues$3.includes(e)
        }
    },
    setup (e, { slots: t12  }) {
        const o = _vue.computed(()=>{
            return void 0 !== e.align ? {
                verticalAlign: e.align
            } : null;
        }), n = _vue.computed(()=>{
            const t = !0 === e.outline && e.color || e.textColor;
            return "q-badge flex inline items-center no-wrap" + ` q-badge--${!0 === e.multiLine ? "multi" : "single"}-line` + (!0 === e.outline ? " q-badge--outline" : void 0 !== e.color ? ` bg-${e.color}` : "") + (void 0 !== t ? ` text-${t}` : "") + (!0 === e.floating ? " q-badge--floating" : "") + (!0 === e.rounded ? " q-badge--rounded" : "") + (!0 === e.transparent ? " q-badge--transparent" : "");
        });
        return ()=>_vue.h("div", {
                class: n.value,
                style: o.value,
                role: "alert",
                "aria-label": e.label
            }, void 0 !== e.label ? e.label : hSlot(t12.default))
        ;
    }
});
const useDarkProps = {
    dark: {
        type: Boolean,
        default: null
    }
};
function useDark(e, t) {
    return _vue.computed(()=>null === e.dark ? t.dark.isActive : e.dark
    );
}
var QBanner = createComponent({
    name: "QBanner",
    props: {
        ...useDarkProps,
        inlineActions: Boolean,
        dense: Boolean,
        rounded: Boolean
    },
    setup (e, { slots: t  }) {
        const o3 = _vue.getCurrentInstance(), n4 = useDark(e, o3.proxy.$q), a = _vue.computed(()=>"q-banner row items-center" + (!0 === e.dense ? " q-banner--dense" : "") + (!0 === n4.value ? " q-banner--dark q-dark" : "") + (!0 === e.rounded ? " rounded-borders" : "")
        ), l = _vue.computed(()=>"q-banner__actions row items-center justify-end" + ` col-${!0 === e.inlineActions ? "auto" : "all"}`
        );
        return ()=>{
            const o = [
                _vue.h("div", {
                    class: "q-banner__avatar col-auto row items-center self-start"
                }, hSlot(t.avatar)),
                _vue.h("div", {
                    class: "q-banner__content col text-body2"
                }, hSlot(t.default))
            ], n = hSlot(t.action);
            return void 0 !== n && o.push(_vue.h("div", {
                class: l.value
            }, n)), _vue.h("div", {
                class: a.value + (!1 === e.inlineActions && void 0 !== n ? " q-banner--top-padding" : ""),
                role: "alert"
            }, o);
        };
    }
}), QBar = createComponent({
    name: "QBar",
    props: {
        ...useDarkProps,
        dense: Boolean
    },
    setup (e, { slots: t  }) {
        const o = _vue.getCurrentInstance(), n = useDark(e, o.proxy.$q), a = _vue.computed(()=>"q-bar row no-wrap items-center" + ` q-bar--${!0 === e.dense ? "dense" : "standard"} ` + ` q-bar--${!0 === n.value ? "dark" : "light"}`
        );
        return ()=>_vue.h("div", {
                class: a.value,
                role: "toolbar"
            }, hSlot(t.default))
        ;
    }
});
const alignMap = {
    left: "start",
    center: "center",
    right: "end",
    between: "between",
    around: "around",
    evenly: "evenly",
    stretch: "stretch"
}, alignValues$2 = Object.keys(alignMap), useAlignProps = {
    align: {
        type: String,
        validator: (e)=>alignValues$2.includes(e)
    }
};
function useAlign(e) {
    return _vue.computed(()=>{
        const t = void 0 === e.align ? !0 === e.vertical ? "stretch" : "left" : e.align;
        return `${!0 === e.vertical ? "items" : "justify"}-${alignMap[t]}`;
    });
}
function getParentVm(e) {
    if (Object(e.$parent) === e.$parent) return e.$parent;
    e = e.$.parent;
    while(Object(e) === e){
        if (Object(e.proxy) === e.proxy) return e.proxy;
        e = e.parent;
    }
}
function getNormalizedVNodes(e16) {
    const t = new Set;
    return e16.forEach((e17)=>{
        "symbol" === typeof e17.type && !0 === Array.isArray(e17.children) ? e17.children.forEach((e)=>{
            t.add(e);
        }) : t.add(e17);
    }), Array.from(t);
}
function vmHasRouter(e) {
    return void 0 !== e.appContext.config.globalProperties.$router;
}
var QBreadcrumbs = createComponent({
    name: "QBreadcrumbs",
    props: {
        ...useAlignProps,
        separator: {
            type: String,
            default: "/"
        },
        separatorColor: String,
        activeColor: {
            type: String,
            default: "primary"
        },
        gutter: {
            type: String,
            validator: (e)=>[
                    "none",
                    "xs",
                    "sm",
                    "md",
                    "lg",
                    "xl"
                ].includes(e)
            ,
            default: "sm"
        }
    },
    setup (e18, { slots: t13  }) {
        const o4 = useAlign(e18), n = _vue.computed(()=>`flex items-center ${o4.value}${"none" === e18.gutter ? "" : ` q-gutter-${e18.gutter}`}`
        ), a = _vue.computed(()=>e18.separatorColor ? ` text-${e18.separatorColor}` : ""
        ), l = _vue.computed(()=>`text-${e18.activeColor}`
        );
        return ()=>{
            const o = getNormalizedVNodes(hSlot(t13.default));
            if (void 0 === o) return;
            let i = 1;
            const r = [], s = o.filter((e)=>void 0 !== e.type && "QBreadcrumbsEl" === e.type.name
            ).length, u = void 0 !== t13.separator ? t13.separator : ()=>e18.separator
            ;
            return o.forEach((e)=>{
                if (void 0 !== e.type && "QBreadcrumbsEl" === e.type.name) {
                    const t = i < s;
                    i++, r.push(_vue.h("div", {
                        class: "flex items-center " + (!0 === t ? l.value : "q-breadcrumbs--last")
                    }, [
                        e
                    ])), !0 === t && r.push(_vue.h("div", {
                        class: "q-breadcrumbs__separator" + a.value
                    }, u()));
                } else r.push(e);
            }), _vue.h("div", {
                class: "q-breadcrumbs"
            }, [
                _vue.h("div", {
                    class: n.value
                }, r)
            ]);
        };
    }
});
function getOriginalPath(e) {
    return e ? e.aliasOf ? e.aliasOf.path : e.path : "";
}
function isSameRouteRecord(e, t) {
    return (e.aliasOf || e) === (t.aliasOf || t);
}
function includesParams(e19, t) {
    for(const o in t){
        const n = t[o], a = e19[o];
        if ("string" === typeof n) {
            if (n !== a) return !1;
        } else if (!1 === Array.isArray(a) || a.length !== n.length || n.some((e, t)=>e !== a[t]
        )) return !1;
    }
    return !0;
}
function isEquivalentArray(e20, t) {
    return !0 === Array.isArray(t) ? e20.length === t.length && e20.every((e, o)=>e === t[o]
    ) : 1 === e20.length && e20[0] === t;
}
function isSameRouteLocationParamsValue(e, t) {
    return !0 === Array.isArray(e) ? isEquivalentArray(e, t) : !0 === Array.isArray(t) ? isEquivalentArray(t, e) : e === t;
}
function isSameRouteLocationParams(e, t) {
    if (Object.keys(e).length !== Object.keys(t).length) return !1;
    for(const o in e)if (!1 === isSameRouteLocationParamsValue(e[o], t[o])) return !1;
    return !0;
}
const useRouterLinkProps = {
    to: [
        String,
        Object
    ],
    replace: Boolean,
    exact: Boolean,
    activeClass: {
        type: String,
        default: "q-router-link--active"
    },
    exactActiveClass: {
        type: String,
        default: "q-router-link--exact-active"
    },
    disable: Boolean
};
function useRouterLink() {
    const e21 = _vue.getCurrentInstance(), { props: t14 , attrs: o5 , proxy: n  } = e21, a3 = vmHasRouter(e21), l3 = _vue.computed(()=>!0 === a3 && !0 !== t14.disable && void 0 !== t14.to && null !== t14.to && "" !== t14.to
    ), i = _vue.computed(()=>{
        if (!0 === l3.value) try {
            return n.$router.resolve(t14.to);
        } catch (e) {
        }
        return null;
    }), r = _vue.computed(()=>null !== i.value
    ), s1 = _vue.computed(()=>!0 === r.value ? "a" : t14.tag || "div"
    ), u = _vue.computed(()=>{
        if (!1 === r.value) return null;
        const { matched: e  } = i.value, { length: t  } = e, o = e[t - 1];
        if (void 0 === o) return -1;
        const a = n.$route.matched;
        if (0 === a.length) return -1;
        const l = a.findIndex(isSameRouteRecord.bind(null, o));
        if (l > -1) return l;
        const s = getOriginalPath(e[t - 2]);
        return t > 1 && getOriginalPath(o) === s && a[a.length - 1].path !== s ? a.findIndex(isSameRouteRecord.bind(null, e[t - 2])) : l;
    }), c = _vue.computed(()=>!0 === r.value && u.value > -1 && includesParams(n.$route.params, i.value.params)
    ), d = _vue.computed(()=>!0 === c.value && u.value === n.$route.matched.length - 1 && isSameRouteLocationParams(n.$route.params, i.value.params)
    ), p = _vue.computed(()=>!0 === r.value ? !0 === d.value ? ` ${t14.exactActiveClass} ${t14.activeClass}` : !0 === t14.exact ? "" : !0 === c.value ? ` ${t14.activeClass}` : "" : ""
    ), v = _vue.computed(()=>!0 === r.value ? {
            href: i.value.href,
            target: o5.target,
            role: "link"
        } : {
        }
    );
    function m(e) {
        return !(!0 === t14.disable || e.metaKey || e.altKey || e.ctrlKey || e.shiftKey || !0 !== e.__qNavigate && !0 === e.defaultPrevented || void 0 !== e.button && 0 !== e.button || "_blank" === o5.target) && (prevent(e), n.$router[!0 === t14.replace ? "replace" : "push"](t14.to).catch(()=>{
        }));
    }
    return {
        hasLink: r,
        linkTag: s1,
        linkRoute: i,
        linkIsActive: c,
        linkIsExactActive: d,
        linkClass: p,
        linkProps: v,
        navigateToLink: m
    };
}
var QBreadcrumbsEl = createComponent({
    name: "QBreadcrumbsEl",
    props: {
        ...useRouterLinkProps,
        label: String,
        icon: String,
        tag: {
            type: String,
            default: "span"
        }
    },
    setup (e22, { slots: t  }) {
        const { linkTag: o , linkProps: n5 , hasLink: a , navigateToLink: l  } = useRouterLink(), i = _vue.computed(()=>{
            const e = {
                ...n5.value
            };
            return !0 === a.value && (e.onClick = l), e;
        }), r = _vue.computed(()=>"q-breadcrumbs__el-icon" + (void 0 !== e22.label ? " q-breadcrumbs__el-icon--with-label" : "")
        );
        return ()=>{
            const n = [];
            return void 0 !== e22.icon && n.push(_vue.h(QIcon, {
                class: r.value,
                name: e22.icon
            })), void 0 !== e22.label && n.push(e22.label), _vue.h(o.value, {
                class: "q-breadcrumbs__el q-link flex inline items-center relative-position",
                ...i.value
            }, hMergeSlot(t.default, n));
        };
    }
});
const useSpinnerProps = {
    size: {
        type: [
            Number,
            String
        ],
        default: "1em"
    },
    color: String
};
function useSpinner(e) {
    return {
        cSize: _vue.computed(()=>e.size in useSizeDefaults ? `${useSizeDefaults[e.size]}px` : e.size
        ),
        classes: _vue.computed(()=>"q-spinner" + (e.color ? ` text-${e.color}` : "")
        )
    };
}
var QSpinner = createComponent({
    name: "QSpinner",
    props: {
        ...useSpinnerProps,
        thickness: {
            type: Number,
            default: 5
        }
    },
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value + " q-spinner-mat",
                width: t.value,
                height: t.value,
                viewBox: "25 25 50 50"
            }, [
                _vue.h("circle", {
                    class: "path",
                    cx: "50",
                    cy: "50",
                    r: "20",
                    fill: "none",
                    stroke: "currentColor",
                    "stroke-width": e.thickness,
                    "stroke-miterlimit": "10"
                })
            ])
        ;
    }
});
function offset(e) {
    if (e === window) return {
        top: 0,
        left: 0
    };
    const { top: t , left: o  } = e.getBoundingClientRect();
    return {
        top: t,
        left: o
    };
}
function style(e, t) {
    return window.getComputedStyle(e).getPropertyValue(t);
}
function height(e) {
    return e === window ? window.innerHeight : e.getBoundingClientRect().height;
}
function width$1(e) {
    return e === window ? window.innerWidth : e.getBoundingClientRect().width;
}
function css(e, t) {
    const o = e.style;
    Object.keys(t).forEach((e)=>{
        o[e] = t[e];
    });
}
function cssBatch(e23, t) {
    e23.forEach((e)=>css(e, t)
    );
}
function ready(e) {
    if ("function" === typeof e) return "loading" !== document.readyState ? e() : void document.addEventListener("DOMContentLoaded", e, !1);
}
function getElement$1(e) {
    if (void 0 === e || null === e) return;
    if ("string" === typeof e) try {
        return document.querySelector(e) || void 0;
    } catch (e24) {
        return;
    }
    const t = !0 === _vue.isRef(e) ? e.value : e;
    return t ? t.$el || t : void 0;
}
function childHasFocus(e, t) {
    if (void 0 === e || null === e || !0 === e.contains(t)) return !0;
    for(let o = e.nextElementSibling; null !== o; o = o.nextElementSibling)if (o.contains(t)) return !0;
    return !1;
}
var dom = {
    offset: offset,
    style: style,
    height: height,
    width: width$1,
    css: css,
    cssBatch: cssBatch,
    ready: ready
};
function throttle(e, t = 250) {
    let o, n = !1;
    return function() {
        return !1 === n && (n = !0, setTimeout(()=>{
            n = !1;
        }, t), o = e.apply(this, arguments)), o;
    };
}
function showRipple(e, t, o, n) {
    !0 === o.modifiers.stop && stop(e);
    const a = o.modifiers.color;
    let l = o.modifiers.center;
    l = !0 === l || !0 === n;
    const i = document.createElement("span"), r = document.createElement("span"), s = position(e), { left: u , top: c , width: d , height: p  } = t.getBoundingClientRect(), v = Math.sqrt(d * d + p * p), m = v / 2, f = `${(d - v) / 2}px`, h = l ? f : `${s.left - u - m}px`, g = `${(p - v) / 2}px`, b = l ? g : `${s.top - c - m}px`;
    r.className = "q-ripple__inner", css(r, {
        height: `${v}px`,
        width: `${v}px`,
        transform: `translate3d(${h},${b},0) scale3d(.2,.2,1)`,
        opacity: 0
    }), i.className = `q-ripple${a ? " text-" + a : ""}`, i.setAttribute("dir", "ltr"), i.appendChild(r), t.appendChild(i);
    const y = ()=>{
        i.remove(), clearTimeout(S);
    };
    o.abort.push(y);
    let S = setTimeout(()=>{
        r.classList.add("q-ripple__inner--enter"), r.style.transform = `translate3d(${f},${g},0) scale3d(1,1,1)`, r.style.opacity = 0.2, S = setTimeout(()=>{
            r.classList.remove("q-ripple__inner--enter"), r.classList.add("q-ripple__inner--leave"), r.style.opacity = 0, S = setTimeout(()=>{
                i.remove(), o.abort.splice(o.abort.indexOf(y), 1);
            }, 275);
        }, 250);
    }, 50);
}
function updateModifiers$1(e, { modifiers: t , value: o , arg: n , instance: a  }) {
    const l = Object.assign({
    }, a.$q.config.ripple, t, o);
    e.modifiers = {
        early: !0 === l.early,
        stop: !0 === l.stop,
        center: !0 === l.center,
        color: l.color || n,
        keyCodes: [].concat(l.keyCodes || 13)
    };
}
var Ripple = createDirective({
    name: "ripple",
    beforeMount (e, t15) {
        const o = {
            enabled: !1 !== t15.value,
            modifiers: {
            },
            abort: [],
            start (t) {
                !0 === o.enabled && !0 !== t.qSkipRipple && (!0 === o.modifiers.early ? !0 === [
                    "mousedown",
                    "touchstart"
                ].includes(t.type) : "click" === t.type) && showRipple(t, e, o, !0 === t.qKeyEvent);
            },
            keystart: throttle((t)=>{
                !0 === o.enabled && !0 !== t.qSkipRipple && !0 === isKeyCode(t, o.modifiers.keyCodes) && t.type === `key${!0 === o.modifiers.early ? "down" : "up"}` && showRipple(t, e, o, !0);
            }, 300)
        };
        updateModifiers$1(o, t15), e.__qripple = o, addEvt(o, "main", [
            [
                e,
                "mousedown",
                "start",
                "passive"
            ],
            [
                e,
                "touchstart",
                "start",
                "passive"
            ],
            [
                e,
                "click",
                "start",
                "passive"
            ],
            [
                e,
                "keydown",
                "keystart",
                "passive"
            ],
            [
                e,
                "keyup",
                "keystart",
                "passive"
            ]
        ]);
    },
    updated (e, t) {
        if (t.oldValue !== t.value) {
            const o = e.__qripple;
            o.enabled = !1 !== t.value, !0 === o.enabled && Object(t.value) === t.value && updateModifiers$1(o, t);
        }
    },
    beforeUnmount (e25) {
        const t = e25.__qripple;
        t.abort.forEach((e)=>{
            e();
        }), cleanEvt(t, "main"), delete e25._qripple;
    }
});
const padding = {
    none: 0,
    xs: 4,
    sm: 8,
    md: 16,
    lg: 24,
    xl: 32
}, defaultSizes$2 = {
    xs: 8,
    sm: 10,
    md: 14,
    lg: 20,
    xl: 24
}, useBtnProps = {
    ...useSizeProps,
    ...useRouterLinkProps,
    type: {
        type: String,
        default: "button"
    },
    label: [
        Number,
        String
    ],
    icon: String,
    iconRight: String,
    round: Boolean,
    outline: Boolean,
    flat: Boolean,
    unelevated: Boolean,
    rounded: Boolean,
    push: Boolean,
    glossy: Boolean,
    size: String,
    fab: Boolean,
    fabMini: Boolean,
    padding: String,
    color: String,
    textColor: String,
    noCaps: Boolean,
    noWrap: Boolean,
    dense: Boolean,
    tabindex: [
        Number,
        String
    ],
    ripple: {
        type: [
            Boolean,
            Object
        ],
        default: !0
    },
    align: {
        ...useAlignProps.align,
        default: "center"
    },
    stack: Boolean,
    stretch: Boolean,
    loading: {
        type: Boolean,
        default: null
    },
    disable: Boolean
};
function useBtn(e26) {
    const t16 = useSize(e26, defaultSizes$2), o6 = useAlign(e26), { hasLink: n , linkProps: a , navigateToLink: l  } = useRouterLink(), i = _vue.computed(()=>{
        const o = !1 === e26.fab && !1 === e26.fabMini ? t16.value : {
        };
        return void 0 !== e26.padding ? Object.assign({
        }, o, {
            padding: e26.padding.split(/\s+/).map((e)=>e in padding ? padding[e] + "px" : e
            ).join(" "),
            minWidth: "0",
            minHeight: "0"
        }) : o;
    }), r = _vue.computed(()=>!0 === e26.rounded || !0 === e26.fab || !0 === e26.fabMini
    ), s = _vue.computed(()=>!0 !== e26.disable && !0 !== e26.loading
    ), u = _vue.computed(()=>!0 === s.value ? e26.tabindex || 0 : -1
    ), c = _vue.computed(()=>"a" === e26.type || !0 === n.value
    ), d = _vue.computed(()=>{
        return !0 === e26.flat ? "flat" : !0 === e26.outline ? "outline" : !0 === e26.push ? "push" : !0 === e26.unelevated ? "unelevated" : "standard";
    }), p = _vue.computed(()=>{
        const t = {
            tabindex: u.value
        };
        return "a" === e26.type || "button" === e26.type && !0 === n.value || (t.type = e26.type), !0 === n.value ? (Object.assign(t, a.value), t.role = "link") : t.role = "a" === e26.type ? "link" : "button", !0 === e26.loading && void 0 !== e26.percentage && Object.assign(t, {
            role: "progressbar",
            "aria-valuemin": 0,
            "aria-valuemax": 100,
            "aria-valuenow": e26.percentage
        }), !0 === e26.disable && (t.disabled = "", t["aria-disabled"] = "true"), t;
    }), v = _vue.computed(()=>{
        let t;
        return void 0 !== e26.color ? t = !0 === e26.flat || !0 === e26.outline ? `text-${e26.textColor || e26.color}` : `bg-${e26.color} text-${e26.textColor || "white"}` : e26.textColor && (t = `text-${e26.textColor}`), `q-btn--${d.value} ` + `q-btn--${!0 === e26.round ? "round" : `rectangle${!0 === r.value ? " q-btn--rounded" : ""}`}` + (void 0 !== t ? " " + t : "") + (!0 === s.value ? " q-btn--actionable q-focusable q-hoverable" : !0 === e26.disable ? " disabled" : "") + (!0 === e26.fab ? " q-btn--fab" : !0 === e26.fabMini ? " q-btn--fab-mini" : "") + (!0 === e26.noCaps ? " q-btn--no-uppercase" : "") + (!0 === e26.dense ? " q-btn--dense" : "") + (!0 === e26.stretch ? " no-border-radius self-stretch" : "") + (!0 === e26.glossy ? " glossy" : "");
    }), m = _vue.computed(()=>o6.value + (!0 === e26.stack ? " column" : " row") + (!0 === e26.noWrap ? " no-wrap text-no-wrap" : "") + (!0 === e26.loading ? " q-btn__content--hidden" : "")
    );
    return {
        classes: v,
        style: i,
        innerClasses: m,
        attributes: p,
        hasLink: n,
        isLink: c,
        navigateToLink: l,
        isActionable: s
    };
}
const { passiveCapture: passiveCapture  } = listenOpts;
let touchTarget = null, keyboardTarget = null, mouseTarget = null;
var QBtn = createComponent({
    name: "QBtn",
    props: {
        ...useBtnProps,
        percentage: Number,
        darkPercentage: Boolean
    },
    emits: [
        "click",
        "keydown",
        "touchstart",
        "mousedown",
        "keyup"
    ],
    setup (e27, { slots: t17 , emit: o7  }) {
        const { proxy: n6  } = _vue.getCurrentInstance(), { classes: a , style: l , innerClasses: i , attributes: r , hasLink: s , isLink: u , navigateToLink: c , isActionable: d  } = useBtn(e27), p = _vue.ref(null), v = _vue.ref(null);
        let m, f, g = null;
        const b = _vue.computed(()=>void 0 !== e27.label && null !== e27.label && "" !== e27.label
        ), y = _vue.computed(()=>!0 !== e27.disable && !1 !== e27.ripple && {
                keyCodes: !0 === u.value ? [
                    13,
                    32
                ] : [
                    13
                ],
                ...!0 === e27.ripple ? {
                } : e27.ripple
            }
        ), S = _vue.computed(()=>({
                center: e27.round
            })
        ), w = _vue.computed(()=>{
            const t = Math.max(0, Math.min(100, e27.percentage));
            return t > 0 ? {
                transition: "transform 0.6s",
                transform: `translateX(${t - 100}%)`
            } : {
            };
        }), x = _vue.computed(()=>{
            return !0 === e27.loading ? {
                onMousedown: M,
                onTouchstartPassive: M,
                onClick: M,
                onKeydown: M,
                onKeyup: M
            } : !0 === d.value ? {
                onClick: k,
                onKeydown: _,
                onMousedown: T,
                onTouchstartPassive: q
            } : {
                onClick: stopAndPrevent
            };
        }), C = _vue.computed(()=>({
                ref: p,
                class: "q-btn q-btn-item non-selectable no-outline " + a.value,
                style: l.value,
                ...r.value,
                ...x.value
            })
        );
        function k(t) {
            if (null !== p.value) {
                if (void 0 !== t) {
                    if (!0 === t.defaultPrevented) return;
                    const o = document.activeElement;
                    if ("submit" === e27.type && o !== document.body && !1 === p.value.contains(o) && !1 === o.contains(p.value)) {
                        p.value.focus();
                        const e = ()=>{
                            document.removeEventListener("keydown", stopAndPrevent, !0), document.removeEventListener("keyup", e, passiveCapture), null !== p.value && p.value.removeEventListener("blur", e, passiveCapture);
                        };
                        document.addEventListener("keydown", stopAndPrevent, !0), document.addEventListener("keyup", e, passiveCapture), p.value.addEventListener("blur", e, passiveCapture);
                    }
                }
                if (!0 === s.value) {
                    const e = ()=>{
                        t.__qNavigate = !0, c(t);
                    };
                    o7("click", t, e), !0 !== t.defaultPrevented && e();
                } else o7("click", t);
            }
        }
        function _(e) {
            null !== p.value && (!0 === isKeyCode(e, [
                13,
                32
            ]) && (stopAndPrevent(e), keyboardTarget !== p.value && (null !== keyboardTarget && $(), p.value.focus(), keyboardTarget = p.value, p.value.classList.add("q-btn--active"), document.addEventListener("keyup", P, !0), p.value.addEventListener("blur", P, passiveCapture))), o7("keydown", e));
        }
        function q(e) {
            null !== p.value && (touchTarget !== p.value && (null !== touchTarget && $(), touchTarget = p.value, g = e.target, g.addEventListener("touchcancel", P, passiveCapture), g.addEventListener("touchend", P, passiveCapture)), m = !0, clearTimeout(f), f = setTimeout(()=>{
                m = !1;
            }, 200), o7("touchstart", e));
        }
        function T(e) {
            null !== p.value && (mouseTarget !== p.value && (null !== mouseTarget && $(), mouseTarget = p.value, p.value.classList.add("q-btn--active"), document.addEventListener("mouseup", P, passiveCapture)), e.qSkipRipple = !0 === m, o7("mousedown", e));
        }
        function P(e) {
            if (null !== p.value && (void 0 === e || "blur" !== e.type || document.activeElement !== p.value)) {
                if (void 0 !== e && "keyup" === e.type) {
                    if (keyboardTarget === p.value && !0 === isKeyCode(e, [
                        13,
                        32
                    ])) {
                        const t = new MouseEvent("click", e);
                        t.qKeyEvent = !0, !0 === e.defaultPrevented && prevent(t), !0 === e.cancelBubble && stop(t), p.value.dispatchEvent(t), stopAndPrevent(e), e.qKeyEvent = !0;
                    }
                    o7("keyup", e);
                }
                $();
            }
        }
        function $(e) {
            const t = v.value;
            !0 === e || touchTarget !== p.value && mouseTarget !== p.value || null === t || t === document.activeElement || (t.setAttribute("tabindex", -1), t.focus()), touchTarget === p.value && (null !== g && (g.removeEventListener("touchcancel", P, passiveCapture), g.removeEventListener("touchend", P, passiveCapture)), touchTarget = g = null), mouseTarget === p.value && (document.removeEventListener("mouseup", P, passiveCapture), mouseTarget = null), keyboardTarget === p.value && (document.removeEventListener("keyup", P, !0), null !== p.value && p.value.removeEventListener("blur", P, passiveCapture), keyboardTarget = null), null !== p.value && p.value.classList.remove("q-btn--active");
        }
        function M(e) {
            stopAndPrevent(e), e.qSkipRipple = !0;
        }
        return _vue.onBeforeUnmount(()=>{
            $(!0);
        }), Object.assign(n6, {
            click: k
        }), ()=>{
            let o = [];
            void 0 !== e27.icon && o.push(_vue.h(QIcon, {
                name: e27.icon,
                left: !1 === e27.stack && !0 === b.value,
                role: "img",
                "aria-hidden": "true"
            })), !0 === b.value && o.push(_vue.h("span", {
                class: "block"
            }, [
                e27.label
            ])), o = hMergeSlot(t17.default, o), void 0 !== e27.iconRight && !1 === e27.round && o.push(_vue.h(QIcon, {
                name: e27.iconRight,
                right: !1 === e27.stack && !0 === b.value,
                role: "img",
                "aria-hidden": "true"
            }));
            const n = [
                _vue.h("span", {
                    class: "q-focus-helper",
                    ref: v
                })
            ];
            return !0 === e27.loading && void 0 !== e27.percentage && n.push(_vue.h("span", {
                class: "q-btn__progress absolute-full overflow-hidden"
            }, [
                _vue.h("span", {
                    class: "q-btn__progress-indicator fit block" + (!0 === e27.darkPercentage ? " q-btn__progress--dark" : ""),
                    style: w.value
                })
            ])), n.push(_vue.h("span", {
                class: "q-btn__content text-center col items-center q-anchor--skip " + i.value
            }, o)), null !== e27.loading && n.push(_vue.h(_vue.Transition, {
                name: "q-transition--fade"
            }, ()=>!0 === e27.loading ? [
                    _vue.h("span", {
                        key: "loading",
                        class: "absolute-full flex flex-center"
                    }, void 0 !== t17.loading ? t17.loading() : [
                        _vue.h(QSpinner)
                    ])
                ] : null
            )), _vue.withDirectives(_vue.h(!0 === u.value ? "a" : "button", C.value, n), [
                [
                    Ripple,
                    y.value,
                    void 0,
                    S.value
                ]
            ]);
        };
    }
}), QBtnGroup = createComponent({
    name: "QBtnGroup",
    props: {
        unelevated: Boolean,
        outline: Boolean,
        flat: Boolean,
        rounded: Boolean,
        push: Boolean,
        stretch: Boolean,
        glossy: Boolean,
        spread: Boolean
    },
    setup (e28, { slots: t18  }) {
        const o = _vue.computed(()=>{
            const t = [
                "unelevated",
                "outline",
                "flat",
                "rounded",
                "push",
                "stretch",
                "glossy"
            ].filter((t)=>!0 === e28[t]
            ).map((e)=>`q-btn-group--${e}`
            ).join(" ");
            return `q-btn-group row no-wrap${t.length > 0 ? " " + t : ""}` + (!0 === e28.spread ? " q-btn-group--spread" : " inline");
        });
        return ()=>_vue.h("div", {
                class: o.value
            }, hSlot(t18.default))
        ;
    }
});
function clearSelection() {
    if (void 0 !== window.getSelection) {
        const e = window.getSelection();
        void 0 !== e.empty ? e.empty() : void 0 !== e.removeAllRanges && (e.removeAllRanges(), !0 !== Platform.is.mobile && e.addRange(document.createRange()));
    } else void 0 !== document.selection && document.selection.empty();
}
const useAnchorProps = {
    target: {
        default: !0
    },
    noParentEvent: Boolean,
    contextMenu: Boolean
};
function useAnchor({ showing: e29 , avoidEmit: t19 , configureAnchorEl: o  }) {
    const { props: n , proxy: a , emit: l  } = _vue.getCurrentInstance(), i = _vue.ref(null);
    let r;
    function s(e) {
        return null !== i.value && (void 0 === e || void 0 === e.touches || e.touches.length <= 1);
    }
    const u = {
    };
    function c() {
        cleanEvt(u, "anchor");
    }
    function d(e) {
        i.value = e;
        while(i.value.classList.contains("q-anchor--skip"))i.value = i.value.parentNode;
        o();
    }
    function p() {
        if (!1 === n.target || "" === n.target) i.value = null;
        else if (!0 === n.target) d(a.$el.parentNode);
        else {
            let e = n.target;
            if ("string" === typeof n.target) try {
                e = document.querySelector(n.target);
            } catch (t) {
                e = void 0;
            }
            void 0 !== e && null !== e ? (i.value = e.$el || e, o()) : (i.value = null, console.error(`Anchor: target "${n.target}" not found`));
        }
    }
    return void 0 === o && (Object.assign(u, {
        hide (e) {
            a.hide(e);
        },
        toggle (e) {
            a.toggle(e), e.qAnchorHandled = !0;
        },
        toggleKey (e) {
            !0 === isKeyCode(e, 13) && u.toggle(e);
        },
        contextClick (e) {
            a.hide(e), prevent(e), _vue.nextTick(()=>{
                a.show(e), e.qAnchorHandled = !0;
            });
        },
        prevent: prevent,
        mobileTouch (e) {
            if (u.mobileCleanup(e), !0 !== s(e)) return;
            a.hide(e), i.value.classList.add("non-selectable");
            const t = e.target;
            addEvt(u, "anchor", [
                [
                    t,
                    "touchmove",
                    "mobileCleanup",
                    "passive"
                ],
                [
                    t,
                    "touchend",
                    "mobileCleanup",
                    "passive"
                ],
                [
                    t,
                    "touchcancel",
                    "mobileCleanup",
                    "passive"
                ],
                [
                    i.value,
                    "contextmenu",
                    "prevent",
                    "notPassive"
                ]
            ]), r = setTimeout(()=>{
                a.show(e), e.qAnchorHandled = !0;
            }, 300);
        },
        mobileCleanup (t) {
            i.value.classList.remove("non-selectable"), clearTimeout(r), !0 === e29.value && void 0 !== t && clearSelection();
        }
    }), o = function(e = n.contextMenu) {
        if (!0 === n.noParentEvent || null === i.value) return;
        let t;
        t = !0 === e ? !0 === a.$q.platform.is.mobile ? [
            [
                i.value,
                "touchstart",
                "mobileTouch",
                "passive"
            ]
        ] : [
            [
                i.value,
                "mousedown",
                "hide",
                "passive"
            ],
            [
                i.value,
                "contextmenu",
                "contextClick",
                "notPassive"
            ]
        ] : [
            [
                i.value,
                "click",
                "toggle",
                "passive"
            ],
            [
                i.value,
                "keyup",
                "toggleKey",
                "passive"
            ]
        ], addEvt(u, "anchor", t);
    }), _vue.watch(()=>n.contextMenu
    , (e)=>{
        null !== i.value && (c(), o(e));
    }), _vue.watch(()=>n.target
    , ()=>{
        null !== i.value && c(), p();
    }), _vue.watch(()=>n.noParentEvent
    , (e)=>{
        null !== i.value && (!0 === e ? c() : o());
    }), _vue.onMounted(()=>{
        p(), !0 !== t19 && !0 === n.modelValue && null === i.value && l("update:modelValue", !1);
    }), _vue.onBeforeUnmount(()=>{
        clearTimeout(r), c();
    }), {
        anchorEl: i,
        canShow: s,
        anchorEvents: u
    };
}
function useScrollTarget(e30, t20) {
    const o = _vue.ref(null);
    let n;
    function a4(e, t) {
        const o = `${void 0 !== t ? "add" : "remove"}EventListener`, a = void 0 !== t ? t : n;
        e !== window && e[o]("scroll", a, listenOpts.passive), window[o]("scroll", a, listenOpts.passive), n = t;
    }
    function l() {
        null !== o.value && (a4(o.value), o.value = null);
    }
    const i = _vue.watch(()=>e30.noParentEvent
    , ()=>{
        null !== o.value && (l(), t20());
    });
    return _vue.onBeforeUnmount(i), {
        localScrollTarget: o,
        unconfigureScrollTarget: l,
        changeScrollEvent: a4
    };
}
const useModelToggleProps = {
    modelValue: {
        type: Boolean,
        default: null
    },
    "onUpdate:modelValue": [
        Function,
        Array
    ]
}, useModelToggleEmits = [
    "before-show",
    "show",
    "before-hide",
    "hide"
];
function useModelToggle({ showing: e31 , canShow: t21 , hideOnRouteChange: o8 , handleShow: n , handleHide: a , processOnMount: l  }) {
    const i = _vue.getCurrentInstance(), { props: r , emit: s , proxy: u  } = i;
    let c;
    function d(t) {
        !0 === e31.value ? m(t) : p(t);
    }
    function p(e) {
        if (!0 === r.disable || void 0 !== e && !0 === e.qAnchorHandled || void 0 !== t21 && !0 !== t21(e)) return;
        const o = void 0 !== r["onUpdate:modelValue"];
        !0 === o && (s("update:modelValue", !0), c = e, _vue.nextTick(()=>{
            c === e && (c = void 0);
        })), null !== r.modelValue && !1 !== o || v(e);
    }
    function v(t) {
        !0 !== e31.value && (e31.value = !0, s("before-show", t), void 0 !== n ? n(t) : s("show", t));
    }
    function m(e) {
        if (!0 === r.disable) return;
        const t = void 0 !== r["onUpdate:modelValue"];
        !0 === t && (s("update:modelValue", !1), c = e, _vue.nextTick(()=>{
            c === e && (c = void 0);
        })), null !== r.modelValue && !1 !== t || f(e);
    }
    function f(t) {
        !1 !== e31.value && (e31.value = !1, s("before-hide", t), void 0 !== a ? a(t) : s("hide", t));
    }
    function h(t) {
        if (!0 === r.disable && !0 === t) void 0 !== r["onUpdate:modelValue"] && s("update:modelValue", !1);
        else if (!0 === t !== e31.value) {
            const e = !0 === t ? v : f;
            e(c);
        }
    }
    _vue.watch(()=>r.modelValue
    , h), void 0 !== o8 && !0 === vmHasRouter(i) && _vue.watch(()=>u.$route
    , ()=>{
        !0 === o8.value && !0 === e31.value && m();
    }), !0 === l && _vue.onMounted(()=>{
        h(r.modelValue);
    });
    const g = {
        show: p,
        hide: m,
        toggle: d
    };
    return Object.assign(u, g), g;
}
let queue = [];
const waitFlags = [];
function addFocusWaitFlag(e) {
    waitFlags.push(e);
}
function removeFocusWaitFlag(e) {
    const t = waitFlags.indexOf(e);
    -1 !== t && waitFlags.splice(t, 1), 0 === waitFlags.length && queue.length > 0 && (queue[queue.length - 1](), queue = []);
}
function addFocusFn(e) {
    if (0 !== waitFlags.length) return queue.push(e), e;
    e();
}
function removeFocusFn(e) {
    const t = queue.indexOf(e);
    -1 !== t && queue.splice(t, 1);
}
const globalNodes = [];
let target = document.body;
function createGlobalNode(e) {
    const t = document.createElement("div");
    if (void 0 !== e && (t.id = e), void 0 !== globalConfig.globalNodes) {
        const e = globalConfig.globalNodes.class;
        void 0 !== e && (t.className = e);
    }
    return target.appendChild(t), globalNodes.push(t), t;
}
function removeGlobalNode(e) {
    globalNodes.splice(globalNodes.indexOf(e), 1), e.remove();
}
function changeGlobalNodesTarget(e32) {
    e32 !== target && (target = e32, globalNodes.forEach((e)=>{
        !1 === e.contains(target) && target.appendChild(e);
    }));
}
const portalList = [];
function getPortalVm(e) {
    return portalList.find((t)=>null !== t.__qPortalInnerRef.value && t.__qPortalInnerRef.value.contains(e)
    );
}
function closePortalMenus(e, t) {
    do {
        if ("QMenu" === e.$options.name) {
            if (e.hide(t), !0 === e.$props.separateClosePopup) return getParentVm(e);
        } else if (void 0 !== e.__qPortalInnerRef) {
            const o = getParentVm(e);
            return void 0 !== o && "QPopupProxy" === o.$options.name ? (e.hide(t), o) : e;
        }
        e = getParentVm(e);
    }while (void 0 !== e && null !== e)
}
function closePortals(e, t, o) {
    while(0 !== o && void 0 !== e && null !== e){
        if (void 0 !== e.__qPortalInnerRef) {
            if (o--, "QMenu" === e.$options.name) {
                e = closePortalMenus(e, t);
                continue;
            }
            e.hide(t);
        }
        e = getParentVm(e);
    }
}
function isOnGlobalDialog(e) {
    e = e.parent;
    while(void 0 !== e && null !== e){
        if ("QGlobalDialog" === e.type.name) return !0;
        if ("QDialog" === e.type.name || "QMenu" === e.type.name) return !1;
        e = e.parent;
    }
    return !1;
}
function usePortal(e, t22, o, n) {
    const a = _vue.ref(!1);
    let l = null;
    const i = {
    }, r = !0 === n && isOnGlobalDialog(e);
    function s(t) {
        !0 !== t ? (!1 === r && null === l && (l = createGlobalNode()), a.value = !0, portalList.push(e.proxy), addFocusWaitFlag(i)) : removeFocusWaitFlag(i);
    }
    function u() {
        removeFocusWaitFlag(i), a.value = !1;
        const t = portalList.indexOf(e.proxy);
        t > -1 && portalList.splice(t, 1), null !== l && (removeGlobalNode(l), l = null);
    }
    return _vue.onUnmounted(u), Object.assign(e.proxy, {
        __qPortalInnerRef: t22
    }), {
        showPortal: s,
        hidePortal: u,
        portalIsActive: a,
        renderPortal: ()=>!0 === r ? o() : !0 === a.value ? [
                _vue.h(_vue.Teleport, {
                    to: l
                }, o())
            ] : void 0
    };
}
const useTransitionProps = {
    transitionShow: {
        type: String,
        default: "fade"
    },
    transitionHide: {
        type: String,
        default: "fade"
    },
    transitionDuration: {
        type: [
            String,
            Number
        ],
        default: 300
    }
};
function useTransition(e33, t) {
    const o = _vue.ref(t.value);
    return _vue.watch(t, (e)=>{
        _vue.nextTick(()=>{
            o.value = e;
        });
    }), {
        transition: _vue.computed(()=>"q-transition--" + (!0 === o.value ? e33.transitionHide : e33.transitionShow)
        ),
        transitionStyle: _vue.computed(()=>`--q-transition-duration: ${e33.transitionDuration}ms`
        )
    };
}
function useTick() {
    let e;
    return _vue.onBeforeUnmount(()=>{
        e = void 0;
    }), {
        registerTick (t) {
            e = t;
        },
        removeTick () {
            e = void 0;
        },
        prepareTick () {
            if (void 0 !== e) {
                const t = e;
                _vue.nextTick(()=>{
                    e === t && (e(), e = void 0);
                });
            }
        }
    };
}
function useTimeout() {
    let e;
    return _vue.onBeforeUnmount(()=>{
        clearTimeout(e);
    }), {
        registerTimeout (t, o) {
            clearTimeout(e), e = setTimeout(t, o);
        },
        removeTimeout () {
            clearTimeout(e);
        }
    };
}
const scrollTargets = [
    null,
    document,
    document.body,
    document.scrollingElement,
    document.documentElement
];
function getScrollTarget(e, t) {
    let o = getElement$1(t);
    if (void 0 === o) {
        if (void 0 === e || null === e) return window;
        o = e.closest(".scroll,.scroll-y,.overflow-auto");
    }
    return scrollTargets.includes(o) ? window : o;
}
function getScrollHeight(e) {
    return (e === window ? document.body : e).scrollHeight;
}
function getScrollWidth(e) {
    return (e === window ? document.body : e).scrollWidth;
}
function getVerticalScrollPosition(e) {
    return e === window ? window.pageYOffset || window.scrollY || document.body.scrollTop || 0 : e.scrollTop;
}
function getHorizontalScrollPosition(e) {
    return e === window ? window.pageXOffset || window.scrollX || document.body.scrollLeft || 0 : e.scrollLeft;
}
function animVerticalScrollTo(e, t, o = 0) {
    const n = void 0 === arguments[3] ? performance.now() : arguments[3], a = getVerticalScrollPosition(e);
    o <= 0 ? a !== t && setScroll$1(e, t) : requestAnimationFrame((l)=>{
        const i = l - n, r = a + (t - a) / Math.max(i, o) * i;
        setScroll$1(e, r), r !== t && animVerticalScrollTo(e, t, o - i, l);
    });
}
function animHorizontalScrollTo(e, t, o = 0) {
    const n = void 0 === arguments[3] ? performance.now() : arguments[3], a = getHorizontalScrollPosition(e);
    o <= 0 ? a !== t && setHorizontalScroll(e, t) : requestAnimationFrame((l)=>{
        const i = l - n, r = a + (t - a) / Math.max(i, o) * i;
        setHorizontalScroll(e, r), r !== t && animHorizontalScrollTo(e, t, o - i, l);
    });
}
function setScroll$1(e, t) {
    e !== window ? e.scrollTop = t : window.scrollTo(window.pageXOffset || window.scrollX || document.body.scrollLeft || 0, t);
}
function setHorizontalScroll(e, t) {
    e !== window ? e.scrollLeft = t : window.scrollTo(t, window.pageYOffset || window.scrollY || document.body.scrollTop || 0);
}
function setVerticalScrollPosition(e, t, o) {
    o ? animVerticalScrollTo(e, t, o) : setScroll$1(e, t);
}
function setHorizontalScrollPosition(e, t, o) {
    o ? animHorizontalScrollTo(e, t, o) : setHorizontalScroll(e, t);
}
let size;
function getScrollbarWidth() {
    if (void 0 !== size) return size;
    const e = document.createElement("p"), t = document.createElement("div");
    css(e, {
        width: "100%",
        height: "200px"
    }), css(t, {
        position: "absolute",
        top: "0px",
        left: "0px",
        visibility: "hidden",
        width: "200px",
        height: "150px",
        overflow: "hidden"
    }), t.appendChild(e), document.body.appendChild(t);
    const o = e.offsetWidth;
    t.style.overflow = "scroll";
    let n = e.offsetWidth;
    return o === n && (n = t.clientWidth), t.remove(), size = o - n, size;
}
function hasScrollbar(e, t = !0) {
    return !(!e || e.nodeType !== Node.ELEMENT_NODE) && (t ? e.scrollHeight > e.clientHeight && (e.classList.contains("scroll") || e.classList.contains("overflow-auto") || [
        "auto",
        "scroll"
    ].includes(window.getComputedStyle(e)["overflow-y"])) : e.scrollWidth > e.clientWidth && (e.classList.contains("scroll") || e.classList.contains("overflow-auto") || [
        "auto",
        "scroll"
    ].includes(window.getComputedStyle(e)["overflow-x"])));
}
var scroll = {
    getScrollTarget: getScrollTarget,
    getScrollHeight: getScrollHeight,
    getScrollWidth: getScrollWidth,
    getVerticalScrollPosition: getVerticalScrollPosition,
    getHorizontalScrollPosition: getHorizontalScrollPosition,
    animVerticalScrollTo: animVerticalScrollTo,
    animHorizontalScrollTo: animHorizontalScrollTo,
    setVerticalScrollPosition: setVerticalScrollPosition,
    setHorizontalScrollPosition: setHorizontalScrollPosition,
    getScrollbarWidth: getScrollbarWidth,
    hasScrollbar: hasScrollbar
};
const handlers$1 = [];
let escDown;
function onKeydown(e) {
    escDown = 27 === e.keyCode;
}
function onBlur() {
    !0 === escDown && (escDown = !1);
}
function onKeyup(e) {
    !0 === escDown && (escDown = !1, !0 === isKeyCode(e, 27) && handlers$1[handlers$1.length - 1](e));
}
function update$4(e) {
    window[e]("keydown", onKeydown), window[e]("blur", onBlur), window[e]("keyup", onKeyup), escDown = !1;
}
function addEscapeKey(e) {
    !0 === client.is.desktop && (handlers$1.push(e), 1 === handlers$1.length && update$4("addEventListener"));
}
function removeEscapeKey(e) {
    const t = handlers$1.indexOf(e);
    t > -1 && (handlers$1.splice(t, 1), 0 === handlers$1.length && update$4("removeEventListener"));
}
const handlers = [];
function trigger$1(e) {
    handlers[handlers.length - 1](e);
}
function addFocusout(e) {
    !0 === client.is.desktop && (handlers.push(e), 1 === handlers.length && document.body.addEventListener("focusin", trigger$1));
}
function removeFocusout(e) {
    const t = handlers.indexOf(e);
    t > -1 && (handlers.splice(t, 1), 0 === handlers.length && document.body.removeEventListener("focusin", trigger$1));
}
let timer;
const { notPassiveCapture: notPassiveCapture  } = listenOpts, registeredList = [];
function globalHandler(e) {
    clearTimeout(timer);
    const t = e.target;
    if (void 0 === t || 8 === t.nodeType || !0 === t.classList.contains("no-pointer-events")) return;
    let o = portalList.length - 1;
    while(o >= 0){
        const e = portalList[o].$;
        if ("QDialog" !== e.type.name) break;
        if (!0 !== e.props.seamless) return;
        o--;
    }
    for(let n = registeredList.length - 1; n >= 0; n--){
        const o = registeredList[n];
        if (null !== o.anchorEl.value && !1 !== o.anchorEl.value.contains(t) || t !== document.body && (null === o.innerRef.value || !1 !== o.innerRef.value.contains(t))) return;
        e.qClickOutside = !0, o.onClickOutside(e);
    }
}
function addClickOutside(e) {
    registeredList.push(e), 1 === registeredList.length && (document.addEventListener("mousedown", globalHandler, notPassiveCapture), document.addEventListener("touchstart", globalHandler, notPassiveCapture));
}
function removeClickOutside(e) {
    const t23 = registeredList.findIndex((t)=>t === e
    );
    t23 > -1 && (registeredList.splice(t23, 1), 0 === registeredList.length && (clearTimeout(timer), document.removeEventListener("mousedown", globalHandler, notPassiveCapture), document.removeEventListener("touchstart", globalHandler, notPassiveCapture)));
}
let vpLeft, vpTop;
function validatePosition(e) {
    const t = e.split(" ");
    return 2 === t.length && (!0 !== [
        "top",
        "center",
        "bottom"
    ].includes(t[0]) ? (console.error("Anchor/Self position must start with one of top/center/bottom"), !1) : !0 === [
        "left",
        "middle",
        "right",
        "start",
        "end"
    ].includes(t[1]) || (console.error("Anchor/Self position must end with one of left/middle/right/start/end"), !1));
}
function validateOffset(e) {
    return !e || 2 === e.length && "number" === typeof e[0] && "number" === typeof e[1];
}
const horizontalPos = {
    "start#ltr": "left",
    "start#rtl": "right",
    "end#ltr": "right",
    "end#rtl": "left"
};
function parsePosition(e, t) {
    const o = e.split(" ");
    return {
        vertical: o[0],
        horizontal: horizontalPos[`${o[1]}#${!0 === t ? "rtl" : "ltr"}`]
    };
}
function getAnchorProps(e, t) {
    let { top: o , left: n , right: a , bottom: l , width: i , height: r  } = e.getBoundingClientRect();
    return void 0 !== t && (o -= t[1], n -= t[0], l += t[1], a += t[0], i += t[0], r += t[1]), {
        top: o,
        left: n,
        right: a,
        bottom: l,
        width: i,
        height: r,
        middle: n + (a - n) / 2,
        center: o + (l - o) / 2
    };
}
function getTargetProps(e) {
    return {
        top: 0,
        center: e.offsetHeight / 2,
        bottom: e.offsetHeight,
        left: 0,
        middle: e.offsetWidth / 2,
        right: e.offsetWidth
    };
}
function setPosition(e) {
    if (!0 === client.is.ios && void 0 !== window.visualViewport) {
        const e = document.body.style, { offsetLeft: t , offsetTop: o  } = window.visualViewport;
        t !== vpLeft && (e.setProperty("--q-pe-left", t + "px"), vpLeft = t), o !== vpTop && (e.setProperty("--q-pe-top", o + "px"), vpTop = o);
    }
    let t;
    const { scrollLeft: o , scrollTop: n  } = e.el;
    if (void 0 === e.absoluteOffset) t = getAnchorProps(e.anchorEl, !0 === e.cover ? [
        0,
        0
    ] : e.offset);
    else {
        const { top: o , left: n  } = e.anchorEl.getBoundingClientRect(), a = o + e.absoluteOffset.top, l = n + e.absoluteOffset.left;
        t = {
            top: a,
            left: l,
            width: 1,
            height: 1,
            right: l + 1,
            center: a,
            middle: l,
            bottom: a + 1
        };
    }
    let a = {
        maxHeight: e.maxHeight,
        maxWidth: e.maxWidth,
        visibility: "visible"
    };
    !0 !== e.fit && !0 !== e.cover || (a.minWidth = t.width + "px", !0 === e.cover && (a.minHeight = t.height + "px")), Object.assign(e.el.style, a);
    const l = getTargetProps(e.el), i = {
        top: t[e.anchorOrigin.vertical] - l[e.selfOrigin.vertical],
        left: t[e.anchorOrigin.horizontal] - l[e.selfOrigin.horizontal]
    };
    applyBoundaries(i, t, l, e.anchorOrigin, e.selfOrigin), a = {
        top: i.top + "px",
        left: i.left + "px"
    }, void 0 !== i.maxHeight && (a.maxHeight = i.maxHeight + "px", t.height > i.maxHeight && (a.minHeight = a.maxHeight)), void 0 !== i.maxWidth && (a.maxWidth = i.maxWidth + "px", t.width > i.maxWidth && (a.minWidth = a.maxWidth)), Object.assign(e.el.style, a), e.el.scrollTop !== n && (e.el.scrollTop = n), e.el.scrollLeft !== o && (e.el.scrollLeft = o);
}
function applyBoundaries(e, t, o, n, a) {
    const l = o.bottom, i = o.right, r = getScrollbarWidth(), s = window.innerHeight - r, u = document.body.clientWidth;
    if (e.top < 0 || e.top + l > s) {
        if ("center" === a.vertical) e.top = t[n.vertical] > s / 2 ? Math.max(0, s - l) : 0, e.maxHeight = Math.min(l, s);
        else if (t[n.vertical] > s / 2) {
            const o = Math.min(s, "center" === n.vertical ? t.center : n.vertical === a.vertical ? t.bottom : t.top);
            e.maxHeight = Math.min(l, o), e.top = Math.max(0, o - l);
        } else e.top = Math.max(0, "center" === n.vertical ? t.center : n.vertical === a.vertical ? t.top : t.bottom), e.maxHeight = Math.min(l, s - e.top);
    }
    if (e.left < 0 || e.left + i > u) {
        if (e.maxWidth = Math.min(i, u), "middle" === a.horizontal) e.left = t[n.horizontal] > u / 2 ? Math.max(0, u - i) : 0;
        else if (t[n.horizontal] > u / 2) {
            const o = Math.min(u, "middle" === n.horizontal ? t.middle : n.horizontal === a.horizontal ? t.right : t.left);
            e.maxWidth = Math.min(i, o), e.left = Math.max(0, o - e.maxWidth);
        } else e.left = Math.max(0, "middle" === n.horizontal ? t.middle : n.horizontal === a.horizontal ? t.left : t.right), e.maxWidth = Math.min(i, u - e.left);
    }
}
[
    "left",
    "middle",
    "right"
].forEach((e)=>{
    horizontalPos[`${e}#ltr`] = e, horizontalPos[`${e}#rtl`] = e;
});
var QMenu = createComponent({
    name: "QMenu",
    inheritAttrs: !1,
    props: {
        ...useAnchorProps,
        ...useModelToggleProps,
        ...useDarkProps,
        ...useTransitionProps,
        persistent: Boolean,
        autoClose: Boolean,
        separateClosePopup: Boolean,
        noRouteDismiss: Boolean,
        noRefocus: Boolean,
        noFocus: Boolean,
        fit: Boolean,
        cover: Boolean,
        square: Boolean,
        anchor: {
            type: String,
            validator: validatePosition
        },
        self: {
            type: String,
            validator: validatePosition
        },
        offset: {
            type: Array,
            validator: validateOffset
        },
        scrollTarget: {
            default: void 0
        },
        touchPosition: Boolean,
        maxHeight: {
            type: String,
            default: null
        },
        maxWidth: {
            type: String,
            default: null
        }
    },
    emits: [
        ...useModelToggleEmits,
        "click",
        "escape-key"
    ],
    setup (e34, { slots: t24 , emit: o9 , attrs: n  }) {
        let a, l, i, r = null;
        const s = _vue.getCurrentInstance(), { proxy: u  } = s, { $q: c  } = u, d = _vue.ref(null), p = _vue.ref(!1), v = _vue.computed(()=>!0 !== e34.persistent && !0 !== e34.noRouteDismiss
        ), m = useDark(e34, c), { registerTick: f , removeTick: g , prepareTick: b  } = useTick(), { registerTimeout: y , removeTimeout: S  } = useTimeout(), { transition: w , transitionStyle: x  } = useTransition(e34, p), { localScrollTarget: C , changeScrollEvent: k , unconfigureScrollTarget: _  } = useScrollTarget(e34, I), { anchorEl: q , canShow: T  } = useAnchor({
            showing: p
        }), { hide: P  } = useModelToggle({
            showing: p,
            canShow: T,
            handleShow: D,
            handleHide: A,
            hideOnRouteChange: v,
            processOnMount: !0
        }), { showPortal: $ , hidePortal: M , renderPortal: B  } = usePortal(s, d, K), Q = {
            anchorEl: q,
            innerRef: d,
            onClickOutside (t) {
                if (!0 !== e34.persistent && !0 === p.value) return P(t), ("touchstart" === t.type || t.target.classList.contains("q-dialog__backdrop")) && stopAndPrevent(t), !0;
            }
        }, E = _vue.computed(()=>parsePosition(e34.anchor || (!0 === e34.cover ? "center middle" : "bottom start"), c.lang.rtl)
        ), O = _vue.computed(()=>!0 === e34.cover ? E.value : parsePosition(e34.self || "top start", c.lang.rtl)
        ), L = _vue.computed(()=>(!0 === e34.square ? " q-menu--square" : "") + (!0 === m.value ? " q-menu--dark q-dark" : "")
        ), z = _vue.computed(()=>!0 === e34.autoClose ? {
                onClick: H
            } : {
            }
        ), F = _vue.computed(()=>!0 === p.value && !0 !== e34.persistent
        );
        function R() {
            addFocusFn(()=>{
                let e = d.value;
                e && !0 !== e.contains(document.activeElement) && (e = e.querySelector("[autofocus], [data-autofocus]") || e, e.focus());
            });
        }
        function D(t) {
            if (g(), S(), r = !1 === e34.noRefocus ? document.activeElement : null, addFocusout(N), $(), I(), a = void 0, void 0 !== t && (e34.touchPosition || e34.contextMenu)) {
                const e = position(t);
                if (void 0 !== e.left) {
                    const { top: t , left: o  } = q.value.getBoundingClientRect();
                    a = {
                        left: e.left - o,
                        top: e.top - t
                    };
                }
            }
            void 0 === l && (l = _vue.watch(()=>c.screen.width + "|" + c.screen.height + "|" + e34.self + "|" + e34.anchor + "|" + c.lang.rtl
            , U)), !0 !== e34.noFocus && document.activeElement.blur(), f(()=>{
                U(), !0 !== e34.noFocus && R();
            }), b(), y(()=>{
                !0 === c.platform.is.ios && (i = e34.autoClose, d.value.click()), U(), $(!0), o9("show", t);
            }, e34.transitionDuration);
        }
        function A(t) {
            g(), S(), V(!0), null === r || void 0 !== t && !0 === t.qClickOutside || r.focus(), y(()=>{
                M(), o9("hide", t);
            }, e34.transitionDuration);
        }
        function V(e) {
            a = void 0, void 0 !== l && (l(), l = void 0), !0 !== e && !0 !== p.value || (removeFocusout(N), _(), removeClickOutside(Q), removeEscapeKey(j));
        }
        function I() {
            null === q.value && void 0 === e34.scrollTarget || (C.value = getScrollTarget(q.value, e34.scrollTarget), k(C.value, U));
        }
        function H(e) {
            !0 !== i ? (closePortalMenus(u, e), o9("click", e)) : i = !1;
        }
        function N(e) {
            !0 === F.value && !0 !== childHasFocus(d.value, e.target) && R();
        }
        function j(e) {
            o9("escape-key"), P(e);
        }
        function U() {
            const t = d.value;
            null !== t && null !== q.value && setPosition({
                el: t,
                offset: e34.offset,
                anchorEl: q.value,
                anchorOrigin: E.value,
                selfOrigin: O.value,
                absoluteOffset: a,
                fit: e34.fit,
                cover: e34.cover,
                maxHeight: e34.maxHeight,
                maxWidth: e34.maxWidth
            });
        }
        function K() {
            return _vue.h(_vue.Transition, {
                name: w.value,
                appear: !0
            }, ()=>!0 === p.value ? _vue.h("div", {
                    ...n,
                    ref: d,
                    tabindex: -1,
                    class: [
                        "q-menu q-position-engine scroll" + L.value,
                        n.class
                    ],
                    style: [
                        n.style,
                        x.value
                    ],
                    ...z.value
                }, hSlot(t24.default)) : null
            );
        }
        return _vue.watch(F, (e)=>{
            !0 === e ? (addEscapeKey(j), addClickOutside(Q)) : (removeEscapeKey(j), removeClickOutside(Q));
        }), _vue.onBeforeUnmount(V), Object.assign(u, {
            focus: R,
            updatePosition: U
        }), B;
    }
}), QBtnDropdown = createComponent({
    name: "QBtnDropdown",
    props: {
        ...useBtnProps,
        modelValue: Boolean,
        split: Boolean,
        dropdownIcon: String,
        contentClass: [
            Array,
            String,
            Object
        ],
        contentStyle: [
            Array,
            String,
            Object
        ],
        cover: Boolean,
        persistent: Boolean,
        noRouteDismiss: Boolean,
        autoClose: Boolean,
        menuAnchor: {
            type: String,
            default: "bottom end"
        },
        menuSelf: {
            type: String,
            default: "top end"
        },
        menuOffset: Array,
        disableMainBtn: Boolean,
        disableDropdown: Boolean,
        noIconAnimation: Boolean
    },
    emits: [
        "update:modelValue",
        "click",
        "before-show",
        "show",
        "before-hide",
        "hide"
    ],
    setup (e35, { slots: t25 , emit: o10  }) {
        const { proxy: n  } = _vue.getCurrentInstance(), a = _vue.ref(e35.modelValue), l = _vue.ref(null), i = _vue.computed(()=>{
            const t = {
                "aria-expanded": !0 === a.value ? "true" : "false",
                "aria-haspopup": "true"
            };
            return (!0 === e35.disable || !1 === e35.split && !0 === e35.disableMainBtn || !0 === e35.disableDropdown) && (t["aria-disabled"] = "true"), t;
        }), r = _vue.computed(()=>"q-btn-dropdown__arrow" + (!0 === a.value && !1 === e35.noIconAnimation ? " rotate-180" : "") + (!1 === e35.split ? " q-btn-dropdown__arrow-container" : "")
        );
        function s(e) {
            a.value = !0, o10("before-show", e);
        }
        function u(e) {
            o10("show", e), o10("update:modelValue", !0);
        }
        function c(e) {
            a.value = !1, o10("before-hide", e);
        }
        function d(e) {
            o10("hide", e), o10("update:modelValue", !1);
        }
        function p(e) {
            o10("click", e);
        }
        function v(e) {
            stop(e), g(), o10("click", e);
        }
        function m(e) {
            null !== l.value && l.value.toggle(e);
        }
        function f(e) {
            null !== l.value && l.value.show(e);
        }
        function g(e) {
            null !== l.value && l.value.hide(e);
        }
        return _vue.watch(()=>e35.modelValue
        , (e)=>{
            null !== l.value && l.value[e ? "show" : "hide"]();
        }), _vue.watch(()=>e35.split
        , g), Object.assign(n, {
            show: f,
            hide: g,
            toggle: m
        }), _vue.onMounted(()=>{
            !0 === e35.modelValue && f();
        }), ()=>{
            const o = [
                _vue.h(QIcon, {
                    class: r.value,
                    name: e35.dropdownIcon || n.$q.iconSet.arrow.dropdown
                })
            ];
            return !0 !== e35.disableDropdown && o.push(_vue.h(QMenu, {
                ref: l,
                class: e35.contentClass,
                style: e35.contentStyle,
                cover: e35.cover,
                fit: !0,
                persistent: e35.persistent,
                noRouteDismiss: e35.noRouteDismiss,
                autoClose: e35.autoClose,
                anchor: e35.menuAnchor,
                self: e35.menuSelf,
                offset: e35.menuOffset,
                separateClosePopup: !0,
                onBeforeShow: s,
                onShow: u,
                onBeforeHide: c,
                onHide: d
            }, t25.default)), !1 === e35.split ? _vue.h(QBtn, {
                class: "q-btn-dropdown q-btn-dropdown--simple",
                ...e35,
                disable: !0 === e35.disable || !0 === e35.disableMainBtn,
                noWrap: !0,
                round: !1,
                ...i.value,
                onClick: p
            }, ()=>hSlot(t25.label, []).concat(o)
            ) : _vue.h(QBtnGroup, {
                class: "q-btn-dropdown q-btn-dropdown--split no-wrap q-btn-item",
                outline: e35.outline,
                flat: e35.flat,
                rounded: e35.rounded,
                push: e35.push,
                unelevated: e35.unelevated,
                glossy: e35.glossy,
                stretch: e35.stretch
            }, ()=>[
                    _vue.h(QBtn, {
                        class: "q-btn-dropdown--current",
                        ...e35,
                        disable: !0 === e35.disable || !0 === e35.disableMainBtn,
                        noWrap: !0,
                        iconRight: e35.iconRight,
                        round: !1,
                        onClick: v
                    }, t25.label),
                    _vue.h(QBtn, {
                        class: "q-btn-dropdown__arrow-container q-anchor--skip",
                        ...i.value,
                        disable: !0 === e35.disable || !0 === e35.disableDropdown,
                        outline: e35.outline,
                        flat: e35.flat,
                        rounded: e35.rounded,
                        push: e35.push,
                        size: e35.size,
                        color: e35.color,
                        textColor: e35.textColor,
                        dense: e35.dense,
                        ripple: e35.ripple
                    }, ()=>o
                    )
                ]
            );
        };
    }
});
const useFormProps = {
    name: String
};
function useFormAttrs(e) {
    return _vue.computed(()=>({
            type: "hidden",
            name: e.name,
            value: e.modelValue
        })
    );
}
function useFormInject(e = {
}, t = {
}) {
    return (o, n, a)=>{
        o[n](_vue.h("input", {
            class: "hidden" + (a || ""),
            ...e.value,
            ...t.value
        }));
    };
}
function useFormInputNameAttr(e) {
    return _vue.computed(()=>e.name || e.for
    );
}
var QBtnToggle = createComponent({
    name: "QBtnToggle",
    props: {
        ...useFormProps,
        modelValue: {
            required: !0
        },
        options: {
            type: Array,
            required: !0,
            validator: (e36)=>e36.every((e)=>("label" in e || "icon" in e || "slot" in e) && "value" in e
                )
        },
        color: String,
        textColor: String,
        toggleColor: {
            type: String,
            default: "primary"
        },
        toggleTextColor: String,
        outline: Boolean,
        flat: Boolean,
        unelevated: Boolean,
        rounded: Boolean,
        push: Boolean,
        glossy: Boolean,
        size: String,
        padding: String,
        noCaps: Boolean,
        noWrap: Boolean,
        dense: Boolean,
        readonly: Boolean,
        disable: Boolean,
        stack: Boolean,
        stretch: Boolean,
        spread: Boolean,
        clearable: Boolean,
        ripple: {
            type: [
                Boolean,
                Object
            ],
            default: !0
        }
    },
    emits: [
        "update:modelValue",
        "clear",
        "click"
    ],
    setup (e37, { slots: t26 , emit: o11  }) {
        const n7 = _vue.computed(()=>void 0 !== e37.options.find((t)=>t.value === e37.modelValue
            )
        ), a5 = _vue.computed(()=>({
                type: "hidden",
                name: e37.name,
                value: e37.modelValue
            })
        ), l4 = useFormInject(a5), i1 = _vue.computed(()=>e37.options.map((t, o)=>{
                const { attrs: n , value: a , slot: l , ...i } = t;
                return {
                    slot: l,
                    props: {
                        key: o,
                        onClick (e) {
                            r(a, t, e);
                        },
                        ...n,
                        ...i,
                        outline: e37.outline,
                        flat: e37.flat,
                        rounded: e37.rounded,
                        push: e37.push,
                        unelevated: e37.unelevated,
                        dense: e37.dense,
                        disable: !0 === e37.disable || !0 === i.disable,
                        color: a === e37.modelValue ? s(i, "toggleColor") : s(i, "color"),
                        textColor: a === e37.modelValue ? s(i, "toggleTextColor") : s(i, "textColor"),
                        noCaps: !0 === s(i, "noCaps"),
                        noWrap: !0 === s(i, "noWrap"),
                        size: s(i, "size"),
                        padding: s(i, "padding"),
                        ripple: s(i, "ripple"),
                        stack: !0 === s(i, "stack"),
                        stretch: !0 === s(i, "stretch")
                    }
                };
            })
        );
        function r(t, n, a) {
            !0 !== e37.readonly && (e37.modelValue === t ? !0 === e37.clearable && (o11("update:modelValue", null, null), o11("clear")) : o11("update:modelValue", t, n), o11("click", a));
        }
        function s(t, o) {
            return void 0 === t[o] ? e37[o] : t[o];
        }
        function u() {
            const o = i1.value.map((e)=>{
                return _vue.h(QBtn, e.props, void 0 !== e.slot ? t26[e.slot] : void 0);
            });
            return void 0 !== e37.name && !0 !== e37.disable && !0 === n7.value && l4(o, "push"), hMergeSlot(t26.default, o);
        }
        return ()=>_vue.h(QBtnGroup, {
                class: "q-btn-toggle",
                outline: e37.outline,
                flat: e37.flat,
                rounded: e37.rounded,
                push: e37.push,
                stretch: e37.stretch,
                unelevated: e37.unelevated,
                glossy: e37.glossy,
                spread: e37.spread
            }, u)
        ;
    }
}), QCard = createComponent({
    name: "QCard",
    props: {
        ...useDarkProps,
        tag: {
            type: String,
            default: "div"
        },
        square: Boolean,
        flat: Boolean,
        bordered: Boolean
    },
    setup (e, { slots: t  }) {
        const o = _vue.getCurrentInstance(), n = useDark(e, o.proxy.$q), a = _vue.computed(()=>"q-card" + (!0 === n.value ? " q-card--dark q-dark" : "") + (!0 === e.bordered ? " q-card--bordered" : "") + (!0 === e.square ? " q-card--square no-border-radius" : "") + (!0 === e.flat ? " q-card--flat no-shadow" : "")
        );
        return ()=>_vue.h(e.tag, {
                class: a.value
            }, hSlot(t.default))
        ;
    }
}), QCardSection = createComponent({
    name: "QCardSection",
    props: {
        tag: {
            type: String,
            default: "div"
        },
        horizontal: Boolean
    },
    setup (e, { slots: t  }) {
        const o = _vue.computed(()=>"q-card__section" + ` q-card__section--${!0 === e.horizontal ? "horiz row no-wrap" : "vert"}`
        );
        return ()=>_vue.h(e.tag, {
                class: o.value
            }, hSlot(t.default))
        ;
    }
}), QCardActions = createComponent({
    name: "QCardActions",
    props: {
        ...useAlignProps,
        vertical: Boolean
    },
    setup (e, { slots: t  }) {
        const o = useAlign(e), n = _vue.computed(()=>`q-card__actions ${o.value}` + ` q-card__actions--${!0 === e.vertical ? "vert column" : "horiz row"}`
        );
        return ()=>_vue.h("div", {
                class: n.value
            }, hSlot(t.default))
        ;
    }
});
const modifiersAll = {
    left: !0,
    right: !0,
    up: !0,
    down: !0,
    horizontal: !0,
    vertical: !0
}, directionList = Object.keys(modifiersAll);
function getModifierDirections(e) {
    const t = {
    };
    for (const o of directionList)!0 === e[o] && (t[o] = !0);
    return 0 === Object.keys(t).length ? modifiersAll : (!0 === t.horizontal ? t.left = t.right = !0 : !0 === t.left && !0 === t.right && (t.horizontal = !0), !0 === t.vertical ? t.up = t.down = !0 : !0 === t.up && !0 === t.down && (t.vertical = !0), !0 === t.horizontal && !0 === t.vertical && (t.all = !0), t);
}
function shouldStart(e, t) {
    return void 0 === t.event && void 0 !== e.target && !0 !== e.target.draggable && "function" === typeof t.handler && "INPUT" !== e.target.nodeName.toUpperCase() && (void 0 === e.qClonedBy || -1 === e.qClonedBy.indexOf(t.uid));
}
function parseArg(e38) {
    const t = [
        0.06,
        6,
        50
    ];
    return "string" === typeof e38 && e38.length && e38.split(":").forEach((e, o)=>{
        const n = parseFloat(e);
        n && (t[o] = n);
    }), t;
}
modifiersAll.all = !0;
var TouchSwipe = createDirective({
    name: "touch-swipe",
    beforeMount (e39, { value: t27 , arg: o12 , modifiers: n8  }) {
        if (!0 !== n8.mouse && !0 !== client.has.touch) return;
        const a6 = !0 === n8.mouseCapture ? "Capture" : "", l = {
            handler: t27,
            sensitivity: parseArg(o12),
            direction: getModifierDirections(n8),
            noop: noop,
            mouseStart (e) {
                shouldStart(e, l) && leftClick(e) && (addEvt(l, "temp", [
                    [
                        document,
                        "mousemove",
                        "move",
                        `notPassive${a6}`
                    ],
                    [
                        document,
                        "mouseup",
                        "end",
                        "notPassiveCapture"
                    ]
                ]), l.start(e, !0));
            },
            touchStart (e) {
                if (shouldStart(e, l)) {
                    const t = e.target;
                    addEvt(l, "temp", [
                        [
                            t,
                            "touchmove",
                            "move",
                            "notPassiveCapture"
                        ],
                        [
                            t,
                            "touchcancel",
                            "end",
                            "notPassiveCapture"
                        ],
                        [
                            t,
                            "touchend",
                            "end",
                            "notPassiveCapture"
                        ]
                    ]), l.start(e);
                }
            },
            start (t, o) {
                !0 === client.is.firefox && preventDraggable(e39, !0);
                const n = position(t);
                l.event = {
                    x: n.left,
                    y: n.top,
                    time: Date.now(),
                    mouse: !0 === o,
                    dir: !1
                };
            },
            move (e40) {
                if (void 0 === l.event) return;
                if (!1 !== l.event.dir) return void stopAndPrevent(e40);
                const t28 = Date.now() - l.event.time;
                if (0 === t28) return;
                const o = position(e40), n = o.left - l.event.x, a = Math.abs(n), i = o.top - l.event.y, r = Math.abs(i);
                if (!0 !== l.event.mouse) {
                    if (a < l.sensitivity[1] && r < l.sensitivity[1]) return void l.end(e40);
                } else if (a < l.sensitivity[2] && r < l.sensitivity[2]) return;
                const s = a / t28, u = r / t28;
                !0 === l.direction.vertical && a < r && a < 100 && u > l.sensitivity[0] && (l.event.dir = i < 0 ? "up" : "down"), !0 === l.direction.horizontal && a > r && r < 100 && s > l.sensitivity[0] && (l.event.dir = n < 0 ? "left" : "right"), !0 === l.direction.up && a < r && i < 0 && a < 100 && u > l.sensitivity[0] && (l.event.dir = "up"), !0 === l.direction.down && a < r && i > 0 && a < 100 && u > l.sensitivity[0] && (l.event.dir = "down"), !0 === l.direction.left && a > r && n < 0 && r < 100 && s > l.sensitivity[0] && (l.event.dir = "left"), !0 === l.direction.right && a > r && n > 0 && r < 100 && s > l.sensitivity[0] && (l.event.dir = "right"), !1 !== l.event.dir ? (stopAndPrevent(e40), !0 === l.event.mouse && (document.body.classList.add("no-pointer-events--children"), document.body.classList.add("non-selectable"), clearSelection(), l.styleCleanup = (e)=>{
                    l.styleCleanup = void 0, document.body.classList.remove("non-selectable");
                    const t = ()=>{
                        document.body.classList.remove("no-pointer-events--children");
                    };
                    !0 === e ? setTimeout(t, 50) : t();
                }), l.handler({
                    evt: e40,
                    touch: !0 !== l.event.mouse,
                    mouse: l.event.mouse,
                    direction: l.event.dir,
                    duration: t28,
                    distance: {
                        x: a,
                        y: r
                    }
                })) : l.end(e40);
            },
            end (t) {
                void 0 !== l.event && (cleanEvt(l, "temp"), !0 === client.is.firefox && preventDraggable(e39, !1), void 0 !== l.styleCleanup && l.styleCleanup(!0), void 0 !== t && !1 !== l.event.dir && stopAndPrevent(t), l.event = void 0);
            }
        };
        e39.__qtouchswipe = l, !0 === n8.mouse && addEvt(l, "main", [
            [
                e39,
                "mousedown",
                "mouseStart",
                `passive${a6}`
            ]
        ]), !0 === client.has.touch && addEvt(l, "main", [
            [
                e39,
                "touchstart",
                "touchStart",
                `passive${!0 === n8.capture ? "Capture" : ""}`
            ],
            [
                e39,
                "touchmove",
                "noop",
                "notPassiveCapture"
            ]
        ]);
    },
    updated (e, t) {
        const o = e.__qtouchswipe;
        void 0 !== o && (t.oldValue !== t.value && ("function" !== typeof t.value && o.end(), o.handler = t.value), o.direction = getModifierDirections(t.modifiers));
    },
    beforeUnmount (e) {
        const t = e.__qtouchswipe;
        void 0 !== t && (cleanEvt(t, "main"), cleanEvt(t, "temp"), !0 === client.is.firefox && preventDraggable(e, !1), void 0 !== t.styleCleanup && t.styleCleanup(), delete e.__qtouchswipe);
    }
});
function useCache() {
    const e = new Map;
    return {
        getCache: function(t, o) {
            return void 0 === e[t] ? e[t] = o : e[t];
        },
        getCacheWithFn: function(t, o) {
            return void 0 === e[t] ? e[t] = o() : e[t];
        }
    };
}
const usePanelChildProps = {
    name: {
        required: !0
    },
    disable: Boolean
}, PanelWrapper$1 = {
    setup (e, { slots: t  }) {
        return ()=>_vue.h("div", {
                class: "q-panel scroll",
                role: "tabpanel"
            }, hSlot(t.default))
        ;
    }
}, usePanelProps = {
    modelValue: {
        required: !0
    },
    animated: Boolean,
    infinite: Boolean,
    swipeable: Boolean,
    vertical: Boolean,
    transitionPrev: String,
    transitionNext: String,
    transitionDuration: {
        type: [
            String,
            Number
        ],
        default: 300
    },
    keepAlive: Boolean,
    keepAliveInclude: [
        String,
        Array,
        RegExp
    ],
    keepAliveExclude: [
        String,
        Array,
        RegExp
    ],
    keepAliveMax: Number
}, usePanelEmits = [
    "update:modelValue",
    "before-transition",
    "transition"
];
function usePanel() {
    const { props: e41 , emit: t29 , proxy: o13  } = _vue.getCurrentInstance(), { getCacheWithFn: n9  } = useCache();
    let a, l;
    const i = _vue.ref(null), r1 = _vue.ref(null);
    function s(t) {
        const n = !0 === e41.vertical ? "up" : "left";
        k((!0 === o13.$q.lang.rtl ? -1 : 1) * (t.direction === n ? 1 : -1));
    }
    const u = _vue.computed(()=>{
        return [
            [
                TouchSwipe,
                s,
                void 0,
                {
                    horizontal: !0 !== e41.vertical,
                    vertical: e41.vertical,
                    mouse: !0
                }
            ]
        ];
    }), c = _vue.computed(()=>e41.transitionPrev || `slide-${!0 === e41.vertical ? "down" : "right"}`
    ), d = _vue.computed(()=>e41.transitionNext || `slide-${!0 === e41.vertical ? "up" : "left"}`
    ), p = _vue.computed(()=>`--q-transition-duration: ${e41.transitionDuration}ms`
    ), v = _vue.computed(()=>"string" === typeof e41.modelValue || "number" === typeof e41.modelValue ? e41.modelValue : String(e41.modelValue)
    ), m = _vue.computed(()=>({
            include: e41.keepAliveInclude,
            exclude: e41.keepAliveExclude,
            max: e41.keepAliveMax
        })
    ), f = _vue.computed(()=>void 0 !== e41.keepAliveInclude || void 0 !== e41.keepAliveExclude
    );
    function g() {
        k(1);
    }
    function b() {
        k(-1);
    }
    function y(e) {
        t29("update:modelValue", e);
    }
    function S(e) {
        return void 0 !== e && null !== e && "" !== e;
    }
    function w(e) {
        return a.findIndex((t)=>{
            return t.props.name === e && "" !== t.props.disable && !0 !== t.props.disable;
        });
    }
    function x() {
        return a.filter((e)=>{
            return "" !== e.props.disable && !0 !== e.props.disable;
        });
    }
    function C(t) {
        const o = 0 !== t && !0 === e41.animated && -1 !== i.value ? "q-transition--" + (-1 === t ? c.value : d.value) : null;
        r1.value !== o && (r1.value = o);
    }
    function k(o, n = i.value) {
        let r = n + o;
        while(r > -1 && r < a.length){
            const e = a[r];
            if (void 0 !== e && "" !== e.props.disable && !0 !== e.props.disable) return C(o), l = !0, t29("update:modelValue", e.props.name), void setTimeout(()=>{
                l = !1;
            });
            r += o;
        }
        !0 === e41.infinite && a.length > 0 && -1 !== n && n !== a.length && k(o, -1 === o ? a.length : -1);
    }
    function _() {
        const t = w(e41.modelValue);
        return i.value !== t && (i.value = t), !0;
    }
    function q() {
        const t = !0 === S(e41.modelValue) && _() && a[i.value];
        return !0 === e41.keepAlive ? [
            _vue.h(_vue.KeepAlive, m.value, [
                _vue.h(!0 === f.value ? n9(v.value, ()=>({
                        ...PanelWrapper$1,
                        name: v.value
                    })
                ) : PanelWrapper$1, {
                    key: v.value,
                    style: p.value
                }, ()=>t
                )
            ])
        ] : [
            _vue.h("div", {
                class: "q-panel scroll",
                style: p.value,
                key: v.value,
                role: "tabpanel"
            }, [
                t
            ])
        ];
    }
    function T() {
        if (0 !== a.length) return !0 === e41.animated ? [
            _vue.h(_vue.Transition, {
                name: r1.value
            }, q)
        ] : q();
    }
    function P(e42) {
        return a = getNormalizedVNodes(hSlot(e42.default, [])).filter((e)=>null !== e.props && void 0 === e.props.slot && !0 === S(e.props.name)
        ), a.length;
    }
    function $() {
        return a;
    }
    return _vue.watch(()=>e41.modelValue
    , (e, o)=>{
        const n = !0 === S(e) ? w(e) : -1;
        !0 !== l && C(-1 === n ? 0 : n < w(o) ? -1 : 1), i.value !== n && (i.value = n, t29("before-transition", e, o), _vue.nextTick(()=>{
            t29("transition", e, o);
        }));
    }), Object.assign(o13, {
        next: g,
        previous: b,
        goTo: y
    }), {
        panelIndex: i,
        panelDirectives: u,
        updatePanelsList: P,
        updatePanelIndex: _,
        getPanelContent: T,
        getEnabledPanels: x,
        getPanels: $,
        isValidPanelName: S,
        keepAliveProps: m,
        needsUniqueKeepAliveWrapper: f,
        goToPanelByOffset: k,
        goToPanel: y,
        nextPanel: g,
        previousPanel: b
    };
}
const useFullscreenProps = {
    fullscreen: Boolean,
    noRouteFullscreenExit: Boolean
}, useFullscreenEmits = [
    "update:fullscreen",
    "fullscreen"
];
function useFullscreen() {
    const e43 = _vue.getCurrentInstance(), { props: t , emit: o , proxy: n  } = e43;
    let a, l, i;
    const r = _vue.ref(!1);
    function s() {
        !0 === r.value ? c() : u();
    }
    function u() {
        !0 !== r.value && (r.value = !0, i = n.$el.parentNode, i.replaceChild(l, n.$el), document.body.appendChild(n.$el), document.body.classList.add("q-body--fullscreen-mixin"), a = {
            handler: c
        }, History.add(a));
    }
    function c() {
        !0 === r.value && (void 0 !== a && (History.remove(a), a = void 0), i.replaceChild(n.$el, l), document.body.classList.remove("q-body--fullscreen-mixin"), r.value = !1, void 0 !== n.$el.scrollIntoView && setTimeout(()=>{
            n.$el.scrollIntoView();
        }));
    }
    return !0 === vmHasRouter(e43) && _vue.watch(()=>n.$route
    , ()=>{
        !0 !== t.noRouteFullscreenExit && c();
    }), _vue.watch(()=>t.fullscreen
    , (e)=>{
        r.value !== e && s();
    }), _vue.watch(r, (e)=>{
        o("update:fullscreen", e), o("fullscreen", e);
    }), _vue.onBeforeMount(()=>{
        l = document.createElement("span");
    }), _vue.onMounted(()=>{
        !0 === t.fullscreen && u();
    }), _vue.onBeforeUnmount(c), Object.assign(n, {
        toggleFullscreen: s,
        setFullscreen: u,
        exitFullscreen: c
    }), {
        inFullscreen: r,
        toggleFullscreen: s
    };
}
const hasMap = "function" === typeof Map, hasSet = "function" === typeof Set, hasArrayBuffer = "function" === typeof ArrayBuffer;
function isDeepEqual(e, t) {
    if (e === t) return !0;
    if (null !== e && null !== t && "object" === typeof e && "object" === typeof t) {
        if (e.constructor !== t.constructor) return !1;
        let o, n;
        if (e.constructor === Array) {
            if (o = e.length, o !== t.length) return !1;
            for(n = o; 0 !== n--;)if (!0 !== isDeepEqual(e[n], t[n])) return !1;
            return !0;
        }
        if (!0 === hasMap && e.constructor === Map) {
            if (e.size !== t.size) return !1;
            n = e.entries().next();
            while(!0 !== n.done){
                if (!0 !== t.has(n.value[0])) return !1;
                n = n.next();
            }
            n = e.entries().next();
            while(!0 !== n.done){
                if (!0 !== isDeepEqual(n.value[1], t.get(n.value[0]))) return !1;
                n = n.next();
            }
            return !0;
        }
        if (!0 === hasSet && e.constructor === Set) {
            if (e.size !== t.size) return !1;
            n = e.entries().next();
            while(!0 !== n.done){
                if (!0 !== t.has(n.value[0])) return !1;
                n = n.next();
            }
            return !0;
        }
        if (!0 === hasArrayBuffer && null != e.buffer && e.buffer.constructor === ArrayBuffer) {
            if (o = e.length, o !== t.length) return !1;
            for(n = o; 0 !== n--;)if (e[n] !== t[n]) return !1;
            return !0;
        }
        if (e.constructor === RegExp) return e.source === t.source && e.flags === t.flags;
        if (e.valueOf !== Object.prototype.valueOf) return e.valueOf() === t.valueOf();
        if (e.toString !== Object.prototype.toString) return e.toString() === t.toString();
        const a = Object.keys(e);
        if (o = a.length, o !== Object.keys(t).length) return !1;
        for(n = o; 0 !== n--;){
            const o = a[n];
            if (!0 !== isDeepEqual(e[o], t[o])) return !1;
        }
        return !0;
    }
    return e !== e && t !== t;
}
function isDate(e) {
    return "[object Date]" === Object.prototype.toString.call(e);
}
function isNumber(e) {
    return "number" === typeof e && isFinite(e);
}
const navigationPositionOptions = [
    "top",
    "right",
    "bottom",
    "left"
], controlTypeOptions = [
    "regular",
    "flat",
    "outline",
    "push",
    "unelevated"
];
var QCarousel = createComponent({
    name: "QCarousel",
    props: {
        ...useDarkProps,
        ...usePanelProps,
        ...useFullscreenProps,
        transitionPrev: {
            type: String,
            default: "fade"
        },
        transitionNext: {
            type: String,
            default: "fade"
        },
        height: String,
        padding: Boolean,
        controlColor: String,
        controlTextColor: String,
        controlType: {
            type: String,
            validator: (e)=>controlTypeOptions.includes(e)
            ,
            default: "flat"
        },
        autoplay: [
            Number,
            Boolean
        ],
        arrows: Boolean,
        prevIcon: String,
        nextIcon: String,
        navigation: Boolean,
        navigationPosition: {
            type: String,
            validator: (e)=>navigationPositionOptions.includes(e)
        },
        navigationIcon: String,
        navigationActiveIcon: String,
        thumbnails: Boolean
    },
    emits: [
        ...useFullscreenEmits,
        ...usePanelEmits
    ],
    setup (e44, { slots: t30  }) {
        const { proxy: { $q: o14  }  } = _vue.getCurrentInstance(), n10 = useDark(e44, o14);
        let a7, l5;
        const { updatePanelsList: i , getPanelContent: r , panelDirectives: s , goToPanel: u , previousPanel: c , nextPanel: d , getEnabledPanels: p , panelIndex: v  } = usePanel(), { inFullscreen: m  } = useFullscreen(), f = _vue.computed(()=>!0 !== m.value && void 0 !== e44.height ? {
                height: e44.height
            } : {
            }
        ), g = _vue.computed(()=>!0 === e44.vertical ? "vertical" : "horizontal"
        ), b = _vue.computed(()=>`q-carousel q-panel-parent q-carousel--with${!0 === e44.padding ? "" : "out"}-padding` + (!0 === m.value ? " fullscreen" : "") + (!0 === n10.value ? " q-carousel--dark q-dark" : "") + (!0 === e44.arrows ? ` q-carousel--arrows-${g.value}` : "") + (!0 === e44.navigation ? ` q-carousel--navigation-${x.value}` : "")
        ), y = _vue.computed(()=>{
            const t = [
                e44.prevIcon || o14.iconSet.carousel[!0 === e44.vertical ? "up" : "left"],
                e44.nextIcon || o14.iconSet.carousel[!0 === e44.vertical ? "down" : "right"]
            ];
            return !1 === e44.vertical && !0 === o14.lang.rtl ? t.reverse() : t;
        }), S = _vue.computed(()=>e44.navigationIcon || o14.iconSet.carousel.navigationIcon
        ), w = _vue.computed(()=>e44.navigationActiveIcon || S.value
        ), x = _vue.computed(()=>e44.navigationPosition || (!0 === e44.vertical ? "right" : "bottom")
        ), C = _vue.computed(()=>({
                color: e44.controlColor,
                textColor: e44.controlTextColor,
                round: !0,
                [e44.controlType]: !0,
                dense: !0
            })
        );
        function k() {
            const t = !0 === isNumber(e44.autoplay) ? e44.autoplay : 5000;
            a7 = setTimeout(t >= 0 ? d : c, Math.abs(t));
        }
        function _(t, o) {
            return _vue.h("div", {
                class: "q-carousel__control q-carousel__navigation no-wrap absolute flex" + ` q-carousel__navigation--${t} q-carousel__navigation--${x.value}` + (void 0 !== e44.controlColor ? ` text-${e44.controlColor}` : "")
            }, [
                _vue.h("div", {
                    class: "q-carousel__navigation-inner flex flex-center no-wrap"
                }, p().map(o))
            ]);
        }
        function q() {
            const o15 = [];
            if (!0 === e44.navigation) {
                const e45 = void 0 !== t30["navigation-icon"] ? t30["navigation-icon"] : (e)=>_vue.h(QBtn, {
                        key: "nav" + e.name,
                        class: `q-carousel__navigation-icon q-carousel__navigation-icon--${!0 === e.active ? "" : "in"}active`,
                        ...e.btnProps,
                        onClick: e.onClick
                    })
                , n = l5 - 1;
                o15.push(_("buttons", (t, o)=>{
                    const a = t.props.name, l = v.value === o;
                    return e45({
                        index: o,
                        maxIndex: n,
                        name: a,
                        active: l,
                        btnProps: {
                            icon: !0 === l ? w.value : S.value,
                            size: "sm",
                            ...C.value
                        },
                        onClick: ()=>{
                            u(a);
                        }
                    });
                }));
            } else if (!0 === e44.thumbnails) {
                const t = void 0 !== e44.controlColor ? ` text-${e44.controlColor}` : "";
                o15.push(_("thumbnails", (o)=>{
                    const n = o.props;
                    return _vue.h("img", {
                        key: "tmb#" + n.name,
                        class: `q-carousel__thumbnail q-carousel__thumbnail--${n.name === e44.modelValue ? "" : "in"}active` + t,
                        src: n.imgSrc || n["img-src"],
                        onClick: ()=>{
                            u(n.name);
                        }
                    });
                }));
            }
            return !0 === e44.arrows && v.value >= 0 && ((!0 === e44.infinite || v.value > 0) && o15.push(_vue.h("div", {
                key: "prev",
                class: `q-carousel__control q-carousel__arrow q-carousel__prev-arrow q-carousel__prev-arrow--${g.value} absolute flex flex-center`
            }, [
                _vue.h(QBtn, {
                    icon: y.value[0],
                    ...C.value,
                    onClick: c
                })
            ])), (!0 === e44.infinite || v.value < l5 - 1) && o15.push(_vue.h("div", {
                key: "next",
                class: "q-carousel__control q-carousel__arrow q-carousel__next-arrow" + ` q-carousel__next-arrow--${g.value} absolute flex flex-center`
            }, [
                _vue.h(QBtn, {
                    icon: y.value[1],
                    ...C.value,
                    onClick: d
                })
            ]))), hMergeSlot(t30.control, o15);
        }
        return _vue.watch(()=>e44.modelValue
        , ()=>{
            e44.autoplay && (clearInterval(a7), k());
        }), _vue.watch(()=>e44.autoplay
        , (e)=>{
            e ? k() : clearInterval(a7);
        }), _vue.onMounted(()=>{
            e44.autoplay && k();
        }), _vue.onBeforeUnmount(()=>{
            clearInterval(a7);
        }), ()=>{
            return l5 = i(t30), _vue.h("div", {
                class: b.value,
                style: f.value
            }, [
                hDir("div", {
                    class: "q-carousel__slides-container"
                }, r(), "sl-cont", e44.swipeable, ()=>s.value
                )
            ].concat(q()));
        };
    }
}), QCarouselSlide = createComponent({
    name: "QCarouselSlide",
    props: {
        ...usePanelChildProps,
        imgSrc: String
    },
    setup (e, { slots: t  }) {
        const o = _vue.computed(()=>e.imgSrc ? {
                backgroundImage: `url("${e.imgSrc}")`
            } : {
            }
        );
        return ()=>_vue.h("div", {
                class: "q-carousel__slide",
                style: o.value
            }, hSlot(t.default))
        ;
    }
}), QCarouselControl = createComponent({
    name: "QCarouselControl",
    props: {
        position: {
            type: String,
            default: "bottom-right",
            validator: (e)=>[
                    "top-right",
                    "top-left",
                    "bottom-right",
                    "bottom-left",
                    "top",
                    "right",
                    "bottom",
                    "left"
                ].includes(e)
        },
        offset: {
            type: Array,
            default: ()=>[
                    18,
                    18
                ]
            ,
            validator: (e)=>2 === e.length
        }
    },
    setup (e, { slots: t  }) {
        const o = _vue.computed(()=>`q-carousel__control absolute absolute-${e.position}`
        ), n = _vue.computed(()=>({
                margin: `${e.offset[1]}px ${e.offset[0]}px`
            })
        );
        return ()=>_vue.h("div", {
                class: o.value,
                style: n.value
            }, hSlot(t.default))
        ;
    }
}), QChatMessage = createComponent({
    name: "QChatMessage",
    props: {
        sent: Boolean,
        label: String,
        bgColor: String,
        textColor: String,
        name: String,
        avatar: String,
        text: Array,
        stamp: String,
        size: String,
        labelHtml: Boolean,
        nameHtml: Boolean,
        textHtml: Boolean,
        stampHtml: Boolean
    },
    setup (e46, { slots: t31  }) {
        const o16 = _vue.computed(()=>!0 === e46.sent ? "sent" : "received"
        ), n11 = _vue.computed(()=>`q-message-text-content q-message-text-content--${o16.value}` + (void 0 !== e46.textColor ? ` text-${e46.textColor}` : "")
        ), a8 = _vue.computed(()=>`q-message-text q-message-text--${o16.value}` + (void 0 !== e46.bgColor ? ` text-${e46.bgColor}` : "")
        ), l = _vue.computed(()=>"q-message-container row items-end no-wrap" + (!0 === e46.sent ? " reverse" : "")
        ), i = _vue.computed(()=>void 0 !== e46.size ? `col-${e46.size}` : ""
        ), r = _vue.computed(()=>({
                msg: !0 === e46.textHtml ? "innerHTML" : "textContent",
                stamp: !0 === e46.stampHtml ? "innerHTML" : "textContent",
                name: !0 === e46.nameHtml ? "innerHTML" : "textContent",
                label: !0 === e46.labelHtml ? "innerHTML" : "textContent"
            })
        );
        function s2(o) {
            return void 0 !== t31.stamp ? [
                o,
                _vue.h("div", {
                    class: "q-message-stamp"
                }, t31.stamp())
            ] : e46.stamp ? [
                o,
                _vue.h("div", {
                    class: "q-message-stamp",
                    [r.value.stamp]: e46.stamp
                })
            ] : [
                o
            ];
        }
        function u(e47, t32) {
            const o = !0 === t32 ? e47.length > 1 ? (e)=>e
             : (e)=>_vue.h("div", [
                    e
                ])
             : (e)=>_vue.h("div", {
                    [r.value.msg]: e
                })
            ;
            return e47.map((e, t)=>_vue.h("div", {
                    key: t,
                    class: a8.value
                }, [
                    _vue.h("div", {
                        class: n11.value
                    }, s2(o(e)))
                ])
            );
        }
        return ()=>{
            const n = [];
            void 0 !== t31.avatar ? n.push(t31.avatar()) : void 0 !== e46.avatar && n.push(_vue.h("img", {
                class: `q-message-avatar q-message-avatar--${o16.value}`,
                src: e46.avatar,
                "aria-hidden": "true"
            }));
            const a = [];
            void 0 !== t31.name ? a.push(_vue.h("div", {
                class: `q-message-name q-message-name--${o16.value}`
            }, t31.name())) : void 0 !== e46.name && a.push(_vue.h("div", {
                class: `q-message-name q-message-name--${o16.value}`,
                [r.value.name]: e46.name
            })), void 0 !== t31.default ? a.push(u(getNormalizedVNodes(t31.default()), !0)) : void 0 !== e46.text && a.push(u(e46.text)), n.push(_vue.h("div", {
                class: i.value
            }, a));
            const s = [];
            return void 0 !== t31.label ? s.push(_vue.h("div", {
                class: "q-message-label"
            }, t31.label())) : void 0 !== e46.label && s.push(_vue.h("div", {
                class: "q-message-label",
                [r.value.label]: e46.label
            })), s.push(_vue.h("div", {
                class: l.value
            }, n)), _vue.h("div", {
                class: `q-message q-message-${o16.value}`
            }, s);
        };
    }
});
function useRefocusTarget(e48, t) {
    const o = _vue.ref(null), n12 = _vue.computed(()=>{
        return !0 !== e48.disable ? null : _vue.h("span", {
            ref: o,
            class: "no-outline",
            tabindex: -1
        });
    });
    function a(e) {
        const n = t.value;
        void 0 !== e && 0 === e.type.indexOf("key") ? null !== n && document.activeElement !== n && !0 === n.contains(document.activeElement) && n.focus() : null !== o.value && (void 0 === e || null !== n && !0 === n.contains(e.target)) && o.value.focus();
    }
    return {
        refocusTargetEl: n12,
        refocusTarget: a
    };
}
var optionSizes = {
    xs: 30,
    sm: 35,
    md: 40,
    lg: 50,
    xl: 60
};
const useCheckboxProps = {
    ...useDarkProps,
    ...useSizeProps,
    ...useFormProps,
    modelValue: {
        required: !0,
        default: null
    },
    val: {
    },
    trueValue: {
        default: !0
    },
    falseValue: {
        default: !1
    },
    indeterminateValue: {
        default: null
    },
    toggleOrder: {
        type: String,
        validator: (e)=>"tf" === e || "ft" === e
    },
    toggleIndeterminate: Boolean,
    label: String,
    leftLabel: Boolean,
    color: String,
    keepColor: Boolean,
    dense: Boolean,
    disable: Boolean,
    tabindex: [
        String,
        Number
    ]
}, useCheckboxEmits = [
    "update:modelValue"
];
function useCheckbox(e49, t33) {
    const { props: o , slots: n13 , emit: a9 , proxy: l6  } = _vue.getCurrentInstance(), { $q: i  } = l6, r = useDark(o, i), s = _vue.ref(null), { refocusTargetEl: u , refocusTarget: c  } = useRefocusTarget(o, s), d = useSize(o, optionSizes), p = _vue.computed(()=>void 0 !== o.val && Array.isArray(o.modelValue)
    ), v = _vue.computed(()=>!0 === p.value ? o.modelValue.indexOf(o.val) : -1
    ), m = _vue.computed(()=>!0 === p.value ? v.value > -1 : o.modelValue === o.trueValue
    ), f = _vue.computed(()=>!0 === p.value ? -1 === v.value : o.modelValue === o.falseValue
    ), g = _vue.computed(()=>!1 === m.value && !1 === f.value
    ), b = _vue.computed(()=>!0 === o.disable ? -1 : o.tabindex || 0
    ), y = _vue.computed(()=>`q-${e49} cursor-pointer no-outline row inline no-wrap items-center` + (!0 === o.disable ? " disabled" : "") + (!0 === r.value ? ` q-${e49}--dark` : "") + (!0 === o.dense ? ` q-${e49}--dense` : "") + (!0 === o.leftLabel ? " reverse" : "")
    ), S = _vue.computed(()=>{
        const t = !0 === m.value ? "truthy" : !0 === f.value ? "falsy" : "indet", n = void 0 === o.color || !0 !== o.keepColor && ("toggle" === e49 ? !0 !== m.value : !0 === f.value) ? "" : ` text-${o.color}`;
        return `q-${e49}__inner relative-position non-selectable q-${e49}__inner--${t}${n}`;
    }), w = _vue.computed(()=>{
        const e = {
            type: "checkbox"
        };
        return void 0 !== o.name && Object.assign(e, {
            checked: m.value,
            name: o.name,
            value: !0 === p.value ? o.val : o.trueValue
        }), e;
    }), x = useFormInject(w), C = _vue.computed(()=>{
        const e = {
            tabindex: b.value,
            role: "checkbox",
            "aria-label": o.label,
            "aria-checked": !0 === g.value ? "mixed" : !0 === m.value ? "true" : "false"
        };
        return !0 === o.disable && (e["aria-disabled"] = "true"), e;
    });
    function k(e) {
        void 0 !== e && (stopAndPrevent(e), c(e)), !0 !== o.disable && a9("update:modelValue", _(), e);
    }
    function _() {
        if (!0 === p.value) {
            if (!0 === m.value) {
                const e = o.modelValue.slice();
                return e.splice(v.value, 1), e;
            }
            return o.modelValue.concat([
                o.val
            ]);
        }
        if (!0 === m.value) {
            if ("ft" !== o.toggleOrder || !1 === o.toggleIndeterminate) return o.falseValue;
        } else {
            if (!0 !== f.value) return "ft" !== o.toggleOrder ? o.trueValue : o.falseValue;
            if ("ft" === o.toggleOrder || !1 === o.toggleIndeterminate) return o.trueValue;
        }
        return o.indeterminateValue;
    }
    function q(e) {
        13 !== e.keyCode && 32 !== e.keyCode || stopAndPrevent(e);
    }
    function T(e) {
        13 !== e.keyCode && 32 !== e.keyCode || k(e);
    }
    const P = t33(m, g);
    return Object.assign(l6, {
        toggle: k
    }), ()=>{
        const t = P();
        !0 !== o.disable && x(t, "unshift", ` q-${e49}__native absolute q-ma-none q-pa-none`);
        const a = [
            _vue.h("div", {
                class: S.value,
                style: d.value
            }, t)
        ];
        null !== u.value && a.push(u.value);
        const l = void 0 !== o.label ? hMergeSlot(n13.default, [
            o.label
        ]) : hSlot(n13.default);
        return void 0 !== l && a.push(_vue.h("div", {
            class: `q-${e49}__label q-anchor--skip`
        }, l)), _vue.h("div", {
            ref: s,
            class: y.value,
            ...C.value,
            onClick: k,
            onKeydown: q,
            onKeyup: T
        }, a);
    };
}
const bgNode = _vue.h("div", {
    class: "q-checkbox__bg absolute"
}, [
    _vue.h("svg", {
        class: "q-checkbox__svg fit absolute-full",
        viewBox: "0 0 24 24",
        "aria-hidden": "true"
    }, [
        _vue.h("path", {
            class: "q-checkbox__truthy",
            fill: "none",
            d: "M1.73,12.91 8.1,19.28 22.79,4.59"
        }),
        _vue.h("path", {
            class: "q-checkbox__indet",
            d: "M4,14H20V10H4"
        })
    ])
]);
var QCheckbox = createComponent({
    name: "QCheckbox",
    props: useCheckboxProps,
    emits: useCheckboxEmits,
    setup () {
        return useCheckbox("checkbox", ()=>()=>[
                    bgNode
                ]
        );
    }
});
const defaultSizes$1 = {
    xs: 8,
    sm: 10,
    md: 14,
    lg: 20,
    xl: 24
};
var QChip = createComponent({
    name: "QChip",
    props: {
        ...useDarkProps,
        ...useSizeProps,
        dense: Boolean,
        icon: String,
        iconRight: String,
        iconRemove: String,
        iconSelected: String,
        label: [
            String,
            Number
        ],
        color: String,
        textColor: String,
        modelValue: {
            type: Boolean,
            default: !0
        },
        selected: {
            type: Boolean,
            default: null
        },
        square: Boolean,
        outline: Boolean,
        clickable: Boolean,
        removable: Boolean,
        tabindex: [
            String,
            Number
        ],
        disable: Boolean,
        ripple: {
            type: [
                Boolean,
                Object
            ],
            default: !0
        }
    },
    emits: [
        "update:modelValue",
        "update:selected",
        "remove",
        "click"
    ],
    setup (e50, { slots: t34 , emit: o17  }) {
        const { proxy: { $q: n14  }  } = _vue.getCurrentInstance(), a = useDark(e50, n14), l = useSize(e50, defaultSizes$1), i = _vue.computed(()=>!0 === e50.selected || void 0 !== e50.icon
        ), r = _vue.computed(()=>!0 === e50.selected ? e50.iconSelected || n14.iconSet.chip.selected : e50.icon
        ), s = _vue.computed(()=>e50.iconRemove || n14.iconSet.chip.remove
        ), u = _vue.computed(()=>!1 === e50.disable && (!0 === e50.clickable || null !== e50.selected)
        ), c = _vue.computed(()=>{
            const t = !0 === e50.outline && e50.color || e50.textColor;
            return "q-chip row inline no-wrap items-center" + (!1 === e50.outline && void 0 !== e50.color ? ` bg-${e50.color}` : "") + (t ? ` text-${t} q-chip--colored` : "") + (!0 === e50.disable ? " disabled" : "") + (!0 === e50.dense ? " q-chip--dense" : "") + (!0 === e50.outline ? " q-chip--outline" : "") + (!0 === e50.selected ? " q-chip--selected" : "") + (!0 === u.value ? " q-chip--clickable cursor-pointer non-selectable q-hoverable" : "") + (!0 === e50.square ? " q-chip--square" : "") + (!0 === a.value ? " q-chip--dark q-dark" : "");
        }), d = _vue.computed(()=>!0 === e50.disable ? {
                tabindex: -1,
                "aria-disabled": "true"
            } : {
                tabindex: e50.tabindex || 0
            }
        );
        function p(e) {
            13 === e.keyCode && v(e);
        }
        function v(t) {
            e50.disable || (o17("update:selected", !e50.selected), o17("click", t));
        }
        function m(t) {
            void 0 !== t.keyCode && 13 !== t.keyCode || (stopAndPrevent(t), !1 === e50.disable && (o17("update:modelValue", !1), o17("remove")));
        }
        function f() {
            const o = [];
            !0 === u.value && o.push(_vue.h("div", {
                class: "q-focus-helper"
            })), !0 === i.value && o.push(_vue.h(QIcon, {
                class: "q-chip__icon q-chip__icon--left",
                name: r.value
            }));
            const n = void 0 !== e50.label ? [
                _vue.h("div", {
                    class: "ellipsis"
                }, [
                    e50.label
                ])
            ] : void 0;
            return o.push(_vue.h("div", {
                class: "q-chip__content col row no-wrap items-center q-anchor--skip"
            }, hMergeSlotSafely(t34.default, n))), e50.iconRight && o.push(_vue.h(QIcon, {
                class: "q-chip__icon q-chip__icon--right",
                name: e50.iconRight
            })), !0 === e50.removable && o.push(_vue.h(QIcon, {
                class: "q-chip__icon q-chip__icon--remove cursor-pointer",
                name: s.value,
                ...d.value,
                onClick: m,
                onKeyup: m
            })), o;
        }
        return ()=>{
            if (!1 === e50.modelValue) return;
            const t = {
                class: c.value,
                style: l.value
            };
            return !0 === u.value && Object.assign(t, d.value, {
                onClick: v,
                onKeyup: p
            }), hDir("div", t, f(), "ripple", !1 !== e50.ripple && !0 !== e50.disable, ()=>[
                    [
                        Ripple,
                        e50.ripple
                    ]
                ]
            );
        };
    }
});
const useCircularCommonProps = {
    ...useSizeProps,
    min: {
        type: Number,
        default: 0
    },
    max: {
        type: Number,
        default: 100
    },
    color: String,
    centerColor: String,
    trackColor: String,
    fontSize: String,
    thickness: {
        type: Number,
        default: 0.2,
        validator: (e)=>e >= 0 && e <= 1
    },
    angle: {
        type: Number,
        default: 0
    },
    showValue: Boolean,
    reverse: Boolean,
    instantFeedback: Boolean
}, radius = 50, diameter = 2 * radius, circumference = diameter * Math.PI, strokeDashArray = Math.round(1000 * circumference) / 1000;
var QCircularProgress = createComponent({
    name: "QCircularProgress",
    props: {
        ...useCircularCommonProps,
        value: {
            type: Number,
            default: 0
        },
        animationSpeed: {
            type: [
                String,
                Number
            ],
            default: 600
        },
        indeterminate: Boolean
    },
    setup (e51, { slots: t35  }) {
        const { proxy: { $q: o18  }  } = _vue.getCurrentInstance(), n15 = useSize(e51), a = _vue.computed(()=>{
            const t = (!0 === o18.lang.rtl ? -1 : 1) * e51.angle;
            return {
                transform: e51.reverse !== (!0 === o18.lang.rtl) ? `scale3d(-1, 1, 1) rotate3d(0, 0, 1, ${-90 - t}deg)` : `rotate3d(0, 0, 1, ${t - 90}deg)`
            };
        }), l7 = _vue.computed(()=>!0 !== e51.instantFeedback && !0 !== e51.indeterminate ? {
                transition: `stroke-dashoffset ${e51.animationSpeed}ms ease 0s, stroke ${e51.animationSpeed}ms ease`
            } : ""
        ), i = _vue.computed(()=>diameter / (1 - e51.thickness / 2)
        ), r = _vue.computed(()=>`${i.value / 2} ${i.value / 2} ${i.value} ${i.value}`
        ), s = _vue.computed(()=>between(e51.value, e51.min, e51.max)
        ), u = _vue.computed(()=>circumference * (1 - (s.value - e51.min) / (e51.max - e51.min))
        ), c = _vue.computed(()=>e51.thickness / 2 * i.value
        );
        function d({ thickness: e , offset: t , color: o , cls: n  }) {
            return _vue.h("circle", {
                class: "q-circular-progress__" + n + (void 0 !== o ? ` text-${o}` : ""),
                style: l7.value,
                fill: "transparent",
                stroke: "currentColor",
                "stroke-width": e,
                "stroke-dasharray": strokeDashArray,
                "stroke-dashoffset": t,
                cx: i.value,
                cy: i.value,
                r: radius
            });
        }
        return ()=>{
            const o = [];
            void 0 !== e51.centerColor && "transparent" !== e51.centerColor && o.push(_vue.h("circle", {
                class: `q-circular-progress__center text-${e51.centerColor}`,
                fill: "currentColor",
                r: radius - c.value / 2,
                cx: i.value,
                cy: i.value
            })), void 0 !== e51.trackColor && "transparent" !== e51.trackColor && o.push(d({
                cls: "track",
                thickness: c.value,
                offset: 0,
                color: e51.trackColor
            })), o.push(d({
                cls: "circle",
                thickness: c.value,
                offset: u.value,
                color: e51.color
            }));
            const l = [
                _vue.h("svg", {
                    class: "q-circular-progress__svg",
                    style: a.value,
                    viewBox: r.value,
                    "aria-hidden": "true"
                }, o)
            ];
            return !0 === e51.showValue && l.push(_vue.h("div", {
                class: "q-circular-progress__text absolute-full row flex-center content-center",
                style: {
                    fontSize: e51.fontSize
                }
            }, void 0 !== t35.default ? t35.default() : [
                _vue.h("div", s.value)
            ])), _vue.h("div", {
                class: `q-circular-progress q-circular-progress--${!0 === e51.indeterminate ? "in" : ""}determinate`,
                style: n15.value,
                role: "progressbar",
                "aria-valuemin": e51.min,
                "aria-valuemax": e51.max,
                "aria-valuenow": !0 === e51.indeterminate ? void 0 : s.value
            }, hMergeSlotSafely(t35.internal, l));
        };
    }
});
function getChanges(e, t, o) {
    const n = position(e);
    let a, l = n.left - t.event.x, i = n.top - t.event.y, r = Math.abs(l), s = Math.abs(i);
    const u = t.direction;
    !0 === u.horizontal && !0 !== u.vertical ? a = l < 0 ? "left" : "right" : !0 !== u.horizontal && !0 === u.vertical ? a = i < 0 ? "up" : "down" : !0 === u.up && i < 0 ? (a = "up", r > s && (!0 === u.left && l < 0 ? a = "left" : !0 === u.right && l > 0 && (a = "right"))) : !0 === u.down && i > 0 ? (a = "down", r > s && (!0 === u.left && l < 0 ? a = "left" : !0 === u.right && l > 0 && (a = "right"))) : !0 === u.left && l < 0 ? (a = "left", r < s && (!0 === u.up && i < 0 ? a = "up" : !0 === u.down && i > 0 && (a = "down"))) : !0 === u.right && l > 0 && (a = "right", r < s && (!0 === u.up && i < 0 ? a = "up" : !0 === u.down && i > 0 && (a = "down")));
    let c = !1;
    if (void 0 === a && !1 === o) {
        if (!0 === t.event.isFirst || void 0 === t.event.lastDir) return {
        };
        a = t.event.lastDir, c = !0, "left" === a || "right" === a ? (n.left -= l, r = 0, l = 0) : (n.top -= i, s = 0, i = 0);
    }
    return {
        synthetic: c,
        payload: {
            evt: e,
            touch: !0 !== t.event.mouse,
            mouse: !0 === t.event.mouse,
            position: n,
            direction: a,
            isFirst: t.event.isFirst,
            isFinal: !0 === o,
            duration: Date.now() - t.event.time,
            distance: {
                x: r,
                y: s
            },
            offset: {
                x: l,
                y: i
            },
            delta: {
                x: n.left - t.event.lastX,
                y: n.top - t.event.lastY
            }
        }
    };
}
let uid$4 = 0;
var TouchPan = createDirective({
    name: "touch-pan",
    beforeMount (e52, { value: t36 , modifiers: o19  }) {
        if (!0 !== o19.mouse && !0 !== client.has.touch) return;
        function n16(e, t) {
            !0 === o19.mouse && !0 === t ? stopAndPrevent(e) : (!0 === o19.stop && stop(e), !0 === o19.prevent && prevent(e));
        }
        const a = {
            uid: "qvtp_" + uid$4++,
            handler: t36,
            modifiers: o19,
            direction: getModifierDirections(o19),
            noop: noop,
            mouseStart (e) {
                shouldStart(e, a) && leftClick(e) && (addEvt(a, "temp", [
                    [
                        document,
                        "mousemove",
                        "move",
                        "notPassiveCapture"
                    ],
                    [
                        document,
                        "mouseup",
                        "end",
                        "passiveCapture"
                    ]
                ]), a.start(e, !0));
            },
            touchStart (e) {
                if (shouldStart(e, a)) {
                    const t = e.target;
                    addEvt(a, "temp", [
                        [
                            t,
                            "touchmove",
                            "move",
                            "notPassiveCapture"
                        ],
                        [
                            t,
                            "touchcancel",
                            "end",
                            "passiveCapture"
                        ],
                        [
                            t,
                            "touchend",
                            "end",
                            "passiveCapture"
                        ]
                    ]), a.start(e);
                }
            },
            start (t, n) {
                if (!0 === client.is.firefox && preventDraggable(e52, !0), a.lastEvt = t, !0 === n || !0 === o19.stop) {
                    if (!0 !== a.direction.all && (!0 !== n || !0 !== a.modifiers.mouseAllDir)) {
                        const e = t.type.indexOf("mouse") > -1 ? new MouseEvent(t.type, t) : new TouchEvent(t.type, t);
                        !0 === t.defaultPrevented && prevent(e), !0 === t.cancelBubble && stop(e), Object.assign(e, {
                            qKeyEvent: t.qKeyEvent,
                            qClickOutside: t.qClickOutside,
                            qAnchorHandled: t.qAnchorHandled,
                            qClonedBy: void 0 === t.qClonedBy ? [
                                a.uid
                            ] : t.qClonedBy.concat(a.uid)
                        }), a.initialEvent = {
                            target: t.target,
                            event: e
                        };
                    }
                    stop(t);
                }
                const { left: l , top: i  } = position(t);
                a.event = {
                    x: l,
                    y: i,
                    time: Date.now(),
                    mouse: !0 === n,
                    detected: !1,
                    isFirst: !0,
                    isFinal: !1,
                    lastX: l,
                    lastY: i
                };
            },
            move (e53) {
                if (void 0 === a.event) return;
                const t37 = position(e53), l = t37.left - a.event.x, i = t37.top - a.event.y;
                if (0 === l && 0 === i) return;
                a.lastEvt = e53;
                const r = !0 === a.event.mouse, s = ()=>{
                    n16(e53, r), !0 !== o19.preserveCursor && (document.documentElement.style.cursor = "grabbing"), !0 === r && document.body.classList.add("no-pointer-events--children"), document.body.classList.add("non-selectable"), clearSelection(), a.styleCleanup = (e)=>{
                        if (a.styleCleanup = void 0, !0 !== o19.preserveCursor && (document.documentElement.style.cursor = ""), document.body.classList.remove("non-selectable"), !0 === r) {
                            const t = ()=>{
                                document.body.classList.remove("no-pointer-events--children");
                            };
                            void 0 !== e ? setTimeout(()=>{
                                t(), e();
                            }, 50) : t();
                        } else void 0 !== e && e();
                    };
                };
                if (!0 === a.event.detected) {
                    !0 !== a.event.isFirst && n16(e53, a.event.mouse);
                    const { payload: t , synthetic: o  } = getChanges(e53, a, !1);
                    return void (void 0 !== t && (!1 === a.handler(t) ? a.end(e53) : (void 0 === a.styleCleanup && !0 === a.event.isFirst && s(), a.event.lastX = t.position.left, a.event.lastY = t.position.top, a.event.lastDir = !0 === o ? void 0 : t.direction, a.event.isFirst = !1)));
                }
                if (!0 === a.direction.all || !0 === r && !0 === a.modifiers.mouseAllDir) return s(), a.event.detected = !0, void a.move(e53);
                const u = Math.abs(l), c = Math.abs(i);
                u !== c && (!0 === a.direction.horizontal && u > c || !0 === a.direction.vertical && u < c || !0 === a.direction.up && u < c && i < 0 || !0 === a.direction.down && u < c && i > 0 || !0 === a.direction.left && u > c && l < 0 || !0 === a.direction.right && u > c && l > 0 ? (a.event.detected = !0, a.move(e53)) : a.end(e53, !0));
            },
            end (t, o) {
                if (void 0 !== a.event) {
                    if (cleanEvt(a, "temp"), !0 === client.is.firefox && preventDraggable(e52, !1), !0 === o) void 0 !== a.styleCleanup && a.styleCleanup(), !0 !== a.event.detected && void 0 !== a.initialEvent && a.initialEvent.target.dispatchEvent(a.initialEvent.event);
                    else if (!0 === a.event.detected) {
                        !0 === a.event.isFirst && a.handler(getChanges(void 0 === t ? a.lastEvt : t, a).payload);
                        const { payload: e  } = getChanges(void 0 === t ? a.lastEvt : t, a, !0), o = ()=>{
                            a.handler(e);
                        };
                        void 0 !== a.styleCleanup ? a.styleCleanup(o) : o();
                    }
                    a.event = void 0, a.initialEvent = void 0, a.lastEvt = void 0;
                }
            }
        };
        e52.__qtouchpan = a, !0 === o19.mouse && addEvt(a, "main", [
            [
                e52,
                "mousedown",
                "mouseStart",
                `passive${!0 === o19.mouseCapture ? "Capture" : ""}`
            ]
        ]), !0 === client.has.touch && addEvt(a, "main", [
            [
                e52,
                "touchstart",
                "touchStart",
                `passive${!0 === o19.capture ? "Capture" : ""}`
            ],
            [
                e52,
                "touchmove",
                "noop",
                "notPassiveCapture"
            ]
        ]);
    },
    updated (e, t) {
        const o = e.__qtouchpan;
        void 0 !== o && (t.oldValue !== t.value && ("function" !== typeof value && o.end(), o.handler = t.value), o.direction = getModifierDirections(t.modifiers));
    },
    beforeUnmount (e) {
        const t = e.__qtouchpan;
        void 0 !== t && (void 0 !== t.event && t.end(), cleanEvt(t, "main"), cleanEvt(t, "temp"), !0 === client.is.firefox && preventDraggable(e, !1), void 0 !== t.styleCleanup && t.styleCleanup(), delete e.__qtouchpan);
    }
});
const keyCodes$2 = [
    34,
    37,
    40,
    33,
    39,
    38
];
function getRatio(e, t, o, n) {
    const a = position(e), l = between(!0 === n ? (a.top - t.top) / t.height : (a.left - t.left) / t.width, 0, 1);
    return !0 === o ? 1 - l : l;
}
function getModel(e, t, o, n, a) {
    let l = t + e * (o - t);
    if (n > 0) {
        const e = (l - t) % n;
        l += (Math.abs(e) >= n / 2 ? (e < 0 ? -1 : 1) * n : 0) - e;
    }
    return a > 0 && (l = parseFloat(l.toFixed(a))), between(l, t, o);
}
const useSliderProps = {
    ...useDarkProps,
    min: {
        type: Number,
        default: 0
    },
    max: {
        type: Number,
        default: 100
    },
    step: {
        type: Number,
        default: 1,
        validator: (e)=>e >= 0
    },
    color: String,
    labelColor: String,
    labelTextColor: String,
    dense: Boolean,
    label: Boolean,
    labelAlways: Boolean,
    markers: [
        Boolean,
        Number
    ],
    snap: Boolean,
    vertical: Boolean,
    reverse: Boolean,
    disable: Boolean,
    readonly: Boolean,
    tabindex: [
        String,
        Number
    ],
    thumbPath: {
        type: String,
        default: "M 4, 10 a 6,6 0 1,0 12,0 a 6,6 0 1,0 -12,0"
    }
}, useSliderEmits = [
    "pan",
    "update:modelValue",
    "change"
];
function useSlider({ updateValue: e54 , updatePosition: t38 , getDragging: o20  }) {
    const { props: n17 , emit: a , proxy: { $q: l  }  } = _vue.getCurrentInstance(), i = useDark(n17, l), r = _vue.ref(!1), s = _vue.ref(!1), u = _vue.ref(!1), c = _vue.ref(!1), d = _vue.computed(()=>!0 === n17.vertical ? "--v" : "--h"
    ), p = _vue.computed(()=>!0 === n17.vertical ? !0 === n17.reverse : n17.reverse !== (!0 === l.lang.rtl)
    ), v = _vue.computed(()=>!0 !== n17.disable && !0 !== n17.readonly && n17.min < n17.max
    ), m = _vue.computed(()=>`q-slider q-slider${d.value} q-slider--${!0 === r.value ? "" : "in"}active` + (!0 === p.value ? " q-slider--reversed" : "") + (void 0 !== n17.color ? ` text-${n17.color}` : "") + (!0 === n17.disable ? " disabled" : " q-slider--enabled" + (!0 === v.value ? " q-slider--editable" : "")) + ("both" === u.value ? " q-slider--focus" : "") + (n17.label || !0 === n17.labelAlways ? " q-slider--label" : "") + (!0 === n17.labelAlways ? " q-slider--label-always" : "") + (!0 === i.value ? " q-slider--dark" : "") + (!0 === n17.dense ? " q-slider--dense q-slider--dense" + d.value : "")
    ), f = _vue.computed(()=>(String(n17.step).trim("0").split(".")[1] || "").length
    ), g = _vue.computed(()=>0 === n17.step ? 1 : n17.step
    ), b = _vue.computed(()=>n17.max - n17.min
    ), y = _vue.computed(()=>!0 === isNumber(n17.markers) ? n17.markers : g.value
    ), S = _vue.computed(()=>{
        if (0 !== b.value) {
            const e = 100 * y.value / b.value;
            return {
                backgroundSize: !0 === n17.vertical ? `2px ${e}%` : `${e}% 2px`
            };
        }
        return null;
    }), w = _vue.computed(()=>!0 === v.value ? n17.tabindex || 0 : -1
    ), x = _vue.computed(()=>!0 === n17.vertical ? !0 === p.value ? "bottom" : "top" : !0 === p.value ? "right" : "left"
    ), C = _vue.computed(()=>!0 === n17.vertical ? "height" : "width"
    ), k = _vue.computed(()=>!0 === n17.vertical ? "vertical" : "horizontal"
    ), _ = _vue.computed(()=>{
        const e = {
            role: "slider",
            "aria-valuemin": n17.min,
            "aria-valuemax": n17.max,
            "aria-orientation": k.value,
            "data-step": n17.step
        };
        return !0 === n17.disable ? e["aria-disabled"] = "true" : !0 === n17.readonly && (e["aria-readonly"] = "true"), e;
    }), q = _vue.computed(()=>{
        return [
            [
                TouchPan,
                $,
                void 0,
                {
                    [k.value]: !0,
                    prevent: !0,
                    stop: !0,
                    mouse: !0,
                    mouseAllDir: !0
                }
            ]
        ];
    });
    function T() {
        return _vue.h("svg", {
            class: "q-slider__thumb absolute",
            viewBox: "0 0 20 20",
            width: "20",
            height: "20",
            "aria-hidden": "true"
        }, [
            _vue.h("path", {
                d: n17.thumbPath
            })
        ]);
    }
    function P(e, t) {
        if (!0 === n17.vertical) return {
        };
        const o = `${Math.ceil(20 * Math.abs(0.5 - t))}px`;
        return {
            pin: {
                transformOrigin: `${!0 === l.lang.rtl ? o : `calc(100% - ${o})`} 50%`
            },
            pinTextContainer: {
                [!0 === l.lang.rtl ? "left" : "right"]: `${100 * e}%`,
                transform: `translateX(${Math.ceil(20 * (!0 === l.lang.rtl ? -1 : 1) * e)}px)`
            }
        };
    }
    function $(n) {
        !0 === n.isFinal ? (void 0 !== c.value && (t38(n.evt), !0 === n.touch && e54(!0), c.value = void 0, a("pan", "end")), r.value = !1) : !0 === n.isFirst ? (c.value = o20(n.evt), t38(n.evt), e54(), r.value = !0, a("pan", "start")) : (t38(n.evt), e54());
    }
    function M() {
        u.value = !1;
    }
    function B(n) {
        t38(n, o20(n)), e54(), s.value = !0, r.value = !0, document.addEventListener("mouseup", Q, !0);
    }
    function Q() {
        s.value = !1, !1 === c.value && (r.value = !1), e54(!0), M(), document.removeEventListener("mouseup", Q, !0);
    }
    function E(n) {
        t38(n, o20(n)), e54(!0);
    }
    function O(t) {
        keyCodes$2.includes(t.keyCode) && e54(!0);
    }
    return _vue.onBeforeUnmount(()=>{
        document.removeEventListener("mouseup", Q, !0);
    }), {
        state: {
            active: r,
            focus: u,
            preventFocus: s,
            dragging: c,
            axis: d,
            isReversed: p,
            editable: v,
            classes: m,
            decimals: f,
            step: g,
            minMaxDiff: b,
            markerStyle: S,
            tabindex: w,
            positionProp: x,
            sizeProp: C,
            attributes: _,
            panDirective: q
        },
        methods: {
            onActivate: B,
            onMobileClick: E,
            onBlur: M,
            onKeyup: O,
            getThumbSvg: T,
            getPinStyle: P
        }
    };
}
var QSlider = createComponent({
    name: "QSlider",
    props: {
        ...useSliderProps,
        ...useFormProps,
        modelValue: {
            required: !0,
            default: null,
            validator: (e)=>"number" === typeof e || null === e
        },
        labelValue: [
            String,
            Number
        ]
    },
    emits: useSliderEmits,
    setup (e, { emit: t39  }) {
        const { proxy: { $q: o21  }  } = _vue.getCurrentInstance(), n18 = useFormAttrs(e), a = useFormInject(n18), l = _vue.ref(null), i2 = _vue.ref(null === e.modelValue ? e.min : e.modelValue), r = _vue.ref(0), { state: s , methods: u  } = useSlider({
            updateValue: w,
            updatePosition: C,
            getDragging: x
        }), c = _vue.computed(()=>0 === s.minMaxDiff.value ? 0 : (i2.value - e.min) / s.minMaxDiff.value
        ), d = _vue.computed(()=>!0 === s.active.value ? r.value : c.value
        ), p = _vue.computed(()=>({
                [s.positionProp.value]: 0,
                [s.sizeProp.value]: `${100 * d.value}%`
            })
        ), v = _vue.computed(()=>({
                [s.positionProp.value]: `${100 * d.value}%`
            })
        ), m = _vue.computed(()=>!1 === s.preventFocus.value && !0 === s.focus.value ? " q-slider--focus" : ""
        ), f = _vue.computed(()=>void 0 !== e.labelColor ? `text-${e.labelColor}` : ""
        ), g = _vue.computed(()=>"q-slider__pin-value-marker-text" + (void 0 !== e.labelTextColor ? ` text-${e.labelTextColor}` : "")
        ), b = _vue.computed(()=>{
            return !0 !== s.editable.value ? {
            } : !0 === o21.platform.is.mobile ? {
                onClick: u.onMobileClick
            } : {
                onMousedown: u.onActivate,
                onFocus: k,
                onBlur: u.onBlur,
                onKeydown: _,
                onKeyup: u.onKeyup
            };
        }), y = _vue.computed(()=>void 0 !== e.labelValue ? e.labelValue : i2.value
        ), S = _vue.computed(()=>{
            const t = !0 === e.reverse ? -d.value : d.value - 1;
            return u.getPinStyle(t, d.value);
        });
        function w(o) {
            i2.value !== e.modelValue && t39("update:modelValue", i2.value), !0 === o && t39("change", i2.value);
        }
        function x() {
            return l.value.getBoundingClientRect();
        }
        function C(t, o = s.dragging.value) {
            const n = getRatio(t, o, s.isReversed.value, e.vertical);
            i2.value = getModel(n, e.min, e.max, e.step, s.decimals.value), r.value = !0 !== e.snap || 0 === e.step ? n : 0 === s.minMaxDiff.value ? 0 : (i2.value - e.min) / s.minMaxDiff.value;
        }
        function k() {
            s.focus.value = !0;
        }
        function _(t) {
            if (!keyCodes$2.includes(t.keyCode)) return;
            stopAndPrevent(t);
            const o = ([
                34,
                33
            ].includes(t.keyCode) ? 10 : 1) * s.step.value, n = [
                34,
                37,
                40
            ].includes(t.keyCode) ? -o : o;
            i2.value = between(parseFloat((i2.value + n).toFixed(s.decimals.value)), e.min, e.max), w();
        }
        return _vue.watch(()=>e.modelValue
        , (t)=>{
            i2.value = null === t ? 0 : between(t, e.min, e.max);
        }), _vue.watch(()=>e.min + e.max
        , ()=>{
            i2.value = between(i2.value, e.min, e.max);
        }), ()=>{
            const t = [
                u.getThumbSvg(),
                _vue.h("div", {
                    class: "q-slider__focus-ring"
                })
            ];
            !0 !== e.label && !0 !== e.labelAlways || t.push(_vue.h("div", {
                class: `q-slider__pin q-slider__pin${s.axis.value} absolute ` + f.value,
                style: S.value.pin
            }, [
                _vue.h("div", {
                    class: `q-slider__pin-text-container q-slider__pin-text-container${s.axis.value}`,
                    style: S.value.pinTextContainer
                }, [
                    _vue.h("span", {
                        class: "q-slider__pin-text " + g.value
                    }, [
                        y.value
                    ])
                ])
            ]), _vue.h("div", {
                class: `q-slider__arrow q-slider__arrow${s.axis.value} ${f.value}`
            })), void 0 !== e.name && !0 !== e.disable && a(t, "push");
            const o = [
                _vue.h("div", {
                    class: `q-slider__track q-slider__track${s.axis.value} absolute`,
                    style: p.value
                })
            ];
            !1 !== e.markers && o.push(_vue.h("div", {
                class: `q-slider__track-markers q-slider__track-markers${s.axis.value} absolute-full fit`,
                style: s.markerStyle.value
            }));
            const n = [
                _vue.h("div", {
                    class: `q-slider__track-container q-slider__track-container${s.axis.value} absolute`
                }, o),
                _vue.h("div", {
                    class: `q-slider__thumb-container q-slider__thumb-container${s.axis.value} absolute non-selectable` + m.value,
                    style: v.value
                }, t)
            ], i = {
                ref: l,
                class: s.classes.value + (null === e.modelValue ? " q-slider--no-value" : ""),
                ...s.attributes.value,
                "aria-valuenow": e.modelValue,
                tabindex: s.tabindex.value,
                ...b.value
            };
            return hDir("div", i, n, "slide", s.editable.value, ()=>s.panDirective.value
            );
        };
    }
});
function useCanRender() {
    const e = _vue.ref(!isRuntimeSsrPreHydration.value);
    return !1 === e.value && _vue.onMounted(()=>{
        e.value = !0;
    }), e;
}
const hasObserver = "undefined" !== typeof ResizeObserver, resizeProps = !0 === hasObserver ? {
} : {
    style: "display:block;position:absolute;top:0;left:0;right:0;bottom:0;height:100%;width:100%;overflow:hidden;pointer-events:none;z-index:-1;",
    url: "about:blank"
};
var QResizeObserver = createComponent({
    name: "QResizeObserver",
    props: {
        debounce: {
            type: [
                String,
                Number
            ],
            default: 100
        }
    },
    emits: [
        "resize"
    ],
    setup (e55, { emit: t40  }) {
        let o22, n, a = {
            width: -1,
            height: -1
        };
        function l(t) {
            !0 === t || 0 === e55.debounce || "0" === e55.debounce ? i() : o22 || (o22 = setTimeout(i, e55.debounce));
        }
        function i() {
            if (o22 = void 0, n) {
                const { offsetWidth: e , offsetHeight: o  } = n;
                e === a.width && o === a.height || (a = {
                    width: e,
                    height: o
                }, t40("resize", a));
            }
        }
        const r = _vue.getCurrentInstance();
        if (Object.assign(r.proxy, {
            trigger: l
        }), !0 === hasObserver) {
            let e;
            return _vue.onMounted(()=>{
                _vue.nextTick(()=>{
                    n = r.proxy.$el.parentNode, n && (e = new ResizeObserver(l), e.observe(n), i());
                });
            }), _vue.onBeforeUnmount(()=>{
                clearTimeout(o22), void 0 !== e && (void 0 !== e.disconnect ? e.disconnect() : n && e.unobserve(n));
            }), noop;
        }
        {
            const e = useCanRender();
            let t;
            function s() {
                clearTimeout(o22), void 0 !== t && (void 0 !== t.removeEventListener && t.removeEventListener("resize", l, listenOpts.passive), t = void 0);
            }
            function u() {
                s(), n && n.contentDocument && (t = n.contentDocument.defaultView, t.addEventListener("resize", l, listenOpts.passive), i());
            }
            return _vue.onMounted(()=>{
                _vue.nextTick(()=>{
                    n = r.proxy.$el, n && u();
                });
            }), _vue.onBeforeUnmount(s), ()=>{
                if (!0 === e.value) return _vue.h("object", {
                    style: resizeProps.style,
                    tabindex: -1,
                    type: "text/html",
                    data: resizeProps.url,
                    "aria-hidden": "true",
                    onLoad: u
                });
            };
        }
    }
});
let rtlHasScrollBug = !1;
{
    const e = document.createElement("div"), t = document.createElement("div");
    e.setAttribute("dir", "rtl"), e.style.width = "1px", e.style.height = "1px", e.style.overflow = "auto", t.style.width = "1000px", t.style.height = "1px", document.body.appendChild(e), e.appendChild(t), e.scrollLeft = -1000, rtlHasScrollBug = e.scrollLeft >= 0, e.remove();
}function getIndicatorClass(e, t, o) {
    const n = !0 === o ? [
        "left",
        "right"
    ] : [
        "top",
        "bottom"
    ];
    return `absolute-${!0 === t ? n[0] : n[1]}${e ? ` text-${e}` : ""}`;
}
const alignValues$1 = [
    "left",
    "center",
    "right",
    "justify"
], emptyFn = ()=>{
};
var QTabs = createComponent({
    name: "QTabs",
    props: {
        modelValue: [
            Number,
            String
        ],
        align: {
            type: String,
            default: "center",
            validator: (e)=>alignValues$1.includes(e)
        },
        breakpoint: {
            type: [
                String,
                Number
            ],
            default: 600
        },
        vertical: Boolean,
        shrink: Boolean,
        stretch: Boolean,
        activeClass: String,
        activeColor: String,
        activeBgColor: String,
        indicatorColor: String,
        leftIcon: String,
        rightIcon: String,
        outsideArrows: Boolean,
        mobileArrows: Boolean,
        switchIndicator: Boolean,
        narrowIndicator: Boolean,
        inlineLabel: Boolean,
        noCaps: Boolean,
        dense: Boolean,
        contentClass: String,
        "onUpdate:modelValue": [
            Function,
            Array
        ]
    },
    setup (e56, { slots: t41 , emit: o23  }) {
        const n19 = _vue.getCurrentInstance(), { proxy: { $q: a10  }  } = n19, { registerTick: l8 , prepareTick: i3  } = useTick(), { registerTimeout: r2  } = useTimeout(), s3 = _vue.ref(null), u1 = _vue.ref(null), c = _vue.ref(e56.modelValue), d = _vue.ref(!1), p = _vue.ref(!0), v = _vue.ref(!1), m = _vue.ref(!1), f = _vue.computed(()=>!0 === a10.platform.is.desktop || !0 === e56.mobileArrows
        ), g = [];
        let b, y, S, w = !1, x = !0 === f.value ? O : noop;
        const C = _vue.computed(()=>({
                activeClass: e56.activeClass,
                activeColor: e56.activeColor,
                activeBgColor: e56.activeBgColor,
                indicatorClass: getIndicatorClass(e56.indicatorColor, e56.switchIndicator, e56.vertical),
                narrowIndicator: e56.narrowIndicator,
                inlineLabel: e56.inlineLabel,
                noCaps: e56.noCaps
            })
        ), k = _vue.computed(()=>{
            const t = !0 === d.value ? "left" : !0 === m.value ? "justify" : e56.align;
            return `q-tabs__content--align-${t}`;
        }), _ = _vue.computed(()=>"q-tabs row no-wrap items-center" + ` q-tabs--${!0 === d.value ? "" : "not-"}scrollable` + ` q-tabs--${!0 === e56.vertical ? "vertical" : "horizontal"}` + ` q-tabs__arrows--${!0 === f.value && !0 === e56.outsideArrows ? "outside" : "inside"}` + (!0 === e56.dense ? " q-tabs--dense" : "") + (!0 === e56.shrink ? " col-shrink" : "") + (!0 === e56.stretch ? " self-stretch" : "")
        ), q = _vue.computed(()=>"q-tabs__content row no-wrap items-center self-stretch hide-scrollbar " + k.value + (void 0 !== e56.contentClass ? ` ${e56.contentClass}` : "") + (!0 === a10.platform.is.mobile ? " scroll" : "")
        ), T = _vue.computed(()=>!0 === e56.vertical ? {
                container: "height",
                content: "offsetHeight",
                scroll: "scrollHeight"
            } : {
                container: "width",
                content: "offsetWidth",
                scroll: "scrollWidth"
            }
        ), P = _vue.computed(()=>!0 !== e56.vertical && !0 === a10.lang.rtl
        ), $ = _vue.computed(()=>!1 === rtlHasScrollBug && !0 === P.value
        );
        function M({ name: t , setCurrent: n , skipEmit: a , fromRoute: l  }) {
            c.value !== t && (!0 !== a && o23("update:modelValue", t), !0 !== n && void 0 !== e56["onUpdate:modelValue"] || (E(c.value, t), c.value = t)), void 0 !== l && (w = l);
        }
        function B() {
            l8(()=>{
                !0 !== n19.isDeactivated && !0 !== n19.isUnmounted && Q({
                    width: s3.value.offsetWidth,
                    height: s3.value.offsetHeight
                });
            }), i3();
        }
        function Q(t42) {
            if (void 0 === T.value || null === u1.value) return;
            const o = t42[T.value.container], n = Math.min(u1.value[T.value.scroll], Array.prototype.reduce.call(u1.value.children, (e, t)=>e + t[T.value.content]
            , 0)), a = o > 0 && n > o;
            d.value !== a && (d.value = a), !0 === a && _vue.nextTick(x);
            const l = o < parseInt(e56.breakpoint, 10);
            m.value !== l && (m.value = l);
        }
        function E(t, o) {
            const n = void 0 !== t && null !== t && "" !== t ? g.find((e)=>e.name.value === t
            ) : null, a = void 0 !== o && null !== o && "" !== o ? g.find((e)=>e.name.value === o
            ) : null;
            if (n && a) {
                const t = n.tabIndicatorRef.value, o = a.tabIndicatorRef.value;
                clearTimeout(b), t.style.transition = "none", t.style.transform = "none", o.style.transition = "none", o.style.transform = "none";
                const l = t.getBoundingClientRect(), i = o.getBoundingClientRect();
                o.style.transform = !0 === e56.vertical ? `translate3d(0,${l.top - i.top}px,0) scale3d(1,${i.height ? l.height / i.height : 1},1)` : `translate3d(${l.left - i.left}px,0,0) scale3d(${i.width ? l.width / i.width : 1},1,1)`, _vue.nextTick(()=>{
                    b = setTimeout(()=>{
                        o.style.transition = "transform .25s cubic-bezier(.4, 0, .2, 1)", o.style.transform = "none";
                    }, 70);
                });
            }
            if (a && !0 === d.value) {
                const { left: t , width: o , top: n , height: l  } = u1.value.getBoundingClientRect(), i = a.rootRef.value.getBoundingClientRect();
                let r = !0 === e56.vertical ? i.top - n : i.left - t;
                if (r < 0) return u1.value[!0 === e56.vertical ? "scrollTop" : "scrollLeft"] += Math.floor(r), void x();
                r += !0 === e56.vertical ? i.height - l : i.width - o, r > 0 && (u1.value[!0 === e56.vertical ? "scrollTop" : "scrollLeft"] += Math.ceil(r), x());
            }
        }
        function O() {
            const t = u1.value;
            if (null !== t) {
                const o = t.getBoundingClientRect(), n = !0 === e56.vertical ? t.scrollTop : Math.abs(t.scrollLeft);
                !0 === P.value ? (p.value = Math.ceil(n + o.width) < t.scrollWidth - 1, v.value = n > 0) : (p.value = n > 0, v.value = !0 === e56.vertical ? Math.ceil(n + o.height) < t.scrollHeight : Math.ceil(n + o.width) < t.scrollWidth);
            }
        }
        function L(e) {
            R(), A(e), y = setInterval(()=>{
                !0 === A(e) && R();
            }, 5);
        }
        function z() {
            L(!0 === $.value ? 9999 : 0);
        }
        function F() {
            L(!0 === $.value ? 0 : 9999);
        }
        function R() {
            clearInterval(y);
        }
        _vue.watch(P, x), _vue.watch(()=>e56.modelValue
        , (e)=>{
            M({
                name: e,
                setCurrent: !0,
                skipEmit: !0
            });
        }), _vue.watch(()=>e56.outsideArrows
        , ()=>{
            _vue.nextTick(B());
        }), _vue.watch(f, (e)=>{
            x = !0 === e ? O : noop, _vue.nextTick(B());
        });
        const D = _vue.computed(()=>!0 === $.value ? {
                get: (e)=>Math.abs(e.scrollLeft)
                ,
                set: (e, t)=>{
                    e.scrollLeft = -t;
                }
            } : !0 === e56.vertical ? {
                get: (e)=>e.scrollTop
                ,
                set: (e, t)=>{
                    e.scrollTop = t;
                }
            } : {
                get: (e)=>e.scrollLeft
                ,
                set: (e, t)=>{
                    e.scrollLeft = t;
                }
            }
        );
        function A(e) {
            const t = u1.value, { get: o , set: n  } = D.value;
            let a = !1, l = o(t);
            const i = e < l ? -1 : 1;
            return l += 5 * i, l < 0 ? (a = !0, l = 0) : (-1 === i && l <= e || 1 === i && l >= e) && (a = !0, l = e), n(t, l), x(), a;
        }
        function V() {
            return g.filter((e)=>void 0 !== e.routerProps && !0 === e.routerProps.hasLink.value
            );
        }
        function I() {
            let e57 = null, t = w;
            const o = {
                matchedLen: 0,
                hrefLen: 0,
                exact: !1,
                found: !1
            }, { hash: a  } = n19.proxy.$route, l = c.value;
            let i = !0 === t ? emptyFn : (e)=>{
                l === e.name.value && (t = !0, i = emptyFn);
            };
            const r = V();
            for (const n of r){
                const t = !0 === n.routerProps.exact.value;
                if (!0 !== n.routerProps[!0 === t ? "linkIsExactActive" : "linkIsActive"].value || !0 === o.exact && !0 !== t) {
                    i(n);
                    continue;
                }
                const l = n.routerProps.linkRoute.value, r = l.hash;
                if (!0 === t) {
                    if (a === r) {
                        e57 = n.name.value;
                        break;
                    }
                    if ("" !== a && "" !== r) {
                        i(n);
                        continue;
                    }
                }
                const s = l.matched.length, u = l.href.length - r.length;
                (s === o.matchedLen ? u > o.hrefLen : s > o.matchedLen) ? (e57 = n.name.value, Object.assign(o, {
                    matchedLen: s,
                    hrefLen: u,
                    exact: t
                })) : i(n);
            }
            !0 !== t && null === e57 || M({
                name: e57,
                setCurrent: !0,
                fromRoute: !0
            });
        }
        function H() {
            !0 !== U.avoidRouteWatcher && r2(I);
        }
        function N(e) {
            g.push(e);
            const t = V();
            t.length > 0 && (void 0 === S && (S = _vue.watch(()=>n19.proxy.$route
            , H)), H());
        }
        function j(e) {
            if (g.splice(g.indexOf(e), 1), void 0 !== S) {
                const e = V();
                0 === e.length && (S(), S = void 0), H();
            }
        }
        const U = {
            currentModel: c,
            tabProps: C,
            registerTab: N,
            unregisterTab: j,
            verifyRouteModel: H,
            updateModel: M,
            recalculateScroll: B,
            avoidRouteWatcher: !1
        };
        return _vue.provide(tabsKey, U), _vue.onBeforeUnmount(()=>{
            clearTimeout(b), void 0 !== S && S();
        }), _vue.onActivated(B), ()=>{
            const o = [
                _vue.h(QResizeObserver, {
                    onResize: Q
                }),
                _vue.h("div", {
                    ref: u1,
                    class: q.value,
                    onScroll: x
                }, hSlot(t41.default))
            ];
            return !0 === f.value && o.push(_vue.h(QIcon, {
                class: "q-tabs__arrow q-tabs__arrow--left absolute q-tab__icon" + (!0 === p.value ? "" : " q-tabs__arrow--faded"),
                name: e56.leftIcon || a10.iconSet.tabs[!0 === e56.vertical ? "up" : "left"],
                onMousedown: z,
                onTouchstartPassive: z,
                onMouseup: R,
                onMouseleave: R,
                onTouchend: R
            }), _vue.h(QIcon, {
                class: "q-tabs__arrow q-tabs__arrow--right absolute q-tab__icon" + (!0 === v.value ? "" : " q-tabs__arrow--faded"),
                name: e56.rightIcon || a10.iconSet.tabs[!0 === e56.vertical ? "down" : "right"],
                onMousedown: F,
                onTouchstartPassive: F,
                onMouseup: R,
                onMouseleave: R,
                onTouchend: R
            })), _vue.h("div", {
                ref: s3,
                class: _.value,
                role: "tablist"
            }, o);
        };
    }
});
let uid$3 = 0;
const useTabEmits = [
    "click",
    "keyup"
], useTabProps = {
    icon: String,
    label: [
        Number,
        String
    ],
    alert: [
        Boolean,
        String
    ],
    alertIcon: String,
    name: {
        type: [
            Number,
            String
        ],
        default: ()=>`t_${uid$3++}`
    },
    noCaps: Boolean,
    tabindex: [
        String,
        Number
    ],
    disable: Boolean,
    contentClass: String,
    ripple: {
        type: [
            Boolean,
            Object
        ],
        default: !0
    }
};
function useTab(e58, t43, o24, n20) {
    const a = _vue.inject(tabsKey, ()=>{
        console.error("QTab/QRouteTab component needs to be child of QTabs");
    }), l9 = _vue.ref(null), i4 = _vue.ref(null), r = _vue.ref(null), s4 = _vue.computed(()=>!0 !== e58.disable && e58.ripple
    ), u = _vue.computed(()=>a.currentModel.value === e58.name
    ), c = _vue.computed(()=>"q-tab relative-position self-stretch flex flex-center text-center" + (!0 === u.value ? " q-tab--active" + (a.tabProps.value.activeClass ? " " + a.tabProps.value.activeClass : "") + (a.tabProps.value.activeColor ? ` text-${a.tabProps.value.activeColor}` : "") + (a.tabProps.value.activeBgColor ? ` bg-${a.tabProps.value.activeBgColor}` : "") : " q-tab--inactive") + (e58.icon && e58.label && !1 === a.tabProps.value.inlineLabel ? " q-tab--full" : "") + (!0 === e58.noCaps || !0 === a.tabProps.value.noCaps ? " q-tab--no-caps" : "") + (!0 === e58.disable ? " disabled" : " q-focusable q-hoverable cursor-pointer") + (void 0 !== n20 && "" !== n20.linkClass.value ? ` ${n20.linkClass.value}` : "")
    ), d = _vue.computed(()=>"q-tab__content self-stretch flex-center relative-position q-anchor--skip non-selectable " + (!0 === a.tabProps.value.inlineLabel ? "row no-wrap q-tab__content--inline" : "column") + (void 0 !== e58.contentClass ? ` ${e58.contentClass}` : "")
    ), p = _vue.computed(()=>!0 === e58.disable || !0 === u.value ? -1 : e58.tabindex || 0
    );
    function v(t, i) {
        if (!0 !== i && null !== l9.value && l9.value.focus(), !0 !== e58.disable) {
            let l;
            if (void 0 !== n20) {
                if (!0 !== n20.hasLink.value) return void o24("click", t);
                l = ()=>{
                    t.__qNavigate = !0, a.avoidRouteWatcher = !0;
                    const o = n20.navigateToLink(t);
                    !1 === o ? a.avoidRouteWatcher = !1 : o.then(()=>{
                        a.avoidRouteWatcher = !1, a.updateModel({
                            name: e58.name,
                            fromRoute: !0
                        });
                    });
                };
            } else l = ()=>{
                a.updateModel({
                    name: e58.name,
                    fromRoute: !1
                });
            };
            o24("click", t, l), !0 !== t.defaultPrevented && l();
        }
    }
    function m(e) {
        !0 === isKeyCode(e, 13) && v(e, !0), o24("keyup", e);
    }
    function f() {
        const o = a.tabProps.value.narrowIndicator, n = [], i = _vue.h("div", {
            ref: r,
            class: [
                "q-tab__indicator",
                a.tabProps.value.indicatorClass
            ]
        });
        void 0 !== e58.icon && n.push(_vue.h(QIcon, {
            class: "q-tab__icon",
            name: e58.icon
        })), void 0 !== e58.label && n.push(_vue.h("div", {
            class: "q-tab__label"
        }, e58.label)), !1 !== e58.alert && n.push(void 0 !== e58.alertIcon ? _vue.h(QIcon, {
            class: "q-tab__alert-icon",
            color: !0 !== e58.alert ? e58.alert : void 0,
            name: e58.alertIcon
        }) : _vue.h("div", {
            class: "q-tab__alert" + (!0 !== e58.alert ? ` text-${e58.alert}` : "")
        })), !0 === o && n.push(i);
        const s = [
            _vue.h("div", {
                class: "q-focus-helper",
                tabindex: -1,
                ref: l9
            }),
            _vue.h("div", {
                class: d.value
            }, hMergeSlot(t43.default, n))
        ];
        return !1 === o && s.push(i), s;
    }
    const g = {
        name: _vue.computed(()=>e58.name
        ),
        rootRef: i4,
        tabIndicatorRef: r,
        routerProps: n20
    };
    function b(t, o) {
        const n = {
            ref: i4,
            class: c.value,
            tabindex: p.value,
            role: "tab",
            "aria-selected": u.value,
            "aria-disabled": !0 === e58.disable ? "true" : void 0,
            onClick: v,
            onKeyup: m,
            ...o
        };
        return _vue.withDirectives(_vue.h(t, n, f()), [
            [
                Ripple,
                s4.value
            ]
        ]);
    }
    return _vue.onBeforeUnmount(()=>{
        a.unregisterTab(g), a.recalculateScroll();
    }), _vue.onMounted(()=>{
        a.registerTab(g), a.recalculateScroll();
    }), {
        renderTab: b,
        $tabs: a
    };
}
var QTab = createComponent({
    name: "QTab",
    props: useTabProps,
    emits: useTabEmits,
    setup (e, { slots: t , emit: o  }) {
        const { renderTab: n  } = useTab(e, t, o);
        return ()=>n("div")
        ;
    }
}), QTabPanels = createComponent({
    name: "QTabPanels",
    props: {
        ...usePanelProps,
        ...useDarkProps
    },
    emits: usePanelEmits,
    setup (e, { slots: t  }) {
        const o = _vue.getCurrentInstance(), n = useDark(e, o.proxy.$q), { updatePanelsList: a , getPanelContent: l , panelDirectives: i  } = usePanel(), r = _vue.computed(()=>"q-tab-panels q-panel-parent" + (!0 === n.value ? " q-tab-panels--dark q-dark" : "")
        );
        return ()=>{
            return a(t), hDir("div", {
                class: r.value
            }, l(), "pan", e.swipeable, ()=>i.value
            );
        };
    }
}), QTabPanel = createComponent({
    name: "QTabPanel",
    props: usePanelChildProps,
    setup (e, { slots: t  }) {
        return ()=>_vue.h("div", {
                class: "q-tab-panel"
            }, hSlot(t.default))
        ;
    }
});
const hex = /^#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?$/, hexa = /^#[0-9a-fA-F]{4}([0-9a-fA-F]{4})?$/, hexOrHexa = /^#([0-9a-fA-F]{3}|[0-9a-fA-F]{4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/, rgb = /^rgb\(((0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),){2}(0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5])\)$/, rgba = /^rgba\(((0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),){2}(0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),(0|0\.[0-9]+[1-9]|0\.[1-9]+|1)\)$/, testPattern = {
    date: (e)=>/^-?[\d]+\/[0-1]\d\/[0-3]\d$/.test(e)
    ,
    time: (e)=>/^([0-1]?\d|2[0-3]):[0-5]\d$/.test(e)
    ,
    fulltime: (e)=>/^([0-1]?\d|2[0-3]):[0-5]\d:[0-5]\d$/.test(e)
    ,
    timeOrFulltime: (e)=>/^([0-1]?\d|2[0-3]):[0-5]\d(:[0-5]\d)?$/.test(e)
    ,
    hexColor: (e)=>hex.test(e)
    ,
    hexaColor: (e)=>hexa.test(e)
    ,
    hexOrHexaColor: (e)=>hexOrHexa.test(e)
    ,
    rgbColor: (e)=>rgb.test(e)
    ,
    rgbaColor: (e)=>rgba.test(e)
    ,
    rgbOrRgbaColor: (e)=>rgb.test(e) || rgba.test(e)
    ,
    hexOrRgbColor: (e)=>hex.test(e) || rgb.test(e)
    ,
    hexaOrRgbaColor: (e)=>hexa.test(e) || rgba.test(e)
    ,
    anyColor: (e)=>hexOrHexa.test(e) || rgb.test(e) || rgba.test(e)
};
var patterns = {
    testPattern: testPattern
};
const reRGBA = /^rgb(a)?\((\d{1,3}),(\d{1,3}),(\d{1,3}),?([01]?\.?\d*?)?\)$/;
function rgbToHex({ r: e , g: t , b: o , a: n  }) {
    const a = void 0 !== n;
    if (e = Math.round(e), t = Math.round(t), o = Math.round(o), e > 255 || t > 255 || o > 255 || a && n > 100) throw new TypeError("Expected 3 numbers below 256 (and optionally one below 100)");
    return n = a ? (256 | Math.round(255 * n / 100)).toString(16).slice(1) : "", "#" + (o | t << 8 | e << 16 | 16777216).toString(16).slice(1) + n;
}
function rgbToString({ r: e , g: t , b: o , a: n  }) {
    return `rgb${void 0 !== n ? "a" : ""}(${e},${t},${o}${void 0 !== n ? "," + n / 100 : ""})`;
}
function hexToRgb(e) {
    if ("string" !== typeof e) throw new TypeError("Expected a string");
    e = e.replace(/^#/, ""), 3 === e.length ? e = e[0] + e[0] + e[1] + e[1] + e[2] + e[2] : 4 === e.length && (e = e[0] + e[0] + e[1] + e[1] + e[2] + e[2] + e[3] + e[3]);
    const t = parseInt(e, 16);
    return e.length > 6 ? {
        r: t >> 24 & 255,
        g: t >> 16 & 255,
        b: t >> 8 & 255,
        a: Math.round((255 & t) / 2.55)
    } : {
        r: t >> 16,
        g: t >> 8 & 255,
        b: 255 & t
    };
}
function hsvToRgb({ h: e , s: t , v: o , a: n  }) {
    let a, l, i;
    t /= 100, o /= 100, e /= 360;
    const r = Math.floor(6 * e), s = 6 * e - r, u = o * (1 - t), c = o * (1 - s * t), d = o * (1 - (1 - s) * t);
    switch(r % 6){
        case 0:
            a = o, l = d, i = u;
            break;
        case 1:
            a = c, l = o, i = u;
            break;
        case 2:
            a = u, l = o, i = d;
            break;
        case 3:
            a = u, l = c, i = o;
            break;
        case 4:
            a = d, l = u, i = o;
            break;
        case 5:
            a = o, l = u, i = c;
            break;
    }
    return {
        r: Math.round(255 * a),
        g: Math.round(255 * l),
        b: Math.round(255 * i),
        a: n
    };
}
function rgbToHsv({ r: e , g: t , b: o , a: n  }) {
    const a = Math.max(e, t, o), l = Math.min(e, t, o), i = a - l, r = 0 === a ? 0 : i / a, s = a / 255;
    let u;
    switch(a){
        case l:
            u = 0;
            break;
        case e:
            u = t - o + i * (t < o ? 6 : 0), u /= 6 * i;
            break;
        case t:
            u = o - e + 2 * i, u /= 6 * i;
            break;
        case o:
            u = e - t + 4 * i, u /= 6 * i;
            break;
    }
    return {
        h: Math.round(360 * u),
        s: Math.round(100 * r),
        v: Math.round(100 * s),
        a: n
    };
}
function textToRgb(e) {
    if ("string" !== typeof e) throw new TypeError("Expected a string");
    const t = e.replace(/ /g, ""), o = reRGBA.exec(t);
    if (null === o) return hexToRgb(t);
    const n = {
        r: Math.min(255, parseInt(o[2], 10)),
        g: Math.min(255, parseInt(o[3], 10)),
        b: Math.min(255, parseInt(o[4], 10))
    };
    if (o[1]) {
        const e = parseFloat(o[5]);
        n.a = 100 * Math.min(1, !0 === isNaN(e) ? 1 : e);
    }
    return n;
}
function lighten(e, t) {
    if ("string" !== typeof e) throw new TypeError("Expected a string as color");
    if ("number" !== typeof t) throw new TypeError("Expected a numeric percent");
    const o = textToRgb(e), n = t < 0 ? 0 : 255, a = Math.abs(t) / 100, l = o.r, i = o.g, r = o.b;
    return "#" + (16777216 + 65536 * (Math.round((n - l) * a) + l) + 256 * (Math.round((n - i) * a) + i) + (Math.round((n - r) * a) + r)).toString(16).slice(1);
}
function luminosity(e) {
    if ("string" !== typeof e && (!e || void 0 === e.r)) throw new TypeError("Expected a string or a {r, g, b} object as color");
    const t = "string" === typeof e ? textToRgb(e) : e, o = t.r / 255, n = t.g / 255, a = t.b / 255, l = o <= 0.03928 ? o / 12.92 : Math.pow((o + 0.055) / 1.055, 2.4), i = n <= 0.03928 ? n / 12.92 : Math.pow((n + 0.055) / 1.055, 2.4), r = a <= 0.03928 ? a / 12.92 : Math.pow((a + 0.055) / 1.055, 2.4);
    return 0.2126 * l + 0.7152 * i + 0.0722 * r;
}
function brightness(e) {
    if ("string" !== typeof e && (!e || void 0 === e.r)) throw new TypeError("Expected a string or a {r, g, b} object as color");
    const t = "string" === typeof e ? textToRgb(e) : e;
    return (299 * t.r + 587 * t.g + 114 * t.b) / 1000;
}
function blend(e, t) {
    if ("string" !== typeof e && (!e || void 0 === e.r)) throw new TypeError("Expected a string or a {r, g, b[, a]} object as fgColor");
    if ("string" !== typeof t && (!t || void 0 === t.r)) throw new TypeError("Expected a string or a {r, g, b[, a]} object as bgColor");
    const o = "string" === typeof e ? textToRgb(e) : e, n = o.r / 255, a = o.g / 255, l = o.b / 255, i = void 0 !== o.a ? o.a / 100 : 1, r = "string" === typeof t ? textToRgb(t) : t, s = r.r / 255, u = r.g / 255, c = r.b / 255, d = void 0 !== r.a ? r.a / 100 : 1, p = i + d * (1 - i), v = Math.round((n * i + s * d * (1 - i)) / p * 255), m = Math.round((a * i + u * d * (1 - i)) / p * 255), f = Math.round((l * i + c * d * (1 - i)) / p * 255), h = {
        r: v,
        g: m,
        b: f,
        a: Math.round(100 * p)
    };
    return "string" === typeof e ? rgbToHex(h) : h;
}
function changeAlpha(e, t) {
    if ("string" !== typeof e) throw new TypeError("Expected a string as color");
    if (void 0 === t || t < -1 || t > 1) throw new TypeError("Expected offset to be between -1 and 1");
    const { r: o , g: n , b: a , a: l  } = textToRgb(e), i = void 0 !== l ? l / 100 : 0;
    return rgbToHex({
        r: o,
        g: n,
        b: a,
        a: Math.round(100 * Math.min(1, Math.max(0, i + t)))
    });
}
function getPaletteColor(e) {
    if ("string" !== typeof e) throw new TypeError("Expected a string as color");
    const t = document.createElement("div");
    t.className = `text-${e} invisible fixed no-pointer-events`, document.body.appendChild(t);
    const o = getComputedStyle(t).getPropertyValue("color");
    return t.remove(), rgbToHex(textToRgb(o));
}
var colors = {
    rgbToHex: rgbToHex,
    hexToRgb: hexToRgb,
    hsvToRgb: hsvToRgb,
    rgbToHsv: rgbToHsv,
    textToRgb: textToRgb,
    lighten: lighten,
    luminosity: luminosity,
    brightness: brightness,
    blend: blend,
    changeAlpha: changeAlpha,
    getPaletteColor: getPaletteColor
};
const palette = [
    "rgb(255,204,204)",
    "rgb(255,230,204)",
    "rgb(255,255,204)",
    "rgb(204,255,204)",
    "rgb(204,255,230)",
    "rgb(204,255,255)",
    "rgb(204,230,255)",
    "rgb(204,204,255)",
    "rgb(230,204,255)",
    "rgb(255,204,255)",
    "rgb(255,153,153)",
    "rgb(255,204,153)",
    "rgb(255,255,153)",
    "rgb(153,255,153)",
    "rgb(153,255,204)",
    "rgb(153,255,255)",
    "rgb(153,204,255)",
    "rgb(153,153,255)",
    "rgb(204,153,255)",
    "rgb(255,153,255)",
    "rgb(255,102,102)",
    "rgb(255,179,102)",
    "rgb(255,255,102)",
    "rgb(102,255,102)",
    "rgb(102,255,179)",
    "rgb(102,255,255)",
    "rgb(102,179,255)",
    "rgb(102,102,255)",
    "rgb(179,102,255)",
    "rgb(255,102,255)",
    "rgb(255,51,51)",
    "rgb(255,153,51)",
    "rgb(255,255,51)",
    "rgb(51,255,51)",
    "rgb(51,255,153)",
    "rgb(51,255,255)",
    "rgb(51,153,255)",
    "rgb(51,51,255)",
    "rgb(153,51,255)",
    "rgb(255,51,255)",
    "rgb(255,0,0)",
    "rgb(255,128,0)",
    "rgb(255,255,0)",
    "rgb(0,255,0)",
    "rgb(0,255,128)",
    "rgb(0,255,255)",
    "rgb(0,128,255)",
    "rgb(0,0,255)",
    "rgb(128,0,255)",
    "rgb(255,0,255)",
    "rgb(245,0,0)",
    "rgb(245,123,0)",
    "rgb(245,245,0)",
    "rgb(0,245,0)",
    "rgb(0,245,123)",
    "rgb(0,245,245)",
    "rgb(0,123,245)",
    "rgb(0,0,245)",
    "rgb(123,0,245)",
    "rgb(245,0,245)",
    "rgb(214,0,0)",
    "rgb(214,108,0)",
    "rgb(214,214,0)",
    "rgb(0,214,0)",
    "rgb(0,214,108)",
    "rgb(0,214,214)",
    "rgb(0,108,214)",
    "rgb(0,0,214)",
    "rgb(108,0,214)",
    "rgb(214,0,214)",
    "rgb(163,0,0)",
    "rgb(163,82,0)",
    "rgb(163,163,0)",
    "rgb(0,163,0)",
    "rgb(0,163,82)",
    "rgb(0,163,163)",
    "rgb(0,82,163)",
    "rgb(0,0,163)",
    "rgb(82,0,163)",
    "rgb(163,0,163)",
    "rgb(92,0,0)",
    "rgb(92,46,0)",
    "rgb(92,92,0)",
    "rgb(0,92,0)",
    "rgb(0,92,46)",
    "rgb(0,92,92)",
    "rgb(0,46,92)",
    "rgb(0,0,92)",
    "rgb(46,0,92)",
    "rgb(92,0,92)",
    "rgb(255,255,255)",
    "rgb(205,205,205)",
    "rgb(178,178,178)",
    "rgb(153,153,153)",
    "rgb(127,127,127)",
    "rgb(102,102,102)",
    "rgb(76,76,76)",
    "rgb(51,51,51)",
    "rgb(25,25,25)",
    "rgb(0,0,0)"
], thumbPath = "M5 5 h10 v10 h-10 v-10 z";
var QColor = createComponent({
    name: "QColor",
    props: {
        ...useDarkProps,
        ...useFormProps,
        modelValue: String,
        defaultValue: String,
        defaultView: {
            type: String,
            default: "spectrum",
            validator: (e)=>[
                    "spectrum",
                    "tune",
                    "palette"
                ].includes(e)
        },
        formatModel: {
            type: String,
            default: "auto",
            validator: (e)=>[
                    "auto",
                    "hex",
                    "rgb",
                    "hexa",
                    "rgba"
                ].includes(e)
        },
        palette: Array,
        noHeader: Boolean,
        noHeaderTabs: Boolean,
        noFooter: Boolean,
        square: Boolean,
        flat: Boolean,
        bordered: Boolean,
        disable: Boolean,
        readonly: Boolean
    },
    emits: [
        "update:modelValue",
        "change"
    ],
    setup (e59, { emit: t44  }) {
        const { proxy: o25  } = _vue.getCurrentInstance(), { $q: n21  } = o25, a11 = useDark(e59, n21), { getCache: l10  } = useCache(), i5 = _vue.ref(null), r3 = _vue.ref(null), s5 = _vue.computed(()=>"auto" === e59.formatModel ? null : e59.formatModel.indexOf("hex") > -1
        ), u2 = _vue.computed(()=>"auto" === e59.formatModel ? null : e59.formatModel.indexOf("a") > -1
        ), c1 = _vue.ref("auto" === e59.formatModel ? void 0 === e59.modelValue || null === e59.modelValue || "" === e59.modelValue || e59.modelValue.startsWith("#") ? "hex" : "rgb" : e59.formatModel.startsWith("hex") ? "hex" : "rgb"), d1 = _vue.ref(e59.defaultView), p = _vue.ref($(e59.modelValue || e59.defaultValue)), v1 = _vue.computed(()=>!0 !== e59.disable && !0 !== e59.readonly
        ), m1 = _vue.computed(()=>void 0 === e59.modelValue || null === e59.modelValue || "" === e59.modelValue || e59.modelValue.startsWith("#")
        ), f = _vue.computed(()=>null !== s5.value ? s5.value : m1.value
        ), g = _vue.computed(()=>({
                type: "hidden",
                name: e59.name,
                value: p.value[!0 === f.value ? "hex" : "rgb"]
            })
        ), b = useFormInject(g), y = _vue.computed(()=>null !== u2.value ? u2.value : void 0 !== p.value.a
        ), S = _vue.computed(()=>({
                backgroundColor: p.value.rgb || "#000"
            })
        ), w = _vue.computed(()=>{
            const e = void 0 !== p.value.a && p.value.a < 65 || luminosity(p.value) > 0.4;
            return "q-color-picker__header-content" + ` q-color-picker__header-content--${e ? "light" : "dark"}`;
        }), x = _vue.computed(()=>({
                background: `hsl(${p.value.h},100%,50%)`
            })
        ), C = _vue.computed(()=>({
                top: `${100 - p.value.v}%`,
                [!0 === n21.lang.rtl ? "right" : "left"]: `${p.value.s}%`
            })
        ), k = _vue.computed(()=>void 0 !== e59.palette && e59.palette.length > 0 ? e59.palette : palette
        ), _ = _vue.computed(()=>"q-color-picker" + (!0 === e59.bordered ? " q-color-picker--bordered" : "") + (!0 === e59.square ? " q-color-picker--square no-border-radius" : "") + (!0 === e59.flat ? " q-color-picker--flat no-shadow" : "") + (!0 === e59.disable ? " disabled" : "") + (!0 === a11.value ? " q-color-picker--dark q-dark" : "")
        ), q = _vue.computed(()=>{
            return !0 === e59.disable ? {
                "aria-disabled": "true"
            } : !0 === e59.readonly ? {
                "aria-readonly": "true"
            } : {
            };
        }), T = _vue.computed(()=>{
            return [
                [
                    TouchPan,
                    L,
                    void 0,
                    {
                        prevent: !0,
                        stop: !0,
                        mouse: !0
                    }
                ]
            ];
        });
        function P(e, o) {
            p.value.hex = rgbToHex(e), p.value.rgb = rgbToString(e), p.value.r = e.r, p.value.g = e.g, p.value.b = e.b, p.value.a = e.a;
            const n = p.value[!0 === f.value ? "hex" : "rgb"];
            t44("update:modelValue", n), !0 === o && t44("change", n);
        }
        function $(t) {
            const o = void 0 !== u2.value ? u2.value : "auto" === e59.formatModel ? null : e59.formatModel.indexOf("a") > -1;
            if ("string" !== typeof t || 0 === t.length || !0 !== testPattern.anyColor(t.replace(/ /g, ""))) return {
                h: 0,
                s: 0,
                v: 0,
                r: 0,
                g: 0,
                b: 0,
                a: !0 === o ? 100 : void 0,
                hex: void 0,
                rgb: void 0
            };
            const n = textToRgb(t);
            return !0 === o && void 0 === n.a && (n.a = 100), n.hex = rgbToHex(n), n.rgb = rgbToString(n), Object.assign(n, rgbToHsv(n));
        }
        function M(e, t, o) {
            const a = i5.value;
            if (null === a) return;
            const l = a.clientWidth, r = a.clientHeight, s = a.getBoundingClientRect();
            let u = Math.min(l, Math.max(0, e - s.left));
            !0 === n21.lang.rtl && (u = l - u);
            const c = Math.min(r, Math.max(0, t - s.top)), d = Math.round(100 * u / l), v = Math.round(100 * Math.max(0, Math.min(1, -c / r + 1))), m = hsvToRgb({
                h: p.value.h,
                s: d,
                v: v,
                a: !0 === y.value ? p.value.a : void 0
            });
            p.value.s = d, p.value.v = v, P(m, o);
        }
        function B(e, t) {
            const o = Math.round(e), n = hsvToRgb({
                h: o,
                s: p.value.s,
                v: p.value.v,
                a: !0 === y.value ? p.value.a : void 0
            });
            p.value.h = o, P(n, t);
        }
        function Q(e, t, n, a, l) {
            if (void 0 !== a && stop(a), !/^[0-9]+$/.test(e)) return void (!0 === l && o25.$forceUpdate());
            const i = Math.floor(Number(e));
            if (i < 0 || i > n) return void (!0 === l && o25.$forceUpdate());
            const r = {
                r: "r" === t ? i : p.value.r,
                g: "g" === t ? i : p.value.g,
                b: "b" === t ? i : p.value.b,
                a: !0 === y.value ? "a" === t ? i : p.value.a : void 0
            };
            if ("a" !== t) {
                const e = rgbToHsv(r);
                p.value.h = e.h, p.value.s = e.s, p.value.v = e.v;
            }
            if (P(r, l), void 0 !== a && !0 !== l && void 0 !== a.target.selectionEnd) {
                const e = a.target.selectionEnd;
                _vue.nextTick(()=>{
                    a.target.setSelectionRange(e, e);
                });
            }
        }
        function E(e, t) {
            let o;
            const n = e.target.value;
            if (stop(e), "hex" === c1.value) {
                if (n.length !== (!0 === y.value ? 9 : 7) || !/^#[0-9A-Fa-f]+$/.test(n)) return !0;
                o = hexToRgb(n);
            } else {
                let e60;
                if (!n.endsWith(")")) return !0;
                if (!0 !== y.value && n.startsWith("rgb(")) {
                    if (e60 = n.substring(4, n.length - 1).split(",").map((e)=>parseInt(e, 10)
                    ), 3 !== e60.length || !/^rgb\([0-9]{1,3},[0-9]{1,3},[0-9]{1,3}\)$/.test(n)) return !0;
                } else {
                    if (!0 !== y.value || !n.startsWith("rgba(")) return !0;
                    {
                        if (e60 = n.substring(5, n.length - 1).split(","), 4 !== e60.length || !/^rgba\([0-9]{1,3},[0-9]{1,3},[0-9]{1,3},(0|0\.[0-9]+[1-9]|0\.[1-9]+|1)\)$/.test(n)) return !0;
                        for(let o = 0; o < 3; o++){
                            const t = parseInt(e60[o], 10);
                            if (t < 0 || t > 255) return !0;
                            e60[o] = t;
                        }
                        const t = parseFloat(e60[3]);
                        if (t < 0 || t > 1) return !0;
                        e60[3] = t;
                    }
                }
                if (e60[0] < 0 || e60[0] > 255 || e60[1] < 0 || e60[1] > 255 || e60[2] < 0 || e60[2] > 255 || !0 === y.value && (e60[3] < 0 || e60[3] > 1)) return !0;
                o = {
                    r: e60[0],
                    g: e60[1],
                    b: e60[2],
                    a: !0 === y.value ? 100 * e60[3] : void 0
                };
            }
            const a = rgbToHsv(o);
            if (p.value.h = a.h, p.value.s = a.s, p.value.v = a.v, P(o, t), !0 !== t) {
                const t = e.target.selectionEnd;
                _vue.nextTick(()=>{
                    e.target.setSelectionRange(t, t);
                });
            }
        }
        function O(e) {
            const t = $(e), o = {
                r: t.r,
                g: t.g,
                b: t.b,
                a: t.a
            };
            void 0 === o.a && (o.a = p.value.a), p.value.h = t.h, p.value.s = t.s, p.value.v = t.v, P(o, !0);
        }
        function L(e) {
            e.isFinal ? M(e.position.left, e.position.top, !0) : z(e);
        }
        _vue.watch(()=>e59.modelValue
        , (t)=>{
            const o = $(t || e59.defaultValue);
            o.hex !== p.value.hex && (p.value = o);
        }), _vue.watch(()=>e59.defaultValue
        , (t)=>{
            if (!e59.modelValue && t) {
                const e = $(t);
                e.hex !== p.value.hex && (p.value = e);
            }
        });
        const z = throttle((e)=>{
            M(e.position.left, e.position.top);
        }, 20);
        function F(e) {
            M(e.pageX - window.pageXOffset, e.pageY - window.pageYOffset, !0);
        }
        function R(e) {
            M(e.pageX - window.pageXOffset, e.pageY - window.pageYOffset);
        }
        function D(e) {
            null !== r3.value && (r3.value.$el.style.opacity = e ? 1 : 0);
        }
        function A() {
            const t = [];
            return !0 !== e59.noHeaderTabs && t.push(_vue.h(QTabs, {
                class: "q-color-picker__header-tabs",
                modelValue: c1.value,
                dense: !0,
                align: "justify",
                ...l10("topVTab", {
                    "onUpdate:modelValue": (e)=>{
                        c1.value = e;
                    }
                })
            }, ()=>[
                    _vue.h(QTab, {
                        label: "HEX" + (!0 === y.value ? "A" : ""),
                        name: "hex",
                        ripple: !1
                    }),
                    _vue.h(QTab, {
                        label: "RGB" + (!0 === y.value ? "A" : ""),
                        name: "rgb",
                        ripple: !1
                    })
                ]
            )), t.push(_vue.h("div", {
                class: "q-color-picker__header-banner row flex-center no-wrap"
            }, [
                _vue.h("input", {
                    class: "fit",
                    value: p.value[c1.value],
                    ...!0 !== v1.value ? {
                        readonly: !0
                    } : {
                    },
                    ...l10("topIn", {
                        onInput: (e)=>{
                            D(!0 === E(e));
                        },
                        onChange: stop,
                        onBlur: (e)=>{
                            !0 === E(e, !0) && o25.$forceUpdate(), D(!1);
                        }
                    })
                }),
                _vue.h(QIcon, {
                    ref: r3,
                    class: "q-color-picker__error-icon absolute no-pointer-events",
                    name: n21.iconSet.type.negative
                })
            ])), _vue.h("div", {
                class: "q-color-picker__header relative-position overflow-hidden"
            }, [
                _vue.h("div", {
                    class: "q-color-picker__header-bg absolute-full"
                }),
                _vue.h("div", {
                    class: w.value,
                    style: S.value
                }, t)
            ]);
        }
        function V() {
            return _vue.h(QTabPanels, {
                modelValue: d1.value,
                animated: !0
            }, ()=>[
                    _vue.h(QTabPanel, {
                        class: "q-color-picker__spectrum-tab overflow-hidden",
                        name: "spectrum"
                    }, H),
                    _vue.h(QTabPanel, {
                        class: "q-pa-md q-color-picker__tune-tab",
                        name: "tune"
                    }, N),
                    _vue.h(QTabPanel, {
                        class: "q-color-picker__palette-tab",
                        name: "palette"
                    }, j)
                ]
            );
        }
        function I() {
            return _vue.h("div", {
                class: "q-color-picker__footer relative-position overflow-hidden"
            }, [
                _vue.h(QTabs, {
                    class: "absolute-full",
                    modelValue: d1.value,
                    dense: !0,
                    align: "justify",
                    ...l10("ftIn", {
                        "onUpdate:modelValue": (e)=>{
                            d1.value = e;
                        }
                    })
                }, ()=>[
                        _vue.h(QTab, {
                            icon: n21.iconSet.colorPicker.spectrum,
                            name: "spectrum",
                            ripple: !1
                        }),
                        _vue.h(QTab, {
                            icon: n21.iconSet.colorPicker.tune,
                            name: "tune",
                            ripple: !1
                        }),
                        _vue.h(QTab, {
                            icon: n21.iconSet.colorPicker.palette,
                            name: "palette",
                            ripple: !1
                        })
                    ]
                )
            ]);
        }
        function H() {
            const e61 = {
                ref: i5,
                class: "q-color-picker__spectrum non-selectable relative-position cursor-pointer" + (!0 !== v1.value ? " readonly" : ""),
                style: x.value,
                ...!0 === v1.value ? {
                    onClick: F,
                    onMousedown: R
                } : {
                }
            }, t = [
                _vue.h("div", {
                    style: {
                        paddingBottom: "100%"
                    }
                }),
                _vue.h("div", {
                    class: "q-color-picker__spectrum-white absolute-full"
                }),
                _vue.h("div", {
                    class: "q-color-picker__spectrum-black absolute-full"
                }),
                _vue.h("div", {
                    class: "absolute",
                    style: C.value
                }, [
                    void 0 !== p.value.hex ? _vue.h("div", {
                        class: "q-color-picker__spectrum-circle"
                    }) : null
                ])
            ], o = [
                _vue.h("div", {
                    class: "q-color-picker__hue non-selectable"
                }, [
                    _vue.h(QSlider, {
                        modelValue: p.value.h,
                        min: 0,
                        max: 360,
                        fillHandleAlways: !0,
                        readonly: !0 !== v1.value,
                        thumbPath: thumbPath,
                        "onUpdate:modelValue": B,
                        ...l10("lazyhue", {
                            onChange: (e)=>B(e, !0)
                        })
                    })
                ])
            ];
            return !0 === y.value && o.push(_vue.h("div", {
                class: "q-color-picker__alpha non-selectable"
            }, [
                _vue.h(QSlider, {
                    modelValue: p.value.a,
                    min: 0,
                    max: 100,
                    fillHandleAlways: !0,
                    readonly: !0 !== v1.value,
                    thumbPath: thumbPath,
                    ...l10("alphaSlide", {
                        "onUpdate:modelValue": (e)=>Q(e, "a", 100)
                        ,
                        onChange: (e)=>Q(e, "a", 100, void 0, !0)
                    })
                })
            ])), [
                hDir("div", e61, t, "spec", v1.value, ()=>T.value
                ),
                _vue.h("div", {
                    class: "q-color-picker__sliders"
                }, o)
            ];
        }
        function N() {
            return [
                _vue.h("div", {
                    class: "row items-center no-wrap"
                }, [
                    _vue.h("div", "R"),
                    _vue.h(QSlider, {
                        modelValue: p.value.r,
                        min: 0,
                        max: 255,
                        color: "red",
                        dark: a11.value,
                        readonly: !0 !== v1.value,
                        ...l10("rSlide", {
                            "onUpdate:modelValue": (e)=>Q(e, "r", 255)
                            ,
                            onChange: (e)=>Q(e, "r", 255, void 0, !0)
                        })
                    }),
                    _vue.h("input", {
                        value: p.value.r,
                        maxlength: 3,
                        readonly: !0 !== v1.value,
                        onChange: stop,
                        ...l10("rIn", {
                            onInput: (e)=>Q(e.target.value, "r", 255, e)
                            ,
                            onBlur: (e)=>Q(e.target.value, "r", 255, e, !0)
                        })
                    })
                ]),
                _vue.h("div", {
                    class: "row items-center no-wrap"
                }, [
                    _vue.h("div", "G"),
                    _vue.h(QSlider, {
                        modelValue: p.value.g,
                        min: 0,
                        max: 255,
                        color: "green",
                        dark: a11.value,
                        readonly: !0 !== v1.value,
                        ...l10("gSlide", {
                            "onUpdate:modelValue": (e)=>Q(e, "g", 255)
                            ,
                            onChange: (e)=>Q(e, "g", 255, void 0, !0)
                        })
                    }),
                    _vue.h("input", {
                        value: p.value.g,
                        maxlength: 3,
                        readonly: !0 !== v1.value,
                        onChange: stop,
                        ...l10("gIn", {
                            onInput: (e)=>Q(e.target.value, "g", 255, e)
                            ,
                            onBlur: (e)=>Q(e.target.value, "g", 255, e, !0)
                        })
                    })
                ]),
                _vue.h("div", {
                    class: "row items-center no-wrap"
                }, [
                    _vue.h("div", "B"),
                    _vue.h(QSlider, {
                        modelValue: p.value.b,
                        min: 0,
                        max: 255,
                        color: "blue",
                        readonly: !0 !== v1.value,
                        dark: a11.value,
                        ...l10("bSlide", {
                            "onUpdate:modelValue": (e)=>Q(e, "b", 255)
                            ,
                            onChange: (e)=>Q(e, "b", 255, void 0, !0)
                        })
                    }),
                    _vue.h("input", {
                        value: p.value.b,
                        maxlength: 3,
                        readonly: !0 !== v1.value,
                        onChange: stop,
                        ...l10("bIn", {
                            onInput: (e)=>Q(e.target.value, "b", 255, e)
                            ,
                            onBlur: (e)=>Q(e.target.value, "b", 255, e, !0)
                        })
                    })
                ]),
                !0 === y.value ? _vue.h("div", {
                    class: "row items-center no-wrap"
                }, [
                    _vue.h("div", "A"),
                    _vue.h(QSlider, {
                        modelValue: p.value.a,
                        color: "grey",
                        readonly: !0 !== v1.value,
                        dark: a11.value,
                        ...l10("aSlide", {
                            "onUpdate:modelValue": (e)=>Q(e, "a", 100)
                            ,
                            onChange: (e)=>Q(e, "a", 100, void 0, !0)
                        })
                    }),
                    _vue.h("input", {
                        value: p.value.a,
                        maxlength: 3,
                        readonly: !0 !== v1.value,
                        onChange: stop,
                        ...l10("aIn", {
                            onInput: (e)=>Q(e.target.value, "a", 100, e)
                            ,
                            onBlur: (e)=>Q(e.target.value, "a", 100, e, !0)
                        })
                    })
                ]) : null
            ];
        }
        function j() {
            const e62 = (e)=>_vue.h("div", {
                    class: "q-color-picker__cube col-auto",
                    style: {
                        backgroundColor: e
                    },
                    ...!0 === v1.value ? l10("palette#" + e, {
                        onClick: ()=>{
                            O(e);
                        }
                    }) : {
                    }
                })
            ;
            return [
                _vue.h("div", {
                    class: "row items-center q-color-picker__palette-rows" + (!0 === v1.value ? " q-color-picker__palette-rows--editable" : "")
                }, k.value.map(e62))
            ];
        }
        return ()=>{
            const t = [
                V()
            ];
            return void 0 !== e59.name && !0 !== e59.disable && b(t, "push"), !0 !== e59.noHeader && t.unshift(A()), !0 !== e59.noFooter && t.push(I()), _vue.h("div", {
                class: _.value,
                ...q.value
            }, t);
        };
    }
});
const breaks = [
    -61,
    9,
    38,
    199,
    426,
    686,
    756,
    818,
    1111,
    1181,
    1210,
    1635,
    2060,
    2097,
    2192,
    2262,
    2324,
    2394,
    2456,
    3178
];
function toJalaali(e, t, o) {
    return "[object Date]" === Object.prototype.toString.call(e) && (o = e.getDate(), t = e.getMonth() + 1, e = e.getFullYear()), d2j(g2d(e, t, o));
}
function toGregorian(e, t, o) {
    return d2g(j2d(e, t, o));
}
function isLeapJalaaliYear(e) {
    return 0 === jalCalLeap(e);
}
function jalaaliMonthLength(e, t) {
    return t <= 6 ? 31 : t <= 11 ? 30 : isLeapJalaaliYear(e) ? 30 : 29;
}
function jalCalLeap(e) {
    const t = breaks.length;
    let o, n, a, l, i, r = breaks[0];
    if (e < r || e >= breaks[t - 1]) throw new Error("Invalid Jalaali year " + e);
    for(i = 1; i < t; i += 1){
        if (o = breaks[i], n = o - r, e < o) break;
        r = o;
    }
    return l = e - r, n - l < 6 && (l = l - n + 33 * div(n + 4, 33)), a = mod(mod(l + 1, 33) - 1, 4), -1 === a && (a = 4), a;
}
function jalCal(e, t) {
    const o = breaks.length, n = e + 621;
    let a, l, i, r, s, u = -14, c = breaks[0];
    if (e < c || e >= breaks[o - 1]) throw new Error("Invalid Jalaali year " + e);
    for(s = 1; s < o; s += 1){
        if (a = breaks[s], l = a - c, e < a) break;
        u = u + 8 * div(l, 33) + div(mod(l, 33), 4), c = a;
    }
    r = e - c, u = u + 8 * div(r, 33) + div(mod(r, 33) + 3, 4), 4 === mod(l, 33) && l - r === 4 && (u += 1);
    const d = div(n, 4) - div(3 * (div(n, 100) + 1), 4) - 150, p = 20 + u - d;
    return t || (l - r < 6 && (r = r - l + 33 * div(l + 4, 33)), i = mod(mod(r + 1, 33) - 1, 4), -1 === i && (i = 4)), {
        leap: i,
        gy: n,
        march: p
    };
}
function j2d(e, t, o) {
    const n = jalCal(e, !0);
    return g2d(n.gy, 3, n.march) + 31 * (t - 1) - div(t, 7) * (t - 7) + o - 1;
}
function d2j(e) {
    const t = d2g(e).gy;
    let o, n, a, l = t - 621;
    const i = jalCal(l, !1), r = g2d(t, 3, i.march);
    if (a = e - r, a >= 0) {
        if (a <= 185) return n = 1 + div(a, 31), o = mod(a, 31) + 1, {
            jy: l,
            jm: n,
            jd: o
        };
        a -= 186;
    } else l -= 1, a += 179, 1 === i.leap && (a += 1);
    return n = 7 + div(a, 30), o = mod(a, 30) + 1, {
        jy: l,
        jm: n,
        jd: o
    };
}
function g2d(e, t, o) {
    let n = div(1461 * (e + div(t - 8, 6) + 100100), 4) + div(153 * mod(t + 9, 12) + 2, 5) + o - 34840408;
    return n = n - div(3 * div(e + 100100 + div(t - 8, 6), 100), 4) + 752, n;
}
function d2g(e) {
    let t = 4 * e + 139361631;
    t = t + 4 * div(3 * div(4 * e + 183187720, 146097), 4) - 3908;
    const o = 5 * div(mod(t, 1461), 4) + 308, n = div(mod(o, 153), 5) + 1, a = mod(div(o, 153), 12) + 1, l = div(t, 1461) - 100100 + div(8 - a, 6);
    return {
        gy: l,
        gm: a,
        gd: n
    };
}
function div(e, t) {
    return ~~(e / t);
}
function mod(e, t) {
    return e - ~~(e / t) * t;
}
const calendars = [
    "gregorian",
    "persian"
], useDatetimeProps = {
    modelValue: {
        required: !0
    },
    mask: {
        type: String
    },
    locale: Object,
    calendar: {
        type: String,
        validator: (e)=>calendars.includes(e)
        ,
        default: "gregorian"
    },
    landscape: Boolean,
    color: String,
    textColor: String,
    square: Boolean,
    flat: Boolean,
    bordered: Boolean,
    readonly: Boolean,
    disable: Boolean
}, useDatetimeEmits = [
    "update:modelValue"
];
function getDayHash(e) {
    return e.year + "/" + pad(e.month) + "/" + pad(e.day);
}
function useDatetime(e63, t45) {
    const o26 = _vue.computed(()=>{
        return !0 !== e63.disable && !0 !== e63.readonly;
    }), n22 = _vue.computed(()=>{
        return !0 === e63.editable ? 0 : -1;
    }), a = _vue.computed(()=>{
        const t = [];
        return void 0 !== e63.color && t.push(`bg-${e63.color}`), void 0 !== e63.textColor && t.push(`text-${e63.textColor}`), t.join(" ");
    });
    function l() {
        return e63.locale || t45.lang.date;
    }
    function i(t) {
        const o = new Date, n = !0 === t ? null : 0;
        if ("persian" === e63.calendar) {
            const e = toJalaali(o);
            return {
                year: e.jy,
                month: e.jm,
                day: e.jd
            };
        }
        return {
            year: o.getFullYear(),
            month: o.getMonth() + 1,
            day: o.getDate(),
            hour: n,
            minute: n,
            second: n,
            millisecond: n
        };
    }
    return {
        editable: o26,
        tabindex: n22,
        headerClass: a,
        getLocale: l,
        getCurrentDate: i
    };
}
const MILLISECONDS_IN_DAY = 86400000, MILLISECONDS_IN_HOUR = 3600000, MILLISECONDS_IN_MINUTE = 60000, defaultMask = "YYYY-MM-DDTHH:mm:ss.SSSZ", token = /\[((?:[^\]\\]|\\]|\\)*)\]|d{1,4}|M{1,4}|m{1,2}|w{1,2}|Qo|Do|D{1,4}|YY(?:YY)?|H{1,2}|h{1,2}|s{1,2}|S{1,3}|Z{1,2}|a{1,2}|[AQExX]/g, reverseToken = /(\[[^\]]*\])|d{1,4}|M{1,4}|m{1,2}|w{1,2}|Qo|Do|D{1,4}|YY(?:YY)?|H{1,2}|h{1,2}|s{1,2}|S{1,3}|Z{1,2}|a{1,2}|[AQExX]|([.*+:?^,\s${}()|\\]+)/g, regexStore = {
};
function getRegexData(e64, t) {
    const o = "(" + t.days.join("|") + ")", n = e64 + o;
    if (void 0 !== regexStore[n]) return regexStore[n];
    const a = "(" + t.daysShort.join("|") + ")", l = "(" + t.months.join("|") + ")", i = "(" + t.monthsShort.join("|") + ")", r = {
    };
    let s = 0;
    const u = e64.replace(reverseToken, (e)=>{
        switch(s++, e){
            case "YY":
                return r.YY = s, "(-?\\d{1,2})";
            case "YYYY":
                return r.YYYY = s, "(-?\\d{1,4})";
            case "M":
                return r.M = s, "(\\d{1,2})";
            case "MM":
                return r.M = s, "(\\d{2})";
            case "MMM":
                return r.MMM = s, i;
            case "MMMM":
                return r.MMMM = s, l;
            case "D":
                return r.D = s, "(\\d{1,2})";
            case "Do":
                return r.D = s++, "(\\d{1,2}(st|nd|rd|th))";
            case "DD":
                return r.D = s, "(\\d{2})";
            case "H":
                return r.H = s, "(\\d{1,2})";
            case "HH":
                return r.H = s, "(\\d{2})";
            case "h":
                return r.h = s, "(\\d{1,2})";
            case "hh":
                return r.h = s, "(\\d{2})";
            case "m":
                return r.m = s, "(\\d{1,2})";
            case "mm":
                return r.m = s, "(\\d{2})";
            case "s":
                return r.s = s, "(\\d{1,2})";
            case "ss":
                return r.s = s, "(\\d{2})";
            case "S":
                return r.S = s, "(\\d{1})";
            case "SS":
                return r.S = s, "(\\d{2})";
            case "SSS":
                return r.S = s, "(\\d{3})";
            case "A":
                return r.A = s, "(AM|PM)";
            case "a":
                return r.a = s, "(am|pm)";
            case "aa":
                return r.aa = s, "(a\\.m\\.|p\\.m\\.)";
            case "ddd":
                return a;
            case "dddd":
                return o;
            case "Q":
            case "d":
            case "E":
                return "(\\d{1})";
            case "Qo":
                return "(1st|2nd|3rd|4th)";
            case "DDD":
            case "DDDD":
                return "(\\d{1,3})";
            case "w":
                return "(\\d{1,2})";
            case "ww":
                return "(\\d{2})";
            case "Z":
                return r.Z = s, "(Z|[+-]\\d{2}:\\d{2})";
            case "ZZ":
                return r.ZZ = s, "(Z|[+-]\\d{2}\\d{2})";
            case "X":
                return r.X = s, "(-?\\d+)";
            case "x":
                return r.x = s, "(-?\\d{4,})";
            default:
                return s--, "[" === e[0] && (e = e.substring(1, e.length - 1)), e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        }
    }), c = {
        map: r,
        regex: new RegExp("^" + u)
    };
    return regexStore[n] = c, c;
}
function getDateLocale(e, t) {
    return void 0 !== e ? e : void 0 !== t ? t.date : defaultLang.date;
}
function formatTimezone(e, t = "") {
    const o = e > 0 ? "-" : "+", n = Math.abs(e), a = Math.floor(n / 60), l = n % 60;
    return o + pad(a) + t + pad(l);
}
function applyYearMonthDayChange(e, t, o) {
    let n = e.getFullYear(), a = e.getMonth(), l = e.getDate();
    return void 0 !== t.years && (n += o * t.years), void 0 !== t.months && (a += o * t.months), void 0 !== t.days && (l += o * t.days), e.setDate(1), e.setMonth(2), e.setFullYear(n), e.setMonth(a), e.setDate(l), e;
}
function getChange(e65, t, o) {
    const n = new Date(e65), a = void 0 !== t.years || void 0 !== t.months || void 0 !== t.days ? applyYearMonthDayChange(n, t, o) : n;
    return Object.keys(t).forEach((e)=>{
        if ("years" !== e && "months" !== e && "days" !== e) {
            const n = capitalize(e);
            a[`set${n}`](a[`get${n}`]() + o * t[e]);
        }
    }), a;
}
function applyYearMonthDay(e, t, o) {
    const n = void 0 !== t.year ? t.year : e[`get${o}FullYear`](), a = void 0 !== t.month ? t.month - 1 : e[`get${o}Month`](), l = new Date(n, a + 1, 0).getDate(), i = Math.min(l, void 0 !== t.date ? t.date : e[`get${o}Date`]());
    return e[`set${o}Date`](1), e[`set${o}Month`](2), e[`set${o}FullYear`](n), e[`set${o}Month`](a), e[`set${o}Date`](i), e;
}
function adjustDate(e66, t, o) {
    const n = !0 === o ? "UTC" : "", a = new Date(e66), l = void 0 !== t.year || void 0 !== t.month || void 0 !== t.date ? applyYearMonthDay(a, t, n) : a;
    return Object.keys(t).forEach((e)=>{
        if ("year" !== e && "month" !== e && "date" !== e) {
            const o = e.charAt(0).toUpperCase() + e.slice(1);
            l[`set${n}${o}`](t[e]);
        }
    }), l;
}
function extractDate(e, t, o) {
    const n = __splitDate(e, t, o), a = new Date(n.year, null === n.month ? null : n.month - 1, n.day, n.hour, n.minute, n.second, n.millisecond), l = a.getTimezoneOffset();
    return null === n.timezoneOffset || n.timezoneOffset === l ? a : getChange(a, {
        minutes: n.timezoneOffset - l
    }, 1);
}
function __splitDate(e, t, o, n, a) {
    const l = {
        year: null,
        month: null,
        day: null,
        hour: null,
        minute: null,
        second: null,
        millisecond: null,
        timezoneOffset: null,
        dateHash: null,
        timeHash: null
    };
    if (void 0 !== a && Object.assign(l, a), void 0 === e || null === e || "" === e || "string" !== typeof e) return l;
    void 0 === t && (t = defaultMask);
    const i = getDateLocale(o, Plugin$7.props), r = i.months, s = i.monthsShort, { regex: u , map: c  } = getRegexData(t, i), d = e.match(u);
    if (null === d) return l;
    let p = "";
    if (void 0 !== c.X || void 0 !== c.x) {
        const e = parseInt(d[void 0 !== c.X ? c.X : c.x], 10);
        if (!0 === isNaN(e) || e < 0) return l;
        const t = new Date(e * (void 0 !== c.X ? 1000 : 1));
        l.year = t.getFullYear(), l.month = t.getMonth() + 1, l.day = t.getDate(), l.hour = t.getHours(), l.minute = t.getMinutes(), l.second = t.getSeconds(), l.millisecond = t.getMilliseconds();
    } else {
        if (void 0 !== c.YYYY) l.year = parseInt(d[c.YYYY], 10);
        else if (void 0 !== c.YY) {
            const e = parseInt(d[c.YY], 10);
            l.year = e < 0 ? e : 2000 + e;
        }
        if (void 0 !== c.M) {
            if (l.month = parseInt(d[c.M], 10), l.month < 1 || l.month > 12) return l;
        } else void 0 !== c.MMM ? l.month = s.indexOf(d[c.MMM]) + 1 : void 0 !== c.MMMM && (l.month = r.indexOf(d[c.MMMM]) + 1);
        if (void 0 !== c.D) {
            if (l.day = parseInt(d[c.D], 10), null === l.year || null === l.month || l.day < 1) return l;
            const e = "persian" !== n ? new Date(l.year, l.month, 0).getDate() : jalaaliMonthLength(l.year, l.month);
            if (l.day > e) return l;
        }
        void 0 !== c.H ? l.hour = parseInt(d[c.H], 10) % 24 : void 0 !== c.h && (l.hour = parseInt(d[c.h], 10) % 12, (c.A && "PM" === d[c.A] || c.a && "pm" === d[c.a] || c.aa && "p.m." === d[c.aa]) && (l.hour += 12), l.hour = l.hour % 24), void 0 !== c.m && (l.minute = parseInt(d[c.m], 10) % 60), void 0 !== c.s && (l.second = parseInt(d[c.s], 10) % 60), void 0 !== c.S && (l.millisecond = parseInt(d[c.S], 10) * 10 ** (3 - d[c.S].length)), void 0 === c.Z && void 0 === c.ZZ || (p = void 0 !== c.Z ? d[c.Z].replace(":", "") : d[c.ZZ], l.timezoneOffset = ("+" === p[0] ? -1 : 1) * (60 * p.slice(1, 3) + 1 * p.slice(3, 5)));
    }
    return l.dateHash = pad(l.year, 6) + "/" + pad(l.month) + "/" + pad(l.day), l.timeHash = pad(l.hour) + ":" + pad(l.minute) + ":" + pad(l.second) + p, l;
}
function isValid(e) {
    return "number" === typeof e || !1 === isNaN(Date.parse(e));
}
function buildDate(e, t) {
    return adjustDate(new Date, e, t);
}
function getDayOfWeek(e) {
    const t = new Date(e).getDay();
    return 0 === t ? 7 : t;
}
function getWeekOfYear(e) {
    const t = new Date(e.getFullYear(), e.getMonth(), e.getDate());
    t.setDate(t.getDate() - (t.getDay() + 6) % 7 + 3);
    const o = new Date(t.getFullYear(), 0, 4);
    o.setDate(o.getDate() - (o.getDay() + 6) % 7 + 3);
    const n = t.getTimezoneOffset() - o.getTimezoneOffset();
    t.setHours(t.getHours() - n);
    const a = (t - o) / (7 * MILLISECONDS_IN_DAY);
    return 1 + Math.floor(a);
}
function getDayIdentifier(e) {
    return 10000 * e.getFullYear() + 100 * e.getMonth() + e.getDate();
}
function getDateIdentifier(e, t) {
    const o = new Date(e);
    return !0 === t ? getDayIdentifier(o) : o.getTime();
}
function isBetweenDates(e, t, o, n = {
}) {
    const a = getDateIdentifier(t, n.onlyDate), l = getDateIdentifier(o, n.onlyDate), i = getDateIdentifier(e, n.onlyDate);
    return (i > a || !0 === n.inclusiveFrom && i === a) && (i < l || !0 === n.inclusiveTo && i === l);
}
function addToDate(e, t) {
    return getChange(e, t, 1);
}
function subtractFromDate(e, t) {
    return getChange(e, t, -1);
}
function startOfDate(e, t, o) {
    const n = new Date(e), a = `set${!0 === o ? "UTC" : ""}`;
    switch(t){
        case "year":
            n[`${a}Month`](0);
        case "month":
            n[`${a}Date`](1);
        case "day":
            n[`${a}Hours`](0);
        case "hour":
            n[`${a}Minutes`](0);
        case "minute":
            n[`${a}Seconds`](0);
        case "second":
            n[`${a}Milliseconds`](0);
    }
    return n;
}
function endOfDate(e, t, o) {
    const n = new Date(e), a = `set${!0 === o ? "UTC" : ""}`;
    switch(t){
        case "year":
            n[`${a}Month`](11);
        case "month":
            n[`${a}Date`](daysInMonth(n));
        case "day":
            n[`${a}Hours`](23);
        case "hour":
            n[`${a}Minutes`](59);
        case "minute":
            n[`${a}Seconds`](59);
        case "second":
            n[`${a}Milliseconds`](999);
    }
    return n;
}
function getMaxDate(e67) {
    let t = new Date(e67);
    return Array.prototype.slice.call(arguments, 1).forEach((e)=>{
        t = Math.max(t, new Date(e));
    }), t;
}
function getMinDate(e68) {
    let t = new Date(e68);
    return Array.prototype.slice.call(arguments, 1).forEach((e)=>{
        t = Math.min(t, new Date(e));
    }), t;
}
function getDiff(e, t, o) {
    return (e.getTime() - e.getTimezoneOffset() * MILLISECONDS_IN_MINUTE - (t.getTime() - t.getTimezoneOffset() * MILLISECONDS_IN_MINUTE)) / o;
}
function getDateDiff(e, t, o = "days") {
    const n = new Date(e), a = new Date(t);
    switch(o){
        case "years":
            return n.getFullYear() - a.getFullYear();
        case "months":
            return 12 * (n.getFullYear() - a.getFullYear()) + n.getMonth() - a.getMonth();
        case "days":
            return getDiff(startOfDate(n, "day"), startOfDate(a, "day"), MILLISECONDS_IN_DAY);
        case "hours":
            return getDiff(startOfDate(n, "hour"), startOfDate(a, "hour"), MILLISECONDS_IN_HOUR);
        case "minutes":
            return getDiff(startOfDate(n, "minute"), startOfDate(a, "minute"), MILLISECONDS_IN_MINUTE);
        case "seconds":
            return getDiff(startOfDate(n, "second"), startOfDate(a, "second"), 1000);
    }
}
function getDayOfYear(e) {
    return getDateDiff(e, startOfDate(e, "year"), "days") + 1;
}
function inferDateFormat(e) {
    return !0 === isDate(e) ? "date" : "number" === typeof e ? "number" : "string";
}
function getDateBetween(e, t, o) {
    const n = new Date(e);
    if (t) {
        const e = new Date(t);
        if (n < e) return e;
    }
    if (o) {
        const e = new Date(o);
        if (n > e) return e;
    }
    return n;
}
function isSameDate(e, t, o) {
    const n = new Date(e), a = new Date(t);
    if (void 0 === o) return n.getTime() === a.getTime();
    switch(o){
        case "second":
            if (n.getSeconds() !== a.getSeconds()) return !1;
        case "minute":
            if (n.getMinutes() !== a.getMinutes()) return !1;
        case "hour":
            if (n.getHours() !== a.getHours()) return !1;
        case "day":
            if (n.getDate() !== a.getDate()) return !1;
        case "month":
            if (n.getMonth() !== a.getMonth()) return !1;
        case "year":
            if (n.getFullYear() !== a.getFullYear()) return !1;
            break;
        default:
            throw new Error(`date isSameDate unknown unit ${o}`);
    }
    return !0;
}
function daysInMonth(e) {
    return new Date(e.getFullYear(), e.getMonth() + 1, 0).getDate();
}
function getOrdinal(e) {
    if (e >= 11 && e <= 13) return `${e}th`;
    switch(e % 10){
        case 1:
            return `${e}st`;
        case 2:
            return `${e}nd`;
        case 3:
            return `${e}rd`;
    }
    return `${e}th`;
}
const formatter = {
    YY (e, t, o) {
        const n = this.YYYY(e, t, o) % 100;
        return n > 0 ? pad(n) : "-" + pad(Math.abs(n));
    },
    YYYY (e, t, o) {
        return void 0 !== o && null !== o ? o : e.getFullYear();
    },
    M (e) {
        return e.getMonth() + 1;
    },
    MM (e) {
        return pad(e.getMonth() + 1);
    },
    MMM (e, t) {
        return t.monthsShort[e.getMonth()];
    },
    MMMM (e, t) {
        return t.months[e.getMonth()];
    },
    Q (e) {
        return Math.ceil((e.getMonth() + 1) / 3);
    },
    Qo (e) {
        return getOrdinal(this.Q(e));
    },
    D (e) {
        return e.getDate();
    },
    Do (e) {
        return getOrdinal(e.getDate());
    },
    DD (e) {
        return pad(e.getDate());
    },
    DDD (e) {
        return getDayOfYear(e);
    },
    DDDD (e) {
        return pad(getDayOfYear(e), 3);
    },
    d (e) {
        return e.getDay();
    },
    dd (e, t) {
        return this.dddd(e, t).slice(0, 2);
    },
    ddd (e, t) {
        return t.daysShort[e.getDay()];
    },
    dddd (e, t) {
        return t.days[e.getDay()];
    },
    E (e) {
        return e.getDay() || 7;
    },
    w (e) {
        return getWeekOfYear(e);
    },
    ww (e) {
        return pad(getWeekOfYear(e));
    },
    H (e) {
        return e.getHours();
    },
    HH (e) {
        return pad(e.getHours());
    },
    h (e) {
        const t = e.getHours();
        return 0 === t ? 12 : t > 12 ? t % 12 : t;
    },
    hh (e) {
        return pad(this.h(e));
    },
    m (e) {
        return e.getMinutes();
    },
    mm (e) {
        return pad(e.getMinutes());
    },
    s (e) {
        return e.getSeconds();
    },
    ss (e) {
        return pad(e.getSeconds());
    },
    S (e) {
        return Math.floor(e.getMilliseconds() / 100);
    },
    SS (e) {
        return pad(Math.floor(e.getMilliseconds() / 10));
    },
    SSS (e) {
        return pad(e.getMilliseconds(), 3);
    },
    A (e) {
        return this.H(e) < 12 ? "AM" : "PM";
    },
    a (e) {
        return this.H(e) < 12 ? "am" : "pm";
    },
    aa (e) {
        return this.H(e) < 12 ? "a.m." : "p.m.";
    },
    Z (e, t, o, n) {
        const a = void 0 === n || null === n ? e.getTimezoneOffset() : n;
        return formatTimezone(a, ":");
    },
    ZZ (e, t, o, n) {
        const a = void 0 === n || null === n ? e.getTimezoneOffset() : n;
        return formatTimezone(a);
    },
    X (e) {
        return Math.floor(e.getTime() / 1000);
    },
    x (e) {
        return e.getTime();
    }
};
function formatDate(e69, t46, o, n, a) {
    if (0 !== e69 && !e69 || e69 === 1 / 0 || e69 === -1 / 0) return;
    const l = new Date(e69);
    if (isNaN(l)) return;
    void 0 === t46 && (t46 = defaultMask);
    const i = getDateLocale(o, Plugin$7.props);
    return t46.replace(token, (e, t)=>e in formatter ? formatter[e](l, i, n, a) : void 0 === t ? e : t.split("\\]").join("]")
    );
}
function clone$1(e) {
    return !0 === isDate(e) ? new Date(e.getTime()) : e;
}
var date = {
    isValid: isValid,
    extractDate: extractDate,
    buildDate: buildDate,
    getDayOfWeek: getDayOfWeek,
    getWeekOfYear: getWeekOfYear,
    isBetweenDates: isBetweenDates,
    addToDate: addToDate,
    subtractFromDate: subtractFromDate,
    adjustDate: adjustDate,
    startOfDate: startOfDate,
    endOfDate: endOfDate,
    getMaxDate: getMaxDate,
    getMinDate: getMinDate,
    getDateDiff: getDateDiff,
    getDayOfYear: getDayOfYear,
    inferDateFormat: inferDateFormat,
    getDateBetween: getDateBetween,
    isSameDate: isSameDate,
    daysInMonth: daysInMonth,
    formatDate: formatDate,
    clone: clone$1
};
const yearsInterval = 20, views = [
    "Calendar",
    "Years",
    "Months"
], viewIsValid = (e)=>views.includes(e)
, yearMonthValidator = (e)=>/^-?[\d]+\/[0-1]\d$/.test(e)
, lineStr = " — ";
function getMonthHash(e) {
    return e.year + "/" + pad(e.month);
}
var QDate = createComponent({
    name: "QDate",
    props: {
        ...useDatetimeProps,
        ...useFormProps,
        ...useDarkProps,
        multiple: Boolean,
        range: Boolean,
        title: String,
        subtitle: String,
        mask: {
            default: "YYYY/MM/DD"
        },
        defaultYearMonth: {
            type: String,
            validator: yearMonthValidator
        },
        yearsInMonthView: Boolean,
        events: [
            Array,
            Function
        ],
        eventColor: [
            String,
            Function
        ],
        emitImmediately: Boolean,
        options: [
            Array,
            Function
        ],
        navigationMinYearMonth: {
            type: String,
            validator: yearMonthValidator
        },
        navigationMaxYearMonth: {
            type: String,
            validator: yearMonthValidator
        },
        noUnset: Boolean,
        firstDayOfWeek: [
            String,
            Number
        ],
        todayBtn: Boolean,
        minimal: Boolean,
        defaultView: {
            type: String,
            default: "Calendar",
            validator: viewIsValid
        }
    },
    emits: [
        ...useDatetimeEmits,
        "range-start",
        "range-end",
        "navigation"
    ],
    setup (e70, { slots: t47 , emit: o27  }) {
        const { proxy: n23  } = _vue.getCurrentInstance(), { $q: a12  } = n23, l11 = useDark(e70, a12), { getCache: i6  } = useCache(), { tabindex: r4 , headerClass: s6 , getLocale: u , getCurrentDate: c  } = useDatetime(e70, a12);
        let d;
        const p = useFormAttrs(e70), v = useFormInject(p), m = _vue.ref(null), f = _vue.ref(de()), g = _vue.ref(u()), b = _vue.computed(()=>de()
        ), y = _vue.computed(()=>u()
        ), S = _vue.computed(()=>c()
        ), w = _vue.ref(ve(f.value, g.value)), x = _vue.ref(e70.defaultView), C = !0 === a12.lang.rtl ? "right" : "left", k = _vue.ref(C.value), _ = _vue.ref(C.value), q = w.value.year, T = _vue.ref(q - q % yearsInterval - (q < 0 ? yearsInterval : 0)), P = _vue.ref(null), $ = _vue.computed(()=>{
            const t = !0 === e70.landscape ? "landscape" : "portrait";
            return `q-date q-date--${t} q-date--${t}-${!0 === e70.minimal ? "minimal" : "standard"}` + (!0 === l11.value ? " q-date--dark q-dark" : "") + (!0 === e70.bordered ? " q-date--bordered" : "") + (!0 === e70.square ? " q-date--square no-border-radius" : "") + (!0 === e70.flat ? " q-date--flat no-shadow" : "") + (!0 === e70.disable ? " disabled" : !0 === e70.readonly ? " q-date--readonly" : "");
        }), M = _vue.computed(()=>{
            return e70.color || "primary";
        }), B = _vue.computed(()=>{
            return e70.textColor || "white";
        }), Q = _vue.computed(()=>!0 === e70.emitImmediately && !0 !== e70.multiple && !0 !== e70.range
        ), E = _vue.computed(()=>!0 === Array.isArray(e70.modelValue) ? e70.modelValue : null !== e70.modelValue && void 0 !== e70.modelValue ? [
                e70.modelValue
            ] : []
        ), O = _vue.computed(()=>E.value.filter((e)=>"string" === typeof e
            ).map((e)=>pe(e, f.value, g.value)
            ).filter((e)=>null !== e.dateHash
            )
        ), L = _vue.computed(()=>{
            const e71 = (e)=>pe(e, f.value, g.value)
            ;
            return E.value.filter((e)=>Object(e) === e && void 0 !== e.from && void 0 !== e.to
            ).map((t)=>({
                    from: e71(t.from),
                    to: e71(t.to)
                })
            ).filter((e)=>null !== e.from.dateHash && null !== e.to.dateHash && e.from.dateHash < e.to.dateHash
            );
        }), z = _vue.computed(()=>"persian" !== e70.calendar ? (e)=>new Date(e.year, e.month - 1, e.day)
             : (e)=>{
                const t = toGregorian(e.year, e.month, e.day);
                return new Date(t.gy, t.gm - 1, t.gd);
            }
        ), F = _vue.computed(()=>"persian" === e70.calendar ? getDayHash : (e, t, o)=>formatDate(new Date(e.year, e.month - 1, e.day, e.hour, e.minute, e.second, e.millisecond), void 0 === t ? f.value : t, void 0 === o ? g.value : o, e.year, e.timezoneOffset)
        ), R = _vue.computed(()=>O.value.length + L.value.reduce((e, t)=>e + 1 + getDateDiff(z.value(t.to), z.value(t.from))
            , 0)
        ), D = _vue.computed(()=>{
            if (void 0 !== e70.title && null !== e70.title && e70.title.length > 0) return e70.title;
            if (null !== P.value) {
                const e = P.value.init, t = z.value(e);
                return g.value.daysShort[t.getDay()] + ", " + g.value.monthsShort[e.month - 1] + " " + e.day + lineStr + "?";
            }
            if (0 === R.value) return lineStr;
            if (R.value > 1) return `${R.value} ${g.value.pluralDay}`;
            const t = O.value[0], o = z.value(t);
            return !0 === isNaN(o.valueOf()) ? lineStr : void 0 !== g.value.headerTitle ? g.value.headerTitle(o, t) : g.value.daysShort[o.getDay()] + ", " + g.value.monthsShort[t.month - 1] + " " + t.day;
        }), A = _vue.computed(()=>{
            const e72 = O.value.concat(L.value.map((e)=>e.from
            )).sort((e, t)=>e.year - t.year || e.month - t.month
            );
            return e72[0];
        }), V = _vue.computed(()=>{
            const e73 = O.value.concat(L.value.map((e)=>e.to
            )).sort((e, t)=>t.year - e.year || t.month - e.month
            );
            return e73[0];
        }), I = _vue.computed(()=>{
            if (void 0 !== e70.subtitle && null !== e70.subtitle && e70.subtitle.length > 0) return e70.subtitle;
            if (0 === R.value) return lineStr;
            if (R.value > 1) {
                const e = A.value, t = V.value, o = g.value.monthsShort;
                return o[e.month - 1] + (e.year !== t.year ? " " + e.year + lineStr + o[t.month - 1] + " " : e.month !== t.month ? lineStr + o[t.month - 1] : "") + " " + t.year;
            }
            return O.value[0].year;
        }), H = _vue.computed(()=>{
            const e = [
                a12.iconSet.datetime.arrowLeft,
                a12.iconSet.datetime.arrowRight
            ];
            return !0 === a12.lang.rtl ? e.reverse() : e;
        }), N = _vue.computed(()=>void 0 !== e70.firstDayOfWeek ? Number(e70.firstDayOfWeek) : g.value.firstDayOfWeek
        ), j = _vue.computed(()=>{
            const e = g.value.daysShort, t = N.value;
            return t > 0 ? e.slice(t, 7).concat(e.slice(0, t)) : e;
        }), U = _vue.computed(()=>{
            const t = w.value;
            return "persian" !== e70.calendar ? new Date(t.year, t.month, 0).getDate() : jalaaliMonthLength(t.year, t.month);
        }), K = _vue.computed(()=>"function" === typeof e70.eventColor ? e70.eventColor : ()=>e70.eventColor
        ), W = _vue.computed(()=>{
            if (void 0 === e70.navigationMinYearMonth) return null;
            const t = e70.navigationMinYearMonth.split("/");
            return {
                year: parseInt(t[0], 10),
                month: parseInt(t[1], 10)
            };
        }), Y = _vue.computed(()=>{
            if (void 0 === e70.navigationMaxYearMonth) return null;
            const t = e70.navigationMaxYearMonth.split("/");
            return {
                year: parseInt(t[0], 10),
                month: parseInt(t[1], 10)
            };
        }), G = _vue.computed(()=>{
            const e = {
                month: {
                    prev: !0,
                    next: !0
                },
                year: {
                    prev: !0,
                    next: !0
                }
            };
            return null !== W.value && W.value.year >= w.value.year && (e.year.prev = !1, W.value.year === w.value.year && W.value.month >= w.value.month && (e.month.prev = !1)), null !== Y.value && Y.value.year <= w.value.year && (e.year.next = !1, Y.value.year === w.value.year && Y.value.month <= w.value.month && (e.month.next = !1)), e;
        }), X = _vue.computed(()=>{
            const e = {
            };
            return O.value.forEach((t)=>{
                const o = getMonthHash(t);
                void 0 === e[o] && (e[o] = []), e[o].push(t.day);
            }), e;
        }), Z = _vue.computed(()=>{
            const e = {
            };
            return L.value.forEach((t)=>{
                const o = getMonthHash(t.from), n = getMonthHash(t.to);
                if (void 0 === e[o] && (e[o] = []), e[o].push({
                    from: t.from.day,
                    to: o === n ? t.to.day : void 0,
                    range: t
                }), o < n) {
                    let o;
                    const { year: a , month: l  } = t.from, i = l < 12 ? {
                        year: a,
                        month: l + 1
                    } : {
                        year: a + 1,
                        month: 1
                    };
                    while((o = getMonthHash(i)) <= n)void 0 === e[o] && (e[o] = []), e[o].push({
                        from: void 0,
                        to: o === n ? t.to.day : void 0,
                        range: t
                    }), i.month++, i.month > 12 && (i.year++, i.month = 1);
                }
            }), e;
        }), J = _vue.computed(()=>{
            if (null === P.value) return;
            const { init: e , initHash: t , final: o , finalHash: n  } = P.value, [a, l] = t <= n ? [
                e,
                o
            ] : [
                o,
                e
            ], i = getMonthHash(a), r = getMonthHash(l);
            if (i !== ee.value && r !== ee.value) return;
            const s = {
            };
            return i === ee.value ? (s.from = a.day, s.includeFrom = !0) : s.from = 1, r === ee.value ? (s.to = l.day, s.includeTo = !0) : s.to = U.value, s;
        }), ee = _vue.computed(()=>getMonthHash(w.value)
        ), te = _vue.computed(()=>{
            const t48 = {
            };
            if (void 0 === e70.options) {
                for(let e = 1; e <= U.value; e++)t48[e] = !0;
                return t48;
            }
            const o = "function" === typeof e70.options ? e70.options : (t)=>e70.options.includes(t)
            ;
            for(let e = 1; e <= U.value; e++){
                const n = ee.value + "/" + pad(e);
                t48[e] = o(n);
            }
            return t48;
        }), oe = _vue.computed(()=>{
            const t49 = {
            };
            if (void 0 === e70.events) for(let e = 1; e <= U.value; e++)t49[e] = !1;
            else {
                const o = "function" === typeof e70.events ? e70.events : (t)=>e70.events.includes(t)
                ;
                for(let e = 1; e <= U.value; e++){
                    const n = ee.value + "/" + pad(e);
                    t49[e] = !0 === o(n) && K.value(n);
                }
            }
            return t49;
        }), ne = _vue.computed(()=>{
            let t, o;
            const { year: n , month: a  } = w.value;
            if ("persian" !== e70.calendar) t = new Date(n, a - 1, 1), o = new Date(n, a - 1, 0).getDate();
            else {
                const e = toGregorian(n, a, 1);
                t = new Date(e.gy, e.gm - 1, e.gd);
                let l = a - 1, i = n;
                0 === l && (l = 12, i--), o = jalaaliMonthLength(i, l);
            }
            return {
                days: t.getDay() - N.value - 1,
                endDay: o
            };
        }), ae = _vue.computed(()=>{
            const e74 = [], { days: t50 , endDay: o28  } = ne.value, n24 = t50 < 0 ? t50 + 7 : t50;
            if (n24 < 6) for(let i = o28 - n24; i <= o28; i++)e74.push({
                i: i,
                fill: !0
            });
            const a = e74.length;
            for(let i7 = 1; i7 <= U.value; i7++){
                const t = {
                    i: i7,
                    event: oe.value[i7],
                    classes: []
                };
                !0 === te.value[i7] && (t.in = !0, t.flat = !0), e74.push(t);
            }
            if (void 0 !== X.value[ee.value] && X.value[ee.value].forEach((t)=>{
                const o = a + t - 1;
                Object.assign(e74[o], {
                    selected: !0,
                    unelevated: !0,
                    flat: !1,
                    color: M.value,
                    textColor: B.value
                });
            }), void 0 !== Z.value[ee.value] && Z.value[ee.value].forEach((t)=>{
                if (void 0 !== t.from) {
                    const o = a + t.from - 1, n = a + (t.to || U.value) - 1;
                    for(let a13 = o; a13 <= n; a13++)Object.assign(e74[a13], {
                        range: t.range,
                        unelevated: !0,
                        color: M.value,
                        textColor: B.value
                    });
                    Object.assign(e74[o], {
                        rangeFrom: !0,
                        flat: !1
                    }), void 0 !== t.to && Object.assign(e74[n], {
                        rangeTo: !0,
                        flat: !1
                    });
                } else if (void 0 !== t.to) {
                    const o = a + t.to - 1;
                    for(let n = a; n <= o; n++)Object.assign(e74[n], {
                        range: t.range,
                        unelevated: !0,
                        color: M.value,
                        textColor: B.value
                    });
                    Object.assign(e74[o], {
                        flat: !1,
                        rangeTo: !0
                    });
                } else {
                    const o = a + U.value - 1;
                    for(let n = a; n <= o; n++)Object.assign(e74[n], {
                        range: t.range,
                        unelevated: !0,
                        color: M.value,
                        textColor: B.value
                    });
                }
            }), void 0 !== J.value) {
                const t = a + J.value.from - 1, o = a + J.value.to - 1;
                for(let n = t; n <= o; n++)e74[n].color = M.value, e74[n].editRange = !0;
                !0 === J.value.includeFrom && (e74[t].editRangeFrom = !0), !0 === J.value.includeTo && (e74[o].editRangeTo = !0);
            }
            w.value.year === S.value.year && w.value.month === S.value.month && (e74[a + S.value.day - 1].today = !0);
            const l = e74.length % 7;
            if (l > 0) {
                const t = 7 - l;
                for(let o = 1; o <= t; o++)e74.push({
                    i: o,
                    fill: !0
                });
            }
            return e74.forEach((e)=>{
                let t = "q-date__calendar-item ";
                !0 === e.fill ? t += "q-date__calendar-item--fill" : (t += `q-date__calendar-item--${!0 === e.in ? "in" : "out"}`, void 0 !== e.range && (t += ` q-date__range${!0 === e.rangeTo ? "-to" : !0 === e.rangeFrom ? "-from" : ""}`), !0 === e.editRange && (t += ` q-date__edit-range${!0 === e.editRangeFrom ? "-from" : ""}${!0 === e.editRangeTo ? "-to" : ""}`), void 0 === e.range && !0 !== e.editRange || (t += ` text-${e.color}`)), e.classes = t;
            }), e74;
        }), le = _vue.computed(()=>!0 === e70.disable ? {
                "aria-disabled": "true"
            } : !0 === e70.readonly ? {
                "aria-readonly": "true"
            } : {
            }
        );
        function ie() {
            const e = S.value, t = X.value[getMonthHash(e)];
            void 0 !== t && !1 !== t.includes(e.day) || qe(e), ue(e.year, e.month);
        }
        function re(e) {
            !0 === viewIsValid(e) && (x.value = e);
        }
        function se(e, t) {
            if ([
                "month",
                "year"
            ].includes(e)) {
                const o = "month" === e ? fe : he;
                o(!0 === t ? -1 : 1);
            }
        }
        function ue(e, t) {
            x.value = "Calendar", we(e, t);
        }
        function ce(t, o) {
            if (!1 === e70.range || !t) return void (P.value = null);
            const n = Object.assign({
                ...w.value
            }, t), a = void 0 !== o ? Object.assign({
                ...w.value
            }, o) : n;
            P.value = {
                init: n,
                initHash: getDayHash(n),
                final: a,
                finalHash: getDayHash(a)
            }, ue(n.year, n.month);
        }
        function de() {
            return "persian" === e70.calendar ? "YYYY/MM/DD" : e70.mask;
        }
        function pe(t, o, n) {
            return __splitDate(t, o, n, e70.calendar, {
                hour: 0,
                minute: 0,
                second: 0,
                millisecond: 0
            });
        }
        function ve(t, o) {
            const n = !0 === Array.isArray(e70.modelValue) ? e70.modelValue : e70.modelValue ? [
                e70.modelValue
            ] : [];
            if (0 === n.length) return me();
            const a = n[n.length - 1], l = pe(void 0 !== a.from ? a.from : a, t, o);
            return null === l.dateHash ? me() : l;
        }
        function me() {
            let t, o;
            if (void 0 !== e70.defaultYearMonth) {
                const n = e70.defaultYearMonth.split("/");
                t = parseInt(n[0], 10), o = parseInt(n[1], 10);
            } else {
                const e = void 0 !== S.value ? S.value : c();
                t = e.year, o = e.month;
            }
            return {
                year: t,
                month: o,
                day: 1,
                hour: 0,
                minute: 0,
                second: 0,
                millisecond: 0,
                dateHash: t + "/" + pad(o) + "/01"
            };
        }
        function fe(e) {
            let t = w.value.year, o = Number(w.value.month) + e;
            13 === o ? (o = 1, t++) : 0 === o && (o = 12, t--), we(t, o), !0 === Q.value && Ce("month");
        }
        function he(e) {
            const t = Number(w.value.year) + e;
            we(t, w.value.month), !0 === Q.value && Ce("year");
        }
        function ge(t) {
            we(t, w.value.month), x.value = "Years" === e70.defaultView ? "Months" : "Calendar", !0 === Q.value && Ce("year");
        }
        function be(e) {
            we(w.value.year, e), x.value = "Calendar", !0 === Q.value && Ce("month");
        }
        function ye(e, t) {
            const o = X.value[t], n = void 0 !== o && !0 === o.includes(e.day) ? Te : qe;
            n(e);
        }
        function Se(e) {
            return {
                year: e.year,
                month: e.month,
                day: e.day
            };
        }
        function we(e, t) {
            null !== W.value && e <= W.value.year && (e = W.value.year, t < W.value.month && (t = W.value.month)), null !== Y.value && e >= Y.value.year && (e = Y.value.year, t > Y.value.month && (t = Y.value.month));
            const o = e + "/" + pad(t) + "/01";
            o !== w.value.dateHash && (k.value = w.value.dateHash < o === (!0 !== a12.lang.rtl) ? "left" : "right", e !== w.value.year && (_.value = k.value), _vue.nextTick(()=>{
                T.value = e - e % yearsInterval - (e < 0 ? yearsInterval : 0), Object.assign(w.value, {
                    year: e,
                    month: t,
                    day: 1,
                    dateHash: o
                });
            }));
        }
        function xe(t, n, a) {
            const l = null !== t && 1 === t.length && !1 === e70.multiple ? t[0] : t;
            d = l;
            const { reason: i , details: r  } = ke(n, a);
            o27("update:modelValue", l, i, r);
        }
        function Ce(t) {
            const n = void 0 !== O.value[0] && null !== O.value[0].dateHash ? {
                ...O.value[0]
            } : {
                ...w.value
            };
            _vue.nextTick(()=>{
                n.year = w.value.year, n.month = w.value.month;
                const a = "persian" !== e70.calendar ? new Date(n.year, n.month, 0).getDate() : jalaaliMonthLength(n.year, n.month);
                n.day = Math.min(Math.max(1, n.day), a);
                const l = _e(n);
                d = l;
                const { details: i  } = ke("", n);
                o27("update:modelValue", l, t, i);
            });
        }
        function ke(e, t) {
            return void 0 !== t.from ? {
                reason: `${e}-range`,
                details: {
                    ...Se(t.target),
                    from: Se(t.from),
                    to: Se(t.to)
                }
            } : {
                reason: `${e}-day`,
                details: Se(t)
            };
        }
        function _e(e, t, o) {
            return void 0 !== e.from ? {
                from: F.value(e.from, t, o),
                to: F.value(e.to, t, o)
            } : F.value(e, t, o);
        }
        function qe(t51) {
            let o29;
            if (!0 === e70.multiple) {
                if (void 0 !== t51.from) {
                    const e75 = getDayHash(t51.from), n = getDayHash(t51.to), a = O.value.filter((t)=>t.dateHash < e75 || t.dateHash > n
                    ), l = L.value.filter(({ from: t , to: o  })=>o.dateHash < e75 || t.dateHash > n
                    );
                    o29 = a.concat(l).concat(t51).map((e)=>_e(e)
                    );
                } else {
                    const e = E.value.slice();
                    e.push(_e(t51)), o29 = e;
                }
            } else o29 = _e(t51);
            xe(o29, "add", t51);
        }
        function Te(t) {
            if (!0 === e70.noUnset) return;
            let o = null;
            if (!0 === e70.multiple && !0 === Array.isArray(e70.modelValue)) {
                const n = _e(t);
                o = void 0 !== t.from ? e70.modelValue.filter((e)=>void 0 === e.from || e.from !== n.from && e.to !== n.to
                ) : e70.modelValue.filter((e)=>e !== n
                ), 0 === o.length && (o = null);
            }
            xe(o, "remove", t);
        }
        function Pe(t, n, a) {
            const l = O.value.concat(L.value).map((e)=>_e(e, t, n)
            ).filter((e)=>{
                return void 0 !== e.from ? null !== e.from.dateHash && null !== e.to.dateHash : null !== e.dateHash;
            });
            o27("update:modelValue", (!0 === e70.multiple ? l : l[0]) || null, a);
        }
        function $e() {
            if (!0 !== e70.minimal) return _vue.h("div", {
                class: "q-date__header " + s6.value
            }, [
                _vue.h("div", {
                    class: "relative-position"
                }, [
                    _vue.h(_vue.Transition, {
                        name: "q-transition--fade"
                    }, ()=>_vue.h("div", {
                            key: "h-yr-" + I.value,
                            class: "q-date__header-subtitle q-date__header-link " + ("Years" === x.value ? "q-date__header-link--active" : "cursor-pointer"),
                            tabindex: r4.value,
                            ...i6("vY", {
                                onClick () {
                                    x.value = "Years";
                                },
                                onKeyup (e) {
                                    13 === e.keyCode && (x.value = "Years");
                                }
                            })
                        }, [
                            I.value
                        ])
                    )
                ]),
                _vue.h("div", {
                    class: "q-date__header-title relative-position flex no-wrap"
                }, [
                    _vue.h("div", {
                        class: "relative-position col"
                    }, [
                        _vue.h(_vue.Transition, {
                            name: "q-transition--fade"
                        }, ()=>_vue.h("div", {
                                key: "h-sub" + D.value,
                                class: "q-date__header-title-label q-date__header-link " + ("Calendar" === x.value ? "q-date__header-link--active" : "cursor-pointer"),
                                tabindex: r4.value,
                                ...i6("vC", {
                                    onClick () {
                                        x.value = "Calendar";
                                    },
                                    onKeyup (e) {
                                        13 === e.keyCode && (x.value = "Calendar");
                                    }
                                })
                            }, [
                                D.value
                            ])
                        )
                    ]),
                    !0 === e70.todayBtn ? _vue.h(QBtn, {
                        class: "q-date__header-today self-start",
                        icon: a12.iconSet.datetime.today,
                        flat: !0,
                        size: "sm",
                        round: !0,
                        tabindex: r4.value,
                        onClick: ie
                    }) : null
                ])
            ]);
        }
        function Me({ label: e , type: t , key: o , dir: n , goTo: a , boundaries: l , cls: s  }) {
            return [
                _vue.h("div", {
                    class: "row items-center q-date__arrow"
                }, [
                    _vue.h(QBtn, {
                        round: !0,
                        dense: !0,
                        size: "sm",
                        flat: !0,
                        icon: H.value[0],
                        tabindex: r4.value,
                        disable: !1 === l.prev,
                        ...i6("go-#" + t, {
                            onClick () {
                                a(-1);
                            }
                        })
                    })
                ]),
                _vue.h("div", {
                    class: "relative-position overflow-hidden flex flex-center" + s
                }, [
                    _vue.h(_vue.Transition, {
                        name: "q-transition--jump-" + n
                    }, ()=>_vue.h("div", {
                            key: o
                        }, [
                            _vue.h(QBtn, {
                                flat: !0,
                                dense: !0,
                                noCaps: !0,
                                label: e,
                                tabindex: r4.value,
                                ...i6("view#" + t, {
                                    onClick: ()=>{
                                        x.value = t;
                                    }
                                })
                            })
                        ])
                    )
                ]),
                _vue.h("div", {
                    class: "row items-center q-date__arrow"
                }, [
                    _vue.h(QBtn, {
                        round: !0,
                        dense: !0,
                        size: "sm",
                        flat: !0,
                        icon: H.value[1],
                        tabindex: r4.value,
                        disable: !1 === l.next,
                        ...i6("go+#" + t, {
                            onClick () {
                                a(1);
                            }
                        })
                    })
                ])
            ];
        }
        _vue.watch(()=>e70.modelValue
        , (e)=>{
            if (d === e) d = 0;
            else {
                const { year: e , month: t  } = ve(f.value, g.value);
                we(e, t);
            }
        }), _vue.watch(x, ()=>{
            null !== m.value && m.value.focus();
        }), _vue.watch(()=>w.value.year
        , (e)=>{
            o27("navigation", {
                year: e,
                month: w.value.month
            });
        }), _vue.watch(()=>w.value.month
        , (e)=>{
            o27("navigation", {
                year: w.value.year,
                month: e
            });
        }), _vue.watch(b, (e)=>{
            Pe(e, g.value, "mask"), f.value = e;
        }), _vue.watch(y, (e)=>{
            Pe(f.value, e, "locale"), g.value = e;
        }), Object.assign(n23, {
            setToday: ie,
            setView: re,
            offsetCalendar: se,
            setCalendarTo: ue,
            setEditingRange: ce
        });
        const Be = {
            Calendar: ()=>[
                    _vue.h("div", {
                        key: "calendar-view",
                        class: "q-date__view q-date__calendar"
                    }, [
                        _vue.h("div", {
                            class: "q-date__navigation row items-center no-wrap"
                        }, Me({
                            label: g.value.months[w.value.month - 1],
                            type: "Months",
                            key: w.value.month,
                            dir: k.value,
                            goTo: fe,
                            boundaries: G.value.month,
                            cls: " col"
                        }).concat(Me({
                            label: w.value.year,
                            type: "Years",
                            key: w.value.year,
                            dir: _.value,
                            goTo: he,
                            boundaries: G.value.year,
                            cls: ""
                        }))),
                        _vue.h("div", {
                            class: "q-date__calendar-weekdays row items-center no-wrap"
                        }, j.value.map((e)=>_vue.h("div", {
                                class: "q-date__calendar-item"
                            }, [
                                _vue.h("div", e)
                            ])
                        )),
                        _vue.h("div", {
                            class: "q-date__calendar-days-container relative-position overflow-hidden"
                        }, [
                            _vue.h(_vue.Transition, {
                                name: "q-transition--slide-" + k.value
                            }, ()=>_vue.h("div", {
                                    key: ee.value,
                                    class: "q-date__calendar-days fit"
                                }, ae.value.map((e)=>_vue.h("div", {
                                        class: e.classes
                                    }, [
                                        !0 === e.in ? _vue.h(QBtn, {
                                            class: !0 === e.today ? "q-date__today" : "",
                                            dense: !0,
                                            flat: e.flat,
                                            unelevated: e.unelevated,
                                            color: e.color,
                                            textColor: e.textColor,
                                            label: e.i,
                                            tabindex: r4.value,
                                            ...i6("day#" + e.i, {
                                                onClick: ()=>{
                                                    Qe(e.i);
                                                },
                                                onMouseover: ()=>{
                                                    Ee(e.i);
                                                }
                                            })
                                        }, !1 !== e.event ? ()=>_vue.h("div", {
                                                class: "q-date__event bg-" + e.event
                                            })
                                         : null) : _vue.h("div", "" + e.i)
                                    ])
                                ))
                            )
                        ])
                    ])
                ]
            ,
            Months () {
                const t = w.value.year === S.value.year, o = (e)=>{
                    return null !== W.value && w.value.year === W.value.year && W.value.month > e || null !== Y.value && w.value.year === Y.value.year && Y.value.month < e;
                }, n25 = g.value.monthsShort.map((e, n)=>{
                    const a = w.value.month === n + 1;
                    return _vue.h("div", {
                        class: "q-date__months-item flex flex-center"
                    }, [
                        _vue.h(QBtn, {
                            class: !0 === t && S.value.month === n + 1 ? "q-date__today" : null,
                            flat: !0 !== a,
                            label: e,
                            unelevated: a,
                            color: !0 === a ? M.value : null,
                            textColor: !0 === a ? B.value : null,
                            tabindex: r4.value,
                            disable: o(n + 1),
                            ...i6("month#" + n, {
                                onClick: ()=>{
                                    be(n + 1);
                                }
                            })
                        })
                    ]);
                });
                return !0 === e70.yearsInMonthView && n25.unshift(_vue.h("div", {
                    class: "row no-wrap full-width"
                }, [
                    Me({
                        label: w.value.year,
                        type: "Years",
                        key: w.value.year,
                        dir: _.value,
                        goTo: he,
                        boundaries: G.value.year,
                        cls: " col"
                    })
                ])), _vue.h("div", {
                    key: "months-view",
                    class: "q-date__view q-date__months flex flex-center"
                }, n25);
            },
            Years () {
                const e76 = T.value, t = e76 + yearsInterval, o = [], n = (e)=>{
                    return null !== W.value && W.value.year > e || null !== Y.value && Y.value.year < e;
                };
                for(let a = e76; a <= t; a++){
                    const e = w.value.year === a;
                    o.push(_vue.h("div", {
                        class: "q-date__years-item flex flex-center"
                    }, [
                        _vue.h(QBtn, {
                            key: "yr" + a,
                            class: S.value.year === a ? "q-date__today" : null,
                            flat: !e,
                            label: a,
                            dense: !0,
                            unelevated: e,
                            color: !0 === e ? M.value : null,
                            textColor: !0 === e ? B.value : null,
                            tabindex: r4.value,
                            disable: n(a),
                            ...i6("yr#" + a, {
                                onClick: ()=>{
                                    ge(a);
                                }
                            })
                        })
                    ]));
                }
                return _vue.h("div", {
                    class: "q-date__view q-date__years flex flex-center"
                }, [
                    _vue.h("div", {
                        class: "col-auto"
                    }, [
                        _vue.h(QBtn, {
                            round: !0,
                            dense: !0,
                            flat: !0,
                            icon: H.value[0],
                            tabindex: r4.value,
                            disable: n(e76),
                            ...i6("y-", {
                                onClick: ()=>{
                                    T.value -= yearsInterval;
                                }
                            })
                        })
                    ]),
                    _vue.h("div", {
                        class: "q-date__years-content col self-stretch row items-center"
                    }, o),
                    _vue.h("div", {
                        class: "col-auto"
                    }, [
                        _vue.h(QBtn, {
                            round: !0,
                            dense: !0,
                            flat: !0,
                            icon: H.value[1],
                            tabindex: r4.value,
                            disable: n(t),
                            ...i6("y+", {
                                onClick: ()=>{
                                    T.value += yearsInterval;
                                }
                            })
                        })
                    ])
                ]);
            }
        };
        function Qe(t) {
            const n = {
                ...w.value,
                day: t
            };
            if (!1 !== e70.range) {
                if (null === P.value) {
                    const a = ae.value.find((e)=>!0 !== e.fill && e.i === t
                    );
                    if (!0 !== e70.noUnset && void 0 !== a.range) return void Te({
                        target: n,
                        from: a.range.from,
                        to: a.range.to
                    });
                    if (!0 === a.selected) return void Te(n);
                    const l = getDayHash(n);
                    P.value = {
                        init: n,
                        initHash: l,
                        final: n,
                        finalHash: l
                    }, o27("range-start", Se(n));
                } else {
                    const e = P.value.initHash, t = getDayHash(n), a = e <= t ? {
                        from: P.value.init,
                        to: n
                    } : {
                        from: n,
                        to: P.value.init
                    };
                    P.value = null, qe(e === t ? n : {
                        target: n,
                        ...a
                    }), o27("range-end", {
                        from: Se(a.from),
                        to: Se(a.to)
                    });
                }
            } else ye(n, ee.value);
        }
        function Ee(e) {
            if (null !== P.value) {
                const t = {
                    ...w.value,
                    day: e
                };
                Object.assign(P.value, {
                    final: t,
                    finalHash: getDayHash(t)
                });
            }
        }
        return ()=>{
            const o = [
                _vue.h("div", {
                    class: "q-date__content col relative-position"
                }, [
                    _vue.h(_vue.Transition, {
                        name: "q-transition--fade"
                    }, Be[x.value])
                ])
            ], n = hSlot(t47.default);
            return void 0 !== n && o.push(_vue.h("div", {
                class: "q-date__actions"
            }, n)), void 0 !== e70.name && !0 !== e70.disable && v(o, "push"), _vue.h("div", {
                class: $.value,
                ...le.value
            }, [
                $e(),
                _vue.h("div", {
                    ref: m,
                    class: "q-date__main col column",
                    tabindex: -1
                }, o)
            ]);
        };
    }
});
function useHistory(e, t, o) {
    let n;
    function a() {
        void 0 !== n && (History.remove(n), n = void 0);
    }
    return _vue.onBeforeUnmount(()=>{
        !0 === e.value && a();
    }), {
        removeFromHistory: a,
        addToHistory () {
            n = {
                condition: ()=>!0 === o.value
                ,
                handler: t
            }, History.add(n);
        }
    };
}
let scrollPositionX, scrollPositionY, maxScrollTop, bodyLeft, bodyTop, closeTimer, registered = 0, vpPendingUpdate = !1;
function onWheel(e) {
    shouldPreventScroll(e) && stopAndPrevent(e);
}
function shouldPreventScroll(e) {
    if (e.target === document.body || e.target.classList.contains("q-layout__backdrop")) return !0;
    const t = getEventPath(e), o = e.shiftKey && !e.deltaX, n = !o && Math.abs(e.deltaX) <= Math.abs(e.deltaY), a = o || n ? e.deltaY : e.deltaX;
    for(let l = 0; l < t.length; l++){
        const e = t[l];
        if (hasScrollbar(e, n)) return n ? a < 0 && 0 === e.scrollTop || a > 0 && e.scrollTop + e.clientHeight === e.scrollHeight : a < 0 && 0 === e.scrollLeft || a > 0 && e.scrollLeft + e.clientWidth === e.scrollWidth;
    }
    return !0;
}
function onAppleScroll(e) {
    e.target === document && (document.scrollingElement.scrollTop = document.scrollingElement.scrollTop);
}
function onAppleResize(e) {
    !0 !== vpPendingUpdate && (vpPendingUpdate = !0, requestAnimationFrame(()=>{
        vpPendingUpdate = !1;
        const { height: t  } = e.target, { clientHeight: o , scrollTop: n  } = document.scrollingElement;
        void 0 !== maxScrollTop && t === window.innerHeight || (maxScrollTop = o - t, document.scrollingElement.scrollTop = n), n > maxScrollTop && (document.scrollingElement.scrollTop -= Math.ceil((n - maxScrollTop) / 8));
    }));
}
function apply$1(e) {
    const t = document.body, o = void 0 !== window.visualViewport;
    if ("add" === e) {
        const { overflowY: e , overflowX: n  } = window.getComputedStyle(t);
        scrollPositionX = getHorizontalScrollPosition(window), scrollPositionY = getVerticalScrollPosition(window), bodyLeft = t.style.left, bodyTop = t.style.top, t.style.left = `-${scrollPositionX}px`, t.style.top = `-${scrollPositionY}px`, "hidden" !== n && ("scroll" === n || t.scrollWidth > window.innerWidth) && t.classList.add("q-body--force-scrollbar-x"), "hidden" !== e && ("scroll" === e || t.scrollHeight > window.innerHeight) && t.classList.add("q-body--force-scrollbar-y"), t.classList.add("q-body--prevent-scroll"), document.qScrollPrevented = !0, !0 === client.is.ios && (!0 === o ? (window.scrollTo(0, 0), window.visualViewport.addEventListener("resize", onAppleResize, listenOpts.passiveCapture), window.visualViewport.addEventListener("scroll", onAppleResize, listenOpts.passiveCapture), window.scrollTo(0, 0)) : window.addEventListener("scroll", onAppleScroll, listenOpts.passiveCapture));
    }
    !0 === client.is.desktop && !0 === client.is.mac && window[`${e}EventListener`]("wheel", onWheel, listenOpts.notPassive), "remove" === e && (!0 === client.is.ios && (!0 === o ? (window.visualViewport.removeEventListener("resize", onAppleResize, listenOpts.passiveCapture), window.visualViewport.removeEventListener("scroll", onAppleResize, listenOpts.passiveCapture)) : window.removeEventListener("scroll", onAppleScroll, listenOpts.passiveCapture)), t.classList.remove("q-body--prevent-scroll"), t.classList.remove("q-body--force-scrollbar-x"), t.classList.remove("q-body--force-scrollbar-y"), document.qScrollPrevented = !1, t.style.left = bodyLeft, t.style.top = bodyTop, window.scrollTo(scrollPositionX, scrollPositionY), maxScrollTop = void 0);
}
function preventScroll(e) {
    let t = "add";
    if (!0 === e) {
        if (registered++, void 0 !== closeTimer) return clearTimeout(closeTimer), void (closeTimer = void 0);
        if (registered > 1) return;
    } else {
        if (0 === registered) return;
        if (registered--, registered > 0) return;
        if (t = "remove", !0 === client.is.ios && !0 === client.is.nativeMobile) return clearTimeout(closeTimer), void (closeTimer = setTimeout(()=>{
            apply$1(t), closeTimer = void 0;
        }, 100));
    }
    apply$1(t);
}
function usePreventScroll() {
    let e;
    return {
        preventBodyScroll (t) {
            t === e || void 0 === e && !0 !== t || (e = t, preventScroll(t));
        }
    };
}
let maximizedModals = 0;
const positionClass$1 = {
    standard: "fixed-full flex-center",
    top: "fixed-top justify-center",
    bottom: "fixed-bottom justify-center",
    right: "fixed-right items-center",
    left: "fixed-left items-center"
}, transitions = {
    standard: [
        "scale",
        "scale"
    ],
    top: [
        "slide-down",
        "slide-up"
    ],
    bottom: [
        "slide-up",
        "slide-down"
    ],
    right: [
        "slide-left",
        "slide-right"
    ],
    left: [
        "slide-right",
        "slide-left"
    ]
};
var QDialog = createComponent({
    name: "QDialog",
    inheritAttrs: !1,
    props: {
        ...useModelToggleProps,
        ...useTransitionProps,
        transitionShow: String,
        transitionHide: String,
        persistent: Boolean,
        autoClose: Boolean,
        noEscDismiss: Boolean,
        noBackdropDismiss: Boolean,
        noRouteDismiss: Boolean,
        noRefocus: Boolean,
        noFocus: Boolean,
        noShake: Boolean,
        seamless: Boolean,
        maximized: Boolean,
        fullWidth: Boolean,
        fullHeight: Boolean,
        square: Boolean,
        position: {
            type: String,
            default: "standard",
            validator: (e)=>"standard" === e || [
                    "top",
                    "bottom",
                    "left",
                    "right"
                ].includes(e)
        }
    },
    emits: [
        ...useModelToggleEmits,
        "shake",
        "click",
        "escape-key"
    ],
    setup (e77, { slots: t52 , emit: o30 , attrs: n26  }) {
        const a = _vue.getCurrentInstance(), l = _vue.ref(null), i = _vue.ref(!1), r = _vue.ref(!1), s = _vue.ref(!1);
        let u, c, d, p = null;
        const v = _vue.computed(()=>!0 !== e77.persistent && !0 !== e77.noRouteDismiss && !0 !== e77.seamless
        ), { preventBodyScroll: m  } = usePreventScroll(), { registerTimeout: f , removeTimeout: g  } = useTimeout(), { registerTick: b , removeTick: y , prepareTick: S  } = useTick(), { showPortal: w , hidePortal: x , portalIsActive: C , renderPortal: k  } = usePortal(a, l, U, !0), { hide: _  } = useModelToggle({
            showing: i,
            hideOnRouteChange: v,
            handleShow: z,
            handleHide: F,
            processOnMount: !0
        }), { addToHistory: q , removeFromHistory: T  } = useHistory(i, _, v), P = _vue.computed(()=>"q-dialog__inner flex no-pointer-events" + ` q-dialog__inner--${!0 === e77.maximized ? "maximized" : "minimized"}` + ` q-dialog__inner--${e77.position} ${positionClass$1[e77.position]}` + (!0 === s.value ? " q-dialog__inner--animating" : "") + (!0 === e77.fullWidth ? " q-dialog__inner--fullwidth" : "") + (!0 === e77.fullHeight ? " q-dialog__inner--fullheight" : "") + (!0 === e77.square ? " q-dialog__inner--square" : "")
        ), $ = _vue.computed(()=>"q-transition--" + (void 0 === e77.transitionShow ? transitions[e77.position][0] : e77.transitionShow)
        ), M = _vue.computed(()=>"q-transition--" + (void 0 === e77.transitionHide ? transitions[e77.position][1] : e77.transitionHide)
        ), B = _vue.computed(()=>!0 === r.value ? M.value : $.value
        ), Q = _vue.computed(()=>`--q-transition-duration: ${e77.transitionDuration}ms`
        ), E = _vue.computed(()=>!0 === i.value && !0 !== e77.seamless
        ), O = _vue.computed(()=>!0 === e77.autoClose ? {
                onClick: H
            } : {
            }
        ), L = _vue.computed(()=>[
                "q-dialog fullscreen no-pointer-events " + `q-dialog--${!0 === E.value ? "modal" : "seamless"}`,
                n26.class
            ]
        );
        function z(t53) {
            g(), y(), q(), p = !1 === e77.noRefocus && null !== document.activeElement ? document.activeElement : null, I(e77.maximized), w(), s.value = !0, !0 !== e77.noFocus && (null !== document.activeElement && document.activeElement.blur(), b(R), S()), f(()=>{
                if (!0 === a.proxy.$q.platform.is.ios) {
                    if (!0 !== e77.seamless && document.activeElement) {
                        const { top: e , bottom: t  } = document.activeElement.getBoundingClientRect(), { innerHeight: o  } = window, n = void 0 !== window.visualViewport ? window.visualViewport.height : o;
                        e > 0 && t > n / 2 && (document.scrollingElement.scrollTop = Math.min(document.scrollingElement.scrollHeight - n, t >= o ? 1 / 0 : Math.ceil(document.scrollingElement.scrollTop + t - n / 2))), document.activeElement.scrollIntoView();
                    }
                    d = !0, l.value.click(), d = !1;
                }
                w(!0), s.value = !1, o30("show", t53);
            }, e77.transitionDuration);
        }
        function F(t) {
            g(), y(), T(), V(!0), s.value = !0, null !== p && p.focus(), f(()=>{
                x(), s.value = !1, o30("hide", t);
            }, e77.transitionDuration);
        }
        function R() {
            addFocusFn(()=>{
                let e = l.value;
                null !== e && !0 !== e.contains(document.activeElement) && (e = e.querySelector("[autofocus], [data-autofocus]") || e, e.focus());
            });
        }
        function D() {
            R(), o30("shake");
            const e = l.value;
            null !== e && (e.classList.remove("q-animate--scale"), e.classList.add("q-animate--scale"), clearTimeout(u), u = setTimeout(()=>{
                null !== l.value && (e.classList.remove("q-animate--scale"), R());
            }, 170));
        }
        function A() {
            !0 !== e77.seamless && (!0 === e77.persistent || !0 === e77.noEscDismiss ? !0 !== e77.maximized && !0 !== e77.noShake && D() : (o30("escape-key"), _()));
        }
        function V(t) {
            clearTimeout(u), !0 !== t && !0 !== i.value || (I(!1), !0 !== e77.seamless && (m(!1), removeFocusout(j), removeEscapeKey(A)));
        }
        function I(e) {
            !0 === e ? !0 !== c && (maximizedModals < 1 && document.body.classList.add("q-body--dialog"), maximizedModals++, c = !0) : !0 === c && (maximizedModals < 2 && document.body.classList.remove("q-body--dialog"), maximizedModals--, c = !1);
        }
        function H(e) {
            !0 !== d && (_(e), o30("click", e));
        }
        function N(t) {
            !0 !== e77.persistent && !0 !== e77.noBackdropDismiss ? _(t) : !0 !== e77.noShake && D();
        }
        function j(e) {
            !0 === i.value && !0 === C.value && !0 !== childHasFocus(l.value, e.target) && R();
        }
        function U() {
            return _vue.h("div", {
                ...n26,
                class: L.value
            }, [
                _vue.h(_vue.Transition, {
                    name: "q-transition--fade",
                    appear: !0
                }, ()=>!0 === E.value ? _vue.h("div", {
                        class: "q-dialog__backdrop fixed-full",
                        style: Q.value,
                        "aria-hidden": "true",
                        onMousedown: N
                    }) : null
                ),
                _vue.h(_vue.Transition, {
                    name: B.value,
                    appear: !0
                }, ()=>!0 === i.value ? _vue.h("div", {
                        ref: l,
                        class: P.value,
                        style: Q.value,
                        tabindex: -1,
                        ...O.value
                    }, hSlot(t52.default)) : null
                )
            ]);
        }
        return _vue.watch(i, (e)=>{
            _vue.nextTick(()=>{
                r.value = e;
            });
        }), _vue.watch(()=>e77.maximized
        , (e)=>{
            !0 === i.value && I(e);
        }), _vue.watch(E, (e)=>{
            m(e), !0 === e ? (addFocusout(j), addEscapeKey(A)) : (removeFocusout(j), removeEscapeKey(A));
        }), Object.assign(a.proxy, {
            focus: R,
            shake: D,
            __updateRefocusTarget (e) {
                p = e || null;
            }
        }), _vue.onBeforeUnmount(()=>{
            V();
        }), k;
    }
});
const duration = 150;
var QDrawer = createComponent({
    name: "QDrawer",
    inheritAttrs: !1,
    props: {
        ...useModelToggleProps,
        ...useDarkProps,
        side: {
            type: String,
            default: "left",
            validator: (e)=>[
                    "left",
                    "right"
                ].includes(e)
        },
        width: {
            type: Number,
            default: 300
        },
        mini: Boolean,
        miniToOverlay: Boolean,
        miniWidth: {
            type: Number,
            default: 57
        },
        breakpoint: {
            type: Number,
            default: 1023
        },
        showIfAbove: Boolean,
        behavior: {
            type: String,
            validator: (e)=>[
                    "default",
                    "desktop",
                    "mobile"
                ].includes(e)
            ,
            default: "default"
        },
        bordered: Boolean,
        elevated: Boolean,
        overlay: Boolean,
        persistent: Boolean,
        noSwipeOpen: Boolean,
        noSwipeClose: Boolean,
        noSwipeBackdrop: Boolean
    },
    emits: [
        ...useModelToggleEmits,
        "on-layout",
        "mini-state"
    ],
    setup (e78, { slots: t54 , emit: o31 , attrs: n27  }) {
        const a14 = _vue.getCurrentInstance(), { proxy: { $q: l12  }  } = a14, i = useDark(e78, l12), { preventBodyScroll: r  } = usePreventScroll(), { registerTimeout: s  } = useTimeout(), u = _vue.inject(layoutKey, ()=>{
            console.error("QDrawer needs to be child of QLayout");
        });
        let c, d, p;
        const v = _vue.ref("mobile" === e78.behavior || "desktop" !== e78.behavior && u.totalWidth.value <= e78.breakpoint), m = _vue.computed(()=>!0 === e78.mini && !0 !== v.value
        ), f = _vue.computed(()=>!0 === m.value ? e78.miniWidth : e78.width
        ), g = _vue.ref(!0 === e78.showIfAbove && !1 === v.value || !0 === e78.modelValue), b = _vue.computed(()=>!0 !== e78.persistent && (!0 === v.value || !0 === z.value)
        );
        function y(e, t) {
            if (C(), !1 !== e && u.animate(), W(0), !0 === v.value) {
                const e = u.instances[Q.value];
                void 0 !== e && !0 === e.belowBreakpoint && e.hide(!1), G(1), !0 !== u.isContainer.value && r(!0);
            } else G(0), !1 !== e && X(!1);
            s(()=>{
                !1 !== e && X(!0), !0 !== t && o31("show", e);
            }, duration);
        }
        function S(e, t) {
            k(), !1 !== e && u.animate(), G(0), W(T.value * f.value), te(), !0 !== t && s(()=>{
                o31("hide", e);
            }, duration);
        }
        const { show: w , hide: x  } = useModelToggle({
            showing: g,
            hideOnRouteChange: b,
            handleShow: y,
            handleHide: S
        }), { addToHistory: C , removeFromHistory: k  } = useHistory(g, x, b), _ = {
            belowBreakpoint: v,
            hide: x
        }, q = _vue.computed(()=>"right" === e78.side
        ), T = _vue.computed(()=>(!0 === l12.lang.rtl ? -1 : 1) * (!0 === q.value ? 1 : -1)
        ), P = _vue.ref(0), $ = _vue.ref(!1), M = _vue.ref(!1), B = _vue.ref(f.value * T.value), Q = _vue.computed(()=>!0 === q.value ? "left" : "right"
        ), E = _vue.computed(()=>!0 === g.value && !1 === v.value && !1 === e78.overlay ? !0 === e78.miniToOverlay ? e78.miniWidth : f.value : 0
        ), O = _vue.computed(()=>!0 === e78.overlay || !0 === e78.miniToOverlay || u.view.value.indexOf(q.value ? "R" : "L") > -1 || !0 === l12.platform.is.ios && !0 === u.isContainer.value
        ), L = _vue.computed(()=>!1 === e78.overlay && !0 === g.value && !1 === v.value
        ), z = _vue.computed(()=>!0 === e78.overlay && !0 === g.value && !1 === v.value
        ), F = _vue.computed(()=>"fullscreen q-drawer__backdrop" + (!1 === g.value && !1 === $.value ? " hidden" : "")
        ), R = _vue.computed(()=>({
                backgroundColor: `rgba(0,0,0,${0.4 * P.value})`
            })
        ), D = _vue.computed(()=>!0 === q.value ? "r" === u.rows.value.top[2] : "l" === u.rows.value.top[0]
        ), A = _vue.computed(()=>!0 === q.value ? "r" === u.rows.value.bottom[2] : "l" === u.rows.value.bottom[0]
        ), V = _vue.computed(()=>{
            const e = {
            };
            return !0 === u.header.space && !1 === D.value && (!0 === O.value ? e.top = `${u.header.offset}px` : !0 === u.header.space && (e.top = `${u.header.size}px`)), !0 === u.footer.space && !1 === A.value && (!0 === O.value ? e.bottom = `${u.footer.offset}px` : !0 === u.footer.space && (e.bottom = `${u.footer.size}px`)), e;
        }), I = _vue.computed(()=>{
            const e = {
                width: `${f.value}px`,
                transform: `translateX(${B.value}px)`
            };
            return !0 === v.value ? e : Object.assign(e, V.value);
        }), H = _vue.computed(()=>"q-drawer__content fit " + (!0 !== u.isContainer.value ? "scroll" : "overflow-auto")
        ), N = _vue.computed(()=>`q-drawer q-drawer--${e78.side}` + (!0 === M.value ? " q-drawer--mini-animate" : "") + (!0 === e78.bordered ? " q-drawer--bordered" : "") + (!0 === i.value ? " q-drawer--dark q-dark" : "") + (!0 === $.value ? " no-transition" : !0 === g.value ? "" : " q-layout--prevent-focus") + (!0 === v.value ? " fixed q-drawer--on-top q-drawer--mobile q-drawer--top-padding" : ` q-drawer--${!0 === m.value ? "mini" : "standard"}` + (!0 === O.value || !0 !== L.value ? " fixed" : "") + (!0 === e78.overlay || !0 === e78.miniToOverlay ? " q-drawer--on-top" : "") + (!0 === D.value ? " q-drawer--top-padding" : ""))
        ), j = _vue.computed(()=>{
            const t = !0 === l12.lang.rtl ? e78.side : Q.value;
            return [
                [
                    TouchPan,
                    J,
                    void 0,
                    {
                        [t]: !0,
                        mouse: !0
                    }
                ]
            ];
        }), U = _vue.computed(()=>{
            const t = !0 === l12.lang.rtl ? Q.value : e78.side;
            return [
                [
                    TouchPan,
                    ee,
                    void 0,
                    {
                        [t]: !0,
                        mouse: !0
                    }
                ]
            ];
        }), K = _vue.computed(()=>{
            const t = !0 === l12.lang.rtl ? Q.value : e78.side;
            return [
                [
                    TouchPan,
                    ee,
                    void 0,
                    {
                        [t]: !0,
                        mouse: !0,
                        mouseAllDir: !0
                    }
                ]
            ];
        });
        function W(e) {
            void 0 === e ? _vue.nextTick(()=>{
                e = !0 === g.value ? 0 : f.value, W(T.value * e);
            }) : (!0 !== u.isContainer.value || !0 !== q.value || !0 !== v.value && Math.abs(e) !== f.value || (e += T.value * u.scrollbarWidth.value), B.value = e);
        }
        function Y() {
            ne(v, "mobile" === e78.behavior || "desktop" !== e78.behavior && u.totalWidth.value <= e78.breakpoint);
        }
        function G(e) {
            P.value = e;
        }
        function X(e) {
            const t = !0 === e ? "remove" : !0 !== u.isContainer.value ? "add" : "";
            "" !== t && document.body.classList[t]("q-body--drawer-toggle");
        }
        function Z() {
            clearTimeout(d), a14.proxy && a14.proxy.$el && a14.proxy.$el.classList.add("q-drawer--mini-animate"), M.value = !0, d = setTimeout(()=>{
                M.value = !1, a14 && a14.proxy && a14.proxy.$el && a14.proxy.$el.classList.remove("q-drawer--mini-animate");
            }, 150);
        }
        function J(e) {
            if (!1 !== g.value) return;
            const t = f.value, o = between(e.distance.x, 0, t);
            if (!0 === e.isFinal) {
                const e = o >= Math.min(75, t);
                return !0 === e ? w() : (u.animate(), G(0), W(T.value * t)), void ($.value = !1);
            }
            W((!0 === l12.lang.rtl ? !0 !== q.value : q.value) ? Math.max(t - o, 0) : Math.min(0, o - t)), G(between(o / t, 0, 1)), !0 === e.isFirst && ($.value = !0);
        }
        function ee(t) {
            if (!0 !== g.value) return;
            const o = f.value, n = t.direction === e78.side, a = (!0 === l12.lang.rtl ? !0 !== n : n) ? between(t.distance.x, 0, o) : 0;
            if (!0 === t.isFinal) {
                const e = Math.abs(a) < Math.min(75, o);
                return !0 === e ? (u.animate(), G(1), W(0)) : x(), void ($.value = !1);
            }
            W(T.value * a), G(between(1 - a / o, 0, 1)), !0 === t.isFirst && ($.value = !0);
        }
        function te() {
            r(!1), X(!0);
        }
        function oe(t, o) {
            u.update(e78.side, t, o);
        }
        function ne(e, t) {
            e.value !== t && (e.value = t);
        }
        function ae(t, o) {
            oe("size", !0 === t ? e78.miniWidth : o);
        }
        return _vue.watch(v, (t)=>{
            !0 === t ? (c = g.value, !0 === g.value && x(!1)) : !1 === e78.overlay && "mobile" !== e78.behavior && !1 !== c && (!0 === g.value ? (W(0), G(0), te()) : w(!1));
        }), _vue.watch(u.totalWidth, (t)=>{
            ne(v, "mobile" === e78.behavior || "desktop" !== e78.behavior && t <= e78.breakpoint);
        }), _vue.watch(()=>e78.side
        , (e, t)=>{
            u.instances[t] === _ && (u.instances[t] = void 0, u[t].space = !1, u[t].offset = 0), u.instances[e] = _, u[e].size = f.value, u[e].space = L.value, u[e].offset = E.value;
        }), _vue.watch(()=>e78.behavior + e78.breakpoint
        , Y), _vue.watch(u.isContainer, (e)=>{
            !0 === g.value && r(!0 !== e);
        }), _vue.watch(u.scrollbarWidth, ()=>{
            W(!0 === g.value ? 0 : void 0);
        }), _vue.watch(E, (e)=>{
            oe("offset", e);
        }), _vue.watch(L, (e)=>{
            o31("on-layout", e), oe("space", e);
        }), _vue.watch(q, ()=>{
            W();
        }), _vue.watch(f, (t)=>{
            W(), ae(e78.miniToOverlay, t);
        }), _vue.watch(()=>e78.miniToOverlay
        , (e)=>{
            ae(e, f.value);
        }), _vue.watch(()=>l12.lang.rtl
        , ()=>{
            W();
        }), _vue.watch(()=>e78.mini
        , ()=>{
            !0 === e78.modelValue && (Z(), u.animate());
        }), _vue.watch(m, (e)=>{
            o31("mini-state", e);
        }), u.instances[e78.side] = _, ae(e78.miniToOverlay, f.value), oe("space", L.value), oe("offset", E.value), !0 === e78.showIfAbove && !0 !== e78.modelValue && !0 === g.value && void 0 !== e78["onUpdate:modelValue"] && o31("update:modelValue", !0), _vue.onMounted(()=>{
            o31("on-layout", L.value), o31("mini-state", m.value), c = !0 === e78.showIfAbove;
            const t = ()=>{
                const e = !0 === g.value ? y : S;
                e(!1, !0);
            };
            0 === u.totalWidth.value ? p = _vue.watch(u.totalWidth, ()=>{
                p(), p = void 0, !1 === g.value && !0 === e78.showIfAbove && !1 === v.value ? w(!1) : t();
            }) : _vue.nextTick(t);
        }), _vue.onBeforeUnmount(()=>{
            void 0 !== p && p(), clearTimeout(d), !0 === g.value && te(), u.instances[e78.side] === _ && (u.instances[e78.side] = void 0, oe("size", 0), oe("offset", 0), oe("space", !1));
        }), ()=>{
            const o = [];
            !0 === v.value && (!1 === e78.noSwipeOpen && o.push(_vue.withDirectives(_vue.h("div", {
                key: "open",
                class: `q-drawer__opener fixed-${e78.side}`,
                "aria-hidden": "true"
            }), j.value)), o.push(hDir("div", {
                ref: "backdrop",
                class: F.value,
                style: R.value,
                "aria-hidden": "true",
                onClick: x
            }, void 0, "backdrop", !0 !== e78.noSwipeBackdrop && !0 === g.value, ()=>K.value
            )));
            const a = !0 === m.value && void 0 !== t54.mini, l = [
                _vue.h("div", {
                    ...n27,
                    key: "" + a,
                    class: [
                        H.value,
                        n27.class
                    ]
                }, !0 === a ? t54.mini() : hSlot(t54.default))
            ];
            return !0 === e78.elevated && !0 === g.value && l.push(_vue.h("div", {
                class: "q-layout__shadow absolute-full overflow-hidden no-pointer-events"
            })), o.push(hDir("aside", {
                ref: "content",
                class: N.value,
                style: I.value
            }, l, "contentclose", !0 !== e78.noSwipeClose && !0 === v.value, ()=>U.value
            )), _vue.h("div", {
                class: "q-drawer-container"
            }, o);
        };
    }
});
function getBlockElement(e, t) {
    if (t && e === t) return null;
    const o = e.nodeName.toLowerCase();
    if (!0 === [
        "div",
        "li",
        "ul",
        "ol",
        "blockquote"
    ].includes(o)) return e;
    const n = window.getComputedStyle ? window.getComputedStyle(e) : e.currentStyle, a = n.display;
    return "block" === a || "table" === a ? e : getBlockElement(e.parentNode);
}
function isChildOf(e, t, o) {
    return !(!e || e === document.body) && (!0 === o && e === t || (t === document ? document.body : t).contains(e.parentNode));
}
function createRange(e, t, o) {
    if (o || (o = document.createRange(), o.selectNode(e), o.setStart(e, 0)), 0 === t.count) o.setEnd(e, t.count);
    else if (t.count > 0) {
        if (e.nodeType === Node.TEXT_NODE) e.textContent.length < t.count ? t.count -= e.textContent.length : (o.setEnd(e, t.count), t.count = 0);
        else for(let n = 0; 0 !== t.count && n < e.childNodes.length; n++)o = createRange(e.childNodes[n], t, o);
    }
    return o;
}
const urlRegex = /^https?:\/\//;
class Caret {
    constructor(e89, t59){
        this.el = e89, this.eVm = t59, this._range = null;
    }
    get selection() {
        if (this.el) {
            const e = document.getSelection();
            if (isChildOf(e.anchorNode, this.el, !0) && isChildOf(e.focusNode, this.el, !0)) return e;
        }
        return null;
    }
    get hasSelection() {
        return null !== this.selection && this.selection.toString().length > 0;
    }
    get range() {
        const e = this.selection;
        return null !== e && e.rangeCount ? e.getRangeAt(0) : this._range;
    }
    get parent() {
        const e = this.range;
        if (null !== e) {
            const t = e.startContainer;
            return t.nodeType === document.ELEMENT_NODE ? t : t.parentNode;
        }
        return null;
    }
    get blockParent() {
        const e = this.parent;
        return null !== e ? getBlockElement(e, this.el) : null;
    }
    save(e79 = this.range) {
        null !== e79 && (this._range = e79);
    }
    restore(e80 = this._range) {
        const t = document.createRange(), o = document.getSelection();
        null !== e80 ? (t.setStart(e80.startContainer, e80.startOffset), t.setEnd(e80.endContainer, e80.endOffset), o.removeAllRanges(), o.addRange(t)) : (o.selectAllChildren(this.el), o.collapseToEnd());
    }
    savePosition() {
        let e, t = -1;
        const o = document.getSelection(), n = this.el.parentNode;
        if (o.focusNode && isChildOf(o.focusNode, n)) {
            e = o.focusNode, t = o.focusOffset;
            while(e && e !== n)e !== this.el && e.previousSibling ? (e = e.previousSibling, t += e.textContent.length) : e = e.parentNode;
        }
        this.savedPos = t;
    }
    restorePosition(e81 = 0) {
        if (this.savedPos > 0 && this.savedPos < e81) {
            const e = window.getSelection(), t = createRange(this.el, {
                count: this.savedPos
            });
            t && (t.collapse(!1), e.removeAllRanges(), e.addRange(t));
        }
    }
    hasParent(e82, t55) {
        const o = t55 ? this.parent : this.blockParent;
        return null !== o && o.nodeName.toLowerCase() === e82.toLowerCase();
    }
    hasParents(e83, t56, o33 = this.parent) {
        return null !== o33 && (null !== o33 && !0 === e83.includes(o33.nodeName.toLowerCase()) || !0 === t56 && this.hasParents(e83, t56, o33.parentNode));
    }
    is(e84, t57) {
        if (null === this.selection) return !1;
        switch(e84){
            case "formatBlock":
                return "DIV" === t57 && this.parent === this.el || this.hasParent(t57, "PRE" === t57);
            case "link":
                return this.hasParent("A", !0);
            case "fontSize":
                return document.queryCommandValue(e84) === t57;
            case "fontName":
                const o = document.queryCommandValue(e84);
                return o === `"${t57}"` || o === t57;
            case "fullscreen":
                return this.eVm.inFullscreen.value;
            case "viewsource":
                return this.eVm.isViewingSource.value;
            case void 0:
                return !1;
            default:
                const n = document.queryCommandState(e84);
                return void 0 !== t57 ? n === t57 : n;
        }
    }
    getParentAttribute(e85) {
        return null !== this.parent ? this.parent.getAttribute(e85) : null;
    }
    can(e86) {
        return "outdent" === e86 ? this.hasParents([
            "blockquote",
            "li"
        ], !0) : "indent" === e86 ? this.hasParents([
            "li"
        ], !0) : "link" === e86 ? null !== this.selection || this.is("link") : void 0;
    }
    apply(e87, t58, o32 = noop) {
        if ("formatBlock" === e87) [
            "BLOCKQUOTE",
            "H1",
            "H2",
            "H3",
            "H4",
            "H5",
            "H6"
        ].includes(t58) && this.is(e87, t58) && (e87 = "outdent", t58 = null), "PRE" === t58 && this.is(e87, "PRE") && (t58 = "P");
        else {
            if ("print" === e87) {
                o32();
                const e = window.open();
                return e.document.write(`\n        <!doctype html>\n        <html>\n          <head>\n            <title>Print - ${document.title}</title>\n          </head>\n          <body>\n            <div>${this.el.innerHTML}</div>\n          </body>\n        </html>\n      `), e.print(), void e.close();
            }
            if ("link" === e87) {
                const e = this.getParentAttribute("href");
                if (null === e) {
                    const e = this.selectWord(this.selection), t = e ? e.toString() : "";
                    if (!t.length && (!this.range || !this.range.cloneContents().querySelector("img"))) return;
                    this.eVm.editLinkUrl.value = urlRegex.test(t) ? t : "https://", document.execCommand("createLink", !1, this.eVm.editLinkUrl.value), this.save(e.getRangeAt(0));
                } else this.eVm.editLinkUrl.value = e, this.range.selectNodeContents(this.parent), this.save();
                return;
            }
            if ("fullscreen" === e87) return this.eVm.toggleFullscreen(), void o32();
            if ("viewsource" === e87) return this.eVm.isViewingSource.value = !1 === this.eVm.isViewingSource.value, this.eVm.setContent(this.eVm.props.modelValue), void o32();
        }
        document.execCommand(e87, !1, t58), o32();
    }
    selectWord(e88) {
        if (null === e88 || !0 !== e88.isCollapsed || void 0 === e88.modify) return e88;
        const t = document.createRange();
        t.setStart(e88.anchorNode, e88.anchorOffset), t.setEnd(e88.focusNode, e88.focusOffset);
        const o = t.collapsed ? [
            "backward",
            "forward"
        ] : [
            "forward",
            "backward"
        ];
        t.detach();
        const n = e88.focusNode, a = e88.focusOffset;
        return e88.collapse(e88.anchorNode, e88.anchorOffset), e88.modify("move", o[0], "character"), e88.modify("move", o[1], "word"), e88.extend(n, a), e88.modify("extend", o[1], "character"), e88.modify("extend", o[0], "word"), e88;
    }
}
var QTooltip = createComponent({
    name: "QTooltip",
    inheritAttrs: !1,
    props: {
        ...useAnchorProps,
        ...useModelToggleProps,
        ...useTransitionProps,
        maxHeight: {
            type: String,
            default: null
        },
        maxWidth: {
            type: String,
            default: null
        },
        transitionShow: {
            default: "jump-down"
        },
        transitionHide: {
            default: "jump-up"
        },
        anchor: {
            type: String,
            default: "bottom middle",
            validator: validatePosition
        },
        self: {
            type: String,
            default: "top middle",
            validator: validatePosition
        },
        offset: {
            type: Array,
            default: ()=>[
                    14,
                    14
                ]
            ,
            validator: validateOffset
        },
        scrollTarget: {
            default: void 0
        },
        delay: {
            type: Number,
            default: 0
        },
        hideDelay: {
            type: Number,
            default: 0
        }
    },
    emits: [
        ...useModelToggleEmits
    ],
    setup (e90, { slots: t60 , emit: o , attrs: n  }) {
        let a, l;
        const i = _vue.getCurrentInstance(), { proxy: { $q: r  }  } = i, s = _vue.ref(null), u = _vue.ref(!1), c = _vue.computed(()=>parsePosition(e90.anchor, r.lang.rtl)
        ), d = _vue.computed(()=>parsePosition(e90.self, r.lang.rtl)
        ), p = _vue.computed(()=>!0 !== e90.persistent
        ), { registerTick: v , removeTick: m , prepareTick: f  } = useTick(), { registerTimeout: g , removeTimeout: b  } = useTimeout(), { transition: y , transitionStyle: S  } = useTransition(e90, u), { localScrollTarget: w , changeScrollEvent: x , unconfigureScrollTarget: C  } = useScrollTarget(e90, D), { anchorEl: k , canShow: _ , anchorEvents: q  } = useAnchor({
            showing: u,
            configureAnchorEl: R
        }), { show: T , hide: P  } = useModelToggle({
            showing: u,
            canShow: _,
            handleShow: Q,
            handleHide: E,
            hideOnRouteChange: p,
            processOnMount: !0
        });
        Object.assign(q, {
            delayShow: z,
            delayHide: F
        });
        const { showPortal: $ , hidePortal: M , renderPortal: B  } = usePortal(i, s, V);
        if (!0 === r.platform.is.mobile) {
            const t = {
                anchorEl: k,
                innerRef: s,
                onClickOutside (e) {
                    return P(e), e.target.classList.contains("q-dialog__backdrop") && stopAndPrevent(e), !0;
                }
            }, o34 = _vue.computed(()=>null === e90.modelValue && !0 !== e90.persistent && !0 === u.value
            );
            _vue.watch(o34, (e)=>{
                const o = !0 === e ? addClickOutside : removeClickOutside;
                o(t);
            }), _vue.onBeforeUnmount(()=>{
                removeClickOutside(t);
            });
        }
        function Q(t) {
            m(), b(), $(), v(()=>{
                l = new MutationObserver(()=>L()
                ), l.observe(s.value, {
                    attributes: !1,
                    childList: !0,
                    characterData: !0,
                    subtree: !0
                }), L(), D();
            }), f(), void 0 === a && (a = _vue.watch(()=>r.screen.width + "|" + r.screen.height + "|" + e90.self + "|" + e90.anchor + "|" + r.lang.rtl
            , L)), g(()=>{
                $(!0), o("show", t);
            }, e90.transitionDuration);
        }
        function E(t) {
            m(), b(), O(), g(()=>{
                M(), o("hide", t);
            }, e90.transitionDuration);
        }
        function O() {
            void 0 !== l && (l.disconnect(), l = void 0), void 0 !== a && (a(), a = void 0), C(), cleanEvt(q, "tooltipTemp");
        }
        function L() {
            const t = s.value;
            null !== k.value && t && setPosition({
                el: t,
                offset: e90.offset,
                anchorEl: k.value,
                anchorOrigin: c.value,
                selfOrigin: d.value,
                maxHeight: e90.maxHeight,
                maxWidth: e90.maxWidth
            });
        }
        function z(t) {
            if (!0 === r.platform.is.mobile) {
                clearSelection(), document.body.classList.add("non-selectable");
                const e = k.value, t61 = [
                    "touchmove",
                    "touchcancel",
                    "touchend",
                    "click"
                ].map((t)=>[
                        e,
                        t,
                        "delayHide",
                        "passiveCapture"
                    ]
                );
                addEvt(q, "tooltipTemp", t61);
            }
            g(()=>{
                T(t);
            }, e90.delay);
        }
        function F(t) {
            b(), !0 === r.platform.is.mobile && (cleanEvt(q, "tooltipTemp"), clearSelection(), setTimeout(()=>{
                document.body.classList.remove("non-selectable");
            }, 10)), g(()=>{
                P(t);
            }, e90.hideDelay);
        }
        function R() {
            if (!0 === e90.noParentEvent || null === k.value) return;
            const t = !0 === r.platform.is.mobile ? [
                [
                    k.value,
                    "touchstart",
                    "delayShow",
                    "passive"
                ]
            ] : [
                [
                    k.value,
                    "mouseenter",
                    "delayShow",
                    "passive"
                ],
                [
                    k.value,
                    "mouseleave",
                    "delayHide",
                    "passive"
                ]
            ];
            addEvt(q, "anchor", t);
        }
        function D() {
            if (null !== k.value || void 0 !== e90.scrollTarget) {
                w.value = getScrollTarget(k.value, e90.scrollTarget);
                const t = !0 === e90.noParentEvent ? L : P;
                x(w.value, t);
            }
        }
        function A() {
            return !0 === u.value ? _vue.h("div", {
                ...n,
                ref: s,
                class: [
                    "q-tooltip q-tooltip--style q-position-engine no-pointer-events",
                    n.class
                ],
                style: [
                    n.style,
                    S.value
                ],
                role: "complementary"
            }, hSlot(t60.default)) : null;
        }
        function V() {
            return _vue.h(_vue.Transition, {
                name: y.value,
                appear: !0
            }, A);
        }
        return _vue.onBeforeUnmount(O), Object.assign(i.proxy, {
            updatePosition: L
        }), B;
    }
}), QItem = createComponent({
    name: "QItem",
    props: {
        ...useDarkProps,
        ...useRouterLinkProps,
        tag: {
            type: String,
            default: "div"
        },
        active: Boolean,
        clickable: Boolean,
        dense: Boolean,
        insetLevel: Number,
        tabindex: [
            String,
            Number
        ],
        focused: Boolean,
        manualFocus: Boolean
    },
    emits: [
        "click",
        "keyup"
    ],
    setup (e91, { slots: t62 , emit: o  }) {
        const { proxy: { $q: n  }  } = _vue.getCurrentInstance(), a = useDark(e91, n), { hasLink: l , linkProps: i , linkClass: r , linkTag: s , navigateToLink: u  } = useRouterLink(), c = _vue.ref(null), d = _vue.ref(null), p = _vue.computed(()=>!0 === e91.clickable || !0 === l.value || "a" === e91.tag || "label" === e91.tag
        ), v = _vue.computed(()=>!0 !== e91.disable && !0 === p.value
        ), m = _vue.computed(()=>"q-item q-item-type row no-wrap" + (!0 === e91.dense ? " q-item--dense" : "") + (!0 === a.value ? " q-item--dark" : "") + (!0 === l.value ? r.value : !0 === e91.active ? `${void 0 !== e91.activeClass ? ` ${e91.activeClass}` : ""} q-item--active` : "") + (!0 === e91.disable ? " disabled" : "") + (!0 === v.value ? " q-item--clickable q-link cursor-pointer " + (!0 === e91.manualFocus ? "q-manual-focusable" : "q-focusable q-hoverable") + (!0 === e91.focused ? " q-manual-focusable--focused" : "") : "")
        ), f = _vue.computed(()=>{
            if (void 0 === e91.insetLevel) return null;
            const t = !0 === n.lang.rtl ? "Right" : "Left";
            return {
                ["padding" + t]: 16 + 56 * e91.insetLevel + "px"
            };
        });
        function g(e) {
            !0 === v.value && (null !== d.value && (!0 !== e.qKeyEvent && document.activeElement === c.value ? d.value.focus() : document.activeElement === d.value && c.value.focus()), !0 === l.value && u(e), o("click", e));
        }
        function b(e) {
            if (!0 === v.value && !0 === isKeyCode(e, 13)) {
                stopAndPrevent(e), e.qKeyEvent = !0;
                const t = new MouseEvent("click", e);
                t.qKeyEvent = !0, c.value.dispatchEvent(t);
            }
            o("keyup", e);
        }
        function y() {
            const e = hUniqueSlot(t62.default, []);
            return !0 === v.value && e.unshift(_vue.h("div", {
                class: "q-focus-helper",
                tabindex: -1,
                ref: d
            })), e;
        }
        return ()=>{
            const t = {
                ref: c,
                class: m.value,
                style: f.value,
                onClick: g,
                onKeyup: b
            };
            return !0 === v.value ? (t.tabindex = e91.tabindex || "0", Object.assign(t, i.value)) : !0 === p.value && (t["aria-disabled"] = "true"), _vue.h(s.value, t, y());
        };
    }
}), QItemSection = createComponent({
    name: "QItemSection",
    props: {
        avatar: Boolean,
        thumbnail: Boolean,
        side: Boolean,
        top: Boolean,
        noWrap: Boolean
    },
    setup (e, { slots: t  }) {
        const o = _vue.computed(()=>"q-item__section column" + ` q-item__section--${!0 === e.avatar || !0 === e.side || !0 === e.thumbnail ? "side" : "main"}` + (!0 === e.top ? " q-item__section--top justify-start" : " justify-center") + (!0 === e.avatar ? " q-item__section--avatar" : "") + (!0 === e.thumbnail ? " q-item__section--thumbnail" : "") + (!0 === e.noWrap ? " q-item__section--nowrap" : "")
        );
        return ()=>_vue.h("div", {
                class: o.value
            }, hSlot(t.default))
        ;
    }
});
function run(e, t, o) {
    t.handler ? t.handler(e, o, o.caret) : o.runCmd(t.cmd, t.param);
}
function getGroup(e) {
    return _vue.h("div", {
        class: "q-editor__toolbar-group"
    }, e);
}
function getBtn(e, t, o, n28 = !1) {
    const a = n28 || "toggle" === t.type && (t.toggled ? t.toggled(e) : t.cmd && e.caret.is(t.cmd, t.param)), l = [];
    if (t.tip && e.$q.platform.is.desktop) {
        const e = t.key ? _vue.h("div", [
            _vue.h("small", `(CTRL + ${String.fromCharCode(t.key)})`)
        ]) : null;
        l.push(_vue.h(QTooltip, {
            delay: 1000
        }, ()=>[
                _vue.h("div", {
                    innerHTML: t.tip
                }),
                e
            ]
        ));
    }
    return _vue.h(QBtn, {
        ...e.buttonProps.value,
        icon: null !== t.icon ? t.icon : void 0,
        color: a ? t.toggleColor || e.props.toolbarToggleColor : t.color || e.props.toolbarColor,
        textColor: a && !e.props.toolbarPush ? null : t.textColor || e.props.toolbarTextColor,
        label: t.label,
        disable: !!t.disable && ("function" !== typeof t.disable || t.disable(e)),
        size: "sm",
        onClick (n) {
            o && o(), run(n, t, e);
        }
    }, ()=>l
    );
}
function getDropdown(e, t63) {
    const o35 = "only-icons" === t63.list;
    let n29, a15, l = t63.label, i = null !== t63.icon ? t63.icon : void 0;
    function r() {
        u.component.proxy.hide();
    }
    if (o35) a15 = t63.options.map((t)=>{
        const o = void 0 === t.type && e.caret.is(t.cmd, t.param);
        return o && (l = t.tip, i = null !== t.icon ? t.icon : void 0), getBtn(e, t, r, o);
    }), n29 = e.toolbarBackgroundClass.value, a15 = [
        getGroup(a15)
    ];
    else {
        const o36 = void 0 !== e.props.toolbarToggleColor ? `text-${e.props.toolbarToggleColor}` : null, s = void 0 !== e.props.toolbarTextColor ? `text-${e.props.toolbarTextColor}` : null, u = "no-icons" === t63.list;
        a15 = t63.options.map((t)=>{
            const n = !!t.disable && t.disable(e), a = void 0 === t.type && e.caret.is(t.cmd, t.param);
            a && (l = t.tip, i = null !== t.icon ? t.icon : void 0);
            const c = t.htmlTip;
            return _vue.h(QItem, {
                active: a,
                activeClass: o36,
                clickable: !0,
                disable: n,
                dense: !0,
                onClick (o) {
                    r(), null !== e.contentRef.value && e.contentRef.value.focus(), e.caret.restore(), run(o, t, e);
                }
            }, ()=>[
                    !0 === u ? null : _vue.h(QItemSection, {
                        class: a ? o36 : s,
                        side: !0
                    }, ()=>_vue.h(QIcon, {
                            name: null !== t.icon ? t.icon : void 0
                        })
                    ),
                    _vue.h(QItemSection, c ? ()=>_vue.h("div", {
                            class: "text-no-wrap",
                            innerHTML: t.htmlTip
                        })
                     : t.tip ? ()=>_vue.h("div", {
                            class: "text-no-wrap"
                        }, t.tip)
                     : void 0)
                ]
            );
        }), n29 = [
            e.toolbarBackgroundClass.value,
            s
        ];
    }
    const s = t63.highlight && l !== t63.label, u = _vue.h(QBtnDropdown, {
        ...e.buttonProps.value,
        noCaps: !0,
        noWrap: !0,
        color: s ? e.props.toolbarToggleColor : e.props.toolbarColor,
        textColor: s && !e.props.toolbarPush ? null : e.props.toolbarTextColor,
        label: t63.fixedLabel ? t63.label : l,
        icon: t63.fixedIcon ? null !== t63.icon ? t63.icon : void 0 : i,
        contentClass: n29
    }, ()=>a15
    );
    return u;
}
function getToolbar(e92) {
    if (e92.caret) return e92.buttons.value.filter((t)=>{
        return !e92.isViewingSource.value || t.find((e)=>"viewsource" === e.cmd
        );
    }).map((t64)=>getGroup(t64.map((t)=>{
            return (!e92.isViewingSource.value || "viewsource" === t.cmd) && ("slot" === t.type ? hSlot(e92.slots[t.slot]) : "dropdown" === t.type ? getDropdown(e92, t) : getBtn(e92, t));
        }))
    );
}
function getFonts(e, t65, o, n = {
}) {
    const a = Object.keys(n);
    if (0 === a.length) return {
    };
    const l = {
        default_font: {
            cmd: "fontName",
            param: e,
            icon: o,
            tip: t65
        }
    };
    return a.forEach((e)=>{
        const t = n[e];
        l[e] = {
            cmd: "fontName",
            param: t,
            icon: o,
            tip: t,
            htmlTip: `<font face="${t}">${t}</font>`
        };
    }), l;
}
function getLinkEditor(e93) {
    if (e93.caret) {
        const t66 = e93.props.toolbarColor || e93.props.toolbarTextColor;
        let o = e93.editLinkUrl.value;
        const n = ()=>{
            e93.caret.restore(), o !== e93.editLinkUrl.value && document.execCommand("createLink", !1, "" === o ? " " : o), e93.editLinkUrl.value = null;
        };
        return [
            _vue.h("div", {
                class: `q-mx-xs text-${t66}`
            }, `${e93.$q.lang.editor.url}: `),
            _vue.h("input", {
                key: "qedt_btm_input",
                class: "col q-editor__link-input",
                value: o,
                onInput: (e)=>{
                    stop(e), o = e.target.value;
                },
                onKeydown: (t)=>{
                    if (!0 !== shouldIgnoreKey(t)) switch(t.keyCode){
                        case 13:
                            return prevent(t), n();
                        case 27:
                            prevent(t), e93.caret.restore(), e93.editLinkUrl.value && "https://" !== e93.editLinkUrl.value || document.execCommand("unlink"), e93.editLinkUrl.value = null;
                            break;
                    }
                }
            }),
            getGroup([
                _vue.h(QBtn, {
                    key: "qedt_btm_rem",
                    tabindex: -1,
                    ...e93.buttonProps.value,
                    label: e93.$q.lang.label.remove,
                    noCaps: !0,
                    onClick: ()=>{
                        e93.caret.restore(), document.execCommand("unlink"), e93.editLinkUrl.value = null;
                    }
                }),
                _vue.h(QBtn, {
                    key: "qedt_btm_upd",
                    ...e93.buttonProps.value,
                    label: e93.$q.lang.label.update,
                    noCaps: !0,
                    onClick: n
                })
            ])
        ];
    }
}
const listenerRE = /^on[A-Z]/;
function useSplitAttrs(e94, t67) {
    const o = {
        listeners: _vue.ref({
        }),
        attributes: _vue.ref({
        })
    };
    function n30() {
        const n = {
        }, a = {
        };
        Object.keys(e94).forEach((t)=>{
            "class" !== t && "style" !== t && !1 === listenerRE.test(t) && (n[t] = e94[t]);
        }), Object.keys(t67.props).forEach((e)=>{
            !0 === listenerRE.test(e) && (a[e] = t67.props[e]);
        }), o.attributes.value = n, o.listeners.value = a;
    }
    return _vue.onBeforeUpdate(n30), n30(), o;
}
const toString = Object.prototype.toString, hasOwn = Object.prototype.hasOwnProperty, class2type = {
};
function type(e) {
    return null === e ? String(e) : class2type[toString.call(e)] || "object";
}
function isPlainObject(e) {
    if (!e || "object" !== type(e)) return !1;
    if (e.constructor && !hasOwn.call(e, "constructor") && !hasOwn.call(e.constructor.prototype, "isPrototypeOf")) return !1;
    let t;
    for(t in e);
    return void 0 === t || hasOwn.call(e, t);
}
function extend() {
    let e, t, o, n, a, l, i = arguments[0] || {
    }, r = 1, s = !1;
    const u = arguments.length;
    for("boolean" === typeof i && (s = i, i = arguments[1] || {
    }, r = 2), Object(i) !== i && "function" !== type(i) && (i = {
    }), u === r && (i = this, r--); r < u; r++)if (null !== (e = arguments[r])) for(t in e)o = i[t], n = e[t], i !== n && (s && n && (isPlainObject(n) || (a = "array" === type(n))) ? (a ? (a = !1, l = o && "array" === type(o) ? o : []) : l = o && isPlainObject(o) ? o : {
    }, i[t] = extend(s, l, n)) : void 0 !== n && (i[t] = n));
    return i;
}
"Boolean Number String Function Array Date RegExp Object".split(" ").forEach((e)=>{
    class2type["[object " + e + "]"] = e.toLowerCase();
});
var QEditor = createComponent({
    name: "QEditor",
    props: {
        ...useDarkProps,
        ...useFullscreenProps,
        modelValue: {
            type: String,
            required: !0
        },
        readonly: Boolean,
        disable: Boolean,
        minHeight: {
            type: String,
            default: "10rem"
        },
        maxHeight: String,
        height: String,
        definitions: Object,
        fonts: Object,
        placeholder: String,
        toolbar: {
            type: Array,
            validator: (e95)=>0 === e95.length || e95.every((e)=>e.length
                )
            ,
            default () {
                return [
                    [
                        "left",
                        "center",
                        "right",
                        "justify"
                    ],
                    [
                        "bold",
                        "italic",
                        "underline",
                        "strike"
                    ],
                    [
                        "undo",
                        "redo"
                    ]
                ];
            }
        },
        toolbarColor: String,
        toolbarBg: String,
        toolbarTextColor: String,
        toolbarToggleColor: {
            type: String,
            default: "primary"
        },
        toolbarOutline: Boolean,
        toolbarPush: Boolean,
        toolbarRounded: Boolean,
        paragraphTag: {
            type: String,
            validator: (e)=>[
                    "div",
                    "p"
                ].includes(e)
            ,
            default: "div"
        },
        contentStyle: Object,
        contentClass: [
            Object,
            Array,
            String
        ],
        square: Boolean,
        flat: Boolean,
        dense: Boolean
    },
    emits: [
        ...useFullscreenEmits,
        "update:modelValue",
        "keydown",
        "click",
        "mouseup",
        "keyup",
        "touchend",
        "focus",
        "blur"
    ],
    setup (e96, { slots: t68 , emit: o37 , attrs: n31  }) {
        const { proxy: a , vnode: l  } = _vue.getCurrentInstance(), { $q: i  } = a, r = useDark(e96, i), { inFullscreen: s , toggleFullscreen: u  } = useFullscreen(), c = useSplitAttrs(n31, l), d = _vue.ref(null), p = _vue.ref(null), v = _vue.ref(null), m = _vue.ref(!1), f = _vue.computed(()=>!e96.readonly && !e96.disable
        );
        let g, b, y = e96.modelValue;
        document.execCommand("defaultParagraphSeparator", !1, e96.paragraphTag), g = window.getComputedStyle(document.body).fontFamily;
        const S = _vue.computed(()=>e96.toolbarBg ? ` bg-${e96.toolbarBg}` : ""
        ), w = _vue.computed(()=>{
            const t = !0 !== e96.toolbarOutline && !0 !== e96.toolbarPush;
            return {
                type: "a",
                flat: t,
                noWrap: !0,
                outline: e96.toolbarOutline,
                push: e96.toolbarPush,
                rounded: e96.toolbarRounded,
                dense: !0,
                color: e96.toolbarColor,
                disable: !f.value,
                size: "sm"
            };
        }), x = _vue.computed(()=>{
            const t = i.lang.editor, o = i.iconSet.editor;
            return {
                bold: {
                    cmd: "bold",
                    icon: o.bold,
                    tip: t.bold,
                    key: 66
                },
                italic: {
                    cmd: "italic",
                    icon: o.italic,
                    tip: t.italic,
                    key: 73
                },
                strike: {
                    cmd: "strikeThrough",
                    icon: o.strikethrough,
                    tip: t.strikethrough,
                    key: 83
                },
                underline: {
                    cmd: "underline",
                    icon: o.underline,
                    tip: t.underline,
                    key: 85
                },
                unordered: {
                    cmd: "insertUnorderedList",
                    icon: o.unorderedList,
                    tip: t.unorderedList
                },
                ordered: {
                    cmd: "insertOrderedList",
                    icon: o.orderedList,
                    tip: t.orderedList
                },
                subscript: {
                    cmd: "subscript",
                    icon: o.subscript,
                    tip: t.subscript,
                    htmlTip: "x<subscript>2</subscript>"
                },
                superscript: {
                    cmd: "superscript",
                    icon: o.superscript,
                    tip: t.superscript,
                    htmlTip: "x<superscript>2</superscript>"
                },
                link: {
                    cmd: "link",
                    disable: (e)=>e.caret && !e.caret.can("link")
                    ,
                    icon: o.hyperlink,
                    tip: t.hyperlink,
                    key: 76
                },
                fullscreen: {
                    cmd: "fullscreen",
                    icon: o.toggleFullscreen,
                    tip: t.toggleFullscreen,
                    key: 70
                },
                viewsource: {
                    cmd: "viewsource",
                    icon: o.viewSource,
                    tip: t.viewSource
                },
                quote: {
                    cmd: "formatBlock",
                    param: "BLOCKQUOTE",
                    icon: o.quote,
                    tip: t.quote,
                    key: 81
                },
                left: {
                    cmd: "justifyLeft",
                    icon: o.left,
                    tip: t.left
                },
                center: {
                    cmd: "justifyCenter",
                    icon: o.center,
                    tip: t.center
                },
                right: {
                    cmd: "justifyRight",
                    icon: o.right,
                    tip: t.right
                },
                justify: {
                    cmd: "justifyFull",
                    icon: o.justify,
                    tip: t.justify
                },
                print: {
                    type: "no-state",
                    cmd: "print",
                    icon: o.print,
                    tip: t.print,
                    key: 80
                },
                outdent: {
                    type: "no-state",
                    disable: (e)=>e.caret && !e.caret.can("outdent")
                    ,
                    cmd: "outdent",
                    icon: o.outdent,
                    tip: t.outdent
                },
                indent: {
                    type: "no-state",
                    disable: (e)=>e.caret && !e.caret.can("indent")
                    ,
                    cmd: "indent",
                    icon: o.indent,
                    tip: t.indent
                },
                removeFormat: {
                    type: "no-state",
                    cmd: "removeFormat",
                    icon: o.removeFormat,
                    tip: t.removeFormat
                },
                hr: {
                    type: "no-state",
                    cmd: "insertHorizontalRule",
                    icon: o.hr,
                    tip: t.hr
                },
                undo: {
                    type: "no-state",
                    cmd: "undo",
                    icon: o.undo,
                    tip: t.undo,
                    key: 90
                },
                redo: {
                    type: "no-state",
                    cmd: "redo",
                    icon: o.redo,
                    tip: t.redo,
                    key: 89
                },
                h1: {
                    cmd: "formatBlock",
                    param: "H1",
                    icon: o.heading1 || o.heading,
                    tip: t.heading1,
                    htmlTip: `<h1 class="q-ma-none">${t.heading1}</h1>`
                },
                h2: {
                    cmd: "formatBlock",
                    param: "H2",
                    icon: o.heading2 || o.heading,
                    tip: t.heading2,
                    htmlTip: `<h2 class="q-ma-none">${t.heading2}</h2>`
                },
                h3: {
                    cmd: "formatBlock",
                    param: "H3",
                    icon: o.heading3 || o.heading,
                    tip: t.heading3,
                    htmlTip: `<h3 class="q-ma-none">${t.heading3}</h3>`
                },
                h4: {
                    cmd: "formatBlock",
                    param: "H4",
                    icon: o.heading4 || o.heading,
                    tip: t.heading4,
                    htmlTip: `<h4 class="q-ma-none">${t.heading4}</h4>`
                },
                h5: {
                    cmd: "formatBlock",
                    param: "H5",
                    icon: o.heading5 || o.heading,
                    tip: t.heading5,
                    htmlTip: `<h5 class="q-ma-none">${t.heading5}</h5>`
                },
                h6: {
                    cmd: "formatBlock",
                    param: "H6",
                    icon: o.heading6 || o.heading,
                    tip: t.heading6,
                    htmlTip: `<h6 class="q-ma-none">${t.heading6}</h6>`
                },
                p: {
                    cmd: "formatBlock",
                    param: e96.paragraphTag,
                    icon: o.heading,
                    tip: t.paragraph
                },
                code: {
                    cmd: "formatBlock",
                    param: "PRE",
                    icon: o.code,
                    htmlTip: `<code>${t.code}</code>`
                },
                "size-1": {
                    cmd: "fontSize",
                    param: "1",
                    icon: o.size1 || o.size,
                    tip: t.size1,
                    htmlTip: `<font size="1">${t.size1}</font>`
                },
                "size-2": {
                    cmd: "fontSize",
                    param: "2",
                    icon: o.size2 || o.size,
                    tip: t.size2,
                    htmlTip: `<font size="2">${t.size2}</font>`
                },
                "size-3": {
                    cmd: "fontSize",
                    param: "3",
                    icon: o.size3 || o.size,
                    tip: t.size3,
                    htmlTip: `<font size="3">${t.size3}</font>`
                },
                "size-4": {
                    cmd: "fontSize",
                    param: "4",
                    icon: o.size4 || o.size,
                    tip: t.size4,
                    htmlTip: `<font size="4">${t.size4}</font>`
                },
                "size-5": {
                    cmd: "fontSize",
                    param: "5",
                    icon: o.size5 || o.size,
                    tip: t.size5,
                    htmlTip: `<font size="5">${t.size5}</font>`
                },
                "size-6": {
                    cmd: "fontSize",
                    param: "6",
                    icon: o.size6 || o.size,
                    tip: t.size6,
                    htmlTip: `<font size="6">${t.size6}</font>`
                },
                "size-7": {
                    cmd: "fontSize",
                    param: "7",
                    icon: o.size7 || o.size,
                    tip: t.size7,
                    htmlTip: `<font size="7">${t.size7}</font>`
                }
            };
        }), C = _vue.computed(()=>{
            const t = e96.definitions || {
            }, o = e96.definitions || e96.fonts ? extend(!0, {
            }, x.value, t, getFonts(g, i.lang.editor.defaultFont, i.iconSet.editor.font, e96.fonts)) : x.value;
            return e96.toolbar.map((e97)=>e97.map((e)=>{
                    if (e.options) return {
                        type: "dropdown",
                        icon: e.icon,
                        label: e.label,
                        size: "sm",
                        dense: !0,
                        fixedLabel: e.fixedLabel,
                        fixedIcon: e.fixedIcon,
                        highlight: e.highlight,
                        list: e.list,
                        options: e.options.map((e)=>o[e]
                        )
                    };
                    const n = o[e];
                    return n ? "no-state" === n.type || t[e] && (void 0 === n.cmd || x.value[n.cmd] && "no-state" === x.value[n.cmd].type) ? n : Object.assign({
                        type: "toggle"
                    }, n) : {
                        type: "slot",
                        slot: e
                    };
                })
            );
        }), k = {
            $q: i,
            props: e96,
            slots: t68,
            inFullscreen: s,
            toggleFullscreen: u,
            runCmd: N,
            isViewingSource: m,
            editLinkUrl: v,
            toolbarBackgroundClass: S,
            buttonProps: w,
            contentRef: p,
            buttons: C,
            setContent: H
        };
        _vue.watch(()=>e96.modelValue
        , (e)=>{
            y !== e && (y = e, H(e, !0));
        });
        const _ = _vue.computed(()=>e96.toolbar && e96.toolbar.length > 0
        ), q = _vue.computed(()=>{
            const e98 = {
            }, t69 = (t)=>{
                t.key && (e98[t.key] = {
                    cmd: t.cmd,
                    param: t.param
                });
            };
            return C.value.forEach((e99)=>{
                e99.forEach((e)=>{
                    e.options ? e.options.forEach(t69) : t69(e);
                });
            }), e98;
        }), T = _vue.computed(()=>s.value ? e96.contentStyle : [
                {
                    minHeight: e96.minHeight,
                    height: e96.height,
                    maxHeight: e96.maxHeight
                },
                e96.contentStyle
            ]
        ), P = _vue.computed(()=>`q-editor q-editor--${!0 === m.value ? "source" : "default"}` + (!0 === e96.disable ? " disabled" : "") + (!0 === s.value ? " fullscreen column" : "") + (!0 === e96.square ? " q-editor--square no-border-radius" : "") + (!0 === e96.flat ? " q-editor--flat" : "") + (!0 === e96.dense ? " q-editor--dense" : "") + (!0 === r.value ? " q-editor--dark q-dark" : "")
        ), $ = _vue.computed(()=>[
                e96.contentClass,
                "q-editor__content",
                {
                    col: s.value,
                    "overflow-auto": s.value || e96.maxHeight
                }
            ]
        ), M = _vue.computed(()=>!0 === e96.disable ? {
                "aria-disabled": "true"
            } : !0 === e96.readonly ? {
                "aria-readonly": "true"
            } : {
            }
        );
        function B() {
            if (null !== p.value) {
                const t = `inner${!0 === m.value ? "Text" : "HTML"}`, n = p.value[t];
                n !== e96.modelValue && (y = n, o37("update:modelValue", n));
            }
        }
        function Q(e) {
            if (o37("keydown", e), !0 !== e.ctrlKey || !0 === shouldIgnoreKey(e)) return void j();
            const t = e.keyCode, n = q.value[t];
            if (void 0 !== n) {
                const { cmd: t , param: o  } = n;
                stopAndPrevent(e), N(t, o, !1);
            }
        }
        function E(e) {
            j(), o37("click", e);
        }
        function O(e) {
            if (null !== p.value) {
                const { scrollTop: e , scrollHeight: t  } = p.value;
                b = t - e;
            }
            k.caret.save(), o37("blur", e);
        }
        function L(e) {
            _vue.nextTick(()=>{
                null !== p.value && void 0 !== b && (p.value.scrollTop = p.value.scrollHeight - b);
            }), o37("focus", e);
        }
        function z(e) {
            if (!0 === d.value.contains(e.target) && (null === e.relatedTarget || !0 !== d.value.contains(e.relatedTarget))) {
                const e = `inner${!0 === m.value ? "Text" : "HTML"}`;
                k.caret.restorePosition(p.value[e].length), j();
            }
        }
        function F(e) {
            !0 !== d.value.contains(e.target) || null !== e.relatedTarget && !0 === d.value.contains(e.relatedTarget) || (k.caret.savePosition(), j());
        }
        function R() {
            b = void 0;
        }
        function D(e) {
            k.caret.save(), o37("mouseup", e);
        }
        function A() {
            b = void 0;
        }
        function V(e) {
            k.caret.save(), o37("keyup", e);
        }
        function I(e) {
            k.caret.save(), o37("touchend", e);
        }
        function H(e, t) {
            if (null !== p.value) {
                !0 === t && k.caret.savePosition();
                const o = `inner${!0 === m.value ? "Text" : "HTML"}`;
                p.value[o] = e, !0 === t && (k.caret.restorePosition(p.value[o].length), j());
            }
        }
        function N(e, t, o = !0) {
            U(), k.caret.restore(), k.caret.apply(e, t, ()=>{
                U(), k.caret.save(), o && j();
            });
        }
        function j() {
            setTimeout(()=>{
                v.value = null, a.$forceUpdate();
            }, 1);
        }
        function U() {
            addFocusFn(()=>{
                null !== p.value && p.value.focus();
            });
        }
        function K() {
            return p.value;
        }
        return Object.assign(a, {
            runCmd: N,
            refreshToolbar: j,
            focus: U,
            getContentEl: K
        }), _vue.onMounted(()=>{
            k.caret = a.caret = new Caret(p.value, k), H(e96.modelValue), j();
        }), ()=>{
            let t;
            if (_.value) {
                const e = [
                    _vue.h("div", {
                        key: "qedt_top",
                        class: "q-editor__toolbar row no-wrap scroll-x" + S.value
                    }, getToolbar(k))
                ];
                null !== v.value && e.push(_vue.h("div", {
                    key: "qedt_btm",
                    class: "q-editor__toolbar row no-wrap items-center scroll-x" + S.value
                }, getLinkEditor(k))), t = _vue.h("div", {
                    key: "toolbar_ctainer",
                    class: "q-editor__toolbars-container"
                }, e);
            }
            return _vue.h("div", {
                ref: d,
                class: P.value,
                style: {
                    height: !0 === s.value ? "100vh" : null
                },
                ...M.value,
                onFocusin: z,
                onFocusout: F
            }, [
                t,
                _vue.h("div", {
                    ref: p,
                    style: T.value,
                    class: $.value,
                    contenteditable: f.value,
                    placeholder: e96.placeholder,
                    ...c.listeners.value,
                    onInput: B,
                    onKeydown: Q,
                    onClick: E,
                    onBlur: O,
                    onFocus: L,
                    onMousedown: R,
                    onTouchstartPassive: A,
                    onMouseup: D,
                    onKeyup: V,
                    onTouchend: I
                })
            ]);
        };
    }
}), QItemLabel = createComponent({
    name: "QItemLabel",
    props: {
        overline: Boolean,
        caption: Boolean,
        header: Boolean,
        lines: [
            Number,
            String
        ]
    },
    setup (e, { slots: t  }) {
        const o = _vue.computed(()=>parseInt(e.lines, 10)
        ), n = _vue.computed(()=>"q-item__label" + (!0 === e.overline ? " q-item__label--overline text-overline" : "") + (!0 === e.caption ? " q-item__label--caption text-caption" : "") + (!0 === e.header ? " q-item__label--header" : "") + (1 === o.value ? " ellipsis" : "")
        ), a = _vue.computed(()=>{
            return void 0 !== e.lines && o.value > 1 ? {
                overflow: "hidden",
                display: "-webkit-box",
                "-webkit-box-orient": "vertical",
                "-webkit-line-clamp": o.value
            } : null;
        });
        return ()=>_vue.h("div", {
                style: a.value,
                class: n.value
            }, hSlot(t.default))
        ;
    }
}), QSlideTransition = createComponent({
    name: "QSlideTransition",
    props: {
        appear: Boolean,
        duration: {
            type: Number,
            default: 300
        }
    },
    emits: [
        "show",
        "hide"
    ],
    setup (e100, { slots: t70 , emit: o38  }) {
        let n32, a16, l, i, r, s, u = !1;
        function c() {
            n32 && n32(), n32 = null, u = !1, clearTimeout(l), clearTimeout(i), void 0 !== a16 && a16.removeEventListener("transitionend", r), r = null;
        }
        function d(t, o, a) {
            t.style.overflowY = "hidden", void 0 !== o && (t.style.height = `${o}px`), t.style.transition = `height ${e100.duration}ms cubic-bezier(.25, .8, .50, 1)`, u = !0, n32 = a;
        }
        function p(e, t) {
            e.style.overflowY = null, e.style.height = null, e.style.transition = null, c(), t !== s && o38(t);
        }
        function v(t, o) {
            let n = 0;
            a16 = t, !0 === u ? (c(), n = t.offsetHeight === t.scrollHeight ? 0 : void 0) : s = "hide", d(t, n, o), l = setTimeout(()=>{
                t.style.height = `${t.scrollHeight}px`, r = (e)=>{
                    Object(e) === e && e.target !== t || p(t, "show");
                }, t.addEventListener("transitionend", r), i = setTimeout(r, 1.1 * e100.duration);
            }, 100);
        }
        function m(t, o) {
            let n;
            a16 = t, !0 === u ? c() : (s = "show", n = t.scrollHeight), d(t, n, o), l = setTimeout(()=>{
                t.style.height = 0, r = (e)=>{
                    Object(e) === e && e.target !== t || p(t, "hide");
                }, t.addEventListener("transitionend", r), i = setTimeout(r, 1.1 * e100.duration);
            }, 100);
        }
        return _vue.onBeforeUnmount(()=>{
            !0 === u && c();
        }), ()=>_vue.h(_vue.Transition, {
                css: !1,
                appear: e100.appear,
                onEnter: v,
                onLeave: m
            }, t70.default)
        ;
    }
});
const insetMap = {
    true: "inset",
    item: "item-inset",
    "item-thumbnail": "item-thumbnail-inset"
}, margins = {
    xs: 2,
    sm: 4,
    md: 8,
    lg: 16,
    xl: 24
};
var QSeparator = createComponent({
    name: "QSeparator",
    props: {
        ...useDarkProps,
        spaced: [
            Boolean,
            String
        ],
        inset: [
            Boolean,
            String
        ],
        vertical: Boolean,
        color: String,
        size: String
    },
    setup (e) {
        const t71 = _vue.getCurrentInstance(), o39 = useDark(e, t71.proxy.$q), n = _vue.computed(()=>!0 === e.vertical ? "vertical" : "horizontal"
        ), a = _vue.computed(()=>` q-separator--${n.value}`
        ), l = _vue.computed(()=>!1 !== e.inset ? `${a.value}-${insetMap[e.inset]}` : ""
        ), i = _vue.computed(()=>`q-separator${a.value}${l.value}` + (void 0 !== e.color ? ` bg-${e.color}` : "") + (!0 === o39.value ? " q-separator--dark" : "")
        ), r = _vue.computed(()=>{
            const t = {
            };
            if (void 0 !== e.size && (t[!0 === e.vertical ? "width" : "height"] = e.size), !1 !== e.spaced) {
                const o = !0 === e.spaced ? `${margins.md}px` : e.spaced in margins ? `${margins[e.spaced]}px` : e.spaced, n = !0 === e.vertical ? [
                    "Left",
                    "Right"
                ] : [
                    "Top",
                    "Bottom"
                ];
                t[`margin${n[0]}`] = t[`margin${n[1]}`] = o;
            }
            return t;
        });
        return ()=>_vue.h("hr", {
                class: i.value,
                style: r.value,
                "aria-orientation": n.value
            })
        ;
    }
});
let buf, bufIdx = 0;
const hexBytes = new Array(256);
for(let e1 = 0; e1 < 256; e1++)hexBytes[e1] = (e1 + 256).toString(16).substr(1);
const randomBytes = (()=>{
    const e101 = "undefined" !== typeof crypto ? crypto : "undefined" !== typeof window ? window.crypto || window.msCrypto : void 0;
    if (void 0 !== e101) {
        if (void 0 !== e101.randomBytes) return e101.randomBytes;
        if (void 0 !== e101.getRandomValues) return (t)=>{
            const o = new Uint8Array(t);
            return e101.getRandomValues(o), o;
        };
    }
    return (e)=>{
        const t = [];
        for(let o = e; o > 0; o--)t.push(Math.floor(256 * Math.random()));
        return t;
    };
})(), BUFFER_SIZE = 4096;
function uid$2() {
    (void 0 === buf || bufIdx + 16 > BUFFER_SIZE) && (bufIdx = 0, buf = randomBytes(BUFFER_SIZE));
    const e = Array.prototype.slice.call(buf, bufIdx, bufIdx += 16);
    return e[6] = 15 & e[6] | 64, e[8] = 63 & e[8] | 128, hexBytes[e[0]] + hexBytes[e[1]] + hexBytes[e[2]] + hexBytes[e[3]] + "-" + hexBytes[e[4]] + hexBytes[e[5]] + "-" + hexBytes[e[6]] + hexBytes[e[7]] + "-" + hexBytes[e[8]] + hexBytes[e[9]] + "-" + hexBytes[e[10]] + hexBytes[e[11]] + hexBytes[e[12]] + hexBytes[e[13]] + hexBytes[e[14]] + hexBytes[e[15]];
}
const itemGroups = _vue.shallowReactive({
}), LINK_PROPS = Object.keys(useRouterLinkProps);
var QExpansionItem = createComponent({
    name: "QExpansionItem",
    props: {
        ...useRouterLinkProps,
        ...useModelToggleProps,
        ...useDarkProps,
        icon: String,
        label: String,
        labelLines: [
            Number,
            String
        ],
        caption: String,
        captionLines: [
            Number,
            String
        ],
        dense: Boolean,
        expandIcon: String,
        expandedIcon: String,
        expandIconClass: [
            Array,
            String,
            Object
        ],
        duration: Number,
        headerInsetLevel: Number,
        contentInsetLevel: Number,
        expandSeparator: Boolean,
        defaultOpened: Boolean,
        expandIconToggle: Boolean,
        switchToggleSide: Boolean,
        denseToggle: Boolean,
        group: String,
        popup: Boolean,
        headerStyle: [
            Array,
            String,
            Object
        ],
        headerClass: [
            Array,
            String,
            Object
        ]
    },
    emits: [
        ...useModelToggleEmits,
        "click",
        "after-show",
        "after-hide"
    ],
    setup (e102, { slots: t72 , emit: o40  }) {
        const { proxy: { $q: n  }  } = _vue.getCurrentInstance(), a = useDark(e102, n), l = _vue.ref(null !== e102.modelValue ? e102.modelValue : e102.defaultOpened), i = _vue.ref(null), { hide: r , toggle: s  } = useModelToggle({
            showing: l
        });
        let u, c;
        const d = _vue.computed(()=>"q-expansion-item q-item-type" + ` q-expansion-item--${!0 === l.value ? "expanded" : "collapsed"}` + ` q-expansion-item--${!0 === e102.popup ? "popup" : "standard"}`
        ), p = _vue.computed(()=>{
            if (void 0 === e102.contentInsetLevel) return null;
            const t = !0 === n.lang.rtl ? "Right" : "Left";
            return {
                ["padding" + t]: 56 * e102.contentInsetLevel + "px"
            };
        }), v = _vue.computed(()=>!0 !== e102.disable && void 0 !== e102.to && null !== e102.to && "" !== e102.to
        ), m = _vue.computed(()=>{
            const t = {
            };
            return LINK_PROPS.forEach((o)=>{
                t[o] = e102[o];
            }), t;
        }), f = _vue.computed(()=>!0 === v.value || !0 !== e102.expandIconToggle
        ), g = _vue.computed(()=>void 0 !== e102.expandedIcon && !0 === l.value ? e102.expandedIcon : e102.expandIcon || n.iconSet.expansionItem[!0 === e102.denseToggle ? "denseIcon" : "icon"]
        ), b = _vue.computed(()=>!0 !== e102.disable && (!0 === v.value || !0 === e102.expandIconToggle)
        );
        function y(e) {
            !0 !== v.value && s(e), o40("click", e);
        }
        function S(e) {
            13 === e.keyCode && w(e, !0);
        }
        function w(e, t) {
            !0 !== t && null !== i.value && i.value.focus(), s(e), stopAndPrevent(e);
        }
        function x() {
            o40("after-show");
        }
        function C() {
            o40("after-hide");
        }
        function k() {
            void 0 === u && (u = uid$2()), !0 === l.value && (itemGroups[e102.group] = u);
            const t73 = _vue.watch(l, (t)=>{
                !0 === t ? itemGroups[e102.group] = u : itemGroups[e102.group] === u && delete itemGroups[e102.group];
            }), o = _vue.watch(()=>itemGroups[e102.group]
            , (e, t)=>{
                t === u && void 0 !== e && e !== u && r();
            });
            c = ()=>{
                t73(), o(), itemGroups[e102.group] === u && delete itemGroups[e102.group], c = void 0;
            };
        }
        function _() {
            const t = {
                class: [
                    "q-focusable relative-position cursor-pointer" + `${!0 === e102.denseToggle && !0 === e102.switchToggleSide ? " items-end" : ""}`,
                    e102.expandIconClass
                ],
                side: !0 !== e102.switchToggleSide,
                avatar: e102.switchToggleSide
            }, o = [
                _vue.h(QIcon, {
                    class: "q-expansion-item__toggle-icon" + (void 0 === e102.expandedIcon && !0 === l.value ? " q-expansion-item__toggle-icon--rotated" : ""),
                    name: g.value
                })
            ];
            return !0 === b.value && (Object.assign(t, {
                tabindex: 0,
                onClick: w,
                onKeyup: S
            }), o.unshift(_vue.h("div", {
                ref: i,
                class: "q-expansion-item__toggle-focus q-icon q-focus-helper q-focus-helper--rounded",
                tabindex: -1
            }))), _vue.h(QItemSection, t, ()=>o
            );
        }
        function q() {
            let o;
            return void 0 !== t72.header ? o = [].concat(t72.header()) : (o = [
                _vue.h(QItemSection, ()=>[
                        _vue.h(QItemLabel, {
                            lines: e102.labelLines
                        }, ()=>e102.label || ""
                        ),
                        e102.caption ? _vue.h(QItemLabel, {
                            lines: e102.captionLines,
                            caption: !0
                        }, ()=>e102.caption
                        ) : null
                    ]
                )
            ], e102.icon && o[!0 === e102.switchToggleSide ? "push" : "unshift"](_vue.h(QItemSection, {
                side: !0 === e102.switchToggleSide,
                avatar: !0 !== e102.switchToggleSide
            }, ()=>_vue.h(QIcon, {
                    name: e102.icon
                })
            ))), !0 !== e102.disable && o[!0 === e102.switchToggleSide ? "unshift" : "push"](_()), o;
        }
        function T() {
            const t = {
                ref: "item",
                style: e102.headerStyle,
                class: e102.headerClass,
                dark: a.value,
                disable: e102.disable,
                dense: e102.dense,
                insetLevel: e102.headerInsetLevel
            };
            return !0 === f.value && (t.clickable = !0, t.onClick = y, !0 === v.value && Object.assign(t, m.value)), _vue.h(QItem, t, q);
        }
        function P() {
            return _vue.withDirectives(_vue.h("div", {
                key: "e-content",
                class: "q-expansion-item__content relative-position",
                style: p.value
            }, hSlot(t72.default)), [
                [
                    _vue.vShow,
                    l.value
                ]
            ]);
        }
        function $() {
            const t = [
                T(),
                _vue.h(QSlideTransition, {
                    duration: e102.duration,
                    onShow: x,
                    onHide: C
                }, P)
            ];
            return !0 === e102.expandSeparator && t.push(_vue.h(QSeparator, {
                class: "q-expansion-item__border q-expansion-item__border--top absolute-top",
                dark: a.value
            }), _vue.h(QSeparator, {
                class: "q-expansion-item__border q-expansion-item__border--bottom absolute-bottom",
                dark: a.value
            })), t;
        }
        return _vue.watch(()=>e102.group
        , (e)=>{
            void 0 !== c && c(), void 0 !== e && k();
        }), void 0 !== e102.group && k(), _vue.onBeforeUnmount(()=>{
            void 0 !== c && c();
        }), ()=>_vue.h("div", {
                class: d.value
            }, [
                _vue.h("div", {
                    class: "q-expansion-item__container relative-position"
                }, $())
            ])
        ;
    }
});
const labelPositions = [
    "top",
    "right",
    "bottom",
    "left"
], useFabProps = {
    type: {
        type: String,
        default: "a"
    },
    outline: Boolean,
    push: Boolean,
    flat: Boolean,
    unelevated: Boolean,
    color: String,
    textColor: String,
    glossy: Boolean,
    square: Boolean,
    padding: String,
    label: {
        type: [
            String,
            Number
        ],
        default: ""
    },
    labelPosition: {
        type: String,
        default: "right",
        validator: (e)=>labelPositions.includes(e)
    },
    externalLabel: Boolean,
    hideLabel: {
        type: Boolean
    },
    labelClass: [
        Array,
        String,
        Object
    ],
    labelStyle: [
        Array,
        String,
        Object
    ],
    disable: Boolean,
    tabindex: [
        Number,
        String
    ]
};
function useFab(e, t) {
    return {
        formClass: _vue.computed(()=>`q-fab--form-${!0 === e.square ? "square" : "rounded"}`
        ),
        stacked: _vue.computed(()=>!1 === e.externalLabel && [
                "top",
                "bottom"
            ].includes(e.labelPosition)
        ),
        labelProps: _vue.computed(()=>{
            if (!0 === e.externalLabel) {
                const o = null === e.hideLabel ? !1 === t.value : e.hideLabel;
                return {
                    action: "push",
                    data: {
                        class: [
                            e.labelClass,
                            "q-fab__label q-tooltip--style q-fab__label--external" + ` q-fab__label--external-${e.labelPosition}` + (!0 === o ? " q-fab__label--external-hidden" : "")
                        ],
                        style: e.labelStyle
                    }
                };
            }
            return {
                action: [
                    "left",
                    "top"
                ].includes(e.labelPosition) ? "unshift" : "push",
                data: {
                    class: [
                        e.labelClass,
                        `q-fab__label q-fab__label--internal q-fab__label--internal-${e.labelPosition}` + (!0 === e.hideLabel ? " q-fab__label--internal-hidden" : "")
                    ],
                    style: e.labelStyle
                }
            };
        })
    };
}
const directions = [
    "up",
    "right",
    "down",
    "left"
], alignValues = [
    "left",
    "center",
    "right"
];
var QFab = createComponent({
    name: "QFab",
    props: {
        ...useFabProps,
        ...useModelToggleProps,
        icon: String,
        activeIcon: String,
        hideIcon: Boolean,
        hideLabel: {
            default: null
        },
        direction: {
            type: String,
            default: "right",
            validator: (e)=>directions.includes(e)
        },
        persistent: Boolean,
        verticalActionsAlign: {
            type: String,
            default: "center",
            validator: (e)=>alignValues.includes(e)
        }
    },
    emits: useModelToggleEmits,
    setup (e103, { slots: t  }) {
        const o41 = _vue.ref(null), n = _vue.ref(!0 === e103.modelValue), { proxy: { $q: a  }  } = _vue.getCurrentInstance(), { formClass: l , labelProps: i  } = useFab(e103, n), r = _vue.computed(()=>!0 !== e103.persistent
        ), { hide: s , toggle: u  } = useModelToggle({
            showing: n,
            hideOnRouteChange: r
        }), c = _vue.computed(()=>"q-fab z-fab row inline justify-center" + ` q-fab--align-${e103.verticalActionsAlign} ${l.value}` + (!0 === n.value ? " q-fab--opened" : " q-fab--closed")
        ), d = _vue.computed(()=>"q-fab__actions flex no-wrap inline" + ` q-fab__actions--${e103.direction}` + ` q-fab__actions--${!0 === n.value ? "opened" : "closed"}`
        ), p = _vue.computed(()=>"q-fab__icon-holder " + ` q-fab__icon-holder--${!0 === n.value ? "opened" : "closed"}`
        );
        function v() {
            const o = [];
            return !0 !== e103.hideIcon && o.push(_vue.h("div", {
                class: p.value
            }, [
                _vue.h(QIcon, {
                    class: "q-fab__icon absolute-full",
                    name: e103.icon || a.iconSet.fab.icon
                }),
                _vue.h(QIcon, {
                    class: "q-fab__active-icon absolute-full",
                    name: e103.activeIcon || a.iconSet.fab.activeIcon
                })
            ])), "" !== e103.label && o[i.value.action](_vue.h("div", i.value.data, [
                e103.label
            ])), hMergeSlot(t.tooltip, o);
        }
        return _vue.provide(fabKey, {
            showing: n,
            onChildClick (e) {
                s(e), null !== o41.value && o41.value.$el.focus();
            }
        }), ()=>_vue.h("div", {
                class: c.value
            }, [
                _vue.h(QBtn, {
                    ref: o41,
                    class: l.value,
                    ...e103,
                    noWrap: !0,
                    stack: e103.stacked,
                    align: void 0,
                    icon: void 0,
                    label: void 0,
                    noCaps: !0,
                    fab: !0,
                    "aria-expanded": !0 === n.value ? "true" : "false",
                    "aria-haspopup": "true",
                    onClick: u
                }, v),
                _vue.h("div", {
                    class: d.value
                }, hSlot(t.default))
            ])
        ;
    }
});
const anchorMap = {
    start: "self-end",
    center: "self-center",
    end: "self-start"
}, anchorValues = Object.keys(anchorMap);
var QFabAction = createComponent({
    name: "QFabAction",
    props: {
        ...useFabProps,
        icon: {
            type: String,
            default: ""
        },
        anchor: {
            type: String,
            validator: (e)=>anchorValues.includes(e)
        },
        to: [
            String,
            Object
        ],
        replace: Boolean
    },
    emits: [
        "click"
    ],
    setup (e104, { slots: t74 , emit: o42  }) {
        const n = _vue.inject(fabKey, ()=>({
                showing: {
                    value: !0
                },
                onChildClick: noop
            })
        ), { formClass: a , labelProps: l  } = useFab(e104, n.showing), i = _vue.computed(()=>{
            const t = anchorMap[e104.anchor];
            return a.value + (void 0 !== t ? ` ${t}` : "");
        }), r = _vue.computed(()=>!0 === e104.disable || !0 !== n.showing.value
        );
        function s(e) {
            n.onChildClick(e), o42("click", e);
        }
        function u() {
            const o = [];
            return "" !== e104.icon && o.push(_vue.h(QIcon, {
                name: e104.icon
            })), "" !== e104.label && o[l.value.action](_vue.h("div", l.value.data, [
                e104.label
            ])), hMergeSlot(t74.default, o);
        }
        const c = _vue.getCurrentInstance();
        return Object.assign(c.proxy, {
            click: s
        }), ()=>_vue.h(QBtn, {
                class: i.value,
                ...e104,
                noWrap: !0,
                stack: e104.stacked,
                icon: void 0,
                label: void 0,
                noCaps: !0,
                fabMini: !0,
                disable: r.value,
                onClick: s
            }, u)
        ;
    }
});
function useFormChild({ validate: e105 , resetValidation: t , requiresQForm: o  }) {
    const n = _vue.inject(formKey, !1);
    if (!1 !== n) {
        const { props: o , proxy: a  } = _vue.getCurrentInstance();
        Object.assign(a, {
            validate: e105,
            resetValidation: t
        }), _vue.watch(()=>o.disable
        , (e)=>{
            !0 === e ? ("function" === typeof t && t(), n.unbindComponent(a)) : n.bindComponent(a);
        }), !0 !== o.disable && n.bindComponent(a), _vue.onBeforeUnmount(()=>{
            !0 !== o.disable && n.unbindComponent(a);
        });
    } else !0 === o && console.error("Parent QForm not found on useFormChild()!");
}
const lazyRulesValues = [
    !0,
    !1,
    "ondemand"
], useValidateProps = {
    modelValue: {
    },
    error: {
        type: Boolean,
        default: null
    },
    errorMessage: String,
    noErrorIcon: Boolean,
    rules: Array,
    reactiveRules: Boolean,
    lazyRules: {
        type: [
            Boolean,
            String
        ],
        validator: (e)=>lazyRulesValues.includes(e)
    }
};
function useValidate(e106, t76) {
    const { props: o43 , proxy: n33  } = _vue.getCurrentInstance(), a17 = _vue.ref(!1), l13 = _vue.ref(null), i = _vue.ref(null);
    useFormChild({
        validate: v,
        resetValidation: p
    });
    let r5, s = 0;
    const u = _vue.computed(()=>void 0 !== o43.rules && null !== o43.rules && o43.rules.length > 0
    ), c2 = _vue.computed(()=>!0 === o43.error || !0 === a17.value
    ), d = _vue.computed(()=>"string" === typeof o43.errorMessage && o43.errorMessage.length > 0 ? o43.errorMessage : l13.value
    );
    function p() {
        s++, t76.value = !1, i.value = null, a17.value = !1, l13.value = null;
    }
    function v(e107 = o43.modelValue) {
        if (!0 !== u.value) return !0;
        s++, !0 !== t76.value && !0 !== o43.lazyRules && (i.value = !0);
        const n34 = (e, o)=>{
            a17.value !== e && (a17.value = e);
            const n = o || void 0;
            l13.value !== n && (l13.value = n), !1 !== t76.value && (t76.value = !1);
        }, r = [];
        for(let t75 = 0; t75 < o43.rules.length; t75++){
            const a = o43.rules[t75];
            let l;
            if ("function" === typeof a ? l = a(e107) : "string" === typeof a && void 0 !== testPattern[a] && (l = testPattern[a](e107)), !1 === l || "string" === typeof l) return n34(!0, l), !1;
            !0 !== l && void 0 !== l && r.push(l);
        }
        if (0 === r.length) return n34(!1), !0;
        !0 !== t76.value && (t76.value = !0);
        const c = s;
        return Promise.all(r).then((e108)=>{
            if (c !== s) return !0;
            if (void 0 === e108 || !1 === Array.isArray(e108) || 0 === e108.length) return n34(!1), !0;
            const t = e108.find((e)=>!1 === e || "string" === typeof e
            );
            return n34(void 0 !== t, t), void 0 === t;
        }, (e)=>{
            return c !== s || (console.error(e), n34(!0), !1);
        });
    }
    function m(e) {
        !0 === u.value && "ondemand" !== o43.lazyRules && (!0 === i.value || !0 !== o43.lazyRules && !0 !== e) && v();
    }
    return _vue.watch(()=>o43.modelValue
    , ()=>{
        m();
    }), _vue.watch(()=>o43.reactiveRules
    , (e)=>{
        !0 === e ? void 0 === r5 && (r5 = _vue.watch(()=>o43.rules
        , ()=>{
            m(!0);
        })) : void 0 !== r5 && (r5(), r5 = void 0);
    }, {
        immediate: !0
    }), _vue.watch(e106, (e)=>{
        "ondemand" !== o43.lazyRules && (!0 === e ? null === i.value && (i.value = !1) : !1 === i.value && !0 === u.value && (i.value = !0, v()));
    }), _vue.onBeforeUnmount(()=>{
        void 0 !== r5 && r5();
    }), Object.assign(n33, {
        resetValidation: p,
        validate: v
    }), Object.defineProperty(n33, "hasError", {
        get: ()=>c2.value
    }), {
        isDirtyModel: i,
        hasRules: u,
        hasError: c2,
        computedErrorMessage: d,
        validate: v,
        resetValidation: p
    };
}
function getTargetUid(e) {
    return void 0 === e ? `f_${uid$2()}` : e;
}
function fieldValueIsFilled(e) {
    return void 0 !== e && null !== e && ("" + e).length > 0;
}
const useFieldProps = {
    ...useDarkProps,
    ...useValidateProps,
    label: String,
    stackLabel: Boolean,
    hint: String,
    hideHint: Boolean,
    prefix: String,
    suffix: String,
    labelColor: String,
    color: String,
    bgColor: String,
    filled: Boolean,
    outlined: Boolean,
    borderless: Boolean,
    standout: [
        Boolean,
        String
    ],
    square: Boolean,
    loading: Boolean,
    labelSlot: Boolean,
    bottomSlots: Boolean,
    hideBottomSpace: Boolean,
    rounded: Boolean,
    dense: Boolean,
    itemAligned: Boolean,
    counter: Boolean,
    clearable: Boolean,
    clearIcon: String,
    disable: Boolean,
    readonly: Boolean,
    autofocus: Boolean,
    for: String,
    maxlength: [
        Number,
        String
    ]
}, useFieldEmits = [
    "update:modelValue",
    "clear",
    "focus",
    "blur",
    "popup-show",
    "popup-hide"
];
function useFieldState() {
    const { props: e , attrs: t , proxy: o , vnode: n  } = _vue.getCurrentInstance(), a = useDark(e, o.$q);
    return {
        isDark: a,
        editable: _vue.computed(()=>!0 !== e.disable && !0 !== e.readonly
        ),
        innerLoading: _vue.ref(!1),
        focused: _vue.ref(!1),
        hasPopupOpen: !1,
        splitAttrs: useSplitAttrs(t, n),
        targetUid: _vue.ref(getTargetUid(e.for)),
        rootRef: _vue.ref(null),
        targetRef: _vue.ref(null),
        controlRef: _vue.ref(null)
    };
}
function useField(e109) {
    const { props: t77 , emit: o44 , slots: n35 , attrs: a18 , proxy: l14  } = _vue.getCurrentInstance(), { $q: i8  } = l14;
    let r;
    void 0 === e109.hasValue && (e109.hasValue = _vue.computed(()=>fieldValueIsFilled(t77.modelValue)
    )), void 0 === e109.emitValue && (e109.emitValue = (e)=>{
        o44("update:modelValue", e);
    }), void 0 === e109.controlEvents && (e109.controlEvents = {
        onFocusin: q,
        onFocusout: T
    }), Object.assign(e109, {
        clearValue: P,
        onControlFocusin: q,
        onControlFocusout: T,
        focus: k
    }), void 0 === e109.computedCounter && (e109.computedCounter = _vue.computed(()=>{
        if (!1 !== t77.counter) {
            const e = "string" === typeof t77.modelValue || "number" === typeof t77.modelValue ? ("" + t77.modelValue).length : !0 === Array.isArray(t77.modelValue) ? t77.modelValue.length : 0, o = void 0 !== t77.maxlength ? t77.maxlength : t77.maxValues;
            return e + (void 0 !== o ? " / " + o : "");
        }
    }));
    const { isDirtyModel: s , hasRules: u , hasError: c , computedErrorMessage: d , resetValidation: p  } = useValidate(e109.focused, e109.innerLoading), v = void 0 !== e109.floatingLabel ? _vue.computed(()=>!0 === t77.stackLabel || !0 === e109.focused.value || !0 === e109.floatingLabel.value
    ) : _vue.computed(()=>!0 === t77.stackLabel || !0 === e109.focused.value || !0 === e109.hasValue.value
    ), m = _vue.computed(()=>!0 === t77.bottomSlots || void 0 !== t77.hint || !0 === u.value || !0 === t77.counter || null !== t77.error
    ), f = _vue.computed(()=>{
        return !0 === t77.filled ? "filled" : !0 === t77.outlined ? "outlined" : !0 === t77.borderless ? "borderless" : t77.standout ? "standout" : "standard";
    }), g = _vue.computed(()=>`q-field row no-wrap items-start q-field--${f.value}` + (void 0 !== e109.fieldClass ? ` ${e109.fieldClass.value}` : "") + (!0 === t77.rounded ? " q-field--rounded" : "") + (!0 === t77.square ? " q-field--square" : "") + (!0 === v.value ? " q-field--float" : "") + (!0 === y.value ? " q-field--labeled" : "") + (!0 === t77.dense ? " q-field--dense" : "") + (!0 === t77.itemAligned ? " q-field--item-aligned q-item-type" : "") + (!0 === e109.isDark.value ? " q-field--dark" : "") + (void 0 === e109.getControl ? " q-field--auto-height" : "") + (!0 === e109.focused.value ? " q-field--focused" : "") + (!0 === c.value ? " q-field--error" : "") + (!0 === c.value || !0 === e109.focused.value ? " q-field--highlighted" : "") + (!0 !== t77.hideBottomSpace && !0 === m.value ? " q-field--with-bottom" : "") + (!0 === t77.disable ? " q-field--disabled" : !0 === t77.readonly ? " q-field--readonly" : "")
    ), b = _vue.computed(()=>"q-field__control relative-position row no-wrap" + (void 0 !== t77.bgColor ? ` bg-${t77.bgColor}` : "") + (!0 === c.value ? " text-negative" : "string" === typeof t77.standout && t77.standout.length > 0 && !0 === e109.focused.value ? ` ${t77.standout}` : void 0 !== t77.color ? ` text-${t77.color}` : "")
    ), y = _vue.computed(()=>!0 === t77.labelSlot || void 0 !== t77.label
    ), S = _vue.computed(()=>"q-field__label no-pointer-events absolute ellipsis" + (void 0 !== t77.labelColor && !0 !== c.value ? ` text-${t77.labelColor}` : "")
    ), w = _vue.computed(()=>({
            id: e109.targetUid.value,
            editable: e109.editable.value,
            focused: e109.focused.value,
            floatingLabel: v.value,
            modelValue: t77.modelValue,
            emitValue: e109.emitValue
        })
    ), x = _vue.computed(()=>{
        const o = {
            for: e109.targetUid.value
        };
        return !0 === t77.disable ? o["aria-disabled"] = "true" : !0 === t77.readonly && (o["aria-readonly"] = "true"), o;
    });
    let C;
    function k() {
        void 0 !== C && removeFocusFn(C), C = addFocusFn(()=>{
            C = void 0;
            const t = document.activeElement;
            let o = void 0 !== e109.targetRef && e109.targetRef.value;
            !o || null !== t && t.id === e109.targetUid.value || (!0 === o.hasAttribute("tabindex") || (o = o.querySelector("[tabindex]")), o && o !== t && o.focus());
        });
    }
    function _() {
        void 0 !== C && removeFocusFn(C);
        const t = document.activeElement;
        null !== t && e109.rootRef.value.contains(t) && t.blur();
    }
    function q(t) {
        !0 === e109.editable.value && !1 === e109.focused.value && (e109.focused.value = !0, o44("focus", t));
    }
    function T(t, n) {
        clearTimeout(r), r = setTimeout(()=>{
            (!0 !== document.hasFocus() || !0 !== e109.hasPopupOpen && (void 0 === e109.controlRef || null !== e109.controlRef.value && !1 === e109.controlRef.value.contains(document.activeElement))) && (!0 === e109.focused.value && (e109.focused.value = !1, o44("blur", t)), void 0 !== n && n());
        });
    }
    function P(n) {
        if (stopAndPrevent(n), !0 !== i8.platform.is.mobile) {
            const t = void 0 !== e109.targetRef && e109.targetRef.value || e109.rootRef.value;
            t.focus();
        } else !0 === e109.rootRef.value.contains(document.activeElement) && document.activeElement.blur();
        "file" === t77.type && (e109.inputRef.value.value = null), o44("update:modelValue", null), o44("clear", t77.modelValue), _vue.nextTick(()=>{
            p(), "ondemand" !== t77.lazyRules && !0 !== i8.platform.is.mobile && (s.value = !1);
        });
    }
    function $() {
        const o = [];
        return void 0 !== n35.prepend && o.push(_vue.h("div", {
            class: "q-field__prepend q-field__marginal row no-wrap items-center",
            key: "prepend",
            onClick: prevent
        }, n35.prepend())), o.push(_vue.h("div", {
            class: "q-field__control-container col relative-position row no-wrap q-anchor--skip"
        }, M())), void 0 !== n35.append && o.push(_vue.h("div", {
            class: "q-field__append q-field__marginal row no-wrap items-center",
            key: "append",
            onClick: prevent
        }, n35.append())), !0 === c.value && !1 === t77.noErrorIcon && o.push(Q("error", [
            _vue.h(QIcon, {
                name: i8.iconSet.field.error,
                color: "negative"
            })
        ])), !0 === t77.loading || !0 === e109.innerLoading.value ? o.push(Q("inner-loading-append", void 0 !== n35.loading ? n35.loading() : [
            _vue.h(QSpinner, {
                color: t77.color
            })
        ])) : !0 === t77.clearable && !0 === e109.hasValue.value && !0 === e109.editable.value && o.push(Q("inner-clearable-append", [
            _vue.h(QIcon, {
                class: "q-field__focusable-action",
                tag: "button",
                name: t77.clearIcon || i8.iconSet.field.clear,
                tabindex: 0,
                type: "button",
                onClick: P
            })
        ])), void 0 !== e109.getInnerAppend && o.push(Q("inner-append", e109.getInnerAppend())), void 0 !== e109.getControlChild && o.push(e109.getControlChild()), o;
    }
    function M() {
        const o = [];
        return void 0 !== t77.prefix && null !== t77.prefix && o.push(_vue.h("div", {
            class: "q-field__prefix no-pointer-events row items-center"
        }, t77.prefix)), void 0 !== e109.getShadowControl && !0 === e109.hasShadow.value && o.push(e109.getShadowControl()), void 0 !== e109.getControl ? o.push(e109.getControl()) : void 0 !== n35.rawControl ? o.push(n35.rawControl()) : void 0 !== n35.control && o.push(_vue.h("div", {
            ref: e109.targetRef,
            class: "q-field__native row",
            ...e109.splitAttrs.attributes.value,
            "data-autofocus": !0 === t77.autofocus || void 0
        }, n35.control(w.value))), !0 === y.value && o.push(_vue.h("div", {
            class: S.value
        }, hSlot(n35.label, t77.label))), void 0 !== t77.suffix && null !== t77.suffix && o.push(_vue.h("div", {
            class: "q-field__suffix no-pointer-events row items-center"
        }, t77.suffix)), o.concat(hSlot(n35.default));
    }
    function B() {
        let o, a;
        !0 === c.value ? null !== d.value ? (o = [
            _vue.h("div", {
                role: "alert"
            }, d.value)
        ], a = `q--slot-error-${d.value}`) : (o = hSlot(n35.error), a = "q--slot-error") : !0 === t77.hideHint && !0 !== e109.focused.value || (void 0 !== t77.hint ? (o = [
            _vue.h("div", t77.hint)
        ], a = `q--slot-hint-${t77.hint}`) : (o = hSlot(n35.hint), a = "q--slot-hint"));
        const l = !0 === t77.counter || void 0 !== n35.counter;
        if (!0 === t77.hideBottomSpace && !1 === l && void 0 === o) return;
        const i = _vue.h("div", {
            key: a,
            class: "q-field__messages col"
        }, o);
        return _vue.h("div", {
            class: "q-field__bottom row items-start q-field__bottom--" + (!0 !== t77.hideBottomSpace ? "animated" : "stale")
        }, [
            !0 === t77.hideBottomSpace ? i : _vue.h(_vue.Transition, {
                name: "q-transition--field-message"
            }, ()=>i
            ),
            !0 === l ? _vue.h("div", {
                class: "q-field__counter"
            }, void 0 !== n35.counter ? n35.counter() : e109.computedCounter.value) : null
        ]);
    }
    function Q(e, t) {
        return null === t ? null : _vue.h("div", {
            key: e,
            class: "q-field__append q-field__marginal row no-wrap items-center q-anchor--skip"
        }, t);
    }
    return _vue.watch(()=>t77.for
    , (t)=>{
        e109.targetUid.value = getTargetUid(t);
    }), Object.assign(l14, {
        focus: k,
        blur: _
    }), _vue.onMounted(()=>{
        !0 === isRuntimeSsrPreHydration.value && void 0 === t77.for && (e109.targetUid.value = getTargetUid()), !0 === t77.autofocus && l14.focus();
    }), _vue.onBeforeUnmount(()=>{
        clearTimeout(r);
    }), function() {
        return _vue.h("label", {
            ref: e109.rootRef,
            class: [
                g.value,
                a18.class
            ],
            style: a18.style,
            ...x.value
        }, [
            void 0 !== n35.before ? _vue.h("div", {
                class: "q-field__before q-field__marginal row no-wrap items-center",
                onClick: prevent
            }, n35.before()) : null,
            _vue.h("div", {
                class: "q-field__inner relative-position col self-stretch"
            }, [
                _vue.h("div", {
                    ref: e109.controlRef,
                    class: b.value,
                    tabindex: -1,
                    ...e109.controlEvents
                }, $()),
                !0 === m.value ? B() : null
            ]),
            void 0 !== n35.after ? _vue.h("div", {
                class: "q-field__after q-field__marginal row no-wrap items-center",
                onClick: prevent
            }, n35.after()) : null
        ]);
    };
}
var QField = createComponent({
    name: "QField",
    inheritAttrs: !1,
    props: useFieldProps,
    emits: useFieldEmits,
    setup () {
        return useField(useFieldState());
    }
});
function filterFiles(e110, t, o, n) {
    const a = [];
    return e110.forEach((e)=>{
        !0 === n(e) ? a.push(e) : t.push({
            failedPropValidation: o,
            file: e
        });
    }), a;
}
function stopAndPreventDrag(e) {
    e && e.dataTransfer && (e.dataTransfer.dropEffect = "copy"), stopAndPrevent(e);
}
const useFileProps = {
    multiple: Boolean,
    accept: String,
    capture: String,
    maxFileSize: [
        Number,
        String
    ],
    maxTotalSize: [
        Number,
        String
    ],
    maxFiles: [
        Number,
        String
    ],
    filter: Function
}, useFileEmits = [
    "rejected"
];
function useFile({ editable: e111 , dnd: t78 , getFileInput: o45 , addFilesToQueue: n36  }) {
    const { props: a , emit: l , proxy: i9  } = _vue.getCurrentInstance(), r = _vue.computed(()=>void 0 !== a.accept ? a.accept.split(",").map((e)=>{
            return e = e.trim(), "*" === e ? "*/" : (e.endsWith("/*") && (e = e.slice(0, e.length - 1)), e.toUpperCase());
        }) : null
    ), s = _vue.computed(()=>parseInt(a.maxFiles, 10)
    ), u = _vue.computed(()=>parseInt(a.maxTotalSize, 10)
    );
    function c3(t) {
        if (e111.value) {
            const e = o45();
            e && e.click(t);
        }
    }
    function d2(t) {
        e111.value && t && n36(null, t);
    }
    function p1(e112, t79, o, n) {
        let i = Array.from(t79 || e112.target.files);
        const c = [], d = ()=>{
            c.length > 0 && l("rejected", c);
        };
        if (void 0 !== a.accept && -1 === r.value.indexOf("*/") && (i = filterFiles(i, c, "accept", (e)=>{
            return r.value.some((t)=>e.type.toUpperCase().startsWith(t) || e.name.toUpperCase().endsWith(t)
            );
        }), 0 === i.length)) return d();
        if (void 0 !== a.maxFileSize) {
            const e = parseInt(a.maxFileSize, 10);
            if (i = filterFiles(i, c, "max-file-size", (t)=>{
                return t.size <= e;
            }), 0 === i.length) return d();
        }
        !0 !== a.multiple && (i = [
            i[0]
        ]);
        const p = o.map((e)=>e.name
        );
        if (i = filterFiles(i, c, "duplicate", (e)=>{
            return !1 === p.includes(e.name);
        }), 0 === i.length) return d();
        if (void 0 !== a.maxTotalSize) {
            let e113 = !0 === n ? o.reduce((e, t)=>e + t.size
            , 0) : 0;
            if (i = filterFiles(i, c, "max-total-size", (t)=>{
                return e113 += t.size, e113 <= u.value;
            }), 0 === i.length) return d();
        }
        if ("function" === typeof a.filter) {
            const e = a.filter(i);
            i = filterFiles(i, c, "filter", (t)=>{
                return e.includes(t);
            });
        }
        if (void 0 !== a.maxFiles) {
            let e = !0 === n ? o.length : 0;
            if (i = filterFiles(i, c, "max-files", ()=>{
                return e++, e <= s.value;
            }), 0 === i.length) return d();
        }
        return d(), i.length > 0 ? i : void 0;
    }
    function v(e) {
        stopAndPreventDrag(e), !0 !== t78.value && (t78.value = !0);
    }
    function m(e) {
        stopAndPrevent(e), t78.value = !1;
    }
    function f(e) {
        stopAndPreventDrag(e);
        const o = e.dataTransfer.files;
        o.length > 0 && n36(null, o), t78.value = !1;
    }
    function g(e) {
        if (!0 === t78.value) return _vue.h("div", {
            class: `q-${e}__dnd absolute-full`,
            onDragenter: stopAndPreventDrag,
            onDragover: stopAndPreventDrag,
            onDragleave: m,
            onDrop: f
        });
    }
    return Object.assign(i9, {
        pickFiles: c3,
        addFiles: d2
    }), {
        pickFiles: c3,
        addFiles: d2,
        onDragover: v,
        processFiles: p1,
        getDndNode: g,
        maxFilesNumber: s,
        maxTotalSizeNumber: u
    };
}
function useFileFormDomProps(e114, t80) {
    function o() {
        const t81 = e114.modelValue;
        try {
            const e = "DataTransfer" in window ? new DataTransfer : "ClipboardEvent" in window ? new ClipboardEvent("").clipboardData : void 0;
            return Object(t81) === t81 && ("length" in t81 ? Array.from(t81) : [
                t81
            ]).forEach((t)=>{
                e.items.add(t);
            }), {
                files: e.files
            };
        } catch (e) {
            return {
                files: void 0
            };
        }
    }
    return _vue.computed(!0 === t80 ? ()=>{
        if ("file" === e114.type) return o();
    } : o);
}
var QFile = createComponent({
    name: "QFile",
    inheritAttrs: !1,
    props: {
        ...useFieldProps,
        ...useFormProps,
        ...useFileProps,
        modelValue: [
            File,
            FileList,
            Array
        ],
        append: Boolean,
        useChips: Boolean,
        displayValue: [
            String,
            Number
        ],
        tabindex: {
            type: [
                String,
                Number
            ],
            default: 0
        },
        counterLabel: Function,
        inputClass: [
            Array,
            String,
            Object
        ],
        inputStyle: [
            Array,
            String,
            Object
        ]
    },
    emits: [
        ...useFieldEmits,
        ...useFileEmits
    ],
    setup (e115, { slots: t82 , emit: o46 , attrs: n37  }) {
        const { proxy: a  } = _vue.getCurrentInstance(), l = useFieldState(), i = _vue.ref(null), r = _vue.ref(!1), s = useFormInputNameAttr(e115), { pickFiles: u , onDragover: c , processFiles: d , getDndNode: p  } = useFile({
            editable: l.editable,
            dnd: r,
            getFileInput: q,
            addFilesToQueue: T
        }), v = useFileFormDomProps(e115), m = _vue.computed(()=>Object(e115.modelValue) === e115.modelValue ? "length" in e115.modelValue ? Array.from(e115.modelValue) : [
                e115.modelValue
            ] : []
        ), f = _vue.computed(()=>fieldValueIsFilled(m.value)
        ), g = _vue.computed(()=>m.value.map((e)=>e.name
            ).join(", ")
        ), b = _vue.computed(()=>humanStorageSize(m.value.reduce((e, t)=>e + t.size
            , 0))
        ), y = _vue.computed(()=>({
                totalSize: b.value,
                filesNumber: m.value.length,
                maxFiles: e115.maxFiles
            })
        ), S = _vue.computed(()=>({
                tabindex: -1,
                type: "file",
                title: "",
                accept: e115.accept,
                capture: e115.capture,
                name: s.value,
                ...n37,
                id: l.targetUid.value,
                disabled: !0 !== l.editable.value
            })
        ), w = _vue.computed(()=>!0 === e115.multiple && !0 === e115.append
        );
        function x(e) {
            const t = m.value.slice();
            t.splice(e, 1), k(t);
        }
        function C(e) {
            const t = m.value.findIndex(e);
            t > -1 && x(t);
        }
        function k(t) {
            o46("update:modelValue", !0 === e115.multiple ? t : t[0]);
        }
        function _(e) {
            13 === e.keyCode && u(e);
        }
        function q() {
            return i.value;
        }
        function T(t, o) {
            const n = d(t, o, m.value, w.value);
            void 0 !== n && ((!0 === e115.multiple ? e115.modelValue && n.every((e)=>m.value.includes(e)
            ) : e115.modelValue === n[0]) || k(!0 === w.value ? m.value.concat(n) : n));
        }
        function P() {
            return [
                _vue.h("input", {
                    class: [
                        e115.inputClass,
                        "q-file__filler"
                    ],
                    style: e115.inputStyle,
                    tabindex: -1
                })
            ];
        }
        function $() {
            if (void 0 !== t82.file) return 0 === m.value.length ? P() : m.value.map((e, o)=>t82.file({
                    index: o,
                    file: e,
                    ref: this
                })
            );
            if (void 0 !== t82.selected) return 0 === m.value.length ? P() : t82.selected({
                files: m.value,
                ref: this
            });
            if (!0 === e115.useChips) return 0 === m.value.length ? P() : m.value.map((t, o)=>_vue.h(QChip, {
                    key: "file-" + o,
                    removable: l.editable.value,
                    dense: !0,
                    textColor: e115.color,
                    tabindex: e115.tabindex,
                    onRemove: ()=>{
                        x(o);
                    }
                }, ()=>_vue.h("span", {
                        class: "ellipsis",
                        textContent: t.name
                    })
                )
            );
            const o47 = void 0 !== e115.displayValue ? e115.displayValue : g.value;
            return o47.length > 0 ? [
                _vue.h("div", {
                    class: e115.inputClass,
                    style: e115.inputStyle,
                    textContent: o47
                })
            ] : P();
        }
        function M() {
            const t = {
                ref: i,
                ...S.value,
                ...v.value,
                class: "q-field__input fit absolute-full cursor-pointer",
                onChange: T
            };
            return !0 === e115.multiple && (t.multiple = !0), _vue.h("input", t);
        }
        return Object.assign(l, {
            fieldClass: {
                value: "q-file q-field--auto-height"
            },
            emitValue: k,
            hasValue: f,
            inputRef: i,
            innerValue: m,
            floatingLabel: _vue.computed(()=>!0 === f.value || fieldValueIsFilled(e115.displayValue)
            ),
            computedCounter: _vue.computed(()=>{
                if (void 0 !== e115.counterLabel) return e115.counterLabel(y.value);
                const t = e115.maxFiles;
                return `${m.value.length}${void 0 !== t ? " / " + t : ""} (${b.value})`;
            }),
            getControlChild: ()=>p("file")
            ,
            getControl: ()=>{
                const t = {
                    ref: l.targetRef,
                    class: "q-field__native row items-center cursor-pointer",
                    tabindex: e115.tabindex
                };
                return !0 === l.editable.value && Object.assign(t, {
                    onDragover: c,
                    onKeyup: _
                }), _vue.h("div", t, [
                    M()
                ].concat($()));
            }
        }), Object.assign(a, {
            removeAtIndex: x,
            removeFile: C,
            getNativeElement: ()=>i.value
        }), useField(l);
    }
}), QFooter = createComponent({
    name: "QFooter",
    props: {
        modelValue: {
            type: Boolean,
            default: !0
        },
        reveal: Boolean,
        bordered: Boolean,
        elevated: Boolean,
        heightHint: {
            type: [
                String,
                Number
            ],
            default: 50
        }
    },
    emits: [
        "reveal",
        "focusin"
    ],
    setup (e116, { slots: t83 , emit: o48  }) {
        const { proxy: { $q: n38  }  } = _vue.getCurrentInstance(), a = _vue.inject(layoutKey, ()=>{
            console.error("QFooter needs to be child of QLayout");
        }), l = _vue.ref(parseInt(e116.heightHint, 10)), i = _vue.ref(!0), r = _vue.ref(!0 === isRuntimeSsrPreHydration.value || !0 === a.isContainer.value ? 0 : window.innerHeight), s = _vue.computed(()=>!0 === e116.reveal || a.view.value.indexOf("F") > -1 || !0 === a.isContainer.value
        ), u = _vue.computed(()=>!0 === a.isContainer.value ? a.containerHeight.value : r.value
        ), c = _vue.computed(()=>{
            if (!0 !== e116.modelValue) return 0;
            if (!0 === s.value) return !0 === i.value ? l.value : 0;
            const t = a.scroll.value.position + u.value + l.value - a.height.value;
            return t > 0 ? t : 0;
        }), d = _vue.computed(()=>!0 !== e116.modelValue || !0 === s.value && !0 !== i.value
        ), p = _vue.computed(()=>!0 === e116.modelValue && !0 === d.value && !0 === e116.reveal
        ), v = _vue.computed(()=>"q-footer q-layout__section--marginal " + (!0 === s.value ? "fixed" : "absolute") + "-bottom" + (!0 === e116.bordered ? " q-footer--bordered" : "") + (!0 === d.value ? " q-footer--hidden" : "") + (!0 !== e116.modelValue ? " q-layout--prevent-focus" + (!0 !== s.value ? " hidden" : "") : "")
        ), m = _vue.computed(()=>{
            const e = a.rows.value.bottom, t = {
            };
            return "l" === e[0] && !0 === a.left.space && (t[!0 === n38.lang.rtl ? "right" : "left"] = `${a.left.size}px`), "r" === e[2] && !0 === a.right.space && (t[!0 === n38.lang.rtl ? "left" : "right"] = `${a.right.size}px`), t;
        });
        function f(e, t) {
            a.update("footer", e, t);
        }
        function g(e, t) {
            e.value !== t && (e.value = t);
        }
        function b({ height: e  }) {
            g(l, e), f("size", e);
        }
        function y() {
            if (!0 !== e116.reveal) return;
            const { direction: t , position: o , inflectionPoint: n  } = a.scroll.value;
            g(i, "up" === t || o - n < 100 || a.height.value - u.value - o - l.value < 300);
        }
        function S(e) {
            !0 === p.value && g(i, !0), o48("focusin", e);
        }
        _vue.watch(()=>e116.modelValue
        , (e)=>{
            f("space", e), g(i, !0), a.animate();
        }), _vue.watch(c, (e)=>{
            f("offset", e);
        }), _vue.watch(()=>e116.reveal
        , (t)=>{
            !1 === t && g(i, e116.modelValue);
        }), _vue.watch(i, (e)=>{
            a.animate(), o48("reveal", e);
        }), _vue.watch([
            l,
            a.scroll,
            a.height
        ], y), _vue.watch(()=>n38.screen.height
        , (e)=>{
            !0 !== a.isContainer.value && g(r, e);
        });
        const w = {
        };
        return a.instances.footer = w, !0 === e116.modelValue && f("size", l.value), f("space", e116.modelValue), f("offset", c.value), _vue.onBeforeUnmount(()=>{
            a.instances.footer === w && (a.instances.footer = void 0, f("size", 0), f("offset", 0), f("space", !1));
        }), ()=>{
            const o = hMergeSlot(t83.default, [
                _vue.h(QResizeObserver, {
                    debounce: 0,
                    onResize: b
                })
            ]);
            return !0 === e116.elevated && o.push(_vue.h("div", {
                class: "q-layout__shadow absolute-full overflow-hidden no-pointer-events"
            })), _vue.h("footer", {
                class: v.value,
                style: m.value,
                onFocusin: S
            }, o);
        };
    }
}), QForm = createComponent({
    name: "QForm",
    props: {
        autofocus: Boolean,
        noErrorFocus: Boolean,
        noResetFocus: Boolean,
        greedy: Boolean,
        onSubmit: Function
    },
    emits: [
        "reset",
        "validation-success",
        "validation-error"
    ],
    setup (e117, { slots: t84 , emit: o50  }) {
        const n39 = _vue.getCurrentInstance(), a19 = _vue.ref(null);
        let l15 = 0;
        const i = [];
        function r6(t85) {
            const n40 = [], a = "boolean" === typeof t85 ? t85 : !0 !== e117.noErrorFocus;
            l15++;
            const r = (e, t)=>{
                o50("validation-" + (!0 === e ? "success" : "error"), t);
            };
            for(let o49 = 0; o49 < i.length; o49++){
                const t = i[o49], l = t.validate();
                if ("function" === typeof l.then) n40.push(l.then((e)=>({
                        valid: e,
                        comp: t
                    })
                , (e)=>({
                        valid: !1,
                        comp: t,
                        error: e
                    })
                ));
                else if (!0 !== l) {
                    if (!1 === e117.greedy) return r(!1, t), !0 === a && "function" === typeof t.focus && t.focus(), Promise.resolve(!1);
                    n40.push({
                        valid: !1,
                        comp: t
                    });
                }
            }
            if (0 === n40.length) return r(!0), Promise.resolve(!0);
            const s = l15;
            return Promise.all(n40).then((e118)=>{
                if (s === l15) {
                    const t = e118.filter((e)=>!0 !== e.valid
                    );
                    if (0 === t.length) return r(!0), !0;
                    const { valid: o , comp: n  } = t[0];
                    return r(!1, n), !0 === a && !0 !== o && "function" === typeof n.focus && n.focus(), !1;
                }
            });
        }
        function s7() {
            l15++, i.forEach((e)=>{
                "function" === typeof e.resetValidation && e.resetValidation();
            });
        }
        function u(t) {
            void 0 !== t && stopAndPrevent(t), r6().then((n)=>{
                !0 === n && (void 0 !== e117.onSubmit ? o50("submit", t) : void 0 !== t && void 0 !== t.target && "function" === typeof t.target.submit && t.target.submit());
            });
        }
        function c(t) {
            void 0 !== t && stopAndPrevent(t), o50("reset"), _vue.nextTick(()=>{
                s7(), !0 === e117.autofocus && !0 !== e117.noResetFocus && d();
            });
        }
        function d() {
            addFocusFn(()=>{
                if (null === a19.value) return;
                const e119 = a19.value.querySelector("[autofocus], [data-autofocus]") || Array.prototype.find.call(a19.value.querySelectorAll("[tabindex]"), (e)=>e.tabIndex > -1
                );
                null !== e119 && void 0 !== e119 && e119.focus();
            });
        }
        return _vue.provide(formKey, {
            bindComponent (e) {
                i.push(e);
            },
            unbindComponent (e) {
                const t = i.indexOf(e);
                t > -1 && i.splice(t, 1);
            }
        }), _vue.onMounted(()=>{
            !0 === e117.autofocus && d();
        }), Object.assign(n39.proxy, {
            validate: r6,
            resetValidation: s7,
            submit: u,
            reset: c,
            focus: d,
            getValidationComponents: ()=>i
        }), ()=>_vue.h("form", {
                class: "q-form",
                ref: a19,
                onSubmit: u,
                onReset: c
            }, hSlot(t84.default))
        ;
    }
}), QFormChildMixin = {
    inject: {
        [formKey]: {
            default: noop
        }
    },
    watch: {
        disable (e) {
            const t = this.$.provides[formKey];
            void 0 !== t && (!0 === e ? (this.resetValidation(), t.unbindComponent(this)) : t.bindComponent(this));
        }
    },
    methods: {
        validate () {
        },
        resetValidation () {
        }
    },
    created () {
        const e = this.$.provides[formKey];
        void 0 !== e && !0 !== this.disable && e.bindComponent(this);
    },
    beforeUnmount () {
        const e = this.$.provides[formKey];
        void 0 !== e && !0 !== this.disable && e.unbindComponent(this);
    }
}, QHeader = createComponent({
    name: "QHeader",
    props: {
        modelValue: {
            type: Boolean,
            default: !0
        },
        reveal: Boolean,
        revealOffset: {
            type: Number,
            default: 250
        },
        bordered: Boolean,
        elevated: Boolean,
        heightHint: {
            type: [
                String,
                Number
            ],
            default: 50
        }
    },
    emits: [
        "reveal",
        "focusin"
    ],
    setup (e120, { slots: t86 , emit: o51  }) {
        const { proxy: { $q: n  }  } = _vue.getCurrentInstance(), a = _vue.inject(layoutKey, ()=>{
            console.error("QHeader needs to be child of QLayout");
        }), l = _vue.ref(parseInt(e120.heightHint, 10)), i = _vue.ref(!0), r = _vue.computed(()=>!0 === e120.reveal || a.view.value.indexOf("H") > -1 || !0 === a.isContainer.value
        ), s = _vue.computed(()=>{
            if (!0 !== e120.modelValue) return 0;
            if (!0 === r.value) return !0 === i.value ? l.value : 0;
            const t = l.value - a.scroll.value.position;
            return t > 0 ? t : 0;
        }), u = _vue.computed(()=>!0 !== e120.modelValue || !0 === r.value && !0 !== i.value
        ), c = _vue.computed(()=>!0 === e120.modelValue && !0 === u.value && !0 === e120.reveal
        ), d = _vue.computed(()=>"q-header q-layout__section--marginal " + (!0 === r.value ? "fixed" : "absolute") + "-top" + (!0 === e120.bordered ? " q-header--bordered" : "") + (!0 === u.value ? " q-header--hidden" : "") + (!0 !== e120.modelValue ? " q-layout--prevent-focus" : "")
        ), p = _vue.computed(()=>{
            const e = a.rows.value.top, t = {
            };
            return "l" === e[0] && !0 === a.left.space && (t[!0 === n.lang.rtl ? "right" : "left"] = `${a.left.size}px`), "r" === e[2] && !0 === a.right.space && (t[!0 === n.lang.rtl ? "left" : "right"] = `${a.right.size}px`), t;
        });
        function v(e, t) {
            a.update("header", e, t);
        }
        function m(e, t) {
            e.value !== t && (e.value = t);
        }
        function f({ height: e  }) {
            m(l, e), v("size", e);
        }
        function g(e) {
            !0 === c.value && m(i, !0), o51("focusin", e);
        }
        _vue.watch(()=>e120.modelValue
        , (e)=>{
            v("space", e), m(i, !0), a.animate();
        }), _vue.watch(s, (e)=>{
            v("offset", e);
        }), _vue.watch(()=>e120.reveal
        , (t)=>{
            !1 === t && m(i, e120.modelValue);
        }), _vue.watch(i, (e)=>{
            a.animate(), o51("reveal", e);
        }), _vue.watch(a.scroll, (t)=>{
            !0 === e120.reveal && m(i, "up" === t.direction || t.position <= e120.revealOffset || t.position - t.inflectionPoint < 100);
        });
        const b = {
        };
        return a.instances.header = b, !0 === e120.modelValue && v("size", l.value), v("space", e120.modelValue), v("offset", s.value), _vue.onBeforeUnmount(()=>{
            a.instances.header === b && (a.instances.header = void 0, v("size", 0), v("offset", 0), v("space", !1));
        }), ()=>{
            const o = hUniqueSlot(t86.default, []);
            return !0 === e120.elevated && o.push(_vue.h("div", {
                class: "q-layout__shadow absolute-full overflow-hidden no-pointer-events"
            })), o.push(_vue.h(QResizeObserver, {
                debounce: 0,
                onResize: f
            })), _vue.h("header", {
                class: d.value,
                style: p.value,
                onFocusin: g
            }, o);
        };
    }
});
const useRatioProps = {
    ratio: [
        String,
        Number
    ]
};
function useRatio(e, t) {
    return _vue.computed(()=>{
        const o = Number(e.ratio || (void 0 !== t ? t.value : void 0));
        return !0 !== isNaN(o) && o > 0 ? {
            paddingBottom: `${100 / o}%`
        } : null;
    });
}
const defaultRatio = 16 / 9;
var QImg = createComponent({
    name: "QImg",
    props: {
        ...useRatioProps,
        src: String,
        srcset: String,
        sizes: String,
        alt: String,
        crossorigin: String,
        decoding: String,
        referrerpolicy: String,
        draggable: Boolean,
        loading: {
            type: String,
            default: "lazy"
        },
        width: String,
        height: String,
        initialRatio: {
            type: [
                Number,
                String
            ],
            default: defaultRatio
        },
        placeholderSrc: String,
        fit: {
            type: String,
            default: "cover"
        },
        position: {
            type: String,
            default: "50% 50%"
        },
        imgClass: String,
        imgStyle: Object,
        noSpinner: Boolean,
        noNativeMenu: Boolean,
        noTransition: Boolean,
        spinnerColor: String,
        spinnerSize: String
    },
    emits: [
        "load",
        "error"
    ],
    setup (e121, { slots: t87 , emit: o52  }) {
        const n41 = _vue.ref(e121.initialRatio), a = useRatio(e121, n41);
        let l;
        const i = [
            _vue.ref(null),
            _vue.ref(void 0 !== e121.placeholderSrc ? {
                src: e121.placeholderSrc
            } : null)
        ], r = _vue.ref(0), s = _vue.ref(!1), u = _vue.ref(!1), c = _vue.computed(()=>`q-img q-img--${!0 === e121.noNativeMenu ? "no-" : ""}menu`
        ), d = _vue.computed(()=>({
                width: e121.width,
                height: e121.height
            })
        ), p = _vue.computed(()=>`q-img__image ${void 0 !== e121.imgClass ? e121.imgClass + " " : ""}` + `q-img__image--with${!0 === e121.noTransition ? "out" : ""}-transition`
        ), v = _vue.computed(()=>({
                ...e121.imgStyle,
                objectFit: e121.fit,
                objectPosition: e121.position
            })
        );
        function m() {
            return e121.src || e121.srcset || e121.sizes ? {
                src: e121.src,
                srcset: e121.srcset,
                sizes: e121.sizes
            } : null;
        }
        function f(e) {
            if (clearTimeout(l), u.value = !1, null === e) return s.value = !1, i[0].value = null, void (i[1].value = null);
            s.value = !0, i[r.value].value = e;
        }
        function g({ target: e  }) {
            null !== l && (clearTimeout(l), n41.value = 0 === e.naturalHeight ? 0.5 : e.naturalWidth / e.naturalHeight, b(e, 1));
        }
        function b(e, t) {
            null !== l && 1000 !== t && (!0 === e.complete ? y(e) : l = setTimeout(()=>{
                b(e, t + 1);
            }, 50));
        }
        function y(e) {
            null !== l && (r.value = 1 === r.value ? 0 : 1, i[r.value].value = null, s.value = !1, u.value = !1, o52("load", e.currentSrc || e.src));
        }
        function S(e) {
            clearTimeout(l), s.value = !1, u.value = !0, i[0].value = null, i[1].value = null, o52("error", e);
        }
        function w(e, t) {
            return _vue.h("div", {
                class: "q-img__container absolute-full",
                key: e
            }, t);
        }
        function x(t) {
            const o = i[t].value, n = {
                key: "img_" + t,
                class: p.value,
                style: v.value,
                crossorigin: e121.crossorigin,
                decoding: e121.decoding,
                referrerpolicy: e121.referrerpolicy,
                height: e121.height,
                width: e121.width,
                loading: e121.loading,
                "aria-hidden": "true",
                draggable: e121.draggable,
                ...o
            };
            return r.value === t ? (n.class += " q-img__image--waiting", Object.assign(n, {
                onLoad: g,
                onError: S
            })) : n.class += " q-img__image--loaded", w("img" + t, _vue.h("img", n));
        }
        function C() {
            return !0 !== s.value ? _vue.h("div", {
                key: "content",
                class: "q-img__content absolute-full q-anchor--skip"
            }, hSlot(t87[!0 === u.value ? "error" : "default"])) : _vue.h("div", {
                key: "loading",
                class: "q-img__loading absolute-full flex flex-center"
            }, void 0 !== t87.loading ? t87.loading() : !0 === e121.noSpinner ? void 0 : [
                _vue.h(QSpinner, {
                    color: e121.spinnerColor,
                    size: e121.spinnerSize
                })
            ]);
        }
        return _vue.watch(()=>m()
        , f), f(m()), _vue.onBeforeUnmount(()=>{
            clearTimeout(l), l = null;
        }), ()=>{
            const t = [];
            return null !== a.value && t.push(_vue.h("div", {
                key: "filler",
                style: a.value
            })), !0 !== u.value && (null !== i[0].value && t.push(x(0)), null !== i[1].value && t.push(x(1))), t.push(_vue.h(_vue.Transition, {
                name: "q-transition--fade"
            }, C)), _vue.h("div", {
                class: c.value,
                style: d.value,
                role: "img",
                "aria-label": e121.alt
            }, t);
        };
    }
});
const { passive: passive$3  } = listenOpts;
var QInfiniteScroll = createComponent({
    name: "QInfiniteScroll",
    props: {
        offset: {
            type: Number,
            default: 500
        },
        debounce: {
            type: [
                String,
                Number
            ],
            default: 100
        },
        scrollTarget: {
            default: void 0
        },
        initialIndex: Number,
        disable: Boolean,
        reverse: Boolean
    },
    emits: [
        "load"
    ],
    setup (e122, { slots: t88 , emit: o53  }) {
        const n42 = _vue.ref(!1), a = _vue.ref(!0), l16 = _vue.ref(null);
        let i, r, s = e122.initialIndex || 0, u = !1;
        const c = _vue.computed(()=>"q-infinite-scroll__loading" + (!0 === n42.value ? "" : " invisible")
        );
        function d() {
            if (!0 === e122.disable || !0 === n42.value || !1 === a.value) return;
            const t = getScrollHeight(i), o = getVerticalScrollPosition(i), l = height(i);
            !1 === e122.reverse ? o + l + e122.offset >= t && p() : o < e122.offset && p();
        }
        function p() {
            if (!0 === e122.disable || !0 === n42.value || !1 === a.value) return;
            s++, n42.value = !0;
            const t = getScrollHeight(i);
            o53("load", s, (o54)=>{
                !0 === a.value && (n42.value = !1, _vue.nextTick(()=>{
                    if (!0 === e122.reverse) {
                        const e = getScrollHeight(i), o = getVerticalScrollPosition(i), n = e - t;
                        setVerticalScrollPosition(i, o + n);
                    }
                    !0 === o54 ? f() : l16.value && l16.value.closest("body") && r();
                }));
            });
        }
        function v() {
            s = 0;
        }
        function m() {
            !1 === a.value && (a.value = !0, i.addEventListener("scroll", r, passive$3)), d();
        }
        function f() {
            !0 === a.value && (a.value = !1, n42.value = !1, i.removeEventListener("scroll", r, passive$3));
        }
        function g() {
            i && !0 === a.value && i.removeEventListener("scroll", r, passive$3), i = getScrollTarget(l16.value, e122.scrollTarget), !0 === a.value && i.addEventListener("scroll", r, passive$3);
        }
        function b(e) {
            s = e;
        }
        const y = _vue.getCurrentInstance();
        function S(e) {
            e = parseInt(e, 10);
            const t = r;
            r = e <= 0 ? d : debounce(d, !0 === isNaN(e) ? 100 : e), i && !0 === a.value && (void 0 !== t && i.removeEventListener("scroll", t, passive$3), i.addEventListener("scroll", r, passive$3));
        }
        return Object.assign(y.proxy, {
            poll: ()=>{
                void 0 !== r && r();
            },
            trigger: p,
            stop: f,
            reset: v,
            resume: m,
            setIndex: b
        }), _vue.watch(()=>e122.disable
        , (e)=>{
            !0 === e ? f() : m();
        }), _vue.watch(()=>e122.reverse
        , (e)=>{
            !1 === n42.value && !0 === a.value && d();
        }), _vue.watch(()=>e122.scrollTarget
        , g), _vue.watch(()=>e122.debounce
        , S), _vue.onActivated(()=>{
            i && !1 !== u && setVerticalScrollPosition(i, u);
        }), _vue.onDeactivated(()=>{
            u = !!i && getVerticalScrollPosition(i);
        }), _vue.onBeforeUnmount(()=>{
            !0 === a.value && i.removeEventListener("scroll", r, passive$3);
        }), _vue.onMounted(()=>{
            if (S(e122.debounce), g(), !0 === e122.reverse) {
                const e = getScrollHeight(i), t = height(i);
                setVerticalScrollPosition(i, e - t);
            }
            d();
        }), ()=>{
            const o = hUniqueSlot(t88.default, []);
            return !0 !== e122.disable && !0 === a.value && o[!1 === e122.reverse ? "push" : "unshift"](_vue.h("div", {
                class: c.value
            }, hSlot(t88.loading))), _vue.h("div", {
                class: "q-infinite-scroll",
                ref: l16
            }, o);
        };
    }
}), QInnerLoading = createComponent({
    name: "QInnerLoading",
    props: {
        ...useDarkProps,
        ...useTransitionProps,
        showing: Boolean,
        color: String,
        size: {
            type: [
                String,
                Number
            ],
            default: 42
        },
        label: String,
        labelClass: String,
        labelStyle: [
            String,
            Array,
            Object
        ]
    },
    setup (e, { slots: t89  }) {
        const o = _vue.getCurrentInstance(), n = useDark(e, o.proxy.$q), { transition: a , transitionStyle: l  } = useTransition(e, _vue.computed(()=>e.showing
        )), i = _vue.computed(()=>"q-inner-loading absolute-full column flex-center" + (!0 === n.value ? " q-inner-loading--dark" : "")
        ), r = _vue.computed(()=>"q-inner-loading__label" + (void 0 !== e.labelClass ? ` ${e.labelClass}` : "")
        );
        function s() {
            const t = [
                _vue.h(QSpinner, {
                    size: e.size,
                    color: e.color
                })
            ];
            return void 0 !== e.label && t.push(_vue.h("div", {
                class: r.value,
                style: e.labelStyle
            }, [
                e.label
            ])), t;
        }
        function u() {
            return !0 === e.showing ? _vue.h("div", {
                class: i.value,
                style: l.value
            }, void 0 !== t89.default ? t89.default() : s()) : null;
        }
        return ()=>_vue.h(_vue.Transition, {
                name: a.value,
                appear: !0
            }, u)
        ;
    }
});
const NAMED_MASKS = {
    date: "####/##/##",
    datetime: "####/##/## ##:##",
    time: "##:##",
    fulltime: "##:##:##",
    phone: "(###) ### - ####",
    card: "#### #### #### ####"
}, TOKENS = {
    "#": {
        pattern: "[\\d]",
        negate: "[^\\d]"
    },
    S: {
        pattern: "[a-zA-Z]",
        negate: "[^a-zA-Z]"
    },
    N: {
        pattern: "[0-9a-zA-Z]",
        negate: "[^0-9a-zA-Z]"
    },
    A: {
        pattern: "[a-zA-Z]",
        negate: "[^a-zA-Z]",
        transform: (e)=>e.toLocaleUpperCase()
    },
    a: {
        pattern: "[a-zA-Z]",
        negate: "[^a-zA-Z]",
        transform: (e)=>e.toLocaleLowerCase()
    },
    X: {
        pattern: "[0-9a-zA-Z]",
        negate: "[^0-9a-zA-Z]",
        transform: (e)=>e.toLocaleUpperCase()
    },
    x: {
        pattern: "[0-9a-zA-Z]",
        negate: "[^0-9a-zA-Z]",
        transform: (e)=>e.toLocaleLowerCase()
    }
}, KEYS = Object.keys(TOKENS);
KEYS.forEach((e)=>{
    TOKENS[e].regex = new RegExp(TOKENS[e].pattern);
});
const tokenRegexMask = new RegExp("\\\\([^.*+?^${}()|([\\]])|([.*+?^${}()|[\\]])|([" + KEYS.join("") + "])|(.)", "g"), escRegex = /[.*+?^${}()|[\]\\]/g, MARKER = String.fromCharCode(1), useMaskProps = {
    mask: String,
    reverseFillMask: Boolean,
    fillMask: [
        Boolean,
        String
    ],
    unmaskedValue: Boolean
};
function useMask(e123, t90, o55, n43) {
    let a20, l17, i10, r7;
    const s8 = _vue.ref(null), u3 = _vue.ref(d3());
    function c4() {
        return !0 === e123.autogrow || [
            "textarea",
            "text",
            "search",
            "url",
            "tel",
            "password"
        ].includes(e123.type);
    }
    function d3() {
        if (v2(), !0 === s8.value) {
            const t = b1(S(e123.modelValue));
            return !1 !== e123.fillMask ? w(t) : t;
        }
        return e123.modelValue;
    }
    function p2(e) {
        if (e < a20.length) return a20.slice(-e);
        let t = "", o = a20;
        const n = o.indexOf(MARKER);
        if (n > -1) {
            for(let n44 = e - o.length; n44 > 0; n44--)t += MARKER;
            o = o.slice(0, n) + t + o.slice(n);
        }
        return o;
    }
    function v2() {
        if (s8.value = void 0 !== e123.mask && e123.mask.length > 0 && c4(), !1 === s8.value) return r7 = void 0, a20 = "", void (l17 = "");
        const t91 = void 0 === NAMED_MASKS[e123.mask] ? e123.mask : NAMED_MASKS[e123.mask], o56 = "string" === typeof e123.fillMask && e123.fillMask.length > 0 ? e123.fillMask.slice(0, 1) : "_", n45 = o56.replace(escRegex, "\\$&"), u = [], d = [], p = [];
        let v = !0 === e123.reverseFillMask, m = "", f = "";
        t91.replace(tokenRegexMask, (e, t, o, n, a)=>{
            if (void 0 !== n) {
                const e = TOKENS[n];
                p.push(e), f = e.negate, !0 === v && (d.push("(?:" + f + "+)?(" + e.pattern + "+)?(?:" + f + "+)?(" + e.pattern + "+)?"), v = !1), d.push("(?:" + f + "+)?(" + e.pattern + ")?");
            } else if (void 0 !== o) m = "\\" + ("\\" === o ? "" : o), p.push(o), u.push("([^" + m + "]+)?" + m + "?");
            else {
                const e = void 0 !== t ? t : a;
                m = "\\" === e ? "\\\\\\\\" : e.replace(escRegex, "\\\\$&"), p.push(e), u.push("([^" + m + "]+)?" + m + "?");
            }
        });
        const h = new RegExp("^" + u.join("") + "(" + ("" === m ? "." : "[^" + m + "]") + "+)?$"), g = d.length - 1, b = d.map((t, o)=>{
            return 0 === o && !0 === e123.reverseFillMask ? new RegExp("^" + n45 + "*" + t) : o === g ? new RegExp("^" + t + "(" + ("" === f ? "." : f) + "+)?" + (!0 === e123.reverseFillMask ? "$" : n45 + "*")) : new RegExp("^" + t);
        });
        i10 = p, r7 = (e)=>{
            const t = h.exec(e);
            null !== t && (e = t.slice(1).join(""));
            const o = [], n = b.length;
            for(let a = 0, l = e; a < n; a++){
                const e = b[a].exec(l);
                if (null === e) break;
                l = l.slice(e.shift().length), o.push(...e);
            }
            return o.length > 0 ? o.join("") : e;
        }, a20 = p.map((e)=>"string" === typeof e ? e : MARKER
        ).join(""), l17 = a20.split(MARKER).join(o56);
    }
    function m2(t92, i, r) {
        const s = n43.value, c = s.selectionEnd, d = s.value.length - c, p = S(t92);
        !0 === i && v2();
        const m = b1(p), f = !1 !== e123.fillMask ? w(m) : m, g = u3.value !== f;
        s.value !== f && (s.value = f), !0 === g && (u3.value = f), document.activeElement === s && _vue.nextTick(()=>{
            if (f !== l17) {
                if ("insertFromPaste" !== r || !0 === e123.reverseFillMask) {
                    if ([
                        "deleteContentBackward",
                        "deleteContentForward"
                    ].indexOf(r) > -1) {
                        const t = !0 === e123.reverseFillMask ? 0 === c ? f.length > m.length ? 1 : 0 : Math.max(0, f.length - (f === l17 ? 0 : Math.min(m.length, d) + 1)) + 1 : c;
                        s.setSelectionRange(t, t, "forward");
                    } else if (!0 === e123.reverseFillMask) {
                        if (!0 === g) {
                            const e = Math.max(0, f.length - (f === l17 ? 0 : Math.min(m.length, d + 1)));
                            1 === e && 1 === c ? s.setSelectionRange(e, e, "forward") : h1.rightReverse(s, e, e);
                        } else {
                            const e = f.length - d;
                            s.setSelectionRange(e, e, "backward");
                        }
                    } else if (!0 === g) {
                        const e = Math.max(0, a20.indexOf(MARKER), Math.min(m.length, c) - 1);
                        h1.right(s, e, e);
                    } else {
                        const e = c - 1;
                        h1.right(s, e, e);
                    }
                } else {
                    const e = c - 1;
                    h1.right(s, e, e);
                }
            } else {
                const t = !0 === e123.reverseFillMask ? l17.length : 0;
                s.setSelectionRange(t, t, "forward");
            }
        });
        const y = !0 === e123.unmaskedValue ? S(f) : f;
        e123.modelValue !== y && o55(y, !0);
    }
    function f1(e, t, o) {
        const n = b1(S(e.value));
        t = Math.max(0, a20.indexOf(MARKER), Math.min(n.length, t)), e.setSelectionRange(t, o, "forward");
    }
    _vue.watch(()=>e123.type + e123.autogrow
    , v2), _vue.watch(()=>e123.mask
    , (o)=>{
        if (void 0 !== o) m2(u3.value, !0);
        else {
            const o = S(u3.value);
            v2(), e123.modelValue !== o && t90("update:modelValue", o);
        }
    }), _vue.watch(()=>e123.fillMask + e123.reverseFillMask
    , ()=>{
        !0 === s8.value && m2(u3.value, !0);
    }), _vue.watch(()=>e123.unmaskedValue
    , ()=>{
        !0 === s8.value && m2(u3.value);
    });
    const h1 = {
        left (e, t, o, n) {
            const l = -1 === a20.slice(t - 1).indexOf(MARKER);
            let i = Math.max(0, t - 1);
            for(; i >= 0; i--)if (a20[i] === MARKER) {
                t = i, !0 === l && t++;
                break;
            }
            if (i < 0 && void 0 !== a20[t] && a20[t] !== MARKER) return h1.right(e, 0, 0);
            t >= 0 && e.setSelectionRange(t, !0 === n ? o : t, "backward");
        },
        right (e, t, o, n) {
            const l = e.value.length;
            let i = Math.min(l, o + 1);
            for(; i <= l; i++){
                if (a20[i] === MARKER) {
                    o = i;
                    break;
                }
                a20[i - 1] === MARKER && (o = i);
            }
            if (i > l && void 0 !== a20[o - 1] && a20[o - 1] !== MARKER) return h1.left(e, l, l);
            e.setSelectionRange(n ? t : o, o, "forward");
        },
        leftReverse (e, t, o, n) {
            const a = p2(e.value.length);
            let l = Math.max(0, t - 1);
            for(; l >= 0; l--){
                if (a[l - 1] === MARKER) {
                    t = l;
                    break;
                }
                if (a[l] === MARKER && (t = l, 0 === l)) break;
            }
            if (l < 0 && void 0 !== a[t] && a[t] !== MARKER) return h1.rightReverse(e, 0, 0);
            t >= 0 && e.setSelectionRange(t, !0 === n ? o : t, "backward");
        },
        rightReverse (e, t, o, n) {
            const a = e.value.length, l = p2(a), i = -1 === l.slice(0, o + 1).indexOf(MARKER);
            let r = Math.min(a, o + 1);
            for(; r <= a; r++)if (l[r - 1] === MARKER) {
                o = r, o > 0 && !0 === i && o--;
                break;
            }
            if (r > a && void 0 !== l[o - 1] && l[o - 1] !== MARKER) return h1.leftReverse(e, a, a);
            e.setSelectionRange(!0 === n ? t : o, o, "forward");
        }
    };
    function g1(t) {
        if (!0 === shouldIgnoreKey(t)) return;
        const o = n43.value, a = o.selectionStart, l = o.selectionEnd;
        if (37 === t.keyCode || 39 === t.keyCode) {
            const n = h1[(39 === t.keyCode ? "right" : "left") + (!0 === e123.reverseFillMask ? "Reverse" : "")];
            t.preventDefault(), n(o, a, l, t.shiftKey);
        } else 8 === t.keyCode && !0 !== e123.reverseFillMask && a === l ? h1.left(o, a, l, !0) : 46 === t.keyCode && !0 === e123.reverseFillMask && a === l && h1.rightReverse(o, a, l, !0);
    }
    function b1(t) {
        if (void 0 === t || null === t || "" === t) return "";
        if (!0 === e123.reverseFillMask) return y1(t);
        const o = i10;
        let n = 0, a = "";
        for(let e = 0; e < o.length; e++){
            const l = t[n], i = o[e];
            if ("string" === typeof i) a += i, l === i && n++;
            else {
                if (void 0 === l || !i.regex.test(l)) return a;
                a += void 0 !== i.transform ? i.transform(l) : l, n++;
            }
        }
        return a;
    }
    function y1(e) {
        const t = i10, o = a20.indexOf(MARKER);
        let n = e.length - 1, l = "";
        for(let a = t.length - 1; a >= 0 && n > -1; a--){
            const i = t[a];
            let r = e[n];
            if ("string" === typeof i) l = i + l, r === i && n--;
            else {
                if (void 0 === r || !i.regex.test(r)) return l;
                do l = (void 0 !== i.transform ? i.transform(r) : r) + l, n--, r = e[n];
                while (o === a && void 0 !== r && i.regex.test(r))
            }
        }
        return l;
    }
    function S(e) {
        return "string" !== typeof e || void 0 === r7 ? "number" === typeof e ? r7("" + e) : e : r7(e);
    }
    function w(t) {
        return l17.length - t.length <= 0 ? t : !0 === e123.reverseFillMask && t.length > 0 ? l17.slice(0, -t.length) + t : t + l17.slice(t.length);
    }
    return {
        innerValue: u3,
        hasMask: s8,
        moveCursorForPaste: f1,
        updateMaskValue: m2,
        onMaskedKeydown: g1
    };
}
const isJapanese = /[\u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uff9f\u4e00-\u9faf\u3400-\u4dbf]/, isChinese = /[\u4e00-\u9fff\u3400-\u4dbf\u{20000}-\u{2a6df}\u{2a700}-\u{2b73f}\u{2b740}-\u{2b81f}\u{2b820}-\u{2ceaf}\uf900-\ufaff\u3300-\u33ff\ufe30-\ufe4f\uf900-\ufaff\u{2f800}-\u{2fa1f}]/u, isKorean = /[\u3131-\u314e\u314f-\u3163\uac00-\ud7a3]/;
function useKeyComposition(e) {
    return function(t) {
        if ("compositionend" === t.type || "change" === t.type) {
            if (!0 !== t.target.composing) return;
            t.target.composing = !1, e(t);
        } else "compositionupdate" === t.type ? "string" === typeof t.data && !1 === isJapanese.test(t.data) && !1 === isChinese.test(t.data) && !1 === isKorean.test(t.data) && (t.target.composing = !1) : t.target.composing = !0;
    };
}
var QInput = createComponent({
    name: "QInput",
    inheritAttrs: !1,
    props: {
        ...useFieldProps,
        ...useMaskProps,
        ...useFormProps,
        modelValue: {
            required: !1
        },
        shadowText: String,
        type: {
            type: String,
            default: "text"
        },
        debounce: [
            String,
            Number
        ],
        autogrow: Boolean,
        inputClass: [
            Array,
            String,
            Object
        ],
        inputStyle: [
            Array,
            String,
            Object
        ]
    },
    emits: [
        ...useFieldEmits,
        "paste",
        "change"
    ],
    setup (e124, { emit: t93 , attrs: o57  }) {
        const n46 = {
        };
        let a, l, i, r, s = NaN;
        const u4 = _vue.ref(null), c = useFormInputNameAttr(e124), { innerValue: d , hasMask: p , moveCursorForPaste: v , updateMaskValue: m , onMaskedKeydown: f  } = useMask(e124, t93, $, u4), g = useFileFormDomProps(e124, !0), b = _vue.computed(()=>fieldValueIsFilled(d.value)
        ), y = useKeyComposition(P), S = useFieldState(), w = _vue.computed(()=>"textarea" === e124.type || !0 === e124.autogrow
        ), x = _vue.computed(()=>!0 === w.value || [
                "text",
                "search",
                "url",
                "tel",
                "password"
            ].includes(e124.type)
        ), C = _vue.computed(()=>{
            const t = {
                ...S.splitAttrs.listeners.value,
                onInput: P,
                onPaste: T,
                onChange: B,
                onBlur: Q,
                onFocus: stop
            };
            return t.onCompositionstart = t.onCompositionupdate = t.onCompositionend = y, !0 === p.value && (t.onKeydown = f), !0 === e124.autogrow && (t.onAnimationend = M), t;
        }), k = _vue.computed(()=>{
            const t = {
                tabindex: 0,
                "data-autofocus": !0 === e124.autofocus || void 0,
                rows: "textarea" === e124.type ? 6 : void 0,
                "aria-label": e124.label,
                name: c.value,
                ...S.splitAttrs.attributes.value,
                id: S.targetUid.value,
                maxlength: e124.maxlength,
                disabled: !0 === e124.disable,
                readonly: !0 === e124.readonly
            };
            return !1 === w.value && (t.type = e124.type), !0 === e124.autogrow && (t.rows = 1), t;
        });
        function _() {
            addFocusFn(()=>{
                const e = document.activeElement;
                null === u4.value || u4.value === e || null !== e && e.id === S.targetUid.value || u4.value.focus();
            });
        }
        function q() {
            null !== u4.value && u4.value.select();
        }
        function T(o) {
            if (!0 === p.value && !0 !== e124.reverseFillMask) {
                const e = o.target;
                v(e, e.selectionStart, e.selectionEnd);
            }
            t93("paste", o);
        }
        function P(o) {
            if (!o || !o.target || !0 === o.target.composing) return;
            if ("file" === e124.type) return void t93("update:modelValue", o.target.files);
            const n = o.target.value;
            if (!0 === p.value) m(n, !1, o.inputType);
            else if ($(n), !0 === x.value && o.target === document.activeElement) {
                const { selectionStart: e , selectionEnd: t  } = o.target;
                void 0 !== e && void 0 !== t && _vue.nextTick(()=>{
                    o.target === document.activeElement && 0 === n.indexOf(o.target.value) && o.target.setSelectionRange(e, t);
                });
            }
            !0 === e124.autogrow && M();
        }
        function $(o, u) {
            r = ()=>{
                "number" !== e124.type && !0 === n46.hasOwnProperty("value") && delete n46.value, e124.modelValue !== o && s !== o && (!0 === u && (l = !0), t93("update:modelValue", o), _vue.nextTick(()=>{
                    s === o && (s = NaN);
                })), r = void 0;
            }, "number" === e124.type && (a = !0, n46.value = o), void 0 !== e124.debounce ? (clearTimeout(i), n46.value = o, i = setTimeout(r, e124.debounce)) : r();
        }
        function M() {
            const e = u4.value;
            if (null !== e) {
                const t = e.parentNode.style;
                t.marginBottom = e.scrollHeight - 1 + "px", e.style.height = "1px", e.style.height = e.scrollHeight + "px", t.marginBottom = "";
            }
        }
        function B(e) {
            y(e), clearTimeout(i), void 0 !== r && r(), t93("change", e.target.value);
        }
        function Q(t) {
            void 0 !== t && stop(t), clearTimeout(i), void 0 !== r && r(), a = !1, l = !1, delete n46.value, "file" !== e124.type && setTimeout(()=>{
                null !== u4.value && (u4.value.value = void 0 !== d.value ? d.value : "");
            });
        }
        function E() {
            return !0 === n46.hasOwnProperty("value") ? n46.value : void 0 !== d.value ? d.value : "";
        }
        _vue.watch(()=>e124.modelValue
        , (t)=>{
            if (!0 === p.value) {
                if (!0 === l) return void (l = !1);
                m(t);
            } else d.value !== t && (d.value = t, "number" === e124.type && !0 === n46.hasOwnProperty("value") && (!0 === a ? a = !1 : delete n46.value));
            !0 === e124.autogrow && _vue.nextTick(M);
        }), _vue.watch(()=>e124.autogrow
        , (e)=>{
            !0 === e ? _vue.nextTick(M) : null !== u4.value && o57.rows > 0 && (u4.value.style.height = "auto");
        }), _vue.watch(()=>e124.dense
        , ()=>{
            !0 === e124.autogrow && _vue.nextTick(M);
        }), _vue.onBeforeUnmount(()=>{
            Q();
        }), _vue.onMounted(()=>{
            !0 === e124.autogrow && M();
        }), Object.assign(S, {
            innerValue: d,
            fieldClass: _vue.computed(()=>`q-${!0 === w.value ? "textarea" : "input"}` + (!0 === e124.autogrow ? " q-textarea--autogrow" : "")
            ),
            hasShadow: _vue.computed(()=>"file" !== e124.type && "string" === typeof e124.shadowText && e124.shadowText.length > 0
            ),
            inputRef: u4,
            emitValue: $,
            hasValue: b,
            floatingLabel: _vue.computed(()=>!0 === b.value || fieldValueIsFilled(e124.displayValue)
            ),
            getControl: ()=>{
                return _vue.h(!0 === w.value ? "textarea" : "input", {
                    ref: u4,
                    class: [
                        "q-field__native q-placeholder",
                        e124.inputClass
                    ],
                    style: e124.inputStyle,
                    ...k.value,
                    ...C.value,
                    ..."file" !== e124.type ? {
                        value: E()
                    } : g.value
                });
            },
            getShadowControl: ()=>{
                return _vue.h("div", {
                    class: "q-field__native q-field__shadow absolute-bottom no-pointer-events" + (!0 === w.value ? "" : " text-no-wrap")
                }, [
                    _vue.h("span", {
                        class: "invisible"
                    }, E()),
                    _vue.h("span", e124.shadowText)
                ]);
            }
        });
        const O = useField(S), L = _vue.getCurrentInstance();
        return Object.assign(L.proxy, {
            focus: _,
            select: q,
            getNativeElement: ()=>u4.value
        }), O;
    }
});
const defaultCfg$1 = {
    threshold: 0,
    root: null,
    rootMargin: "0px"
};
function update$3(e, t, o58) {
    let n47, a, l;
    "function" === typeof o58 ? (n47 = o58, a = defaultCfg$1, l = void 0 === t.cfg) : (n47 = o58.handler, a = Object.assign({
    }, defaultCfg$1, o58.cfg), l = void 0 === t.cfg || !1 === isDeepEqual(t.cfg, a)), t.handler !== n47 && (t.handler = n47), !0 === l && (t.cfg = a, void 0 !== t.observer && t.observer.unobserve(e), t.observer = new IntersectionObserver(([o])=>{
        if ("function" === typeof t.handler) {
            if (null === o.rootBounds && !0 === document.body.contains(e)) return t.observer.unobserve(e), void t.observer.observe(e);
            const n = t.handler(o, t.observer);
            (!1 === n || !0 === t.once && !0 === o.isIntersecting) && destroy$1(e);
        }
    }, a), t.observer.observe(e));
}
function destroy$1(e) {
    const t = e.__qvisible;
    void 0 !== t && (void 0 !== t.observer && t.observer.unobserve(e), delete e.__qvisible);
}
var Intersection = createDirective({
    name: "intersection",
    mounted (e, { modifiers: t , value: o  }) {
        const n = {
            once: !0 === t.once
        };
        update$3(e, n, o), e.__qvisible = n;
    },
    updated (e, t) {
        const o = e.__qvisible;
        void 0 !== o && update$3(e, o, t.value);
    },
    beforeUnmount: destroy$1
}), QIntersection = createComponent({
    name: "QIntersection",
    props: {
        tag: {
            type: String,
            default: "div"
        },
        once: Boolean,
        transition: String,
        transitionDuration: {
            type: [
                String,
                Number
            ],
            default: 300
        },
        ssrPrerender: Boolean,
        margin: String,
        threshold: [
            Number,
            Array
        ],
        root: {
            default: null
        },
        disable: Boolean,
        onVisibility: Function
    },
    setup (e, { slots: t94 , emit: o  }) {
        const n = _vue.ref(!0 === isRuntimeSsrPreHydration.value && e.ssrPrerender), a = _vue.computed(()=>void 0 !== e.root || void 0 !== e.margin || void 0 !== e.threshold ? {
                handler: s,
                cfg: {
                    root: e.root,
                    rootMargin: e.margin,
                    threshold: e.threshold
                }
            } : s
        ), l = _vue.computed(()=>!0 !== e.disable && (!0 !== isRuntimeSsrPreHydration.value || !0 !== e.once || !0 !== e.ssrPrerender)
        ), i = _vue.computed(()=>{
            return [
                [
                    Intersection,
                    a.value,
                    void 0,
                    {
                        once: e.once
                    }
                ]
            ];
        }), r = _vue.computed(()=>`--q-transition-duration: ${e.transitionDuration}ms`
        );
        function s(t) {
            n.value !== t.isIntersecting && (n.value = t.isIntersecting, void 0 !== e.onVisibility && o("visibility", n.value));
        }
        function u() {
            return !0 === n.value ? [
                _vue.h("div", {
                    key: "content",
                    style: r.value
                }, hSlot(t94.default))
            ] : void 0;
        }
        return ()=>{
            const t = e.transition ? [
                _vue.h(_vue.Transition, {
                    name: "q-transition--" + e.transition
                }, u)
            ] : u();
            return hDir(e.tag, {
                class: "q-intersection"
            }, t, "main", l.value, ()=>i.value
            );
        };
    }
}), QList = createComponent({
    name: "QList",
    props: {
        ...useDarkProps,
        bordered: Boolean,
        dense: Boolean,
        separator: Boolean,
        padding: Boolean
    },
    setup (e, { slots: t  }) {
        const o = _vue.getCurrentInstance(), n = useDark(e, o.proxy.$q), a = _vue.computed(()=>"q-list" + (!0 === e.bordered ? " q-list--bordered" : "") + (!0 === e.dense ? " q-list--dense" : "") + (!0 === e.separator ? " q-list--separator" : "") + (!0 === n.value ? " q-list--dark" : "") + (!0 === e.padding ? " q-list--padding" : "")
        );
        return ()=>_vue.h("div", {
                class: a.value
            }, hSlot(t.default))
        ;
    }
});
const keyCodes$1 = [
    34,
    37,
    40,
    33,
    39,
    38
], commonPropsName = Object.keys(useCircularCommonProps);
var QKnob = createComponent({
    name: "QKnob",
    props: {
        ...useFormProps,
        ...useCircularCommonProps,
        modelValue: {
            type: Number,
            required: !0
        },
        step: {
            type: Number,
            default: 1,
            validator: (e)=>e >= 0
        },
        tabindex: {
            type: [
                Number,
                String
            ],
            default: 0
        },
        disable: Boolean,
        readonly: Boolean
    },
    emits: [
        "update:modelValue",
        "change",
        "drag-value"
    ],
    setup (e125, { slots: t95 , emit: o59  }) {
        const { proxy: n48  } = _vue.getCurrentInstance(), { $q: a  } = n48, l = _vue.ref(e125.modelValue), i11 = _vue.ref(!1);
        let r, s9;
        _vue.watch(()=>e125.modelValue
        , (t)=>{
            if (t < e125.min) l.value = e125.min;
            else {
                if (!(t > e125.max)) return void (t !== l.value && (l.value = t));
                l.value = e125.max;
            }
            l.value !== e125.modelValue && (o59("update:modelValue", l.value), o59("change", l.value));
        });
        const u5 = _vue.computed(()=>!1 === e125.disable && !1 === e125.readonly
        ), c5 = _vue.computed(()=>"q-knob non-selectable" + (!0 === u5.value ? " q-knob--editable" : !0 === e125.disable ? " disabled" : "")
        ), d = _vue.computed(()=>(String(e125.step).trim("0").split(".")[1] || "").length
        ), p = _vue.computed(()=>0 === e125.step ? 1 : e125.step
        ), v3 = _vue.computed(()=>!0 === e125.instantFeedback || !0 === i11.value
        ), m = !0 === a.platform.is.mobile ? _vue.computed(()=>!0 === u5.value ? {
                onClick: x
            } : {
            }
        ) : _vue.computed(()=>!0 === u5.value ? {
                onMousedown: w,
                onClick: x,
                onKeydown: C,
                onKeyup: _
            } : {
            }
        ), f = _vue.computed(()=>!0 === u5.value ? {
                tabindex: e125.tabindex
            } : {
                [`aria-${!0 === e125.disable ? "disabled" : "readonly"}`]: "true"
            }
        ), g = _vue.computed(()=>{
            const t = {
            };
            return commonPropsName.forEach((o)=>{
                t[o] = e125[o];
            }), t;
        });
        function b(e) {
            e.isFinal ? (k(e.evt, !0), i11.value = !1) : e.isFirst ? (S(), i11.value = !0, k(e.evt)) : k(e.evt);
        }
        const y = _vue.computed(()=>{
            return [
                [
                    TouchPan,
                    b,
                    void 0,
                    {
                        prevent: !0,
                        stop: !0,
                        mouse: !0
                    }
                ]
            ];
        });
        function S() {
            const { top: e , left: t , width: o , height: n  } = s9.getBoundingClientRect();
            r = {
                top: e + n / 2,
                left: t + o / 2
            };
        }
        function w(e) {
            S(), k(e);
        }
        function x(e) {
            S(), k(e, !0);
        }
        function C(t) {
            if (!keyCodes$1.includes(t.keyCode)) return;
            stopAndPrevent(t);
            const o = ([
                34,
                33
            ].includes(t.keyCode) ? 10 : 1) * p.value, n = [
                34,
                37,
                40
            ].includes(t.keyCode) ? -o : o;
            l.value = between(parseFloat((l.value + n).toFixed(d.value)), e125.min, e125.max), q();
        }
        function k(t, n) {
            const i = position(t), s = Math.abs(i.top - r.top), u = Math.sqrt(s ** 2 + Math.abs(i.left - r.left) ** 2);
            let c = Math.asin(s / u) * (180 / Math.PI);
            c = i.top < r.top ? r.left < i.left ? 90 - c : 270 + c : r.left < i.left ? c + 90 : 270 - c, e125.angle && (c = normalizeToInterval(c - e125.angle, 0, 360)), !0 === a.lang.rtl && (c = 360 - c);
            let v = e125.min + c / 360 * (e125.max - e125.min);
            if (0 !== p.value) {
                const e = v % p.value;
                v = v - e + (Math.abs(e) >= p.value / 2 ? (e < 0 ? -1 : 1) * p.value : 0), v = parseFloat(v.toFixed(d.value));
            }
            v = between(v, e125.min, e125.max), o59("drag-value", v), l.value !== v && (l.value = v), q(n);
        }
        function _(e) {
            keyCodes$1.includes(e.keyCode) && q(!0);
        }
        function q(t) {
            e125.modelValue !== l.value && o59("update:modelValue", l.value), !0 === t && o59("change", l.value);
        }
        const T = useFormAttrs(e125);
        function P() {
            return _vue.h("input", T.value);
        }
        return _vue.onMounted(()=>{
            s9 = n48.$el;
        }), ()=>{
            const o = {
                class: c5.value,
                role: "slider",
                "aria-valuemin": e125.min,
                "aria-valuemax": e125.max,
                "aria-valuenow": e125.modelValue,
                ...f.value,
                ...g.value,
                value: l.value,
                instantFeedback: v3.value,
                ...m.value
            }, n = {
                default: t95.default
            };
            return !0 === u5.value ? (void 0 !== e125.name && (n.internal = P), _vue.withDirectives(_vue.h(QCircularProgress, o, n), y.value)) : _vue.h(QCircularProgress, o, n);
        };
    }
});
const { passive: passive$2  } = listenOpts, axisValues = [
    "both",
    "horizontal",
    "vertical"
];
var QScrollObserver = createComponent({
    name: "QScrollObserver",
    props: {
        axis: {
            type: String,
            validator: (e)=>axisValues.includes(e)
            ,
            default: "vertical"
        },
        debounce: [
            String,
            Number
        ],
        scrollTarget: {
            default: void 0
        }
    },
    emits: [
        "scroll"
    ],
    setup (e, { emit: t96  }) {
        const o = {
            position: {
                top: 0,
                left: 0
            },
            direction: "down",
            directionChanged: !1,
            delta: {
                top: 0,
                left: 0
            },
            inflectionPoint: {
                top: 0,
                left: 0
            }
        };
        let n, a21, l = null;
        function i12() {
            l = null;
            const a = Math.max(0, getVerticalScrollPosition(n)), i = getHorizontalScrollPosition(n), r = {
                top: a - o.position.top,
                left: i - o.position.left
            };
            if ("vertical" === e.axis && 0 === r.top || "horizontal" === e.axis && 0 === r.left) return;
            const s = Math.abs(r.top) >= Math.abs(r.left) ? r.top < 0 ? "up" : "down" : r.left < 0 ? "left" : "right";
            o.position = {
                top: a,
                left: i
            }, o.directionChanged = o.direction !== s, o.delta = r, !0 === o.directionChanged && (o.direction = s, o.inflectionPoint = o.position), t96("scroll", {
                ...o
            });
        }
        function r8() {
            n = getScrollTarget(a21, e.scrollTarget), n.addEventListener("scroll", u, passive$2), u(!0);
        }
        function s10() {
            void 0 !== n && (n.removeEventListener("scroll", u, passive$2), n = void 0);
        }
        function u(t) {
            !0 === t || 0 === e.debounce || "0" === e.debounce ? i12() : null === l && (l = e.debounce ? setTimeout(i12, e.debounce) : requestAnimationFrame(i12));
        }
        _vue.watch(()=>e.scrollTarget
        , ()=>{
            s10(), r8();
        });
        const c = _vue.getCurrentInstance();
        return _vue.onMounted(()=>{
            a21 = c.proxy.$el.parentNode, r8();
        }), _vue.onBeforeUnmount(()=>{
            clearTimeout(l), cancelAnimationFrame(l), s10();
        }), Object.assign(c.proxy, {
            trigger: u,
            getPosition: ()=>o
        }), noop;
    }
}), QLayout = createComponent({
    name: "QLayout",
    props: {
        container: Boolean,
        view: {
            type: String,
            default: "hhh lpr fff",
            validator: (e)=>/^(h|l)h(h|r) lpr (f|l)f(f|r)$/.test(e.toLowerCase())
        },
        onScroll: Function,
        onScrollHeight: Function,
        onResize: Function
    },
    setup (e126, { slots: t97 , emit: o60  }) {
        const { proxy: { $q: n49  }  } = _vue.getCurrentInstance(), a22 = _vue.ref(null), l = _vue.ref(n49.screen.height), i = _vue.ref(!0 === e126.container ? 0 : n49.screen.width), r9 = _vue.ref({
            position: 0,
            direction: "down",
            inflectionPoint: 0
        }), s = _vue.ref(0), u = _vue.ref(!0 === isRuntimeSsrPreHydration.value ? 0 : getScrollbarWidth()), c = _vue.computed(()=>"q-layout q-layout--" + (!0 === e126.container ? "containerized" : "standard")
        ), d = _vue.computed(()=>!1 === e126.container ? {
                minHeight: n49.screen.height + "px"
            } : null
        ), p = _vue.computed(()=>0 !== u.value ? {
                [!0 === n49.lang.rtl ? "left" : "right"]: `${u.value}px`
            } : null
        ), v = _vue.computed(()=>0 !== u.value ? {
                [!0 === n49.lang.rtl ? "right" : "left"]: 0,
                [!0 === n49.lang.rtl ? "left" : "right"]: `-${u.value}px`,
                width: `calc(100% + ${u.value}px)`
            } : null
        );
        function m(t) {
            if (!0 === e126.container || !0 !== document.qScrollPrevented) {
                const n = {
                    position: t.position.top,
                    direction: t.direction,
                    directionChanged: t.directionChanged,
                    inflectionPoint: t.inflectionPoint.top,
                    delta: t.delta.top
                };
                r9.value = n, void 0 !== e126.onScroll && o60("scroll", n);
            }
        }
        function f(t) {
            const { height: n , width: a  } = t;
            let r = !1;
            l.value !== n && (r = !0, l.value = n, void 0 !== e126.onScrollHeight && o60("scroll-height", n), b()), i.value !== a && (r = !0, i.value = a), !0 === r && void 0 !== e126.onResize && o60("resize", t);
        }
        function g({ height: e  }) {
            s.value !== e && (s.value = e, b());
        }
        function b() {
            if (!0 === e126.container) {
                const e = l.value > s.value ? getScrollbarWidth() : 0;
                u.value !== e && (u.value = e);
            }
        }
        let y;
        const S = {
            instances: {
            },
            view: _vue.computed(()=>e126.view
            ),
            isContainer: _vue.computed(()=>e126.container
            ),
            rootRef: a22,
            height: l,
            containerHeight: s,
            scrollbarWidth: u,
            totalWidth: _vue.computed(()=>i.value + u.value
            ),
            rows: _vue.computed(()=>{
                const t = e126.view.toLowerCase().split(" ");
                return {
                    top: t[0].split(""),
                    middle: t[1].split(""),
                    bottom: t[2].split("")
                };
            }),
            header: _vue.reactive({
                size: 0,
                offset: 0,
                space: !1
            }),
            right: _vue.reactive({
                size: 300,
                offset: 0,
                space: !1
            }),
            footer: _vue.reactive({
                size: 0,
                offset: 0,
                space: !1
            }),
            left: _vue.reactive({
                size: 300,
                offset: 0,
                space: !1
            }),
            scroll: r9,
            animate () {
                void 0 !== y ? clearTimeout(y) : document.body.classList.add("q-body--layout-animate"), y = setTimeout(()=>{
                    document.body.classList.remove("q-body--layout-animate"), y = void 0;
                }, 155);
            },
            update (e, t, o) {
                S[e][t] = o;
            }
        };
        return _vue.provide(layoutKey, S), ()=>{
            const o = hMergeSlot(t97.default, [
                _vue.h(QScrollObserver, {
                    onScroll: m
                }),
                _vue.h(QResizeObserver, {
                    onResize: f
                })
            ]), n = _vue.h("div", {
                class: c.value,
                style: d.value,
                ref: !0 === e126.container ? void 0 : a22
            }, o);
            return !0 === e126.container ? _vue.h("div", {
                class: "q-layout-container overflow-hidden",
                ref: a22
            }, [
                _vue.h(QResizeObserver, {
                    onResize: g
                }),
                _vue.h("div", {
                    class: "absolute-full",
                    style: p.value
                }, [
                    _vue.h("div", {
                        class: "scroll",
                        style: v.value
                    }, [
                        n
                    ])
                ])
            ]) : n;
        };
    }
});
const separatorValues = [
    "horizontal",
    "vertical",
    "cell",
    "none"
];
var QMarkupTable = createComponent({
    name: "QMarkupTable",
    props: {
        ...useDarkProps,
        dense: Boolean,
        flat: Boolean,
        bordered: Boolean,
        square: Boolean,
        wrapCells: Boolean,
        separator: {
            type: String,
            default: "horizontal",
            validator: (e)=>separatorValues.includes(e)
        }
    },
    setup (e, { slots: t  }) {
        const o = _vue.getCurrentInstance(), n = useDark(e, o.proxy.$q), a = _vue.computed(()=>"q-markup-table q-table__container q-table__card" + ` q-table--${e.separator}-separator` + (!0 === n.value ? " q-table--dark q-table__card--dark q-dark" : "") + (!0 === e.dense ? " q-table--dense" : "") + (!0 === e.flat ? " q-table--flat" : "") + (!0 === e.bordered ? " q-table--bordered" : "") + (!0 === e.square ? " q-table--square" : "") + (!1 === e.wrapCells ? " q-table--no-wrap" : "")
        );
        return ()=>_vue.h("div", {
                class: a.value
            }, [
                _vue.h("table", {
                    class: "q-table"
                }, hSlot(t.default))
            ])
        ;
    }
}), QNoSsr = createComponent({
    name: "QNoSsr",
    props: {
        tag: {
            type: String,
            default: "div"
        },
        placeholder: String
    },
    setup (e, { slots: t  }) {
        const o61 = useCanRender();
        return ()=>{
            const n = {
            };
            if (!0 === o61.value) {
                const o = hSlot(t.default);
                return void 0 === o ? o : o.length > 1 ? _vue.h(e.tag, n, o) : o[0];
            }
            n.class = "q-no-ssr-placeholder";
            const a = hSlot(t.placeholder);
            return void 0 !== a ? a.length > 1 ? _vue.h(e.tag, n, a) : a[0] : void 0 !== e.placeholder ? _vue.h(e.tag, n, e.placeholder) : void 0;
        };
    }
});
const svg$m = _vue.h("svg", {
    class: "q-radio__bg absolute non-selectable",
    viewBox: "0 0 24 24",
    "aria-hidden": "true"
}, [
    _vue.h("path", {
        d: "M12,22a10,10 0 0 1 -10,-10a10,10 0 0 1 10,-10a10,10 0 0 1 10,10a10,10 0 0 1 -10,10m0,-22a12,12 0 0 0 -12,12a12,12 0 0 0 12,12a12,12 0 0 0 12,-12a12,12 0 0 0 -12,-12"
    }),
    _vue.h("path", {
        class: "q-radio__check",
        d: "M12,6a6,6 0 0 0 -6,6a6,6 0 0 0 6,6a6,6 0 0 0 6,-6a6,6 0 0 0 -6,-6"
    })
]);
var QRadio = createComponent({
    name: "QRadio",
    props: {
        ...useDarkProps,
        ...useSizeProps,
        ...useFormProps,
        modelValue: {
            required: !0
        },
        val: {
            required: !0
        },
        label: String,
        leftLabel: Boolean,
        color: String,
        keepColor: Boolean,
        dense: Boolean,
        disable: Boolean,
        tabindex: [
            String,
            Number
        ]
    },
    emits: [
        "update:modelValue"
    ],
    setup (e127, { slots: t98 , emit: o62  }) {
        const { proxy: n50  } = _vue.getCurrentInstance(), a23 = useDark(e127, n50.$q), l = useSize(e127, optionSizes), i = _vue.ref(null), { refocusTargetEl: r , refocusTarget: s  } = useRefocusTarget(e127, i), u = _vue.computed(()=>e127.modelValue === e127.val
        ), c = _vue.computed(()=>"q-radio cursor-pointer no-outline row inline no-wrap items-center" + (!0 === e127.disable ? " disabled" : "") + (!0 === a23.value ? " q-radio--dark" : "") + (!0 === e127.dense ? " q-radio--dense" : "") + (!0 === e127.leftLabel ? " reverse" : "")
        ), d = _vue.computed(()=>{
            const t = void 0 === e127.color || !0 !== e127.keepColor && !0 !== u.value ? "" : ` text-${e127.color}`;
            return "q-radio__inner relative-position " + `q-radio__inner--${!0 === u.value ? "truthy" : "falsy"}${t}`;
        }), p = _vue.computed(()=>!0 === e127.disable ? -1 : e127.tabindex || 0
        ), v = _vue.computed(()=>{
            const t = {
                type: "radio"
            };
            return void 0 !== e127.name && Object.assign(t, {
                name: e127.name,
                value: e127.val
            }), t;
        }), m = _vue.computed(()=>void 0 !== e127.name && !0 === u.value ? {
                checked: !0
            } : {
            }
        ), f = useFormInject(v, m);
        function g(t) {
            void 0 !== t && (stopAndPrevent(t), s(t)), !0 !== e127.disable && !0 !== u.value && o62("update:modelValue", e127.val, t);
        }
        function b(e) {
            13 !== e.keyCode && 32 !== e.keyCode || stopAndPrevent(e);
        }
        function y(e) {
            13 !== e.keyCode && 32 !== e.keyCode || g(e);
        }
        return Object.assign(n50, {
            set: g
        }), ()=>{
            const o = [
                svg$m
            ];
            !0 !== e127.disable && f(o, "unshift", " q-radio__native q-ma-none q-pa-none");
            const n = [
                _vue.h("div", {
                    class: d.value,
                    style: l.value
                }, o)
            ];
            null !== r.value && n.push(r.value);
            const a = void 0 !== e127.label ? hMergeSlot(t98.default, [
                e127.label
            ]) : hSlot(t98.default);
            return void 0 !== a && n.push(_vue.h("div", {
                class: "q-radio__label q-anchor--skip"
            }, a)), _vue.h("div", {
                ref: i,
                class: c.value,
                tabindex: p.value,
                role: "radio",
                "aria-label": e127.label,
                "aria-checked": !0 === u.value ? "true" : "false",
                "aria-disabled": !0 === e127.disable ? "true" : void 0,
                onClick: g,
                onKeydown: b,
                onKeyup: y
            }, n);
        };
    }
}), QToggle = createComponent({
    name: "QToggle",
    props: {
        ...useCheckboxProps,
        icon: String,
        checkedIcon: String,
        uncheckedIcon: String,
        indeterminateIcon: String,
        iconColor: String
    },
    emits: useCheckboxEmits,
    setup (e) {
        function t99(t, o) {
            const n = _vue.computed(()=>(!0 === t.value ? e.checkedIcon : !0 === o.value ? e.indeterminateIcon : e.uncheckedIcon) || e.icon
            ), a = _vue.computed(()=>{
                if (!0 === t.value) return e.iconColor;
            });
            return ()=>[
                    _vue.h("div", {
                        class: "q-toggle__track"
                    }),
                    _vue.h("div", {
                        class: "q-toggle__thumb absolute flex flex-center no-wrap"
                    }, void 0 !== n.value ? [
                        _vue.h(QIcon, {
                            name: n.value,
                            color: a.value
                        })
                    ] : void 0)
                ]
            ;
        }
        return useCheckbox("toggle", t99);
    }
});
const components$1 = {
    radio: QRadio,
    checkbox: QCheckbox,
    toggle: QToggle
}, typeValues = Object.keys(components$1);
var QOptionGroup = createComponent({
    name: "QOptionGroup",
    props: {
        ...useDarkProps,
        modelValue: {
            required: !0
        },
        options: {
            type: Array,
            validator: (e128)=>e128.every((e)=>"value" in e && "label" in e
                )
        },
        name: String,
        type: {
            default: "radio",
            validator: (e)=>typeValues.includes(e)
        },
        color: String,
        keepColor: Boolean,
        dense: Boolean,
        size: String,
        leftLabel: Boolean,
        inline: Boolean,
        disable: Boolean
    },
    emits: [
        "update:modelValue"
    ],
    setup (e129, { emit: t100 , slots: o  }) {
        const { proxy: { $q: n  }  } = _vue.getCurrentInstance(), a24 = Array.isArray(e129.modelValue);
        "radio" === e129.type ? !0 === a24 && console.error("q-option-group: model should not be array") : !1 === a24 && console.error("q-option-group: model should be array in your case");
        const l = useDark(e129, n), i = _vue.computed(()=>components$1[e129.type]
        ), r = _vue.computed(()=>"q-option-group q-gutter-x-sm" + (!0 === e129.inline ? " q-option-group--inline" : "")
        ), s = _vue.computed(()=>{
            const t = {
            };
            return "radio" === e129.type && (t.role = "radiogroup", !0 === e129.disable && (t["aria-disabled"] = "true")), t;
        });
        function u(e) {
            t100("update:modelValue", e);
        }
        return ()=>_vue.h("div", {
                class: r.value,
                ...s.value
            }, e129.options.map((t, n)=>{
                const a = void 0 !== o["label-" + n] ? ()=>o["label-" + n](t)
                 : void 0 !== o.label ? ()=>o.label(t)
                 : void 0;
                return _vue.h("div", [
                    _vue.h(i.value, {
                        modelValue: e129.modelValue,
                        val: t.value,
                        name: void 0 === t.name ? e129.name : t.name,
                        disable: e129.disable || t.disable,
                        label: void 0 === a ? t.label : null,
                        leftLabel: void 0 === t.leftLabel ? e129.leftLabel : t.leftLabel,
                        color: void 0 === t.color ? e129.color : t.color,
                        checkedIcon: t.checkedIcon,
                        uncheckedIcon: t.uncheckedIcon,
                        dark: t.dark || l.value,
                        size: void 0 === t.size ? e129.size : t.size,
                        dense: e129.dense,
                        keepColor: void 0 === t.keepColor ? e129.keepColor : t.keepColor,
                        "onUpdate:modelValue": u
                    }, a)
                ]);
            }))
        ;
    }
}), QPage = createComponent({
    name: "QPage",
    props: {
        padding: Boolean,
        styleFn: Function
    },
    setup (e, { slots: t101  }) {
        const { proxy: { $q: o  }  } = _vue.getCurrentInstance(), n = _vue.inject(layoutKey);
        _vue.inject(pageContainerKey, ()=>{
            console.error("QPage needs to be child of QPageContainer");
        });
        const a25 = _vue.computed(()=>{
            const t = (!0 === n.header.space ? n.header.size : 0) + (!0 === n.footer.space ? n.footer.size : 0);
            if ("function" === typeof e.styleFn) {
                const a = !0 === n.isContainer.value ? n.containerHeight.value : o.screen.height;
                return e.styleFn(t, a);
            }
            return {
                minHeight: !0 === n.isContainer.value ? n.containerHeight.value - t + "px" : 0 === o.screen.height ? 0 !== t ? `calc(100vh - ${t}px)` : "100vh" : o.screen.height - t + "px"
            };
        }), l = _vue.computed(()=>`q-page ${!0 === e.padding ? " q-layout-padding" : ""}`
        );
        return ()=>_vue.h("main", {
                class: l.value,
                style: a25.value
            }, hSlot(t101.default))
        ;
    }
}), QPageContainer = createComponent({
    name: "QPageContainer",
    setup (e130, { slots: t  }) {
        const { proxy: { $q: o  }  } = _vue.getCurrentInstance(), n = _vue.inject(layoutKey, ()=>{
            console.error("QPageContainer needs to be child of QLayout");
        });
        _vue.provide(pageContainerKey, !0);
        const a = _vue.computed(()=>{
            const e = {
            };
            return !0 === n.header.space && (e.paddingTop = `${n.header.size}px`), !0 === n.right.space && (e[`padding${!0 === o.lang.rtl ? "Left" : "Right"}`] = `${n.right.size}px`), !0 === n.footer.space && (e.paddingBottom = `${n.footer.size}px`), !0 === n.left.space && (e[`padding${!0 === o.lang.rtl ? "Right" : "Left"}`] = `${n.left.size}px`), e;
        });
        return ()=>_vue.h("div", {
                class: "q-page-container",
                style: a.value
            }, hSlot(t.default))
        ;
    }
});
const usePageStickyProps = {
    position: {
        type: String,
        default: "bottom-right",
        validator: (e)=>[
                "top-right",
                "top-left",
                "bottom-right",
                "bottom-left",
                "top",
                "right",
                "bottom",
                "left"
            ].includes(e)
    },
    offset: {
        type: Array,
        validator: (e)=>2 === e.length
    },
    expand: Boolean
};
function usePageSticky() {
    const { props: e , proxy: t102  } = _vue.getCurrentInstance(), { $q: o63  } = t102, n51 = _vue.inject(layoutKey, ()=>{
        console.error("QPageSticky needs to be child of QLayout");
    }), a = _vue.computed(()=>{
        const t = e.position;
        return {
            top: t.indexOf("top") > -1,
            right: t.indexOf("right") > -1,
            bottom: t.indexOf("bottom") > -1,
            left: t.indexOf("left") > -1,
            vertical: "top" === t || "bottom" === t,
            horizontal: "left" === t || "right" === t
        };
    }), l = _vue.computed(()=>n51.header.offset
    ), i = _vue.computed(()=>n51.right.offset
    ), r = _vue.computed(()=>n51.footer.offset
    ), s = _vue.computed(()=>n51.left.offset
    ), u6 = _vue.computed(()=>{
        let t = 0, n = 0;
        const u = a.value, c = !0 === o63.lang.rtl ? -1 : 1;
        !0 === u.top && 0 !== l.value ? n = `${l.value}px` : !0 === u.bottom && 0 !== r.value && (n = `${-r.value}px`), !0 === u.left && 0 !== s.value ? t = `${c * s.value}px` : !0 === u.right && 0 !== i.value && (t = `${-c * i.value}px`);
        const d = {
            transform: `translate(${t}, ${n})`
        };
        return e.offset && (d.margin = `${e.offset[1]}px ${e.offset[0]}px`), !0 === u.vertical ? (0 !== s.value && (d[!0 === o63.lang.rtl ? "right" : "left"] = `${s.value}px`), 0 !== i.value && (d[!0 === o63.lang.rtl ? "left" : "right"] = `${i.value}px`)) : !0 === u.horizontal && (0 !== l.value && (d.top = `${l.value}px`), 0 !== r.value && (d.bottom = `${r.value}px`)), d;
    }), c6 = _vue.computed(()=>`q-page-sticky row flex-center fixed-${e.position}` + ` q-page-sticky--${!0 === e.expand ? "expand" : "shrink"}`
    );
    function d4(t) {
        const o = hSlot(t.default);
        return _vue.h("div", {
            class: c6.value,
            style: u6.value
        }, !0 === e.expand ? o : [
            _vue.h("div", o)
        ]);
    }
    return {
        $layout: n51,
        getStickyContent: d4
    };
}
var QPageScroller = createComponent({
    name: "QPageScroller",
    props: {
        ...usePageStickyProps,
        scrollOffset: {
            type: Number,
            default: 1000
        },
        reverse: Boolean,
        duration: {
            type: Number,
            default: 300
        },
        offset: {
            default: ()=>[
                    18,
                    18
                ]
        }
    },
    emits: [
        "click"
    ],
    setup (e131, { slots: t103 , emit: o  }) {
        const { proxy: { $q: n52  }  } = _vue.getCurrentInstance(), { $layout: a , getStickyContent: l  } = usePageSticky(), i = _vue.ref(null);
        let r;
        const s = _vue.computed(()=>a.height.value - (!0 === a.isContainer.value ? a.containerHeight.value : n52.screen.height)
        );
        function u() {
            return !0 === e131.reverse ? s.value - a.scroll.value.position > e131.scrollOffset : a.scroll.value.position > e131.scrollOffset;
        }
        const c = _vue.ref(u());
        function d() {
            const e = u();
            c.value !== e && (c.value = e);
        }
        function p() {
            !0 === e131.reverse ? void 0 === r && (r = _vue.watch(s, d)) : v();
        }
        function v() {
            void 0 !== r && (r(), r = void 0);
        }
        function m(t) {
            const n = getScrollTarget(!0 === a.isContainer.value ? i.value : a.rootRef.value);
            setVerticalScrollPosition(n, !0 === e131.reverse ? a.height.value : 0, e131.duration), o("click", t);
        }
        function f() {
            return !0 === c.value ? _vue.h("div", {
                ref: i,
                class: "q-page-scroller",
                onClick: m
            }, l(t103)) : null;
        }
        return _vue.watch(a.scroll, d), _vue.watch(()=>e131.reverse
        , p), p(), _vue.onBeforeUnmount(v), ()=>_vue.h(_vue.Transition, {
                name: "q-transition--fade"
            }, f)
        ;
    }
}), QPageSticky = createComponent({
    name: "QPageSticky",
    props: usePageStickyProps,
    setup (e, { slots: t  }) {
        const { getStickyContent: o  } = usePageSticky();
        return ()=>o(t)
        ;
    }
}), QPagination = createComponent({
    name: "QPagination",
    props: {
        ...useDarkProps,
        modelValue: {
            type: Number,
            required: !0
        },
        min: {
            type: Number,
            default: 1
        },
        max: {
            type: Number,
            required: !0
        },
        color: {
            type: String,
            default: "primary"
        },
        textColor: String,
        activeColor: String,
        activeTextColor: String,
        inputStyle: [
            Array,
            String,
            Object
        ],
        inputClass: [
            Array,
            String,
            Object
        ],
        size: String,
        disable: Boolean,
        input: Boolean,
        iconPrev: String,
        iconNext: String,
        iconFirst: String,
        iconLast: String,
        toFn: Function,
        boundaryLinks: {
            type: Boolean,
            default: null
        },
        boundaryNumbers: {
            type: Boolean,
            default: null
        },
        directionLinks: {
            type: Boolean,
            default: null
        },
        ellipses: {
            type: Boolean,
            default: null
        },
        maxPages: {
            type: Number,
            default: 0,
            validator: (e)=>e >= 0
        },
        ripple: {
            type: [
                Boolean,
                Object
            ],
            default: null
        },
        round: Boolean,
        rounded: Boolean,
        flat: Boolean,
        outline: Boolean,
        unelevated: Boolean,
        push: Boolean,
        glossy: Boolean,
        dense: Boolean,
        padding: {
            type: String,
            default: "3px 2px"
        }
    },
    emits: [
        "update:modelValue"
    ],
    setup (e132, { emit: t104  }) {
        const { proxy: o64  } = _vue.getCurrentInstance(), { $q: n53  } = o64, a26 = useDark(e132, n53), l18 = _vue.ref(null), i13 = _vue.computed({
            get: ()=>e132.modelValue
            ,
            set: (o)=>{
                if (o = parseInt(o, 10), e132.disable || isNaN(o)) return;
                const n = between(o, e132.min, e132.max);
                e132.modelValue !== n && t104("update:modelValue", n);
            }
        });
        function r10(e, t) {
            return [
                !0,
                !1
            ].includes(e) ? e : t;
        }
        _vue.watch(()=>e132.min + e132.max
        , ()=>{
            i13.value = e132.modelValue;
        });
        const s11 = _vue.computed(()=>"q-pagination row no-wrap items-center" + (!0 === e132.disable ? " disabled" : "")
        ), u7 = _vue.computed(()=>i13.value + " / " + e132.max
        ), c7 = _vue.computed(()=>r10(e132.boundaryLinks, e132.input)
        ), d = _vue.computed(()=>r10(e132.boundaryNumbers, !e132.input)
        ), p3 = _vue.computed(()=>r10(e132.directionLinks, e132.input)
        ), v = _vue.computed(()=>r10(e132.ellipses, !e132.input)
        ), m = _vue.computed(()=>{
            const t = [
                e132.iconFirst || n53.iconSet.pagination.first,
                e132.iconPrev || n53.iconSet.pagination.prev,
                e132.iconNext || n53.iconSet.pagination.next,
                e132.iconLast || n53.iconSet.pagination.last
            ];
            return !0 === n53.lang.rtl ? t.reverse() : t;
        }), f = _vue.computed(()=>!0 === e132.disable ? {
                "aria-disabled": "true"
            } : {
            }
        ), g = _vue.computed(()=>({
                round: e132.round,
                rounded: e132.rounded,
                outline: e132.outline,
                unelevated: e132.unelevated,
                push: e132.push,
                glossy: e132.glossy,
                dense: e132.dense,
                padding: e132.padding,
                color: e132.color,
                flat: !0,
                size: e132.size,
                ripple: null === e132.ripple || e132.ripple
            })
        ), b = _vue.computed(()=>({
                flat: e132.flat,
                color: e132.activeColor || e132.color,
                textColor: e132.activeTextColor || e132.textColor
            })
        );
        function y(e) {
            i13.value = e;
        }
        function S(e) {
            i13.value = i13.value + e;
        }
        function w() {
            i13.value = l18.value, l18.value = null;
        }
        function x(t, o) {
            const n = {
                ...g.value,
                ...t
            };
            return void 0 !== o && (void 0 !== e132.toFn ? n.to = e132.toFn(o) : n.onClick = ()=>y(o)
            ), _vue.h(QBtn, n);
        }
        return Object.assign(o64, {
            set: y,
            setByOffset: S
        }), ()=>{
            const t = [], o = [], n = [];
            if (c7.value && (t.push(x({
                key: "bls",
                disable: e132.disable || e132.modelValue <= e132.min,
                icon: m.value[0]
            }, e132.min)), o.unshift(x({
                key: "ble",
                disable: e132.disable || e132.modelValue >= e132.max,
                icon: m.value[3]
            }, e132.max))), p3.value && (t.push(x({
                key: "bdp",
                disable: e132.disable || e132.modelValue <= e132.min,
                icon: m.value[1]
            }, e132.modelValue - 1)), o.unshift(x({
                key: "bdn",
                disable: e132.disable || e132.modelValue >= e132.max,
                icon: m.value[2]
            }, e132.modelValue + 1))), !0 === e132.input) n.push(_vue.h(QInput, {
                class: "inline",
                style: {
                    width: `${u7.value.length / 1.5}em`
                },
                type: "number",
                dense: !0,
                value: l18.value,
                disable: e132.disable,
                dark: a26.value,
                borderless: !0,
                inputClass: e132.inputClass,
                inputStyle: e132.inputStyle,
                placeholder: u7.value,
                min: e132.min,
                max: e132.max,
                "onUpdate:modelValue" (e) {
                    l18.value = e;
                },
                onKeyup (e) {
                    !0 === isKeyCode(e, 13) && w();
                },
                onBlur: w
            }));
            else {
                let a = Math.max(e132.maxPages, 1 + (v.value ? 2 : 0) + (d.value ? 2 : 0)), l = e132.min, i = e132.max, r = !1, s = !1, u = !1, c = !1;
                e132.maxPages && a < e132.max - e132.min + 1 && (a = 1 + 2 * Math.floor(a / 2), l = Math.max(e132.min, Math.min(e132.max - a + 1, e132.modelValue - Math.floor(a / 2))), i = Math.min(e132.max, l + a - 1), d.value && (u = !0, l += 1), v.value && l > e132.min + (d.value ? 1 : 0) && (r = !0, l += 1), d.value && (c = !0, i -= 1), v.value && i < e132.max - (d.value ? 1 : 0) && (s = !0, i -= 1));
                const p = {
                    minWidth: `${Math.max(2, String(e132.max).length)}em`
                };
                if (u) {
                    const o = e132.min === e132.modelValue;
                    t.push(x({
                        key: "bns",
                        style: p,
                        disable: e132.disable,
                        flat: !o,
                        textColor: o ? e132.textColor : void 0,
                        label: e132.min
                    }, e132.min));
                }
                if (c) {
                    const t = e132.max === e132.modelValue;
                    o.unshift(x({
                        key: "bne",
                        style: p,
                        disable: e132.disable,
                        flat: !t,
                        textColor: t ? e132.textColor : void 0,
                        label: e132.max
                    }, e132.max));
                }
                r && t.push(x({
                    key: "bes",
                    style: p,
                    disable: e132.disable,
                    label: "…",
                    ripple: !1
                }, l - 1)), s && o.unshift(x({
                    key: "bee",
                    style: p,
                    disable: e132.disable,
                    label: "…",
                    ripple: !1
                }, i + 1));
                for(let t105 = l; t105 <= i; t105++){
                    const o = {
                        key: `bpg${t105}`,
                        style: p,
                        disable: e132.disable,
                        label: t105
                    };
                    t105 === e132.modelValue && Object.assign(o, b.value), n.push(x(o, t105));
                }
            }
            return _vue.h("div", {
                class: s11.value,
                ...f.value
            }, [
                t,
                _vue.h("div", {
                    class: "row justify-center"
                }, [
                    n
                ]),
                o
            ]);
        };
    }
});
function frameDebounce(e) {
    let t, o, n = !1;
    function a() {
        o = arguments, !0 !== n && (n = !0, t = requestAnimationFrame(()=>{
            e.apply(this, o), o = void 0, n = !1;
        }));
    }
    return a.cancel = ()=>{
        window.cancelAnimationFrame(t), n = !1;
    }, a;
}
const { passive: passive$1  } = listenOpts;
var QParallax = createComponent({
    name: "QParallax",
    props: {
        src: String,
        height: {
            type: Number,
            default: 500
        },
        speed: {
            type: Number,
            default: 1,
            validator: (e)=>e >= 0 && e <= 1
        },
        scrollTarget: {
            default: void 0
        },
        onScroll: Function
    },
    setup (e133, { slots: t106 , emit: o65  }) {
        const n54 = _vue.ref(0), a = _vue.ref(null), l19 = _vue.ref(null), i14 = _vue.ref(null);
        let r, s, u, c, d, p;
        _vue.watch(()=>e133.height
        , ()=>{
            !0 === r && m();
        }), _vue.watch(()=>e133.scrollTarget
        , ()=>{
            !0 === r && (y(), b());
        });
        let v = (t)=>{
            n54.value = t, void 0 !== e133.onScroll && o65("scroll", t);
        };
        function m() {
            let t, o, n;
            p === window ? (t = 0, o = window.innerHeight, n = o) : (t = offset(p).top, o = height(p), n = t + o);
            const l = offset(a.value).top, i = l + e133.height;
            if (void 0 !== d || i > t && l < n) {
                const t = (n - l) / (e133.height + o);
                f((u - e133.height) * t * e133.speed), v(t);
            }
        }
        let f = (e)=>{
            s.style.transform = `translate3d(-50%,${Math.round(e)}px,0)`;
        };
        function g() {
            u = s.naturalHeight || s.videoHeight || height(s), !0 === r && m();
        }
        function b() {
            r = !0, p = getScrollTarget(a.value, e133.scrollTarget), p.addEventListener("scroll", m, passive$1), window.addEventListener("resize", c, passive$1), m();
        }
        function y() {
            !0 === r && (r = !1, p.removeEventListener("scroll", m, passive$1), window.removeEventListener("resize", c, passive$1), p = void 0);
        }
        return _vue.onMounted(()=>{
            f = frameDebounce(f), v = frameDebounce(v), c = frameDebounce(g), s = void 0 !== t106.media ? l19.value.children[0] : i14.value, s.onload = s.onloadstart = s.loadedmetadata = g, g(), s.style.display = "initial", void 0 !== window.IntersectionObserver ? (d = new IntersectionObserver((e)=>{
                const t = !0 === e[0].isIntersecting ? b : y;
                t();
            }), d.observe(a.value)) : b();
        }), _vue.onBeforeUnmount(()=>{
            y(), void 0 !== d && d.disconnect(), s.onload = s.onloadstart = s.loadedmetadata = null;
        }), ()=>{
            return _vue.h("div", {
                ref: a,
                class: "q-parallax",
                style: {
                    height: `${e133.height}px`
                }
            }, [
                _vue.h("div", {
                    ref: l19,
                    class: "q-parallax__media absolute-full"
                }, void 0 !== t106.media ? t106.media() : [
                    _vue.h("img", {
                        ref: i14,
                        src: e133.src
                    })
                ]),
                _vue.h("div", {
                    class: "q-parallax__content absolute-full column flex-center"
                }, void 0 !== t106.content ? t106.content({
                    percentScrolled: n54.value
                }) : hSlot(t106.default))
            ]);
        };
    }
});
function clone(e) {
    const t = JSON.stringify(e);
    if (t) return JSON.parse(t);
}
var QPopupEdit = createComponent({
    name: "QPopupEdit",
    props: {
        modelValue: {
            required: !0
        },
        title: String,
        buttons: Boolean,
        labelSet: String,
        labelCancel: String,
        color: {
            type: String,
            default: "primary"
        },
        validate: {
            type: Function,
            default: ()=>!0
        },
        autoSave: Boolean,
        cover: {
            type: Boolean,
            default: !0
        },
        disable: Boolean
    },
    emits: [
        "update:modelValue",
        "save",
        "cancel",
        "before-show",
        "show",
        "before-hide",
        "hide"
    ],
    setup (e134, { slots: t107 , emit: o66  }) {
        const { proxy: n  } = _vue.getCurrentInstance(), { $q: a  } = n, l = _vue.ref(null), i = _vue.ref(""), r = _vue.ref("");
        let s = !1;
        const u = _vue.computed(()=>{
            const t = {
                initialValue: i.value,
                validate: e134.validate,
                set: c,
                cancel: d,
                updatePosition: p
            };
            return Object.defineProperty(t, "value", {
                get: ()=>r.value
                ,
                set: (e)=>{
                    r.value = e;
                }
            }), t;
        });
        function c() {
            !1 !== e134.validate(r.value) && (!0 === v() && (o66("save", r.value, i.value), o66("update:modelValue", r.value)), m());
        }
        function d() {
            !0 === v() && o66("cancel", r.value, i.value), m();
        }
        function p() {
            _vue.nextTick(()=>{
                l.value.updatePosition();
            });
        }
        function v() {
            return !1 === isDeepEqual(r.value, i.value);
        }
        function m() {
            s = !0, l.value.hide();
        }
        function f() {
            s = !1, i.value = clone(e134.modelValue), r.value = clone(e134.modelValue), o66("before-show");
        }
        function g() {
            o66("show");
        }
        function b() {
            !1 === s && !0 === v() && (!0 === e134.autoSave && !0 === e134.validate(r.value) ? (o66("save", r.value, i.value), o66("update:modelValue", r.value)) : o66("cancel", r.value, i.value)), o66("before-hide");
        }
        function y() {
            o66("hide");
        }
        function S() {
            const o = void 0 !== t107.default ? [].concat(t107.default(u.value)) : [];
            return e134.title && o.unshift(_vue.h("div", {
                class: "q-dialog__title q-mt-sm q-mb-sm"
            }, e134.title)), !0 === e134.buttons && o.push(_vue.h("div", {
                class: "q-popup-edit__buttons row justify-center no-wrap"
            }, [
                _vue.h(QBtn, {
                    flat: !0,
                    color: e134.color,
                    label: e134.labelCancel || a.lang.label.cancel,
                    onClick: d
                }),
                _vue.h(QBtn, {
                    flat: !0,
                    color: e134.color,
                    label: e134.labelSet || a.lang.label.set,
                    onClick: c
                })
            ])), o;
        }
        return Object.assign(n, {
            set: c,
            cancel: d,
            show (e) {
                null !== l.value && l.value.show(e);
            },
            hide (e) {
                null !== l.value && l.value.hide(e);
            },
            updatePosition: p
        }), ()=>{
            if (!0 !== e134.disable) return _vue.h(QMenu, {
                ref: l,
                class: "q-popup-edit",
                cover: e134.cover,
                onBeforeShow: f,
                onShow: g,
                onBeforeHide: b,
                onHide: y,
                onEscapeKey: d
            }, S);
        };
    }
}), QPopupProxy = createComponent({
    name: "QPopupProxy",
    props: {
        ...useAnchorProps,
        breakpoint: {
            type: [
                String,
                Number
            ],
            default: 450
        }
    },
    emits: [
        "show",
        "hide"
    ],
    setup (e135, { slots: t , emit: o67 , attrs: n  }) {
        const { proxy: a27  } = _vue.getCurrentInstance(), { $q: l  } = a27, i = _vue.ref(!1), r = _vue.ref(null), s = _vue.computed(()=>parseInt(e135.breakpoint, 10)
        ), { canShow: u  } = useAnchor({
            showing: i
        });
        function c() {
            return l.screen.width < s.value || l.screen.height < s.value ? "dialog" : "menu";
        }
        const d = _vue.ref(c()), p = _vue.computed(()=>"menu" === d.value ? {
                maxHeight: "99vh"
            } : {
            }
        );
        function v(e) {
            i.value = !0, o67("show", e);
        }
        function m(e) {
            i.value = !1, d.value = c(), o67("hide", e);
        }
        return _vue.watch(()=>c()
        , (e)=>{
            !0 !== i.value && (d.value = e);
        }), Object.assign(a27, {
            show (e) {
                !0 === u(e) && r.value.show(e);
            },
            hide (e) {
                r.value.hide(e);
            },
            toggle (e) {
                r.value.toggle(e);
            }
        }), ()=>{
            const o = {
                ref: r,
                ...p.value,
                ...n,
                onShow: v,
                onHide: m
            };
            let a;
            return "dialog" === d.value ? a = QDialog : (a = QMenu, Object.assign(o, {
                target: e135.target,
                contextMenu: e135.contextMenu,
                noParentEvent: !0,
                separateClosePopup: !0
            })), _vue.h(a, o, t.default);
        };
    }
});
const defaultSizes = {
    xs: 2,
    sm: 4,
    md: 6,
    lg: 10,
    xl: 14
};
function width(e, t, o) {
    return {
        transform: !0 === t ? `translateX(${!0 === o.lang.rtl ? "-" : ""}100%) scale3d(${-e},1,1)` : `scale3d(${e},1,1)`
    };
}
var QLinearProgress = createComponent({
    name: "QLinearProgress",
    props: {
        ...useDarkProps,
        ...useSizeProps,
        value: {
            type: Number,
            default: 0
        },
        buffer: Number,
        color: String,
        trackColor: String,
        reverse: Boolean,
        stripe: Boolean,
        indeterminate: Boolean,
        query: Boolean,
        rounded: Boolean,
        animationSpeed: {
            type: [
                String,
                Number
            ],
            default: 2100
        },
        instantFeedback: Boolean
    },
    setup (e, { slots: t  }) {
        const { proxy: o68  } = _vue.getCurrentInstance(), n = useDark(e, o68.$q), a = useSize(e, defaultSizes), l = _vue.computed(()=>!0 === e.indeterminate || !0 === e.query
        ), i = _vue.computed(()=>({
                ...null !== a.value ? a.value : {
                },
                "--q-linear-progress-speed": `${e.animationSpeed}ms`
            })
        ), r = _vue.computed(()=>"q-linear-progress" + (void 0 !== e.color ? ` text-${e.color}` : "") + (!0 === e.reverse || !0 === e.query ? " q-linear-progress--reverse" : "") + (!0 === e.rounded ? " rounded-borders" : "")
        ), s = _vue.computed(()=>width(void 0 !== e.buffer ? e.buffer : 1, e.reverse, o68.$q)
        ), u = _vue.computed(()=>"q-linear-progress__track absolute-full" + ` q-linear-progress__track--with${!0 === e.instantFeedback ? "out" : ""}-transition` + ` q-linear-progress__track--${!0 === n.value ? "dark" : "light"}` + (void 0 !== e.trackColor ? ` bg-${e.trackColor}` : "")
        ), c = _vue.computed(()=>width(!0 === l.value ? 1 : e.value, e.reverse, o68.$q)
        ), d = _vue.computed(()=>"q-linear-progress__model absolute-full" + ` q-linear-progress__model--with${!0 === e.instantFeedback ? "out" : ""}-transition` + ` q-linear-progress__model--${!0 === l.value ? "in" : ""}determinate`
        ), p = _vue.computed(()=>({
                width: `${100 * e.value}%`
            })
        ), v = _vue.computed(()=>`q-linear-progress__stripe absolute-${!0 === e.reverse ? "right" : "left"}`
        );
        return ()=>{
            const o = [
                _vue.h("div", {
                    class: u.value,
                    style: s.value
                }),
                _vue.h("div", {
                    class: d.value,
                    style: c.value
                })
            ];
            return !0 === e.stripe && !1 === l.value && o.push(_vue.h("div", {
                class: v.value,
                style: p.value
            })), _vue.h("div", {
                class: r.value,
                style: i.value,
                role: "progressbar",
                "aria-valuemin": 0,
                "aria-valuemax": 1,
                "aria-valuenow": !0 === e.indeterminate ? void 0 : e.value
            }, hMergeSlot(t.default, o));
        };
    }
});
const PULLER_HEIGHT = 40, OFFSET_TOP = 20;
var QPullToRefresh = createComponent({
    name: "QPullToRefresh",
    props: {
        color: String,
        bgColor: String,
        icon: String,
        noMouse: Boolean,
        disable: Boolean,
        scrollTarget: {
            default: void 0
        }
    },
    emits: [
        "refresh"
    ],
    setup (e136, { slots: t108 , emit: o69  }) {
        const { proxy: n  } = _vue.getCurrentInstance(), { $q: a  } = n, l = _vue.ref("pull"), i = _vue.ref(0), r = _vue.ref(!1), s = _vue.ref(-PULLER_HEIGHT), u = _vue.ref(!1), c = _vue.ref({
        }), d = _vue.computed(()=>({
                opacity: i.value,
                transform: `translateY(${s.value}px) rotate(${360 * i.value}deg)`
            })
        ), p = _vue.computed(()=>"q-pull-to-refresh__puller row flex-center" + (!0 === u.value ? " q-pull-to-refresh__puller--animating" : "") + (void 0 !== e136.bgColor ? ` bg-${e136.bgColor}` : "")
        );
        function v(e) {
            if (!0 === e.isFinal) return void (!0 === r.value && (r.value = !1, "pulled" === l.value ? (l.value = "refreshing", b({
                pos: OFFSET_TOP
            }), g()) : "pull" === l.value && b({
                pos: -PULLER_HEIGHT,
                ratio: 0
            })));
            if (!0 === u.value || "refreshing" === l.value) return !1;
            if (!0 === e.isFirst) {
                if (0 !== getVerticalScrollPosition(S) || "down" !== e.direction) return !0 === r.value && (r.value = !1, l.value = "pull", b({
                    pos: -PULLER_HEIGHT,
                    ratio: 0
                })), !1;
                r.value = !0;
                const { top: t , left: o  } = y.getBoundingClientRect();
                c.value = {
                    top: t + "px",
                    left: o + "px",
                    width: window.getComputedStyle(y).getPropertyValue("width")
                };
            }
            prevent(e.evt);
            const t = Math.min(140, Math.max(0, e.distance.y));
            s.value = t - PULLER_HEIGHT, i.value = between(t / (OFFSET_TOP + PULLER_HEIGHT), 0, 1);
            const o = s.value > OFFSET_TOP ? "pulled" : "pull";
            l.value !== o && (l.value = o);
        }
        const m = _vue.computed(()=>{
            const t = {
                down: !0,
                mightPrevent: !0
            };
            return !0 !== e136.noMouse && (t.mouse = !0), [
                [
                    TouchPan,
                    v,
                    void 0,
                    t
                ]
            ];
        }), f = _vue.computed(()=>`q-pull-to-refresh__content${!0 === r.value ? " no-pointer-events" : ""}`
        );
        function g() {
            o69("refresh", ()=>{
                b({
                    pos: -PULLER_HEIGHT,
                    ratio: 0
                }, ()=>{
                    l.value = "pull";
                });
            });
        }
        function b({ pos: e , ratio: t  }, o) {
            u.value = !0, s.value = e, void 0 !== t && (i.value = t), clearTimeout(w), w = setTimeout(()=>{
                u.value = !1, o && o();
            }, 300);
        }
        let y, S, w;
        function x() {
            S = getScrollTarget(y, e136.scrollTarget);
        }
        return Object.assign(n, {
            trigger: g,
            updateScrollTarget: x
        }), _vue.watch(()=>e136.scrollTarget
        , x), _vue.onMounted(()=>{
            y = n.$el, x();
        }), _vue.onBeforeUnmount(()=>{
            clearTimeout(w);
        }), ()=>{
            const o = [
                _vue.h("div", {
                    class: f.value
                }, hSlot(t108.default)),
                _vue.h("div", {
                    class: "q-pull-to-refresh__puller-container fixed row flex-center no-pointer-events z-top",
                    style: c.value
                }, [
                    _vue.h("div", {
                        class: p.value,
                        style: d.value
                    }, [
                        "refreshing" !== l.value ? _vue.h(QIcon, {
                            name: e136.icon || a.iconSet.pullToRefresh.icon,
                            color: e136.color,
                            size: "32px"
                        }) : _vue.h(QSpinner, {
                            size: "24px",
                            color: e136.color
                        })
                    ])
                ])
            ];
            return hDir("div", {
                class: "q-pull-to-refresh"
            }, o, "main", !1 === e136.disable, ()=>m.value
            );
        };
    }
});
const dragType = {
    MIN: 0,
    RANGE: 1,
    MAX: 2
};
var QRange = createComponent({
    name: "QRange",
    props: {
        ...useFormProps,
        ...useSliderProps,
        modelValue: {
            type: Object,
            default: ()=>({
                    min: null,
                    max: null
                })
            ,
            validator (e) {
                return "min" in e && "max" in e;
            }
        },
        name: String,
        dragRange: Boolean,
        dragOnlyRange: Boolean,
        leftLabelColor: String,
        leftLabelTextColor: String,
        rightLabelColor: String,
        rightLabelTextColor: String,
        leftLabelValue: [
            String,
            Number
        ],
        rightLabelValue: [
            String,
            Number
        ]
    },
    emits: useSliderEmits,
    setup (e137, { emit: t109  }) {
        const { proxy: { $q: o70  }  } = _vue.getCurrentInstance(), n55 = _vue.computed(()=>{
            return {
                type: "hidden",
                name: e137.name,
                value: `${e137.modelValue.min}|${e137.modelValue.max}`
            };
        }), a28 = useFormInject(n55), l20 = _vue.ref(null), i15 = _vue.ref({
            min: null === e137.modelValue.min ? e137.min : e137.modelValue.min,
            max: null === e137.modelValue.max ? e137.max : e137.modelValue.max
        }), r = _vue.ref(null), s12 = _vue.ref(0), u8 = _vue.ref(0), { state: c , methods: d5  } = useSlider({
            updateValue: w,
            updatePosition: C,
            getDragging: x
        }), p = _vue.computed(()=>0 === c.minMaxDiff.value ? 0 : (i15.value.min - e137.min) / c.minMaxDiff.value
        ), v4 = _vue.computed(()=>!0 === c.active.value ? s12.value : p.value
        ), m = _vue.computed(()=>0 === c.minMaxDiff.value ? 0 : (i15.value.max - e137.min) / c.minMaxDiff.value
        ), f2 = _vue.computed(()=>!0 === c.active.value ? u8.value : m.value
        ), g = _vue.computed(()=>({
                [c.positionProp.value]: `${100 * v4.value}%`,
                [c.sizeProp.value]: `${100 * (f2.value - v4.value)}%`
            })
        ), b = _vue.computed(()=>{
            if (!0 !== c.editable.value) return {
            };
            if (!0 === o70.platform.is.mobile) return {
                onClick: d5.onMobileClick
            };
            const t = {
                onMousedown: d5.onActivate
            };
            return !0 === e137.dragOnlyRange && Object.assign(t, {
                onFocus: ()=>{
                    k("both");
                },
                onBlur: d5.onBlur,
                onKeydown: _,
                onKeyup: d5.onKeyup
            }), t;
        }), y = {
            domRef: _vue.ref(null),
            events: _vue.computed(()=>!0 === c.editable.value && !0 !== o70.platform.is.mobile && !0 !== e137.dragOnlyRange ? {
                    onFocus: ()=>{
                        k("min");
                    },
                    onBlur: d5.onBlur,
                    onKeydown: _,
                    onKeyup: d5.onKeyup
                } : {
                }
            ),
            thumbStyle: _vue.computed(()=>({
                    [c.positionProp.value]: `${100 * v4.value}%`,
                    "z-index": "min" === r.value ? 2 : void 0
                })
            ),
            thumbClass: _vue.computed(()=>!1 === c.preventFocus.value && "min" === c.focus.value ? " q-slider--focus" : ""
            ),
            pinClass: _vue.computed(()=>{
                const t = e137.leftLabelColor || e137.labelColor;
                return t ? ` text-${t}` : "";
            }),
            pinTextClass: _vue.computed(()=>{
                const t = e137.leftLabelTextColor || e137.labelTextColor;
                return t ? ` text-${t}` : "";
            }),
            pinStyle: _vue.computed(()=>{
                const t = !0 === e137.reverse ? -v4.value : v4.value - 1;
                return d5.getPinStyle(t, v4.value);
            }),
            label: _vue.computed(()=>void 0 !== e137.leftLabelValue ? e137.leftLabelValue : i15.value.min
            )
        }, S = {
            domRef: _vue.ref(null),
            events: _vue.computed(()=>!0 === c.editable.value && !0 !== o70.platform.is.mobile && !0 !== e137.dragOnlyRange ? {
                    onFocus: ()=>{
                        k("max");
                    },
                    onBlur: d5.onBlur,
                    onKeydown: _,
                    onKeyup: d5.onKeyup
                } : {
                }
            ),
            thumbStyle: _vue.computed(()=>({
                    [c.positionProp.value]: `${100 * f2.value}%`
                })
            ),
            thumbClass: _vue.computed(()=>!1 === c.preventFocus.value && "max" === c.focus.value ? " q-slider--focus" : ""
            ),
            pinClass: _vue.computed(()=>{
                const t = e137.rightLabelColor || e137.labelColor;
                return t ? ` text-${t}` : "";
            }),
            pinTextClass: _vue.computed(()=>{
                const t = e137.rightLabelTextColor || e137.labelTextColor;
                return t ? ` text-${t}` : "";
            }),
            pinStyle: _vue.computed(()=>{
                const t = !0 === e137.reverse ? -f2.value : f2.value - 1;
                return d5.getPinStyle(t, f2.value);
            }),
            label: _vue.computed(()=>void 0 !== e137.rightLabelValue ? e137.rightLabelValue : i15.value.max
            )
        };
        function w(o) {
            i15.value.min === e137.modelValue.min && i15.value.max === e137.modelValue.max || t109("update:modelValue", {
                ...i15.value
            }), !0 === o && t109("change", {
                ...i15.value
            });
        }
        function x(t) {
            const { left: o , top: n , width: a , height: s  } = l20.value.getBoundingClientRect(), u = !0 === e137.dragOnlyRange ? 0 : !0 === e137.vertical ? y.domRef.value.offsetHeight / (2 * s) : y.domRef.value.offsetWidth / (2 * a), d = {
                left: o,
                top: n,
                width: a,
                height: s,
                valueMin: i15.value.min,
                valueMax: i15.value.max,
                ratioMin: p.value,
                ratioMax: m.value
            }, v = getRatio(t, d, c.isReversed.value, e137.vertical);
            let f;
            return !0 !== e137.dragOnlyRange && v < d.ratioMin + u ? f = dragType.MIN : !0 === e137.dragOnlyRange || v < d.ratioMax - u ? !0 === e137.dragRange || !0 === e137.dragOnlyRange ? (f = dragType.RANGE, Object.assign(d, {
                offsetRatio: v,
                offsetModel: getModel(v, e137.min, e137.max, e137.step, c.decimals.value),
                rangeValue: d.valueMax - d.valueMin,
                rangeRatio: d.ratioMax - d.ratioMin
            })) : f = d.ratioMax - v < v - d.ratioMin ? dragType.MAX : dragType.MIN : f = dragType.MAX, d.type = f, r.value = null, d;
        }
        function C(t, o = c.dragging.value) {
            const n = getRatio(t, o, c.isReversed.value, e137.vertical), a = getModel(n, e137.min, e137.max, e137.step, c.decimals.value);
            let l;
            switch(o.type){
                case dragType.MIN:
                    n <= o.ratioMax ? (l = {
                        minR: n,
                        maxR: o.ratioMax,
                        min: a,
                        max: o.valueMax
                    }, r.value = "min") : (l = {
                        minR: o.ratioMax,
                        maxR: n,
                        min: o.valueMax,
                        max: a
                    }, r.value = "max");
                    break;
                case dragType.MAX:
                    n >= o.ratioMin ? (l = {
                        minR: o.ratioMin,
                        maxR: n,
                        min: o.valueMin,
                        max: a
                    }, r.value = "max") : (l = {
                        minR: n,
                        maxR: o.ratioMin,
                        min: a,
                        max: o.valueMin
                    }, r.value = "min");
                    break;
                case dragType.RANGE:
                    const t = n - o.offsetRatio, i = between(o.ratioMin + t, 0, 1 - o.rangeRatio), s = a - o.offsetModel, u = between(o.valueMin + s, e137.min, e137.max - o.rangeValue);
                    l = {
                        minR: i,
                        maxR: i + o.rangeRatio,
                        min: parseFloat(u.toFixed(c.decimals.value)),
                        max: parseFloat((u + o.rangeValue).toFixed(c.decimals.value))
                    };
                    break;
            }
            i.value = {
                min: l.min,
                max: l.max
            }, null !== i.value.min && null !== i.value.max || (i.value.min = l.min || e137.min, i.value.max = l.max || e137.max), !0 !== e137.snap || 0 === e137.step ? (s.value = l.minR, u.value = l.maxR) : (s.value = 0 === c.minMaxDiff.value ? 0 : (i.value.min - e137.min) / c.minMaxDiff.value, u.value = 0 === c.minMaxDiff.value ? 0 : (i.value.max - e137.min) / c.minMaxDiff.value);
        }
        function k(e) {
            c.focus.value = e;
        }
        function _(t) {
            if (!keyCodes$2.includes(t.keyCode)) return;
            stopAndPrevent(t);
            const o = ([
                34,
                33
            ].includes(t.keyCode) ? 10 : 1) * e137.step, n = [
                34,
                37,
                40
            ].includes(t.keyCode) ? -o : o;
            if (e137.dragOnlyRange) {
                const t = e137.dragOnlyRange ? i15.value.max - i15.value.min : 0, o = between(parseFloat((i15.value.min + n).toFixed(c.decimals.value)), e137.min, e137.max - t);
                i15.value = {
                    min: o,
                    max: parseFloat((o + t).toFixed(c.decimals.value))
                };
            } else {
                if (!1 === c.focus.value) return;
                {
                    const t = c.focus.value;
                    i15.value = {
                        ...i15.value,
                        [t]: between(parseFloat((i15.value[t] + n).toFixed(c.decimals.value)), "min" === t ? e137.min : i15.value.min, "max" === t ? e137.max : i15.value.max)
                    };
                }
            }
            w();
        }
        function q(t) {
            const o = [
                d5.getThumbSvg(),
                _vue.h("div", {
                    class: "q-slider__focus-ring"
                })
            ];
            return !0 !== e137.label && !0 !== e137.labelAlways || o.push(_vue.h("div", {
                class: `q-slider__pin q-slider__pin${c.axis.value} absolute` + t.pinClass.value,
                style: t.pinStyle.value.pin
            }, [
                _vue.h("div", {
                    class: `q-slider__pin-text-container q-slider__pin-text-container${c.axis.value}`,
                    style: t.pinStyle.value.pinTextContainer
                }, [
                    _vue.h("span", {
                        class: "q-slider__pin-text" + t.pinTextClass.value
                    }, t.label.value)
                ])
            ]), _vue.h("div", {
                class: `q-slider__arrow q-slider__arrow${c.axis.value}` + t.pinClass.value
            })), _vue.h("div", {
                ref: t.domRef,
                class: `q-slider__thumb-container q-slider__thumb-container${c.axis.value} absolute non-selectable` + t.thumbClass.value,
                style: t.thumbStyle.value,
                ...t.events.value,
                tabindex: !0 !== e137.dragOnlyRange ? c.tabindex.value : null
            }, o);
        }
        return _vue.watch(()=>e137.modelValue.min
        , (t)=>{
            i15.value.min = null === t ? e137.min : t;
        }), _vue.watch(()=>e137.modelValue.max
        , (t)=>{
            i15.value.max = null === t ? e137.max : t;
        }), _vue.watch(()=>e137.min
        , (e)=>{
            i15.value.min < e && (i15.value.min = e), i15.value.max < e && (i15.value.max = e);
        }), _vue.watch(()=>e137.max
        , (e)=>{
            i15.value.min > e && (i15.value.min = e), i15.value.max > e && (i15.value.max = e);
        }), ()=>{
            const t = [
                _vue.h("div", {
                    class: `q-slider__track q-slider__track${c.axis.value} absolute`,
                    style: g.value
                })
            ];
            !1 !== e137.markers && t.push(_vue.h("div", {
                class: `q-slider__track-markers q-slider__track-markers${c.axis.value} absolute-full fit`,
                style: c.markerStyle.value
            }));
            const n = [
                _vue.h("div", {
                    class: `q-slider__track-container q-slider__track-container${c.axis.value} absolute`
                }, t),
                q(y),
                q(S)
            ];
            void 0 !== e137.name && !0 !== e137.disable && a28(n, "push");
            const i = {
                ref: l20,
                class: "q-range " + c.classes.value + (null === e137.modelValue.min || null === e137.modelValue.max ? " q-slider--no-value" : ""),
                ...c.attributes.value,
                "aria-valuenow": e137.modelValue.min + "|" + e137.modelValue.max,
                tabindex: !0 === e137.dragOnlyRange && !0 !== o70.platform.is.mobile ? c.tabindex.value : null,
                ...b.value
            };
            return hDir("div", i, n, "slide", c.editable.value, ()=>c.panDirective.value
            );
        };
    }
}), QRating = createComponent({
    name: "QRating",
    props: {
        ...useSizeProps,
        ...useFormProps,
        modelValue: {
            type: Number,
            required: !0
        },
        max: {
            type: [
                String,
                Number
            ],
            default: 5
        },
        icon: [
            String,
            Array
        ],
        iconHalf: [
            String,
            Array
        ],
        iconSelected: [
            String,
            Array
        ],
        color: [
            String,
            Array
        ],
        colorHalf: [
            String,
            Array
        ],
        colorSelected: [
            String,
            Array
        ],
        noReset: Boolean,
        noDimming: Boolean,
        readonly: Boolean,
        disable: Boolean
    },
    emits: [
        "update:modelValue"
    ],
    setup (e138, { slots: t110 , emit: o71  }) {
        const { proxy: { $q: n56  }  } = _vue.getCurrentInstance(), a29 = useSize(e138), l21 = useFormAttrs(e138), i16 = useFormInject(l21), r = _vue.ref(0);
        let s13 = {
        };
        const u9 = _vue.computed(()=>!0 !== e138.readonly && !0 !== e138.disable
        ), c8 = _vue.computed(()=>"q-rating row inline items-center" + ` q-rating--${!0 === u9.value ? "" : "non-"}editable` + (!0 === e138.noDimming ? " q-rating--no-dimming" : "") + (!0 === e138.disable ? " disabled" : "") + (void 0 !== e138.color && !1 === Array.isArray(e138.color) ? ` text-${e138.color}` : "")
        ), d6 = _vue.computed(()=>{
            const t = !0 === Array.isArray(e138.icon) ? e138.icon.length : 0, o = !0 === Array.isArray(e138.iconSelected) ? e138.iconSelected.length : 0, n = !0 === Array.isArray(e138.iconHalf) ? e138.iconHalf.length : 0, a = !0 === Array.isArray(e138.color) ? e138.color.length : 0, l = !0 === Array.isArray(e138.colorSelected) ? e138.colorSelected.length : 0, i = !0 === Array.isArray(e138.colorHalf) ? e138.colorHalf.length : 0;
            return {
                iconLen: t,
                icon: t > 0 ? e138.icon[t - 1] : e138.icon,
                selIconLen: o,
                selIcon: o > 0 ? e138.iconSelected[o - 1] : e138.iconSelected,
                halfIconLen: n,
                halfIcon: n > 0 ? e138.iconHalf[o - 1] : e138.iconHalf,
                colorLen: a,
                color: a > 0 ? e138.color[a - 1] : e138.color,
                selColorLen: l,
                selColor: l > 0 ? e138.colorSelected[l - 1] : e138.colorSelected,
                halfColorLen: i,
                halfColor: i > 0 ? e138.colorHalf[i - 1] : e138.colorHalf
            };
        }), p = _vue.computed(()=>{
            const t = [], o = d6.value, a = Math.ceil(e138.modelValue), l = void 0 === e138.iconHalf || a === e138.modelValue ? -1 : a;
            for(let i = 1; i <= e138.max; i++){
                const s = 0 === r.value && e138.modelValue >= i || r.value > 0 && r.value >= i, u = l === i && r.value < i, c = r.value > 0 && (!0 === u ? a : e138.modelValue) >= i && r.value < i, d = !0 === u ? i <= o.halfColorLen ? e138.colorHalf[i - 1] : o.halfColor : void 0 !== o.selColor && !0 === s ? i <= o.selColorLen ? e138.colorSelected[i - 1] : o.selColor : i <= o.colorLen ? e138.color[i - 1] : o.color;
                t.push({
                    name: (!0 === u ? i <= o.halfIconLen ? e138.iconHalf[i - 1] : o.halfIcon : void 0 === o.selIcon || !0 !== s && !0 !== c ? i <= o.iconLen ? e138.icon[i - 1] : o.icon : i <= o.selIconLen ? e138.iconSelected[i - 1] : o.selIcon) || n56.iconSet.rating.icon,
                    classes: "q-rating__icon" + (!0 === s || !0 === u ? " q-rating__icon--active" : "") + (!0 === c ? " q-rating__icon--exselected" : "") + (r.value === i ? " q-rating__icon--hovered" : "") + (void 0 !== d ? ` text-${d}` : "")
                });
            }
            return t;
        }), v = _vue.computed(()=>{
            return !0 === e138.disable ? {
                "aria-disabled": "true"
            } : !0 === e138.readonly ? {
                "aria-readonly": "true"
            } : void 0;
        }), m = _vue.computed(()=>!0 === u9.value ? 0 : null
        );
        function f(t) {
            if (!0 === u9.value) {
                const n = between(parseInt(t, 10), 1, parseInt(e138.max, 10)), a = !0 !== e138.noReset && e138.modelValue === n ? 0 : n;
                a !== e138.modelValue && o71("update:modelValue", a), r.value = 0;
            }
        }
        function g(e) {
            !0 === u9.value && (r.value = e);
        }
        function b(e, t) {
            switch(e.keyCode){
                case 13:
                case 32:
                    return f(t), stopAndPrevent(e);
                case 37:
                case 40:
                    return s13[`rt${t - 1}`] && s13[`rt${t - 1}`].$el.focus(), stopAndPrevent(e);
                case 39:
                case 38:
                    return s13[`rt${t + 1}`] && s13[`rt${t + 1}`].$el.focus(), stopAndPrevent(e);
            }
        }
        function y() {
            r.value = 0;
        }
        return _vue.onBeforeUpdate(()=>{
            s13 = {
            };
        }), ()=>{
            const o = [];
            return p.value.forEach(({ classes: e139 , name: n  }, a)=>{
                const l = a + 1;
                o.push(_vue.h("div", {
                    key: l,
                    ref: (e)=>{
                        s13[`rt${l}`] = e;
                    },
                    class: "q-rating__icon-container flex flex-center",
                    tabindex: m.value,
                    onClick () {
                        f(l);
                    },
                    onMouseover () {
                        g(l);
                    },
                    onMouseout: y,
                    onFocus () {
                        g(l);
                    },
                    onBlur: y,
                    onKeyup (e) {
                        b(e, l);
                    }
                }, hMergeSlot(t110[`tip-${l}`], [
                    _vue.h(QIcon, {
                        class: e139,
                        name: n
                    })
                ])));
            }), void 0 !== e138.name && !0 !== e138.disable && i16(o, "push"), _vue.h("div", {
                class: c8.value,
                style: a29.value,
                ...v.value
            }, o);
        };
    }
}), QResponsive = createComponent({
    name: "QResponsive",
    props: useRatioProps,
    setup (e, { slots: t  }) {
        const o = useRatio(e);
        return ()=>_vue.h("div", {
                class: "q-responsive"
            }, [
                _vue.h("div", {
                    class: "q-responsive__filler overflow-hidden"
                }, [
                    _vue.h("div", {
                        style: o.value
                    })
                ]),
                _vue.h("div", {
                    class: "q-responsive__content absolute-full fit"
                }, hSlot(t.default))
            ])
        ;
    }
});
const axisList = [
    "vertical",
    "horizontal"
], dirProps = {
    vertical: {
        offset: "offsetY",
        scroll: "scrollTop",
        dir: "down",
        dist: "y"
    },
    horizontal: {
        offset: "offsetX",
        scroll: "scrollLeft",
        dir: "right",
        dist: "x"
    }
}, panOpts = {
    prevent: !0,
    mouse: !0,
    mouseAllDir: !0
};
var QScrollArea = createComponent({
    name: "QScrollArea",
    props: {
        ...useDarkProps,
        thumbStyle: Object,
        verticalThumbStyle: Object,
        horizontalThumbStyle: Object,
        barStyle: [
            Array,
            String,
            Object
        ],
        verticalBarStyle: [
            Array,
            String,
            Object
        ],
        horizontalBarStyle: [
            Array,
            String,
            Object
        ],
        contentStyle: [
            Array,
            String,
            Object
        ],
        contentActiveStyle: [
            Array,
            String,
            Object
        ],
        delay: {
            type: [
                String,
                Number
            ],
            default: 1000
        },
        visible: {
            type: Boolean,
            default: null
        },
        tabindex: [
            String,
            Number
        ],
        onScroll: Function
    },
    setup (e140, { slots: t111 , emit: o72  }) {
        const n57 = _vue.ref(!1), a = _vue.ref(!1), l22 = _vue.ref(!1), i = {
            vertical: _vue.ref(0),
            horizontal: _vue.ref(0)
        }, r = {
            vertical: {
                ref: _vue.ref(null),
                position: _vue.ref(0),
                size: _vue.ref(0)
            },
            horizontal: {
                ref: _vue.ref(null),
                position: _vue.ref(0),
                size: _vue.ref(0)
            }
        }, s14 = _vue.getCurrentInstance(), u10 = useDark(e140, s14.proxy.$q);
        let c9, d;
        const p = _vue.ref(null), v = _vue.computed(()=>"q-scrollarea" + (!0 === u10.value ? " q-scrollarea--dark" : "")
        );
        r.vertical.percentage = _vue.computed(()=>{
            const e = r.vertical.size.value - i.vertical.value;
            if (e <= 0) return 0;
            const t = between(r.vertical.position.value / e, 0, 1);
            return Math.round(10000 * t) / 10000;
        }), r.vertical.thumbHidden = _vue.computed(()=>!0 !== (null === e140.visible ? l22.value : e140.visible) && !1 === n57.value && !1 === a.value || r.vertical.size.value <= i.vertical.value + 1
        ), r.vertical.thumbSize = _vue.computed(()=>Math.round(between(i.vertical.value * i.vertical.value / r.vertical.size.value, 50, i.vertical.value))
        ), r.vertical.style = _vue.computed(()=>{
            const t = r.vertical.thumbSize.value, o = r.vertical.percentage.value * (i.vertical.value - t);
            return {
                ...e140.thumbStyle,
                ...e140.verticalThumbStyle,
                top: `${o}px`,
                height: `${t}px`
            };
        }), r.vertical.thumbClass = _vue.computed(()=>"q-scrollarea__thumb q-scrollarea__thumb--v absolute-right" + (!0 === r.vertical.thumbHidden.value ? " q-scrollarea__thumb--invisible" : "")
        ), r.vertical.barClass = _vue.computed(()=>"q-scrollarea__bar q-scrollarea__bar--v absolute-right" + (!0 === r.vertical.thumbHidden.value ? " q-scrollarea__bar--invisible" : "")
        ), r.horizontal.percentage = _vue.computed(()=>{
            const e = r.horizontal.size.value - i.horizontal.value;
            if (e <= 0) return 0;
            const t = between(r.horizontal.position.value / e, 0, 1);
            return Math.round(10000 * t) / 10000;
        }), r.horizontal.thumbHidden = _vue.computed(()=>!0 !== (null === e140.visible ? l22.value : e140.visible) && !1 === n57.value && !1 === a.value || r.horizontal.size.value <= i.horizontal.value + 1
        ), r.horizontal.thumbSize = _vue.computed(()=>Math.round(between(i.horizontal.value * i.horizontal.value / r.horizontal.size.value, 50, i.horizontal.value))
        ), r.horizontal.style = _vue.computed(()=>{
            const t = r.horizontal.thumbSize.value, o = r.horizontal.percentage.value * (i.horizontal.value - t);
            return {
                ...e140.thumbStyle,
                ...e140.horizontalThumbStyle,
                left: `${o}px`,
                width: `${t}px`
            };
        }), r.horizontal.thumbClass = _vue.computed(()=>"q-scrollarea__thumb q-scrollarea__thumb--h absolute-bottom" + (!0 === r.horizontal.thumbHidden.value ? " q-scrollarea__thumb--invisible" : "")
        ), r.horizontal.barClass = _vue.computed(()=>"q-scrollarea__bar q-scrollarea__bar--h absolute-bottom" + (!0 === r.horizontal.thumbHidden.value ? " q-scrollarea__bar--invisible" : "")
        );
        const m = _vue.computed(()=>!0 === r.vertical.thumbHidden.value && !0 === r.horizontal.thumbHidden.value ? e140.contentStyle : e140.contentActiveStyle
        ), f = [
            [
                TouchPan,
                (e)=>{
                    k(e, "vertical");
                },
                void 0,
                {
                    vertical: !0,
                    ...panOpts
                }
            ]
        ], g = [
            [
                TouchPan,
                (e)=>{
                    k(e, "horizontal");
                },
                void 0,
                {
                    horizontal: !0,
                    ...panOpts
                }
            ]
        ];
        function b() {
            const e = {
            };
            return axisList.forEach((t)=>{
                const o = r[t];
                e[t + "Position"] = o.position.value, e[t + "Percentage"] = o.percentage.value, e[t + "Size"] = o.size.value, e[t + "ContainerSize"] = i[t].value;
            }), e;
        }
        const y = debounce(()=>{
            const e = b();
            e.ref = s14.proxy, o72("scroll", e);
        }, 0);
        function S(e, t, o) {
            if (!1 === axisList.includes(e)) return void console.error("[QScrollArea]: wrong first param of setScrollPosition (vertical/horizontal)");
            const n = "vertical" === e ? setVerticalScrollPosition : setHorizontalScrollPosition;
            n(p.value, t, o);
        }
        function w({ height: e , width: t  }) {
            let o = !1;
            i.vertical.value !== e && (i.vertical.value = e, o = !0), i.horizontal.value !== t && (i.horizontal.value = t, o = !0), !0 === o && P();
        }
        function x({ position: e  }) {
            let t = !1;
            r.vertical.position.value !== e.top && (r.vertical.position.value = e.top, t = !0), r.horizontal.position.value !== e.left && (r.horizontal.position.value = e.left, t = !0), !0 === t && P();
        }
        function C({ height: e , width: t  }) {
            r.horizontal.size.value !== t && (r.horizontal.size.value = t, P()), r.vertical.size.value !== e && (r.vertical.size.value = e, P());
        }
        function k(e, t) {
            const o = r[t];
            if (!0 === e.isFirst) {
                if (!0 === o.thumbHidden.value) return;
                d = o.position.value, a.value = !0;
            } else if (!0 !== a.value) return;
            !0 === e.isFinal && (a.value = !1);
            const n = dirProps[t], l = i[t].value, s = (o.size.value - l) / (l - o.thumbSize.value), u = e.distance[n.dist], c = d + (e.direction === n.dir ? 1 : -1) * u * s;
            $(c, t);
        }
        function _(e, t) {
            const o = r[t];
            if (!0 !== o.thumbHidden.value) {
                const n = e[dirProps[t].offset] - o.thumbSize.value / 2;
                $(n / i[t].value * o.size.value, t), null !== o.ref.value && o.ref.value.dispatchEvent(new MouseEvent(e.type, e));
            }
        }
        function q(e) {
            _(e, "vertical");
        }
        function T(e) {
            _(e, "horizontal");
        }
        function P() {
            !0 === n57.value ? clearTimeout(c9) : n57.value = !0, c9 = setTimeout(()=>{
                n57.value = !1;
            }, e140.delay), void 0 !== e140.onScroll && y();
        }
        function $(e, t) {
            p.value[dirProps[t].scroll] = e;
        }
        function M() {
            l22.value = !0;
        }
        function B() {
            l22.value = !1;
        }
        return Object.assign(s14.proxy, {
            getScrollTarget: ()=>p.value
            ,
            getScroll: b,
            getScrollPosition: ()=>({
                    top: r.vertical.position.value,
                    left: r.horizontal.position.value
                })
            ,
            getScrollPercentage: ()=>({
                    top: r.vertical.percentage.value,
                    left: r.horizontal.percentage.value
                })
            ,
            setScrollPosition: S,
            setScrollPercentage (e, t, o) {
                S(e, t * (r[e].size.value - i[e].value), o);
            }
        }), ()=>{
            return _vue.h("div", {
                class: v.value,
                onMouseenter: M,
                onMouseleave: B
            }, [
                _vue.h("div", {
                    ref: p,
                    class: "q-scrollarea__container scroll relative-position fit hide-scrollbar",
                    tabindex: void 0 !== e140.tabindex ? e140.tabindex : void 0
                }, [
                    _vue.h("div", {
                        class: "q-scrollarea__content absolute",
                        style: m.value
                    }, hMergeSlot(t111.default, [
                        _vue.h(QResizeObserver, {
                            onResize: C
                        })
                    ])),
                    _vue.h(QScrollObserver, {
                        axis: "both",
                        onScroll: x
                    })
                ]),
                _vue.h(QResizeObserver, {
                    onResize: w
                }),
                _vue.h("div", {
                    class: r.vertical.barClass.value,
                    style: [
                        e140.barStyle,
                        e140.verticalBarStyle
                    ],
                    "aria-hidden": "true",
                    onMousedown: q
                }),
                _vue.h("div", {
                    class: r.horizontal.barClass.value,
                    style: [
                        e140.barStyle,
                        e140.horizontalBarStyle
                    ],
                    "aria-hidden": "true",
                    onMousedown: T
                }),
                _vue.withDirectives(_vue.h("div", {
                    ref: r.vertical.ref,
                    class: r.vertical.thumbClass.value,
                    style: r.vertical.style.value,
                    "aria-hidden": "true"
                }), f),
                _vue.withDirectives(_vue.h("div", {
                    ref: r.horizontal.ref,
                    class: r.horizontal.thumbClass.value,
                    style: r.horizontal.style.value,
                    "aria-hidden": "true"
                }), g)
            ]);
        };
    }
});
const aggBucketSize = 1000, scrollToEdges = [
    "start",
    "center",
    "end",
    "start-force",
    "center-force",
    "end-force"
], slice = Array.prototype.slice;
let id$1 = 1;
const setOverflowAnchor = void 0 === window.getComputedStyle(document.body).overflowAnchor ? noop : function(e, t) {
    const o = e + "_ss";
    let n = document.getElementById(o);
    null === n && (n = document.createElement("style"), n.type = "text/css", n.id = o, document.head.appendChild(n)), n.qChildIndex !== t && (n.qChildIndex = t, n.innerHTML = `#${e} > *:nth-child(${t}) { overflow-anchor: auto }`);
};
function sumFn(e, t) {
    return e + t;
}
function getScrollDetails(e, t, o, n, a, l, i, r) {
    const s = e === window ? document.scrollingElement || document.documentElement : e, u = !0 === a ? "offsetWidth" : "offsetHeight", c = {
        scrollStart: 0,
        scrollViewSize: -i - r,
        scrollMaxSize: 0,
        offsetStart: -i,
        offsetEnd: -r
    };
    if (!0 === a ? (e === window ? (c.scrollStart = window.pageXOffset || window.scrollX || document.body.scrollLeft || 0, c.scrollViewSize += window.innerWidth) : (c.scrollStart = s.scrollLeft, c.scrollViewSize += s.clientWidth), c.scrollMaxSize = s.scrollWidth, !0 === l && (c.scrollStart = (!0 === rtlHasScrollBug ? c.scrollMaxSize - c.scrollViewSize : 0) - c.scrollStart)) : (e === window ? (c.scrollStart = window.pageYOffset || window.scrollY || document.body.scrollTop || 0, c.scrollViewSize += window.innerHeight) : (c.scrollStart = s.scrollTop, c.scrollViewSize += s.clientHeight), c.scrollMaxSize = s.scrollHeight), null !== o) for(let d = o.previousElementSibling; null !== d; d = d.previousElementSibling)!1 === d.classList.contains("q-virtual-scroll--skip") && (c.offsetStart += d[u]);
    if (null !== n) for(let d7 = n.nextElementSibling; null !== d7; d7 = d7.nextElementSibling)!1 === d7.classList.contains("q-virtual-scroll--skip") && (c.offsetEnd += d7[u]);
    if (t !== e) {
        const o = s.getBoundingClientRect(), n = t.getBoundingClientRect();
        !0 === a ? (c.offsetStart += n.left - o.left, c.offsetEnd -= n.width) : (c.offsetStart += n.top - o.top, c.offsetEnd -= n.height), e !== window && (c.offsetStart += c.scrollStart), c.offsetEnd += c.scrollMaxSize - c.offsetStart;
    }
    return c;
}
function setScroll(e, t, o, n) {
    e === window ? !0 === o ? (!0 === n && (t = (!0 === rtlHasScrollBug ? document.body.scrollWidth - window.innerWidth : 0) - t), window.scrollTo(t, window.pageYOffset || window.scrollY || document.body.scrollTop || 0)) : window.scrollTo(window.pageXOffset || window.scrollX || document.body.scrollLeft || 0, t) : !0 === o ? (!0 === n && (t = (!0 === rtlHasScrollBug ? e.scrollWidth - e.offsetWidth : 0) - t), e.scrollLeft = t) : e.scrollTop = t;
}
function sumSize(e, t, o, n) {
    if (o >= n) return 0;
    const a = t.length, l = Math.floor(o / aggBucketSize), i = Math.floor((n - 1) / aggBucketSize) + 1;
    let r = e.slice(l, i).reduce(sumFn, 0);
    return o % aggBucketSize !== 0 && (r -= t.slice(l * aggBucketSize, o).reduce(sumFn, 0)), n % aggBucketSize !== 0 && n !== a && (r -= t.slice(n, i * aggBucketSize).reduce(sumFn, 0)), r;
}
const commonVirtScrollProps = {
    virtualScrollSliceSize: {
        type: [
            Number,
            String
        ],
        default: null
    },
    virtualScrollSliceRatioBefore: {
        type: [
            Number,
            String
        ],
        default: 1
    },
    virtualScrollSliceRatioAfter: {
        type: [
            Number,
            String
        ],
        default: 1
    },
    virtualScrollItemSize: {
        type: [
            Number,
            String
        ],
        default: 24
    },
    virtualScrollStickySizeStart: {
        type: [
            Number,
            String
        ],
        default: 0
    },
    virtualScrollStickySizeEnd: {
        type: [
            Number,
            String
        ],
        default: 0
    },
    tableColspan: [
        Number,
        String
    ]
}, commonVirtPropsList = Object.keys(commonVirtScrollProps), useVirtualScrollProps = {
    virtualScrollHorizontal: Boolean,
    onVirtualScroll: Function,
    ...commonVirtScrollProps
};
function useVirtualScroll({ virtualScrollLength: e141 , getVirtualScrollTarget: t112 , getVirtualScrollEl: o73 , virtualScrollItemSizeComputed: n58  }) {
    const a30 = _vue.getCurrentInstance(), { props: l23 , emit: i17 , proxy: r11  } = a30, { $q: s15  } = r11;
    let u, c10, d8, p, v5 = [];
    const m3 = "qvs_" + id$1++, f = _vue.ref(0), g = _vue.ref(0), b2 = _vue.ref({
    }), y2 = _vue.ref(null), S1 = _vue.ref(null), w = _vue.ref(null), x = _vue.ref({
        from: 0,
        to: 0
    }), C1 = _vue.computed(()=>void 0 !== l23.tableColspan ? l23.tableColspan : 100
    );
    void 0 === n58 && (n58 = _vue.computed(()=>l23.virtualScrollItemSize
    ));
    const k1 = _vue.computed(()=>n58.value + ";" + l23.virtualScrollHorizontal
    ), _ = _vue.computed(()=>k1.value + ";" + l23.virtualScrollSliceRatioBefore + ";" + l23.virtualScrollSliceRatioAfter
    );
    function q() {
        Q(c10, !0);
    }
    function T(e) {
        Q(void 0 === e ? c10 : e);
    }
    function P(n, a) {
        const i = t112();
        if (void 0 === i || null === i || 8 === i.nodeType) return;
        const r = getScrollDetails(i, o73(), y2.value, S1.value, l23.virtualScrollHorizontal, s15.lang.rtl, l23.virtualScrollStickySizeStart, l23.virtualScrollStickySizeEnd);
        d8 !== r.scrollViewSize && E(r.scrollViewSize), M(i, r, Math.min(e141.value - 1, Math.max(0, parseInt(n, 10) || 0)), 0, scrollToEdges.indexOf(a) > -1 ? a : c10 > -1 && n > c10 ? "end" : "start");
    }
    function $() {
        const n = t112();
        if (void 0 === n || null === n || 8 === n.nodeType) return;
        const a = getScrollDetails(n, o73(), y2.value, S1.value, l23.virtualScrollHorizontal, s15.lang.rtl, l23.virtualScrollStickySizeStart, l23.virtualScrollStickySizeEnd), i = e141.value - 1, r = a.scrollMaxSize - a.offsetStart - a.offsetEnd - g.value;
        if (u === a.scrollStart) return;
        if (a.scrollMaxSize <= 0) return void M(n, a, 0, 0);
        d8 !== a.scrollViewSize && E(a.scrollViewSize), B(x.value.from);
        const c = Math.floor(a.scrollMaxSize - Math.max(a.scrollViewSize, a.offsetEnd) - Math.min(p[i], a.scrollViewSize / 2));
        if (c > 0 && Math.ceil(a.scrollStart) >= c) return void M(n, a, i, a.scrollMaxSize - a.offsetEnd - v5.reduce(sumFn, 0));
        let m = 0, h = a.scrollStart - a.offsetStart, b = h;
        if (h <= r && h + a.scrollViewSize >= f.value) h -= f.value, m = x.value.from, b = h;
        else for(let e = 0; h >= v5[e] && m < i; e++)h -= v5[e], m += aggBucketSize;
        while(h > 0 && m < i)h -= p[m], h > -a.scrollViewSize ? (m++, b = h) : b = p[m] + h;
        M(n, a, m, b);
    }
    function M(t113, o, n, a31, i18) {
        const r = "string" === typeof i18 && i18.indexOf("-force") > -1, c = !0 === r ? i18.replace("-force", "") : i18, d9 = void 0 !== c ? c : "start";
        let h = Math.max(0, n - b2.value[d9]), y = h + b2.value.total;
        y > e141.value && (y = e141.value, h = Math.max(0, y - b2.value.total)), u = o.scrollStart;
        const S = h !== x.value.from || y !== x.value.to;
        if (!1 === S && void 0 === c) return void L(n);
        const { activeElement: C  } = document;
        if (!0 === S && null !== w.value && w.value !== C && !0 === w.value.contains(C)) {
            const e = ()=>{
                w.value.focus();
            };
            C.addEventListener("blur", e, !0), requestAnimationFrame(()=>{
                C.removeEventListener("blur", e, !0);
            });
        }
        setOverflowAnchor(m3, n - h + 1);
        const k = void 0 !== c ? p.slice(h, n).reduce(sumFn, 0) : 0;
        if (!0 === S) {
            const t = y >= x.value.from && h <= x.value.to ? x.value.to : y;
            x.value = {
                from: h,
                to: t
            }, f.value = sumSize(v5, p, 0, h), g.value = sumSize(v5, p, y, e141.value), requestAnimationFrame(()=>{
                x.value.to !== y && u === o.scrollStart && (x.value = {
                    from: x.value.from,
                    to: y
                }, g.value = sumSize(v5, p, y, e141.value));
            });
        }
        requestAnimationFrame(()=>{
            if (u !== o.scrollStart) return;
            !0 === S && B(h);
            const e = p.slice(h, n).reduce(sumFn, 0), i = e + o.offsetStart + f.value, d = i + p[n];
            let v = i + a31;
            if (void 0 !== c) {
                const t = e - k, a = o.scrollStart + t;
                v = !0 !== r && a < i && d < a + o.scrollViewSize ? a : "end" === c ? d - o.scrollViewSize : i - ("start" === c ? 0 : Math.round((o.scrollViewSize - p[n]) / 2));
            }
            u = v, setScroll(t113, v, l23.virtualScrollHorizontal, s15.lang.rtl), L(n);
        });
    }
    function B(e143) {
        const t = w.value;
        if (t) {
            const o = slice.call(t.children).filter((e)=>!1 === e.classList.contains("q-virtual-scroll--skip")
            ), n = o.length, a = !0 === l23.virtualScrollHorizontal ? (e)=>e.getBoundingClientRect().width
             : (e)=>e.offsetHeight
            ;
            let i, r, s = e143;
            for(let e142 = 0; e142 < n;){
                i = a(o[e142]), e142++;
                while(e142 < n && !0 === o[e142].classList.contains("q-virtual-scroll--with-prev"))i += a(o[e142]), e142++;
                r = i - p[s], 0 !== r && (p[s] += r, v5[Math.floor(s / aggBucketSize)] += r), s++;
            }
        }
    }
    function Q(t, o) {
        const a = 1 * n58.value;
        !0 !== o && !1 !== Array.isArray(p) || (p = []);
        const l = p.length;
        p.length = e141.value;
        for(let n = e141.value - 1; n >= l; n--)p[n] = a;
        const i = Math.floor((e141.value - 1) / aggBucketSize);
        v5 = [];
        for(let n59 = 0; n59 <= i; n59++){
            let t = 0;
            const o = Math.min((n59 + 1) * aggBucketSize, e141.value);
            for(let e = n59 * aggBucketSize; e < o; e++)t += p[e];
            v5.push(t);
        }
        c10 = -1, u = void 0, t >= 0 ? (B(x.value.from), _vue.nextTick(()=>{
            P(t);
        })) : (f.value = sumSize(v5, p, 0, x.value.from), g.value = sumSize(v5, p, x.value.to, e141.value), z());
    }
    function E(e) {
        if (void 0 === e && "undefined" !== typeof window) {
            const n = t112();
            void 0 !== n && null !== n && 8 !== n.nodeType && (e = getScrollDetails(n, o73(), y2.value, S1.value, l23.virtualScrollHorizontal, s15.lang.rtl, l23.virtualScrollStickySizeStart, l23.virtualScrollStickySizeEnd).scrollViewSize);
        }
        d8 = e;
        const a = 1 + l23.virtualScrollSliceRatioBefore + l23.virtualScrollSliceRatioAfter, i = void 0 === e || e <= 0 ? 1 : Math.ceil(e / n58.value), r = Math.max(10, i, Math.ceil(l23.virtualScrollSliceSize / a));
        b2.value = {
            total: Math.ceil(r * a),
            start: Math.ceil(r * l23.virtualScrollSliceRatioBefore),
            center: Math.ceil(r * (0.5 + l23.virtualScrollSliceRatioBefore)),
            end: Math.ceil(r * (1 + l23.virtualScrollSliceRatioBefore)),
            view: i
        };
    }
    function O(e, t) {
        const o = !0 === l23.virtualScrollHorizontal ? "width" : "height", a = {
            ["--q-virtual-scroll-item-" + o]: n58.value + "px"
        };
        return [
            "tbody" === e ? _vue.h(e, {
                class: "q-virtual-scroll__padding",
                key: "before",
                ref: y2
            }, [
                _vue.h("tr", [
                    _vue.h("td", {
                        style: {
                            [o]: `${f.value}px`,
                            ...a
                        },
                        colspan: C1.value
                    })
                ])
            ]) : _vue.h(e, {
                class: "q-virtual-scroll__padding",
                key: "before",
                ref: y2,
                style: {
                    [o]: `${f.value}px`,
                    ...a
                }
            }),
            _vue.h(e, {
                class: "q-virtual-scroll__content",
                key: "content",
                ref: w,
                id: m3,
                tabindex: -1
            }, t.flat()),
            "tbody" === e ? _vue.h(e, {
                class: "q-virtual-scroll__padding",
                key: "after",
                ref: S1
            }, [
                _vue.h("tr", [
                    _vue.h("td", {
                        style: {
                            [o]: `${g.value}px`,
                            ...a
                        },
                        colspan: C1.value
                    })
                ])
            ]) : _vue.h(e, {
                class: "q-virtual-scroll__padding",
                key: "after",
                ref: S1,
                style: {
                    [o]: `${g.value}px`,
                    ...a
                }
            })
        ];
    }
    function L(e) {
        c10 !== e && (void 0 !== l23.onVirtualScroll && i17("virtual-scroll", {
            index: e,
            from: x.value.from,
            to: x.value.to - 1,
            direction: e < c10 ? "decrease" : "increase",
            ref: r11
        }), c10 = e);
    }
    _vue.watch(_, ()=>{
        E();
    }), _vue.watch(k1, q), E();
    const z = debounce($, !0 === s15.platform.is.ios ? 120 : 35);
    return _vue.onBeforeMount(()=>{
        E();
    }), _vue.onActivated(()=>{
        const e = t112();
        void 0 !== u && void 0 !== e && null !== e && 8 !== e.nodeType ? setScroll(e, u, l23.virtualScrollHorizontal, s15.lang.rtl) : P(c10);
    }), setOverflowAnchor !== noop && _vue.onBeforeUnmount(()=>{
        const e = document.getElementById(m3 + "_ss");
        null !== e && e.remove();
    }), Object.assign(r11, {
        scrollTo: P,
        reset: q,
        refresh: T
    }), {
        virtualScrollSliceRange: x,
        virtualScrollSliceSizeComputed: b2,
        setVirtualScrollSize: E,
        onVirtualScrollEvt: z,
        localResetVirtualScroll: Q,
        padVirtualScroll: O,
        scrollTo: P,
        reset: q,
        refresh: T
    };
}
const validateNewValueMode = (e)=>[
        "add",
        "add-unique",
        "toggle"
    ].includes(e)
, reEscapeList = ".*+?^${}()|[]\\", fieldPropsList = Object.keys(useFieldProps);
var QSelect = createComponent({
    name: "QSelect",
    inheritAttrs: !1,
    props: {
        ...useVirtualScrollProps,
        ...useFormProps,
        ...useFieldProps,
        modelValue: {
            required: !0
        },
        multiple: Boolean,
        displayValue: [
            String,
            Number
        ],
        displayValueHtml: Boolean,
        dropdownIcon: String,
        options: {
            type: Array,
            default: ()=>[]
        },
        optionValue: [
            Function,
            String
        ],
        optionLabel: [
            Function,
            String
        ],
        optionDisable: [
            Function,
            String
        ],
        hideSelected: Boolean,
        hideDropdownIcon: Boolean,
        fillInput: Boolean,
        maxValues: [
            Number,
            String
        ],
        optionsDense: Boolean,
        optionsDark: {
            type: Boolean,
            default: null
        },
        optionsSelectedClass: String,
        optionsHtml: Boolean,
        optionsCover: Boolean,
        menuShrink: Boolean,
        menuAnchor: String,
        menuSelf: String,
        menuOffset: Array,
        popupContentClass: String,
        popupContentStyle: [
            String,
            Array,
            Object
        ],
        useInput: Boolean,
        useChips: Boolean,
        newValueMode: {
            type: String,
            validator: validateNewValueMode
        },
        mapOptions: Boolean,
        emitValue: Boolean,
        inputDebounce: {
            type: [
                Number,
                String
            ],
            default: 500
        },
        inputClass: [
            Array,
            String,
            Object
        ],
        inputStyle: [
            Array,
            String,
            Object
        ],
        tabindex: {
            type: [
                String,
                Number
            ],
            default: 0
        },
        autocomplete: String,
        transitionShow: String,
        transitionHide: String,
        transitionDuration: [
            String,
            Number
        ],
        behavior: {
            type: String,
            validator: (e)=>[
                    "default",
                    "menu",
                    "dialog"
                ].includes(e)
            ,
            default: "default"
        },
        virtualScrollItemSize: {
            type: [
                Number,
                String
            ],
            default: void 0
        },
        onNewValue: Function,
        onFilter: Function
    },
    emits: [
        ...useFieldEmits,
        "add",
        "remove",
        "input-value",
        "keyup",
        "keypress",
        "keydown",
        "filter-abort"
    ],
    setup (e144, { slots: t114 , emit: o74  }) {
        const { proxy: n60  } = _vue.getCurrentInstance(), { $q: a32  } = n60, l24 = _vue.ref(!1), i19 = _vue.ref(!1), r = _vue.ref(-1), s16 = _vue.ref(""), u = _vue.ref(!1), c = _vue.ref(!1);
        let d, p, v, m, f, g, b, y, S;
        const w = _vue.ref(null), x = _vue.ref(null), C = _vue.ref(null), k = _vue.ref(null), _ = _vue.ref(null), q = useFormInputNameAttr(e144), T = useKeyComposition(Te), P = _vue.computed(()=>Array.isArray(e144.options) ? e144.options.length : 0
        ), $ = _vue.computed(()=>void 0 === e144.virtualScrollItemSize ? !0 === e144.dense ? 24 : 48 : e144.virtualScrollItemSize
        ), { virtualScrollSliceRange: M , virtualScrollSliceSizeComputed: B , localResetVirtualScroll: Q , padVirtualScroll: E , onVirtualScrollEvt: O , scrollTo: L , setVirtualScrollSize: z  } = useVirtualScroll({
            virtualScrollLength: P,
            getVirtualScrollTarget: Ce,
            getVirtualScrollEl: xe,
            virtualScrollItemSizeComputed: $
        }), F = useFieldState(), R = _vue.computed(()=>{
            const t = !0 === e144.mapOptions && !0 !== e144.multiple, o = void 0 === e144.modelValue || null === e144.modelValue && !0 !== t ? [] : !0 === e144.multiple && Array.isArray(e144.modelValue) ? e144.modelValue : [
                e144.modelValue
            ];
            if (!0 === e144.mapOptions && !0 === Array.isArray(e144.options)) {
                const n = !0 === e144.mapOptions && void 0 !== p ? p : [], a = o.map((e)=>me(e, n)
                );
                return null === e144.modelValue && !0 === t ? a.filter((e)=>null !== e
                ) : a;
            }
            return o;
        }), D = _vue.computed(()=>{
            const t = {
            };
            return fieldPropsList.forEach((o)=>{
                const n = e144[o];
                void 0 !== n && (t[o] = n);
            }), t;
        }), A = _vue.computed(()=>null === e144.optionsDark ? F.isDark.value : e144.optionsDark
        ), V = _vue.computed(()=>fieldValueIsFilled(R.value)
        ), I = _vue.computed(()=>{
            let t = "q-field__input q-placeholder col";
            return !0 === e144.hideSelected || 0 === R.value.length ? [
                t,
                e144.inputClass
            ] : (t += " q-field__input--padding", void 0 === e144.inputClass ? t : [
                t,
                e144.inputClass
            ]);
        }), H = _vue.computed(()=>(!0 === e144.virtualScrollHorizontal ? "q-virtual-scroll--horizontal" : "") + (e144.popupContentClass ? " " + e144.popupContentClass : "")
        ), N = _vue.computed(()=>0 === P.value
        ), j = _vue.computed(()=>R.value.map((e)=>ne.value(e)
            ).join(", ")
        ), U = _vue.computed(()=>!0 === e144.optionsHtml ? ()=>!0
             : (e)=>void 0 !== e && null !== e && !0 === e.html
        ), K = _vue.computed(()=>!0 === e144.displayValueHtml || void 0 === e144.displayValue && (!0 === e144.optionsHtml || R.value.some(U.value))
        ), W = _vue.computed(()=>!0 === F.focused.value ? e144.tabindex : -1
        ), Y = _vue.computed(()=>({
                tabindex: e144.tabindex,
                role: "combobox",
                "aria-label": e144.label,
                "aria-autocomplete": !0 === e144.useInput ? "list" : "none",
                "aria-expanded": !0 === l24.value ? "true" : "false",
                "aria-owns": `${F.targetUid.value}_lb`,
                "aria-controls": `${F.targetUid.value}_lb`
            })
        ), G = _vue.computed(()=>{
            const t = {
                id: `${F.targetUid.value}_lb`,
                role: "listbox",
                "aria-multiselectable": !0 === e144.multiple ? "true" : "false"
            };
            return r.value >= 0 && (t["aria-activedescendant"] = `${F.targetUid.value}_${r.value}`), t;
        }), X = _vue.computed(()=>{
            return R.value.map((e, t)=>({
                    index: t,
                    opt: e,
                    html: U.value(e),
                    selected: !0,
                    removeAtIndex: ue,
                    toggleOption: de,
                    tabindex: W.value
                })
            );
        }), Z = _vue.computed(()=>{
            if (0 === P.value) return [];
            const { from: t , to: o75  } = M.value;
            return e144.options.slice(t, o75).map((o, n)=>{
                const l = !0 === ae.value(o), i = t + n, s = {
                    clickable: !0,
                    active: !1,
                    activeClass: te.value,
                    manualFocus: !0,
                    focused: !1,
                    disable: l,
                    tabindex: -1,
                    dense: e144.optionsDense,
                    dark: A.value,
                    role: "option",
                    id: `${F.targetUid.value}_${i}`,
                    onClick: ()=>{
                        de(o);
                    }
                };
                return !0 !== l && (!0 === he(o) && (s.active = !0), r.value === i && (s.focused = !0), s["aria-selected"] = !0 === s.active ? "true" : "false", !0 === a32.platform.is.desktop && (s.onMousemove = ()=>{
                    pe(i);
                })), {
                    index: i,
                    opt: o,
                    html: U.value(o),
                    label: ne.value(o),
                    selected: s.active,
                    focused: s.focused,
                    toggleOption: de,
                    setOptionIndex: pe,
                    itemProps: s
                };
            });
        }), J = _vue.computed(()=>void 0 !== e144.dropdownIcon ? e144.dropdownIcon : a32.iconSet.arrow.dropdown
        ), ee = _vue.computed(()=>!1 === e144.optionsCover && !0 !== e144.outlined && !0 !== e144.standout && !0 !== e144.borderless && !0 !== e144.rounded
        ), te = _vue.computed(()=>void 0 !== e144.optionsSelectedClass ? e144.optionsSelectedClass : void 0 !== e144.color ? `text-${e144.color}` : ""
        ), oe = _vue.computed(()=>fe(e144.optionValue, "value")
        ), ne = _vue.computed(()=>fe(e144.optionLabel, "label")
        ), ae = _vue.computed(()=>fe(e144.optionDisable, "disable")
        ), le = _vue.computed(()=>R.value.map((e)=>oe.value(e)
            )
        ), ie = _vue.computed(()=>{
            const e145 = {
                onInput: Te,
                onChange: T,
                onKeydown: we,
                onKeyup: ye,
                onKeypress: Se,
                onFocus: ge,
                onClick (e) {
                    !0 === v && stop(e);
                }
            };
            return e145.onCompositionstart = e145.onCompositionupdate = e145.onCompositionend = T, e145;
        });
        function re(t) {
            return !0 === e144.emitValue ? oe.value(t) : t;
        }
        function se(t) {
            if (t > -1 && t < R.value.length) {
                if (!0 === e144.multiple) {
                    const n = e144.modelValue.slice();
                    o74("remove", {
                        index: t,
                        value: n.splice(t, 1)[0]
                    }), o74("update:modelValue", n);
                } else o74("update:modelValue", null);
            }
        }
        function ue(e) {
            se(e), F.focus();
        }
        function ce(t, n) {
            const a = re(t);
            if (!0 !== e144.multiple) return !0 === e144.fillInput && $e(ne.value(t), !0, !0), void o74("update:modelValue", a);
            if (0 === R.value.length) return o74("add", {
                index: 0,
                value: a
            }), void o74("update:modelValue", !0 === e144.multiple ? [
                a
            ] : a);
            if (!0 === n && !0 === he(t)) return;
            if (void 0 !== e144.maxValues && e144.modelValue.length >= e144.maxValues) return;
            const l = e144.modelValue.slice();
            o74("add", {
                index: l.length,
                value: a
            }), l.push(a), o74("update:modelValue", l);
        }
        function de(t, n) {
            if (!0 !== F.editable.value || void 0 === t || !0 === ae.value(t)) return;
            const a = oe.value(t);
            if (!0 !== e144.multiple) return !0 !== n && ($e(!0 === e144.fillInput ? ne.value(t) : "", !0, !0), Ie()), null !== x.value && x.value.focus(), void (!0 !== isDeepEqual(oe.value(R.value[0]), a) && o74("update:modelValue", !0 === e144.emitValue ? a : t));
            if ((!0 !== v || !0 === u.value) && F.focus(), ge(), 0 === R.value.length) {
                const n = !0 === e144.emitValue ? a : t;
                return o74("add", {
                    index: 0,
                    value: n
                }), void o74("update:modelValue", !0 === e144.multiple ? [
                    n
                ] : n);
            }
            const l = e144.modelValue.slice(), i = le.value.findIndex((e)=>isDeepEqual(e, a)
            );
            if (i > -1) o74("remove", {
                index: i,
                value: l.splice(i, 1)[0]
            });
            else {
                if (void 0 !== e144.maxValues && l.length >= e144.maxValues) return;
                const n = !0 === e144.emitValue ? a : t;
                o74("add", {
                    index: l.length,
                    value: n
                }), l.push(n);
            }
            o74("update:modelValue", l);
        }
        function pe(e) {
            if (!0 !== a32.platform.is.desktop) return;
            const t = e > -1 && e < P.value ? e : -1;
            r.value !== t && (r.value = t);
        }
        function ve(t = 1, o) {
            if (!0 === l24.value) {
                let n = r.value;
                do n = normalizeToInterval(n + t, -1, P.value - 1);
                while (-1 !== n && n !== r.value && !0 === ae.value(e144.options[n]))
                r.value !== n && (pe(n), L(n), !0 !== o && !0 === e144.useInput && !0 === e144.fillInput && Pe(n >= 0 ? ne.value(e144.options[n]) : g));
            }
        }
        function me(t, o) {
            const n = (e)=>isDeepEqual(oe.value(e), t)
            ;
            return e144.options.find(n) || o.find(n) || t;
        }
        function fe(e146, t) {
            const o = void 0 !== e146 ? e146 : t;
            return "function" === typeof o ? o : (e)=>Object(e) === e && o in e ? e[o] : e
            ;
        }
        function he(e147) {
            const t = oe.value(e147);
            return void 0 !== le.value.find((e)=>isDeepEqual(e, t)
            );
        }
        function ge() {
            !0 === e144.useInput && null !== x.value && x.value.select();
        }
        function be(e) {
            !0 === isKeyCode(e, 27) && !0 === l24.value && (stop(e), Ie(), He()), o74("keyup", e);
        }
        function ye(t) {
            const { value: o  } = t.target;
            if (void 0 === t.keyCode) {
                if (t.target.value = "", clearTimeout(d), He(), "string" === typeof o && o.length > 0) {
                    const t = o.toLocaleLowerCase();
                    let n = (e)=>oe.value(e).toLocaleLowerCase() === t
                    , a = e144.options.find(n);
                    void 0 !== a ? -1 === R.value.indexOf(a) ? de(a) : Ie() : (n = (e)=>ne.value(e).toLocaleLowerCase() === t
                    , a = e144.options.find(n), void 0 !== a ? -1 === R.value.indexOf(a) ? de(a) : Ie() : Me(o, !0));
                } else F.clearValue(t);
            } else be(t);
        }
        function Se(e) {
            o74("keypress", e);
        }
        function we(t116) {
            if (o74("keydown", t116), !0 === shouldIgnoreKey(t116)) return;
            const n61 = s16.value.length > 0 && (void 0 !== e144.newValueMode || void 0 !== e144.onNewValue), a = !0 !== t116.shiftKey && !0 !== e144.multiple && (r.value > -1 || !0 === n61);
            if (27 === t116.keyCode) return void prevent(t116);
            if (9 === t116.keyCode && !1 === a) return void Ae();
            if (void 0 === t116.target || t116.target.id !== F.targetUid.value) return;
            if (40 === t116.keyCode && !0 !== F.innerLoading.value && !1 === l24.value) return stopAndPrevent(t116), void Ve();
            if (8 === t116.keyCode && !0 !== e144.hideSelected && 0 === s16.value.length) return void (!0 === e144.multiple && !0 === Array.isArray(e144.modelValue) ? se(e144.modelValue.length - 1) : !0 !== e144.multiple && null !== e144.modelValue && o74("update:modelValue", null));
            35 !== t116.keyCode && 36 !== t116.keyCode || "string" === typeof s16.value && 0 !== s16.value.length || (stopAndPrevent(t116), r.value = -1, ve(36 === t116.keyCode ? 1 : -1, e144.multiple)), 33 !== t116.keyCode && 34 !== t116.keyCode || void 0 === B.value || (stopAndPrevent(t116), r.value = Math.max(-1, Math.min(P.value, r.value + (33 === t116.keyCode ? -1 : 1) * B.value.view)), ve(33 === t116.keyCode ? 1 : -1, e144.multiple)), 38 !== t116.keyCode && 40 !== t116.keyCode || (stopAndPrevent(t116), ve(38 === t116.keyCode ? -1 : 1, e144.multiple));
            const i = P.value;
            if ((void 0 === y || S < Date.now()) && (y = ""), i > 0 && !0 !== e144.useInput && void 0 !== t116.key && 1 === t116.key.length && t116.altKey === t116.ctrlKey && (32 !== t116.keyCode || y.length > 0)) {
                !0 !== l24.value && Ve(t116);
                const o = t116.key.toLocaleLowerCase(), n = 1 === y.length && y[0] === o;
                S = Date.now() + 1500, !1 === n && (stopAndPrevent(t116), y += o);
                const a = new RegExp("^" + y.split("").map((e)=>reEscapeList.indexOf(e) > -1 ? "\\" + e : e
                ).join(".*"), "i");
                let s = r.value;
                if (!0 === n || s < 0 || !0 !== a.test(ne.value(e144.options[s]))) do s = normalizeToInterval(s + 1, -1, i - 1);
                while (s !== r.value && (!0 === ae.value(e144.options[s]) || !0 !== a.test(ne.value(e144.options[s]))))
                r.value !== s && _vue.nextTick(()=>{
                    pe(s), L(s), s >= 0 && !0 === e144.useInput && !0 === e144.fillInput && Pe(ne.value(e144.options[s]));
                });
            } else if (13 === t116.keyCode || 32 === t116.keyCode && !0 !== e144.useInput && "" === y || 9 === t116.keyCode && !1 !== a) {
                if (9 !== t116.keyCode && stopAndPrevent(t116), r.value > -1 && r.value < i) de(e144.options[r.value]);
                else {
                    if (!0 === n61) {
                        const t115 = (t, o)=>{
                            if (o) {
                                if (!0 !== validateNewValueMode(o)) return;
                            } else o = e144.newValueMode;
                            if (void 0 === t || null === t) return;
                            $e("", !0 !== e144.multiple, !0);
                            const n = "toggle" === o ? de : ce;
                            n(t, "add-unique" === o), !0 !== e144.multiple && (null !== x.value && x.value.focus(), Ie());
                        };
                        if (void 0 !== e144.onNewValue ? o74("new-value", s16.value, t115) : t115(s16.value), !0 !== e144.multiple) return;
                    }
                    !0 === l24.value ? Ae() : !0 !== F.innerLoading.value && Ve();
                }
            }
        }
        function xe() {
            return !0 === v ? _.value : null !== C.value && null !== C.value.__qPortalInnerRef.value ? C.value.__qPortalInnerRef.value : void 0;
        }
        function Ce() {
            return xe();
        }
        function ke() {
            return !0 === e144.hideSelected ? [] : void 0 !== t114["selected-item"] ? X.value.map((e)=>t114["selected-item"](e)
            ).slice() : void 0 !== t114.selected ? [].concat(t114.selected()) : !0 === e144.useChips ? X.value.map((t, o)=>_vue.h(QChip, {
                    key: "option-" + o,
                    removable: !0 === F.editable.value && !0 !== ae.value(t.opt),
                    dense: !0,
                    textColor: e144.color,
                    tabindex: W.value,
                    onRemove () {
                        t.removeAtIndex(o);
                    }
                }, ()=>_vue.h("span", {
                        class: "ellipsis",
                        [!0 === t.html ? "innerHTML" : "textContent"]: ne.value(t.opt)
                    })
                )
            ) : [
                _vue.h("span", {
                    [!0 === K.value ? "innerHTML" : "textContent"]: void 0 !== e144.displayValue ? e144.displayValue : j.value
                })
            ];
        }
        function _e() {
            if (!0 === N.value) return void 0 !== t114["no-option"] ? t114["no-option"]({
                inputValue: s16.value
            }) : void 0;
            const e148 = void 0 !== t114.option ? t114.option : (e)=>{
                return _vue.h(QItem, {
                    key: e.index,
                    ...e.itemProps
                }, ()=>{
                    return _vue.h(QItemSection, ()=>_vue.h(QItemLabel, ()=>_vue.h("span", {
                                [!0 === e.html ? "innerHTML" : "textContent"]: e.label
                            })
                        )
                    );
                });
            };
            let o = E("div", Z.value.map(e148));
            return void 0 !== t114["before-options"] && (o = t114["before-options"]().concat(o)), hMergeSlot(t114["after-options"], o);
        }
        function qe(t, o) {
            const n = {
                ref: !0 === o ? x : void 0,
                key: "i_t",
                class: I.value,
                style: e144.inputStyle,
                value: void 0 !== s16.value ? s16.value : "",
                type: "search",
                ...Y.value,
                ...F.splitAttrs.attributes.value,
                id: F.targetUid.value,
                maxlength: e144.maxlength,
                autocomplete: e144.autocomplete,
                "data-autofocus": !0 !== t && !0 === e144.autofocus || void 0,
                disabled: !0 === e144.disable,
                readonly: !0 === e144.readonly,
                ...ie.value
            };
            return !0 !== t && !0 === v && (!0 === Array.isArray(n.class) ? n.class[0] += " no-pointer-events" : n.class += " no-pointer-events"), _vue.h("input", n);
        }
        function Te(t) {
            clearTimeout(d), t && t.target && !0 === t.target.composing || (Pe(t.target.value || ""), m = !0, g = s16.value, !0 === F.focused.value || !0 === v && !0 !== u.value || F.focus(), void 0 !== e144.onFilter && (d = setTimeout(()=>{
                Me(s16.value);
            }, e144.inputDebounce)));
        }
        function Pe(e) {
            s16.value !== e && (s16.value = e, o74("input-value", e));
        }
        function $e(t, o, n) {
            m = !0 !== n, !0 === e144.useInput && (Pe(t), !0 !== o && !0 === n || (g = t), !0 !== o && Me(t));
        }
        function Me(t117, a) {
            if (void 0 === e144.onFilter || !0 !== a && !0 !== F.focused.value) return;
            !0 === F.innerLoading.value ? o74("filter-abort") : (F.innerLoading.value = !0, c.value = !0), "" !== t117 && !0 !== e144.multiple && R.value.length > 0 && !0 !== m && t117 === ne.value(R.value[0]) && (t117 = "");
            const i = setTimeout(()=>{
                !0 === l24.value && (l24.value = !1);
            }, 10);
            clearTimeout(f), f = i, o74("filter", t117, (e, t)=>{
                !0 !== a && !0 !== F.focused.value || f !== i || (clearTimeout(f), "function" === typeof e && e(), c.value = !1, _vue.nextTick(()=>{
                    F.innerLoading.value = !1, !0 === F.editable.value && (!0 === a ? !0 === l24.value && Ie() : !0 === l24.value ? Ne(!0) : l24.value = !0), "function" === typeof t && _vue.nextTick(()=>{
                        t(n60);
                    });
                }));
            }, ()=>{
                !0 === F.focused.value && f === i && (clearTimeout(f), F.innerLoading.value = !1, c.value = !1), !0 === l24.value && (l24.value = !1);
            });
        }
        function Be() {
            return _vue.h(QMenu, {
                ref: C,
                class: H.value,
                style: e144.popupContentStyle,
                modelValue: l24.value,
                fit: !0 !== e144.menuShrink,
                cover: !0 === e144.optionsCover && !0 !== N.value && !0 !== e144.useInput,
                anchor: e144.menuAnchor,
                self: e144.menuSelf,
                offset: e144.menuOffset,
                dark: A.value,
                noParentEvent: !0,
                noRefocus: !0,
                noFocus: !0,
                square: ee.value,
                transitionShow: e144.transitionShow,
                transitionHide: e144.transitionHide,
                transitionDuration: e144.transitionDuration,
                separateClosePopup: !0,
                ...G.value,
                onScrollPassive: O,
                onBeforeShow: Ue,
                onBeforeHide: Qe,
                onShow: Ee
            }, _e);
        }
        function Qe(e) {
            Ke(e), Ae();
        }
        function Ee() {
            z();
        }
        function Oe(e) {
            stop(e), null !== x.value && x.value.focus(), u.value = !0, window.scrollTo(window.pageXOffset || window.scrollX || document.body.scrollLeft || 0, 0);
        }
        function Le(e) {
            stop(e), _vue.nextTick(()=>{
                u.value = !1;
            });
        }
        function ze() {
            const o = [
                _vue.h(QField, {
                    class: `col-auto ${F.fieldClass.value}`,
                    ...D.value,
                    for: F.targetUid.value,
                    dark: A.value,
                    square: !0,
                    loading: c.value,
                    itemAligned: !1,
                    filled: !0,
                    stackLabel: s16.value.length > 0,
                    ...F.splitAttrs.listeners.value,
                    onFocus: Oe,
                    onBlur: Le
                }, {
                    ...t114,
                    rawControl: ()=>F.getControl(!0)
                    ,
                    before: void 0,
                    after: void 0
                })
            ];
            return !0 === l24.value && o.push(_vue.h("div", {
                ref: _,
                class: H.value + " scroll",
                style: e144.popupContentStyle,
                ...G.value,
                onClick: prevent,
                onScrollPassive: O
            }, _e())), _vue.h(QDialog, {
                ref: k,
                modelValue: i19.value,
                position: !0 === e144.useInput ? "top" : void 0,
                transitionShow: b,
                transitionHide: e144.transitionHide,
                transitionDuration: e144.transitionDuration,
                onBeforeShow: Ue,
                onBeforeHide: Fe,
                onHide: Re,
                onShow: De
            }, ()=>_vue.h("div", {
                    class: "q-select__dialog" + (!0 === A.value ? " q-select__dialog--dark q-dark" : "") + (!0 === u.value ? " q-select__dialog--focused" : "")
                }, o)
            );
        }
        function Fe(e) {
            Ke(e), null !== k.value && k.value.__updateRefocusTarget(F.rootRef.value.querySelector(".q-field__native > [tabindex]:last-child")), F.focused.value = !1;
        }
        function Re(e) {
            Ie(), !1 === F.focused.value && o74("blur", e), He();
        }
        function De() {
            const e = document.activeElement;
            null !== e && e.id === F.targetUid.value || null === x.value || x.value === e || x.value.focus(), z();
        }
        function Ae() {
            !0 !== i19.value && (r.value = -1, !0 === l24.value && (l24.value = !1), !1 === F.focused.value && (clearTimeout(f), f = void 0, !0 === F.innerLoading.value && (o74("filter-abort"), F.innerLoading.value = !1, c.value = !1)));
        }
        function Ve(o) {
            !0 === F.editable.value && (!0 === v ? (F.onControlFocusin(o), i19.value = !0, _vue.nextTick(()=>{
                F.focus();
            })) : F.focus(), void 0 !== e144.onFilter ? Me(s16.value) : !0 === N.value && void 0 === t114["no-option"] || (l24.value = !0));
        }
        function Ie() {
            i19.value = !1, Ae();
        }
        function He() {
            !0 === e144.useInput && $e(!0 !== e144.multiple && !0 === e144.fillInput && R.value.length > 0 && ne.value(R.value[0]) || "", !0, !0);
        }
        function Ne(t) {
            let o = -1;
            if (!0 === t) {
                if (R.value.length > 0) {
                    const t = oe.value(R.value[0]);
                    o = e144.options.findIndex((e)=>isDeepEqual(oe.value(e), t)
                    );
                }
                Q(o);
            }
            pe(o);
        }
        function je() {
            !1 === i19.value && null !== C.value && C.value.updatePosition();
        }
        function Ue(e) {
            void 0 !== e && stop(e), o74("popup-show", e), F.hasPopupOpen = !0, F.onControlFocusin(e);
        }
        function Ke(e) {
            void 0 !== e && stop(e), o74("popup-hide", e), F.hasPopupOpen = !1, F.onControlFocusout(e);
        }
        function We() {
            v = (!0 === a32.platform.is.mobile || "dialog" === e144.behavior) && "menu" !== e144.behavior && (!0 !== e144.useInput || void 0 !== t114["no-option"] || void 0 !== e144.onFilter || !1 === N.value), b = !0 === a32.platform.is.ios && !0 === v && !0 === e144.useInput ? "fade" : e144.transitionShow;
        }
        return _vue.watch(R, (t)=>{
            p = t, !0 === e144.useInput && !0 === e144.fillInput && !0 !== e144.multiple && !0 !== F.innerLoading.value && (!0 !== i19.value && !0 !== l24.value || !0 !== V.value) && (!0 !== m && He(), !0 !== i19.value && !0 !== l24.value || Me(""));
        }, {
            immediate: !0
        }), _vue.watch(()=>e144.fillInput
        , He), _vue.watch(l24, Ne), _vue.onBeforeUpdate(We), _vue.onUpdated(je), We(), _vue.onBeforeUnmount(()=>{
            clearTimeout(d);
        }), Object.assign(n60, {
            showPopup: Ve,
            hidePopup: Ie,
            removeAtIndex: se,
            add: ce,
            toggleOption: de,
            setOptionIndex: pe,
            moveOptionSelection: ve,
            filter: Me,
            updateMenuPosition: je,
            updateInputValue: $e,
            isOptionSelected: he,
            getEmittingOptionValue: re,
            isOptionDisabled: (...e)=>ae.value.apply(null, e)
            ,
            getOptionValue: (...e)=>oe.value.apply(null, e)
            ,
            getOptionLabel: (...e)=>ne.value.apply(null, e)
        }), Object.assign(F, {
            innerValue: R,
            fieldClass: _vue.computed(()=>`q-select q-field--auto-height q-select--with${!0 !== e144.useInput ? "out" : ""}-input` + ` q-select--with${!0 !== e144.useChips ? "out" : ""}-chips` + ` q-select--${!0 === e144.multiple ? "multiple" : "single"}`
            ),
            inputRef: w,
            targetRef: x,
            hasValue: V,
            showPopup: Ve,
            floatingLabel: _vue.computed(()=>(!0 === e144.hideSelected ? s16.value.length > 0 : !0 === V.value) || fieldValueIsFilled(e144.displayValue)
            ),
            getControlChild: ()=>{
                if (!1 !== F.editable.value && (!0 === i19.value || !0 !== N.value || void 0 !== t114["no-option"])) return !0 === v ? ze() : Be();
                !0 === F.hasPopupOpen && (F.hasPopupOpen = !1);
            },
            controlEvents: {
                onFocusin (e) {
                    F.onControlFocusin(e);
                },
                onFocusout (e) {
                    F.onControlFocusout(e, ()=>{
                        He(), Ae();
                    });
                },
                onClick (e) {
                    if (prevent(e), !0 !== v && !0 === l24.value) return Ae(), void (null !== x.value && x.value.focus());
                    Ve(e);
                }
            },
            getControl: (t)=>{
                const o = ke(), n = !0 === t || !0 !== i19.value || !0 !== v;
                if (!0 === e144.useInput ? o.push(qe(t, n)) : !0 === F.editable.value && !0 === n && (o.push(_vue.h("div", {
                    ref: x,
                    key: "d_t",
                    class: "no-outline",
                    id: F.targetUid.value,
                    ...Y.value,
                    onKeydown: we,
                    onKeyup: be,
                    onKeypress: Se
                })), "string" === typeof e144.autocomplete && e144.autocomplete.length > 0 && o.push(_vue.h("input", {
                    class: "q-select__autocomplete-input no-outline",
                    autocomplete: e144.autocomplete,
                    onKeyup: ye
                }))), void 0 !== q.value && !0 !== e144.disable && le.value.length > 0) {
                    const t = le.value.map((e)=>_vue.h("option", {
                            value: e,
                            selected: !0
                        })
                    );
                    o.push(_vue.h("select", {
                        class: "hidden",
                        name: q.value,
                        multiple: e144.multiple
                    }, t));
                }
                return _vue.h("div", {
                    class: "q-field__native row items-center",
                    ...F.splitAttrs.attributes.value
                }, o);
            },
            getInnerAppend: ()=>!0 !== e144.loading && !0 !== c.value && !0 !== e144.hideDropdownIcon ? [
                    _vue.h(QIcon, {
                        class: "q-select__dropdown-icon" + (!0 === l24.value ? " rotate-180" : ""),
                        name: J.value
                    })
                ] : null
        }), useField(F);
    }
});
const skeletonTypes = [
    "text",
    "rect",
    "circle",
    "QBtn",
    "QBadge",
    "QChip",
    "QToolbar",
    "QCheckbox",
    "QRadio",
    "QToggle",
    "QSlider",
    "QRange",
    "QInput",
    "QAvatar"
], skeletonAnimations = [
    "wave",
    "pulse",
    "pulse-x",
    "pulse-y",
    "fade",
    "blink",
    "none"
];
var QSkeleton = createComponent({
    name: "QSkeleton",
    props: {
        ...useDarkProps,
        tag: {
            type: String,
            default: "div"
        },
        type: {
            type: String,
            validator: (e)=>skeletonTypes.includes(e)
            ,
            default: "rect"
        },
        animation: {
            type: String,
            validator: (e)=>skeletonAnimations.includes(e)
            ,
            default: "wave"
        },
        animationSpeed: {
            type: [
                String,
                Number
            ],
            default: 1500
        },
        square: Boolean,
        bordered: Boolean,
        size: String,
        width: String,
        height: String
    },
    setup (e, { slots: t118  }) {
        const o = _vue.getCurrentInstance(), n = useDark(e, o.proxy.$q), a = _vue.computed(()=>{
            const t = void 0 !== e.size ? [
                e.size,
                e.size
            ] : [
                e.width,
                e.height
            ];
            return {
                "--q-skeleton-speed": `${e.animationSpeed}ms`,
                width: t[0],
                height: t[1]
            };
        }), l = _vue.computed(()=>`q-skeleton q-skeleton--${!0 === n.value ? "dark" : "light"} q-skeleton--type-${e.type}` + ("none" !== e.animation ? ` q-skeleton--anim q-skeleton--anim-${e.animation}` : "") + (!0 === e.square ? " q-skeleton--square" : "") + (!0 === e.bordered ? " q-skeleton--bordered" : "")
        );
        return ()=>_vue.h(e.tag, {
                class: l.value,
                style: a.value
            }, hSlot(t118.default))
        ;
    }
});
const slotsDef = [
    [
        "left",
        "center",
        "start",
        "width"
    ],
    [
        "right",
        "center",
        "end",
        "width"
    ],
    [
        "top",
        "start",
        "center",
        "height"
    ],
    [
        "bottom",
        "end",
        "center",
        "height"
    ]
];
var QSlideItem = createComponent({
    name: "QSlideItem",
    props: {
        ...useDarkProps,
        leftColor: String,
        rightColor: String,
        topColor: String,
        bottomColor: String,
        onSlide: Function
    },
    emits: [
        "action",
        "top",
        "right",
        "bottom",
        "left"
    ],
    setup (e149, { slots: t119 , emit: o76  }) {
        const { proxy: n62  } = _vue.getCurrentInstance(), { $q: a33  } = n62, l25 = useDark(e149, a33), { getCacheWithFn: i20  } = useCache(), r = _vue.ref(null);
        let s, u = {
        }, c = {
        }, d = {
        };
        const p = _vue.computed(()=>!0 === a33.lang.rtl ? {
                left: "right",
                right: "left"
            } : {
                left: "left",
                right: "right"
            }
        ), v = _vue.computed(()=>"q-slide-item q-item-type overflow-hidden" + (!0 === l25.value ? " q-slide-item--dark q-dark" : "")
        );
        function m() {
            r.value.style.transform = "translate(0,0)";
        }
        function f(t, n, a) {
            void 0 !== e149.onSlide && o76("slide", {
                side: t,
                ratio: n,
                isReset: a
            });
        }
        function g(e150) {
            const n = r.value;
            if (e150.isFirst) u = {
                dir: null,
                size: {
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 0
                },
                scale: 0
            }, n.classList.add("no-transition"), slotsDef.forEach((e)=>{
                if (void 0 !== t119[e[0]]) {
                    const t = d[e[0]];
                    t.style.transform = "scale(1)", u.size[e[0]] = t.getBoundingClientRect()[e[3]];
                }
            }), u.axis = "up" === e150.direction || "down" === e150.direction ? "Y" : "X";
            else {
                if (e150.isFinal) return n.classList.remove("no-transition"), void (1 === u.scale ? (n.style.transform = `translate${u.axis}(${100 * u.dir}%)`, s = setTimeout(()=>{
                    o76(u.showing, {
                        reset: m
                    }), o76("action", {
                        side: u.showing,
                        reset: m
                    });
                }, 230)) : (n.style.transform = "translate(0,0)", f(u.showing, 0, !0)));
                e150.direction = "X" === u.axis ? e150.offset.x < 0 ? "left" : "right" : e150.offset.y < 0 ? "up" : "down";
            }
            if (void 0 === t119.left && e150.direction === p.value.right || void 0 === t119.right && e150.direction === p.value.left || void 0 === t119.top && "down" === e150.direction || void 0 === t119.bottom && "up" === e150.direction) return void (n.style.transform = "translate(0,0)");
            let a, l, i;
            "X" === u.axis ? (l = "left" === e150.direction ? -1 : 1, a = 1 === l ? p.value.left : p.value.right, i = e150.distance.x) : (l = "up" === e150.direction ? -2 : 2, a = 2 === l ? "top" : "bottom", i = e150.distance.y), null !== u.dir && Math.abs(l) !== Math.abs(u.dir) || (u.dir !== l && ([
                "left",
                "right",
                "top",
                "bottom"
            ].forEach((e)=>{
                c[e] && (c[e].style.visibility = a === e ? "visible" : "hidden");
            }), u.showing = a, u.dir = l), u.scale = Math.max(0, Math.min(1, (i - 40) / u.size[a])), n.style.transform = `translate${u.axis}(${i * l / Math.abs(l)}px)`, d[a].style.transform = `scale(${u.scale})`, f(a, u.scale, !1));
        }
        return _vue.onBeforeUpdate(()=>{
            c = {
            }, d = {
            };
        }), _vue.onBeforeUnmount(()=>{
            clearTimeout(s);
        }), Object.assign(n62, {
            reset: m
        }), ()=>{
            const o = [], n63 = {
                left: void 0 !== t119[p.value.right],
                right: void 0 !== t119[p.value.left],
                up: void 0 !== t119.bottom,
                down: void 0 !== t119.top
            }, a34 = Object.keys(n63).filter((e)=>!0 === n63[e]
            );
            slotsDef.forEach((n)=>{
                const a = n[0];
                void 0 !== t119[a] && o.push(_vue.h("div", {
                    ref: (e)=>{
                        c[a] = e;
                    },
                    class: `q-slide-item__${a} absolute-full row no-wrap items-${n[1]} justify-${n[2]}` + (void 0 !== e149[a + "Color"] ? ` bg-${e149[a + "Color"]}` : "")
                }, [
                    _vue.h("div", {
                        ref: (e)=>{
                            d[a] = e;
                        }
                    }, t119[a]())
                ]));
            });
            const l = _vue.h("div", {
                key: `${0 === a34.length ? "only-" : ""} content`,
                ref: r,
                class: "q-slide-item__content"
            }, hSlot(t119.default));
            return 0 === a34.length ? o.push(l) : o.push(_vue.withDirectives(l, i20("dir#" + a34.join(""), ()=>{
                const e = {
                    prevent: !0,
                    stop: !0,
                    mouse: !0
                };
                return a34.forEach((t)=>{
                    e[t] = !0;
                }), [
                    [
                        TouchPan,
                        g,
                        void 0,
                        e
                    ]
                ];
            }))), _vue.h("div", {
                class: v.value
            }, o);
        };
    }
});
const space = _vue.h("div", {
    class: "q-space"
});
var QSpace = createComponent({
    name: "QSpace",
    setup () {
        return ()=>space
        ;
    }
});
const svg$l = [
    _vue.h("g", {
        transform: "matrix(1 0 0 -1 0 80)"
    }, [
        _vue.h("rect", {
            width: "10",
            height: "20",
            rx: "3"
        }, [
            _vue.h("animate", {
                attributeName: "height",
                begin: "0s",
                dur: "4.3s",
                values: "20;45;57;80;64;32;66;45;64;23;66;13;64;56;34;34;2;23;76;79;20",
                calcMode: "linear",
                repeatCount: "indefinite"
            })
        ]),
        _vue.h("rect", {
            x: "15",
            width: "10",
            height: "80",
            rx: "3"
        }, [
            _vue.h("animate", {
                attributeName: "height",
                begin: "0s",
                dur: "2s",
                values: "80;55;33;5;75;23;73;33;12;14;60;80",
                calcMode: "linear",
                repeatCount: "indefinite"
            })
        ]),
        _vue.h("rect", {
            x: "30",
            width: "10",
            height: "50",
            rx: "3"
        }, [
            _vue.h("animate", {
                attributeName: "height",
                begin: "0s",
                dur: "1.4s",
                values: "50;34;78;23;56;23;34;76;80;54;21;50",
                calcMode: "linear",
                repeatCount: "indefinite"
            })
        ]),
        _vue.h("rect", {
            x: "45",
            width: "10",
            height: "30",
            rx: "3"
        }, [
            _vue.h("animate", {
                attributeName: "height",
                begin: "0s",
                dur: "2s",
                values: "30;45;13;80;56;72;45;76;34;23;67;30",
                calcMode: "linear",
                repeatCount: "indefinite"
            })
        ])
    ])
];
var QSpinnerAudio = createComponent({
    name: "QSpinnerAudio",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                fill: "currentColor",
                width: t.value,
                height: t.value,
                viewBox: "0 0 55 80",
                xmlns: "http://www.w3.org/2000/svg"
            }, svg$l)
        ;
    }
});
const svg$k = [
    _vue.h("g", {
        transform: "translate(1 1)",
        "stroke-width": "2",
        fill: "none",
        "fill-rule": "evenodd"
    }, [
        _vue.h("circle", {
            cx: "5",
            cy: "50",
            r: "5"
        }, [
            _vue.h("animate", {
                attributeName: "cy",
                begin: "0s",
                dur: "2.2s",
                values: "50;5;50;50",
                calcMode: "linear",
                repeatCount: "indefinite"
            }),
            _vue.h("animate", {
                attributeName: "cx",
                begin: "0s",
                dur: "2.2s",
                values: "5;27;49;5",
                calcMode: "linear",
                repeatCount: "indefinite"
            })
        ]),
        _vue.h("circle", {
            cx: "27",
            cy: "5",
            r: "5"
        }, [
            _vue.h("animate", {
                attributeName: "cy",
                begin: "0s",
                dur: "2.2s",
                from: "5",
                to: "5",
                values: "5;50;50;5",
                calcMode: "linear",
                repeatCount: "indefinite"
            }),
            _vue.h("animate", {
                attributeName: "cx",
                begin: "0s",
                dur: "2.2s",
                from: "27",
                to: "27",
                values: "27;49;5;27",
                calcMode: "linear",
                repeatCount: "indefinite"
            })
        ]),
        _vue.h("circle", {
            cx: "49",
            cy: "50",
            r: "5"
        }, [
            _vue.h("animate", {
                attributeName: "cy",
                begin: "0s",
                dur: "2.2s",
                values: "50;50;5;50",
                calcMode: "linear",
                repeatCount: "indefinite"
            }),
            _vue.h("animate", {
                attributeName: "cx",
                from: "49",
                to: "49",
                begin: "0s",
                dur: "2.2s",
                values: "49;5;27;49",
                calcMode: "linear",
                repeatCount: "indefinite"
            })
        ])
    ])
];
var QSpinnerBall = createComponent({
    name: "QSpinnerBall",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                stroke: "currentColor",
                width: t.value,
                height: t.value,
                viewBox: "0 0 57 57",
                xmlns: "http://www.w3.org/2000/svg"
            }, svg$k)
        ;
    }
});
const svg$j = [
    _vue.h("rect", {
        y: "10",
        width: "15",
        height: "120",
        rx: "6"
    }, [
        _vue.h("animate", {
            attributeName: "height",
            begin: "0.5s",
            dur: "1s",
            values: "120;110;100;90;80;70;60;50;40;140;120",
            calcMode: "linear",
            repeatCount: "indefinite"
        }),
        _vue.h("animate", {
            attributeName: "y",
            begin: "0.5s",
            dur: "1s",
            values: "10;15;20;25;30;35;40;45;50;0;10",
            calcMode: "linear",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("rect", {
        x: "30",
        y: "10",
        width: "15",
        height: "120",
        rx: "6"
    }, [
        _vue.h("animate", {
            attributeName: "height",
            begin: "0.25s",
            dur: "1s",
            values: "120;110;100;90;80;70;60;50;40;140;120",
            calcMode: "linear",
            repeatCount: "indefinite"
        }),
        _vue.h("animate", {
            attributeName: "y",
            begin: "0.25s",
            dur: "1s",
            values: "10;15;20;25;30;35;40;45;50;0;10",
            calcMode: "linear",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("rect", {
        x: "60",
        width: "15",
        height: "140",
        rx: "6"
    }, [
        _vue.h("animate", {
            attributeName: "height",
            begin: "0s",
            dur: "1s",
            values: "120;110;100;90;80;70;60;50;40;140;120",
            calcMode: "linear",
            repeatCount: "indefinite"
        }),
        _vue.h("animate", {
            attributeName: "y",
            begin: "0s",
            dur: "1s",
            values: "10;15;20;25;30;35;40;45;50;0;10",
            calcMode: "linear",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("rect", {
        x: "90",
        y: "10",
        width: "15",
        height: "120",
        rx: "6"
    }, [
        _vue.h("animate", {
            attributeName: "height",
            begin: "0.25s",
            dur: "1s",
            values: "120;110;100;90;80;70;60;50;40;140;120",
            calcMode: "linear",
            repeatCount: "indefinite"
        }),
        _vue.h("animate", {
            attributeName: "y",
            begin: "0.25s",
            dur: "1s",
            values: "10;15;20;25;30;35;40;45;50;0;10",
            calcMode: "linear",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("rect", {
        x: "120",
        y: "10",
        width: "15",
        height: "120",
        rx: "6"
    }, [
        _vue.h("animate", {
            attributeName: "height",
            begin: "0.5s",
            dur: "1s",
            values: "120;110;100;90;80;70;60;50;40;140;120",
            calcMode: "linear",
            repeatCount: "indefinite"
        }),
        _vue.h("animate", {
            attributeName: "y",
            begin: "0.5s",
            dur: "1s",
            values: "10;15;20;25;30;35;40;45;50;0;10",
            calcMode: "linear",
            repeatCount: "indefinite"
        })
    ])
];
var QSpinnerBars = createComponent({
    name: "QSpinnerBars",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                fill: "currentColor",
                width: t.value,
                height: t.value,
                viewBox: "0 0 135 140",
                xmlns: "http://www.w3.org/2000/svg"
            }, svg$j)
        ;
    }
});
const svg$i = [
    _vue.h("rect", {
        x: "25",
        y: "25",
        width: "50",
        height: "50",
        fill: "none",
        "stroke-width": "4",
        stroke: "currentColor"
    }, [
        _vue.h("animateTransform", {
            id: "spinnerBox",
            attributeName: "transform",
            type: "rotate",
            from: "0 50 50",
            to: "180 50 50",
            dur: "0.5s",
            begin: "rectBox.end"
        })
    ]),
    _vue.h("rect", {
        x: "27",
        y: "27",
        width: "46",
        height: "50",
        fill: "currentColor"
    }, [
        _vue.h("animate", {
            id: "rectBox",
            attributeName: "height",
            begin: "0s;spinnerBox.end",
            dur: "1.3s",
            from: "50",
            to: "0",
            fill: "freeze"
        })
    ])
];
var QSpinnerBox = createComponent({
    name: "QSpinnerBox",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                width: t.value,
                height: t.value,
                viewBox: "0 0 100 100",
                preserveAspectRatio: "xMidYMid",
                xmlns: "http://www.w3.org/2000/svg"
            }, svg$i)
        ;
    }
});
const svg$h = [
    _vue.h("circle", {
        cx: "50",
        cy: "50",
        r: "48",
        fill: "none",
        "stroke-width": "4",
        "stroke-miterlimit": "10",
        stroke: "currentColor"
    }),
    _vue.h("line", {
        "stroke-linecap": "round",
        "stroke-width": "4",
        "stroke-miterlimit": "10",
        stroke: "currentColor",
        x1: "50",
        y1: "50",
        x2: "85",
        y2: "50.5"
    }, [
        _vue.h("animateTransform", {
            attributeName: "transform",
            type: "rotate",
            from: "0 50 50",
            to: "360 50 50",
            dur: "2s",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("line", {
        "stroke-linecap": "round",
        "stroke-width": "4",
        "stroke-miterlimit": "10",
        stroke: "currentColor",
        x1: "50",
        y1: "50",
        x2: "49.5",
        y2: "74"
    }, [
        _vue.h("animateTransform", {
            attributeName: "transform",
            type: "rotate",
            from: "0 50 50",
            to: "360 50 50",
            dur: "15s",
            repeatCount: "indefinite"
        })
    ])
];
var QSpinnerClock = createComponent({
    name: "QSpinnerClock",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                width: t.value,
                height: t.value,
                viewBox: "0 0 100 100",
                preserveAspectRatio: "xMidYMid",
                xmlns: "http://www.w3.org/2000/svg"
            }, svg$h)
        ;
    }
});
const svg$g = [
    _vue.h("rect", {
        x: "0",
        y: "0",
        width: " 100",
        height: "100",
        fill: "none"
    }),
    _vue.h("path", {
        d: "M78,19H22c-6.6,0-12,5.4-12,12v31c0,6.6,5.4,12,12,12h37.2c0.4,3,1.8,5.6,3.7,7.6c2.4,2.5,5.1,4.1,9.1,4 c-1.4-2.1-2-7.2-2-10.3c0-0.4,0-0.8,0-1.3h8c6.6,0,12-5.4,12-12V31C90,24.4,84.6,19,78,19z",
        fill: "currentColor"
    }),
    _vue.h("circle", {
        cx: "30",
        cy: "47",
        r: "5",
        fill: "#fff"
    }, [
        _vue.h("animate", {
            attributeName: "opacity",
            from: "0",
            to: "1",
            values: "0;1;1",
            keyTimes: "0;0.2;1",
            dur: "1s",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("circle", {
        cx: "50",
        cy: "47",
        r: "5",
        fill: "#fff"
    }, [
        _vue.h("animate", {
            attributeName: "opacity",
            from: "0",
            to: "1",
            values: "0;0;1;1",
            keyTimes: "0;0.2;0.4;1",
            dur: "1s",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("circle", {
        cx: "70",
        cy: "47",
        r: "5",
        fill: "#fff"
    }, [
        _vue.h("animate", {
            attributeName: "opacity",
            from: "0",
            to: "1",
            values: "0;0;1;1",
            keyTimes: "0;0.4;0.6;1",
            dur: "1s",
            repeatCount: "indefinite"
        })
    ])
];
var QSpinnerComment = createComponent({
    name: "QSpinnerComment",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                width: t.value,
                height: t.value,
                xmlns: "http://www.w3.org/2000/svg",
                viewBox: "0 0 100 100",
                preserveAspectRatio: "xMidYMid"
            }, svg$g)
        ;
    }
});
const svg$f = [
    _vue.h("rect", {
        x: "0",
        y: "0",
        width: " 100",
        height: "100",
        fill: "none"
    }),
    _vue.h("g", {
        transform: "translate(25 25)"
    }, [
        _vue.h("rect", {
            x: "-20",
            y: "-20",
            width: " 40",
            height: "40",
            fill: "currentColor",
            opacity: "0.9"
        }, [
            _vue.h("animateTransform", {
                attributeName: "transform",
                type: "scale",
                from: "1.5",
                to: "1",
                repeatCount: "indefinite",
                begin: "0s",
                dur: "1s",
                calcMode: "spline",
                keySplines: "0.2 0.8 0.2 0.8",
                keyTimes: "0;1"
            })
        ])
    ]),
    _vue.h("g", {
        transform: "translate(75 25)"
    }, [
        _vue.h("rect", {
            x: "-20",
            y: "-20",
            width: " 40",
            height: "40",
            fill: "currentColor",
            opacity: "0.8"
        }, [
            _vue.h("animateTransform", {
                attributeName: "transform",
                type: "scale",
                from: "1.5",
                to: "1",
                repeatCount: "indefinite",
                begin: "0.1s",
                dur: "1s",
                calcMode: "spline",
                keySplines: "0.2 0.8 0.2 0.8",
                keyTimes: "0;1"
            })
        ])
    ]),
    _vue.h("g", {
        transform: "translate(25 75)"
    }, [
        _vue.h("rect", {
            x: "-20",
            y: "-20",
            width: " 40",
            height: "40",
            fill: "currentColor",
            opacity: "0.7"
        }, [
            _vue.h("animateTransform", {
                attributeName: "transform",
                type: "scale",
                from: "1.5",
                to: "1",
                repeatCount: "indefinite",
                begin: "0.3s",
                dur: "1s",
                calcMode: "spline",
                keySplines: "0.2 0.8 0.2 0.8",
                keyTimes: "0;1"
            })
        ])
    ]),
    _vue.h("g", {
        transform: "translate(75 75)"
    }, [
        _vue.h("rect", {
            x: "-20",
            y: "-20",
            width: " 40",
            height: "40",
            fill: "currentColor",
            opacity: "0.6"
        }, [
            _vue.h("animateTransform", {
                attributeName: "transform",
                type: "scale",
                from: "1.5",
                to: "1",
                repeatCount: "indefinite",
                begin: "0.2s",
                dur: "1s",
                calcMode: "spline",
                keySplines: "0.2 0.8 0.2 0.8",
                keyTimes: "0;1"
            })
        ])
    ])
];
var QSpinnerCube = createComponent({
    name: "QSpinnerCube",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                width: t.value,
                height: t.value,
                xmlns: "http://www.w3.org/2000/svg",
                viewBox: "0 0 100 100",
                preserveAspectRatio: "xMidYMid"
            }, svg$f)
        ;
    }
});
const svg$e = [
    _vue.h("circle", {
        cx: "15",
        cy: "15",
        r: "15"
    }, [
        _vue.h("animate", {
            attributeName: "r",
            from: "15",
            to: "15",
            begin: "0s",
            dur: "0.8s",
            values: "15;9;15",
            calcMode: "linear",
            repeatCount: "indefinite"
        }),
        _vue.h("animate", {
            attributeName: "fill-opacity",
            from: "1",
            to: "1",
            begin: "0s",
            dur: "0.8s",
            values: "1;.5;1",
            calcMode: "linear",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("circle", {
        cx: "60",
        cy: "15",
        r: "9",
        "fill-opacity": ".3"
    }, [
        _vue.h("animate", {
            attributeName: "r",
            from: "9",
            to: "9",
            begin: "0s",
            dur: "0.8s",
            values: "9;15;9",
            calcMode: "linear",
            repeatCount: "indefinite"
        }),
        _vue.h("animate", {
            attributeName: "fill-opacity",
            from: ".5",
            to: ".5",
            begin: "0s",
            dur: "0.8s",
            values: ".5;1;.5",
            calcMode: "linear",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("circle", {
        cx: "105",
        cy: "15",
        r: "15"
    }, [
        _vue.h("animate", {
            attributeName: "r",
            from: "15",
            to: "15",
            begin: "0s",
            dur: "0.8s",
            values: "15;9;15",
            calcMode: "linear",
            repeatCount: "indefinite"
        }),
        _vue.h("animate", {
            attributeName: "fill-opacity",
            from: "1",
            to: "1",
            begin: "0s",
            dur: "0.8s",
            values: "1;.5;1",
            calcMode: "linear",
            repeatCount: "indefinite"
        })
    ])
];
var QSpinnerDots = createComponent({
    name: "QSpinnerDots",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                fill: "currentColor",
                width: t.value,
                height: t.value,
                viewBox: "0 0 120 30",
                xmlns: "http://www.w3.org/2000/svg"
            }, svg$e)
        ;
    }
});
const svg$d = [
    _vue.h("g", {
        transform: "translate(20 50)"
    }, [
        _vue.h("rect", {
            x: "-10",
            y: "-30",
            width: " 20",
            height: "60",
            fill: "currentColor",
            opacity: "0.6"
        }, [
            _vue.h("animateTransform", {
                attributeName: "transform",
                type: "scale",
                from: "2",
                to: "1",
                begin: "0s",
                repeatCount: "indefinite",
                dur: "1s",
                calcMode: "spline",
                keySplines: "0.1 0.9 0.4 1",
                keyTimes: "0;1",
                values: "2;1"
            })
        ])
    ]),
    _vue.h("g", {
        transform: "translate(50 50)"
    }, [
        _vue.h("rect", {
            x: "-10",
            y: "-30",
            width: " 20",
            height: "60",
            fill: "currentColor",
            opacity: "0.8"
        }, [
            _vue.h("animateTransform", {
                attributeName: "transform",
                type: "scale",
                from: "2",
                to: "1",
                begin: "0.1s",
                repeatCount: "indefinite",
                dur: "1s",
                calcMode: "spline",
                keySplines: "0.1 0.9 0.4 1",
                keyTimes: "0;1",
                values: "2;1"
            })
        ])
    ]),
    _vue.h("g", {
        transform: "translate(80 50)"
    }, [
        _vue.h("rect", {
            x: "-10",
            y: "-30",
            width: " 20",
            height: "60",
            fill: "currentColor",
            opacity: "0.9"
        }, [
            _vue.h("animateTransform", {
                attributeName: "transform",
                type: "scale",
                from: "2",
                to: "1",
                begin: "0.2s",
                repeatCount: "indefinite",
                dur: "1s",
                calcMode: "spline",
                keySplines: "0.1 0.9 0.4 1",
                keyTimes: "0;1",
                values: "2;1"
            })
        ])
    ])
];
var QSpinnerFacebook = createComponent({
    name: "QSpinnerFacebook",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                width: t.value,
                height: t.value,
                viewBox: "0 0 100 100",
                xmlns: "http://www.w3.org/2000/svg",
                preserveAspectRatio: "xMidYMid"
            }, svg$d)
        ;
    }
});
const svg$c = [
    _vue.h("g", {
        transform: "translate(-20,-20)"
    }, [
        _vue.h("path", {
            d: "M79.9,52.6C80,51.8,80,50.9,80,50s0-1.8-0.1-2.6l-5.1-0.4c-0.3-2.4-0.9-4.6-1.8-6.7l4.2-2.9c-0.7-1.6-1.6-3.1-2.6-4.5 L70,35c-1.4-1.9-3.1-3.5-4.9-4.9l2.2-4.6c-1.4-1-2.9-1.9-4.5-2.6L59.8,27c-2.1-0.9-4.4-1.5-6.7-1.8l-0.4-5.1C51.8,20,50.9,20,50,20 s-1.8,0-2.6,0.1l-0.4,5.1c-2.4,0.3-4.6,0.9-6.7,1.8l-2.9-4.1c-1.6,0.7-3.1,1.6-4.5,2.6l2.1,4.6c-1.9,1.4-3.5,3.1-5,4.9l-4.5-2.1 c-1,1.4-1.9,2.9-2.6,4.5l4.1,2.9c-0.9,2.1-1.5,4.4-1.8,6.8l-5,0.4C20,48.2,20,49.1,20,50s0,1.8,0.1,2.6l5,0.4 c0.3,2.4,0.9,4.7,1.8,6.8l-4.1,2.9c0.7,1.6,1.6,3.1,2.6,4.5l4.5-2.1c1.4,1.9,3.1,3.5,5,4.9l-2.1,4.6c1.4,1,2.9,1.9,4.5,2.6l2.9-4.1 c2.1,0.9,4.4,1.5,6.7,1.8l0.4,5.1C48.2,80,49.1,80,50,80s1.8,0,2.6-0.1l0.4-5.1c2.3-0.3,4.6-0.9,6.7-1.8l2.9,4.2 c1.6-0.7,3.1-1.6,4.5-2.6L65,69.9c1.9-1.4,3.5-3,4.9-4.9l4.6,2.2c1-1.4,1.9-2.9,2.6-4.5L73,59.8c0.9-2.1,1.5-4.4,1.8-6.7L79.9,52.6 z M50,65c-8.3,0-15-6.7-15-15c0-8.3,6.7-15,15-15s15,6.7,15,15C65,58.3,58.3,65,50,65z",
            fill: "currentColor"
        }, [
            _vue.h("animateTransform", {
                attributeName: "transform",
                type: "rotate",
                from: "90 50 50",
                to: "0 50 50",
                dur: "1s",
                repeatCount: "indefinite"
            })
        ])
    ]),
    _vue.h("g", {
        transform: "translate(20,20) rotate(15 50 50)"
    }, [
        _vue.h("path", {
            d: "M79.9,52.6C80,51.8,80,50.9,80,50s0-1.8-0.1-2.6l-5.1-0.4c-0.3-2.4-0.9-4.6-1.8-6.7l4.2-2.9c-0.7-1.6-1.6-3.1-2.6-4.5 L70,35c-1.4-1.9-3.1-3.5-4.9-4.9l2.2-4.6c-1.4-1-2.9-1.9-4.5-2.6L59.8,27c-2.1-0.9-4.4-1.5-6.7-1.8l-0.4-5.1C51.8,20,50.9,20,50,20 s-1.8,0-2.6,0.1l-0.4,5.1c-2.4,0.3-4.6,0.9-6.7,1.8l-2.9-4.1c-1.6,0.7-3.1,1.6-4.5,2.6l2.1,4.6c-1.9,1.4-3.5,3.1-5,4.9l-4.5-2.1 c-1,1.4-1.9,2.9-2.6,4.5l4.1,2.9c-0.9,2.1-1.5,4.4-1.8,6.8l-5,0.4C20,48.2,20,49.1,20,50s0,1.8,0.1,2.6l5,0.4 c0.3,2.4,0.9,4.7,1.8,6.8l-4.1,2.9c0.7,1.6,1.6,3.1,2.6,4.5l4.5-2.1c1.4,1.9,3.1,3.5,5,4.9l-2.1,4.6c1.4,1,2.9,1.9,4.5,2.6l2.9-4.1 c2.1,0.9,4.4,1.5,6.7,1.8l0.4,5.1C48.2,80,49.1,80,50,80s1.8,0,2.6-0.1l0.4-5.1c2.3-0.3,4.6-0.9,6.7-1.8l2.9,4.2 c1.6-0.7,3.1-1.6,4.5-2.6L65,69.9c1.9-1.4,3.5-3,4.9-4.9l4.6,2.2c1-1.4,1.9-2.9,2.6-4.5L73,59.8c0.9-2.1,1.5-4.4,1.8-6.7L79.9,52.6 z M50,65c-8.3,0-15-6.7-15-15c0-8.3,6.7-15,15-15s15,6.7,15,15C65,58.3,58.3,65,50,65z",
            fill: "currentColor"
        }, [
            _vue.h("animateTransform", {
                attributeName: "transform",
                type: "rotate",
                from: "0 50 50",
                to: "90 50 50",
                dur: "1s",
                repeatCount: "indefinite"
            })
        ])
    ])
];
var QSpinnerGears = createComponent({
    name: "QSpinnerGears",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                width: t.value,
                height: t.value,
                viewBox: "0 0 100 100",
                preserveAspectRatio: "xMidYMid",
                xmlns: "http://www.w3.org/2000/svg"
            }, svg$c)
        ;
    }
});
const svg$b = [
    _vue.h("circle", {
        cx: "12.5",
        cy: "12.5",
        r: "12.5"
    }, [
        _vue.h("animate", {
            attributeName: "fill-opacity",
            begin: "0s",
            dur: "1s",
            values: "1;.2;1",
            calcMode: "linear",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("circle", {
        cx: "12.5",
        cy: "52.5",
        r: "12.5",
        "fill-opacity": ".5"
    }, [
        _vue.h("animate", {
            attributeName: "fill-opacity",
            begin: "100ms",
            dur: "1s",
            values: "1;.2;1",
            calcMode: "linear",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("circle", {
        cx: "52.5",
        cy: "12.5",
        r: "12.5"
    }, [
        _vue.h("animate", {
            attributeName: "fill-opacity",
            begin: "300ms",
            dur: "1s",
            values: "1;.2;1",
            calcMode: "linear",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("circle", {
        cx: "52.5",
        cy: "52.5",
        r: "12.5"
    }, [
        _vue.h("animate", {
            attributeName: "fill-opacity",
            begin: "600ms",
            dur: "1s",
            values: "1;.2;1",
            calcMode: "linear",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("circle", {
        cx: "92.5",
        cy: "12.5",
        r: "12.5"
    }, [
        _vue.h("animate", {
            attributeName: "fill-opacity",
            begin: "800ms",
            dur: "1s",
            values: "1;.2;1",
            calcMode: "linear",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("circle", {
        cx: "92.5",
        cy: "52.5",
        r: "12.5"
    }, [
        _vue.h("animate", {
            attributeName: "fill-opacity",
            begin: "400ms",
            dur: "1s",
            values: "1;.2;1",
            calcMode: "linear",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("circle", {
        cx: "12.5",
        cy: "92.5",
        r: "12.5"
    }, [
        _vue.h("animate", {
            attributeName: "fill-opacity",
            begin: "700ms",
            dur: "1s",
            values: "1;.2;1",
            calcMode: "linear",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("circle", {
        cx: "52.5",
        cy: "92.5",
        r: "12.5"
    }, [
        _vue.h("animate", {
            attributeName: "fill-opacity",
            begin: "500ms",
            dur: "1s",
            values: "1;.2;1",
            calcMode: "linear",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("circle", {
        cx: "92.5",
        cy: "92.5",
        r: "12.5"
    }, [
        _vue.h("animate", {
            attributeName: "fill-opacity",
            begin: "200ms",
            dur: "1s",
            values: "1;.2;1",
            calcMode: "linear",
            repeatCount: "indefinite"
        })
    ])
];
var QSpinnerGrid = createComponent({
    name: "QSpinnerGrid",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                fill: "currentColor",
                width: t.value,
                height: t.value,
                viewBox: "0 0 105 105",
                xmlns: "http://www.w3.org/2000/svg"
            }, svg$b)
        ;
    }
});
const svg$a = [
    _vue.h("path", {
        d: "M30.262 57.02L7.195 40.723c-5.84-3.976-7.56-12.06-3.842-18.063 3.715-6 11.467-7.65 17.306-3.68l4.52 3.76 2.6-5.274c3.716-6.002 11.47-7.65 17.304-3.68 5.84 3.97 7.56 12.054 3.842 18.062L34.49 56.118c-.897 1.512-2.793 1.915-4.228.9z",
        "fill-opacity": ".5"
    }, [
        _vue.h("animate", {
            attributeName: "fill-opacity",
            begin: "0s",
            dur: "1.4s",
            values: "0.5;1;0.5",
            calcMode: "linear",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("path", {
        d: "M105.512 56.12l-14.44-24.272c-3.716-6.008-1.996-14.093 3.843-18.062 5.835-3.97 13.588-2.322 17.306 3.68l2.6 5.274 4.52-3.76c5.84-3.97 13.593-2.32 17.308 3.68 3.718 6.003 1.998 14.088-3.842 18.064L109.74 57.02c-1.434 1.014-3.33.61-4.228-.9z",
        "fill-opacity": ".5"
    }, [
        _vue.h("animate", {
            attributeName: "fill-opacity",
            begin: "0.7s",
            dur: "1.4s",
            values: "0.5;1;0.5",
            calcMode: "linear",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("path", {
        d: "M67.408 57.834l-23.01-24.98c-5.864-6.15-5.864-16.108 0-22.248 5.86-6.14 15.37-6.14 21.234 0L70 16.168l4.368-5.562c5.863-6.14 15.375-6.14 21.235 0 5.863 6.14 5.863 16.098 0 22.247l-23.007 24.98c-1.43 1.556-3.757 1.556-5.188 0z"
    })
];
var QSpinnerHearts = createComponent({
    name: "QSpinnerHearts",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                fill: "currentColor",
                width: t.value,
                height: t.value,
                viewBox: "0 0 140 64",
                xmlns: "http://www.w3.org/2000/svg"
            }, svg$a)
        ;
    }
});
const svg$9 = [
    _vue.h("g", [
        _vue.h("path", {
            fill: "none",
            stroke: "currentColor",
            "stroke-width": "5",
            "stroke-miterlimit": "10",
            d: "M58.4,51.7c-0.9-0.9-1.4-2-1.4-2.3s0.5-0.4,1.4-1.4 C70.8,43.8,79.8,30.5,80,15.5H70H30H20c0.2,15,9.2,28.1,21.6,32.3c0.9,0.9,1.4,1.2,1.4,1.5s-0.5,1.6-1.4,2.5 C29.2,56.1,20.2,69.5,20,85.5h10h40h10C79.8,69.5,70.8,55.9,58.4,51.7z"
        }),
        _vue.h("clipPath", {
            id: "uil-hourglass-clip1"
        }, [
            _vue.h("rect", {
                x: "15",
                y: "20",
                width: " 70",
                height: "25"
            }, [
                _vue.h("animate", {
                    attributeName: "height",
                    from: "25",
                    to: "0",
                    dur: "1s",
                    repeatCount: "indefinite",
                    values: "25;0;0",
                    keyTimes: "0;0.5;1"
                }),
                _vue.h("animate", {
                    attributeName: "y",
                    from: "20",
                    to: "45",
                    dur: "1s",
                    repeatCount: "indefinite",
                    values: "20;45;45",
                    keyTimes: "0;0.5;1"
                })
            ])
        ]),
        _vue.h("clipPath", {
            id: "uil-hourglass-clip2"
        }, [
            _vue.h("rect", {
                x: "15",
                y: "55",
                width: " 70",
                height: "25"
            }, [
                _vue.h("animate", {
                    attributeName: "height",
                    from: "0",
                    to: "25",
                    dur: "1s",
                    repeatCount: "indefinite",
                    values: "0;25;25",
                    keyTimes: "0;0.5;1"
                }),
                _vue.h("animate", {
                    attributeName: "y",
                    from: "80",
                    to: "55",
                    dur: "1s",
                    repeatCount: "indefinite",
                    values: "80;55;55",
                    keyTimes: "0;0.5;1"
                })
            ])
        ]),
        _vue.h("path", {
            d: "M29,23c3.1,11.4,11.3,19.5,21,19.5S67.9,34.4,71,23H29z",
            "clip-path": "url(#uil-hourglass-clip1)",
            fill: "currentColor"
        }),
        _vue.h("path", {
            d: "M71.6,78c-3-11.6-11.5-20-21.5-20s-18.5,8.4-21.5,20H71.6z",
            "clip-path": "url(#uil-hourglass-clip2)",
            fill: "currentColor"
        }),
        _vue.h("animateTransform", {
            attributeName: "transform",
            type: "rotate",
            from: "0 50 50",
            to: "180 50 50",
            repeatCount: "indefinite",
            dur: "1s",
            values: "0 50 50;0 50 50;180 50 50",
            keyTimes: "0;0.7;1"
        })
    ])
];
var QSpinnerHourglass = createComponent({
    name: "QSpinnerHourglass",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                width: t.value,
                height: t.value,
                viewBox: "0 0 100 100",
                preserveAspectRatio: "xMidYMid",
                xmlns: "http://www.w3.org/2000/svg"
            }, svg$9)
        ;
    }
});
const svg$8 = [
    _vue.h("path", {
        d: "M24.3,30C11.4,30,5,43.3,5,50s6.4,20,19.3,20c19.3,0,32.1-40,51.4-40C88.6,30,95,43.3,95,50s-6.4,20-19.3,20C56.4,70,43.6,30,24.3,30z",
        fill: "none",
        stroke: "currentColor",
        "stroke-width": "8",
        "stroke-dasharray": "10.691205342610678 10.691205342610678",
        "stroke-dashoffset": "0"
    }, [
        _vue.h("animate", {
            attributeName: "stroke-dashoffset",
            from: "0",
            to: "21.382410685221355",
            begin: "0",
            dur: "2s",
            repeatCount: "indefinite",
            fill: "freeze"
        })
    ])
];
var QSpinnerInfinity = createComponent({
    name: "QSpinnerInfinity",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                width: t.value,
                height: t.value,
                viewBox: "0 0 100 100",
                preserveAspectRatio: "xMidYMid"
            }, svg$8)
        ;
    }
});
const svg$7 = [
    _vue.h("g", {
        "stroke-width": "4",
        "stroke-linecap": "round"
    }, [
        _vue.h("line", {
            y1: "17",
            y2: "29",
            transform: "translate(32,32) rotate(180)"
        }, [
            _vue.h("animate", {
                attributeName: "stroke-opacity",
                dur: "750ms",
                values: "1;.85;.7;.65;.55;.45;.35;.25;.15;.1;0;1",
                repeatCount: "indefinite"
            })
        ]),
        _vue.h("line", {
            y1: "17",
            y2: "29",
            transform: "translate(32,32) rotate(210)"
        }, [
            _vue.h("animate", {
                attributeName: "stroke-opacity",
                dur: "750ms",
                values: "0;1;.85;.7;.65;.55;.45;.35;.25;.15;.1;0",
                repeatCount: "indefinite"
            })
        ]),
        _vue.h("line", {
            y1: "17",
            y2: "29",
            transform: "translate(32,32) rotate(240)"
        }, [
            _vue.h("animate", {
                attributeName: "stroke-opacity",
                dur: "750ms",
                values: ".1;0;1;.85;.7;.65;.55;.45;.35;.25;.15;.1",
                repeatCount: "indefinite"
            })
        ]),
        _vue.h("line", {
            y1: "17",
            y2: "29",
            transform: "translate(32,32) rotate(270)"
        }, [
            _vue.h("animate", {
                attributeName: "stroke-opacity",
                dur: "750ms",
                values: ".15;.1;0;1;.85;.7;.65;.55;.45;.35;.25;.15",
                repeatCount: "indefinite"
            })
        ]),
        _vue.h("line", {
            y1: "17",
            y2: "29",
            transform: "translate(32,32) rotate(300)"
        }, [
            _vue.h("animate", {
                attributeName: "stroke-opacity",
                dur: "750ms",
                values: ".25;.15;.1;0;1;.85;.7;.65;.55;.45;.35;.25",
                repeatCount: "indefinite"
            })
        ]),
        _vue.h("line", {
            y1: "17",
            y2: "29",
            transform: "translate(32,32) rotate(330)"
        }, [
            _vue.h("animate", {
                attributeName: "stroke-opacity",
                dur: "750ms",
                values: ".35;.25;.15;.1;0;1;.85;.7;.65;.55;.45;.35",
                repeatCount: "indefinite"
            })
        ]),
        _vue.h("line", {
            y1: "17",
            y2: "29",
            transform: "translate(32,32) rotate(0)"
        }, [
            _vue.h("animate", {
                attributeName: "stroke-opacity",
                dur: "750ms",
                values: ".45;.35;.25;.15;.1;0;1;.85;.7;.65;.55;.45",
                repeatCount: "indefinite"
            })
        ]),
        _vue.h("line", {
            y1: "17",
            y2: "29",
            transform: "translate(32,32) rotate(30)"
        }, [
            _vue.h("animate", {
                attributeName: "stroke-opacity",
                dur: "750ms",
                values: ".55;.45;.35;.25;.15;.1;0;1;.85;.7;.65;.55",
                repeatCount: "indefinite"
            })
        ]),
        _vue.h("line", {
            y1: "17",
            y2: "29",
            transform: "translate(32,32) rotate(60)"
        }, [
            _vue.h("animate", {
                attributeName: "stroke-opacity",
                dur: "750ms",
                values: ".65;.55;.45;.35;.25;.15;.1;0;1;.85;.7;.65",
                repeatCount: "indefinite"
            })
        ]),
        _vue.h("line", {
            y1: "17",
            y2: "29",
            transform: "translate(32,32) rotate(90)"
        }, [
            _vue.h("animate", {
                attributeName: "stroke-opacity",
                dur: "750ms",
                values: ".7;.65;.55;.45;.35;.25;.15;.1;0;1;.85;.7",
                repeatCount: "indefinite"
            })
        ]),
        _vue.h("line", {
            y1: "17",
            y2: "29",
            transform: "translate(32,32) rotate(120)"
        }, [
            _vue.h("animate", {
                attributeName: "stroke-opacity",
                dur: "750ms",
                values: ".85;.7;.65;.55;.45;.35;.25;.15;.1;0;1;.85",
                repeatCount: "indefinite"
            })
        ]),
        _vue.h("line", {
            y1: "17",
            y2: "29",
            transform: "translate(32,32) rotate(150)"
        }, [
            _vue.h("animate", {
                attributeName: "stroke-opacity",
                dur: "750ms",
                values: "1;.85;.7;.65;.55;.45;.35;.25;.15;.1;0;1",
                repeatCount: "indefinite"
            })
        ])
    ])
];
var QSpinnerIos = createComponent({
    name: "QSpinnerIos",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                width: t.value,
                height: t.value,
                stroke: "currentColor",
                fill: "currentColor",
                viewBox: "0 0 64 64"
            }, svg$7)
        ;
    }
});
const svg$6 = [
    _vue.h("circle", {
        cx: "50",
        cy: "50",
        r: "44",
        fill: "none",
        "stroke-width": "4",
        "stroke-opacity": ".5",
        stroke: "currentColor"
    }),
    _vue.h("circle", {
        cx: "8",
        cy: "54",
        r: "6",
        fill: "currentColor",
        "stroke-width": "3",
        stroke: "currentColor"
    }, [
        _vue.h("animateTransform", {
            attributeName: "transform",
            type: "rotate",
            from: "0 50 48",
            to: "360 50 52",
            dur: "2s",
            repeatCount: "indefinite"
        })
    ])
];
var QSpinnerOrbit = createComponent({
    name: "QSpinnerOrbit",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                width: t.value,
                height: t.value,
                viewBox: "0 0 100 100",
                preserveAspectRatio: "xMidYMid",
                xmlns: "http://www.w3.org/2000/svg"
            }, svg$6)
        ;
    }
});
const svg$5 = [
    _vue.h("g", {
        transform: "translate(1 1)",
        "stroke-width": "2",
        fill: "none",
        "fill-rule": "evenodd"
    }, [
        _vue.h("circle", {
            "stroke-opacity": ".5",
            cx: "18",
            cy: "18",
            r: "18"
        }),
        _vue.h("path", {
            d: "M36 18c0-9.94-8.06-18-18-18"
        }, [
            _vue.h("animateTransform", {
                attributeName: "transform",
                type: "rotate",
                from: "0 18 18",
                to: "360 18 18",
                dur: "1s",
                repeatCount: "indefinite"
            })
        ])
    ])
];
var QSpinnerOval = createComponent({
    name: "QSpinnerOval",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                stroke: "currentColor",
                width: t.value,
                height: t.value,
                viewBox: "0 0 38 38",
                xmlns: "http://www.w3.org/2000/svg"
            }, svg$5)
        ;
    }
});
const svg$4 = [
    _vue.h("path", {
        d: "M0 50A50 50 0 0 1 50 0L50 50L0 50",
        fill: "currentColor",
        opacity: "0.5"
    }, [
        _vue.h("animateTransform", {
            attributeName: "transform",
            type: "rotate",
            from: "0 50 50",
            to: "360 50 50",
            dur: "0.8s",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("path", {
        d: "M50 0A50 50 0 0 1 100 50L50 50L50 0",
        fill: "currentColor",
        opacity: "0.5"
    }, [
        _vue.h("animateTransform", {
            attributeName: "transform",
            type: "rotate",
            from: "0 50 50",
            to: "360 50 50",
            dur: "1.6s",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("path", {
        d: "M100 50A50 50 0 0 1 50 100L50 50L100 50",
        fill: "currentColor",
        opacity: "0.5"
    }, [
        _vue.h("animateTransform", {
            attributeName: "transform",
            type: "rotate",
            from: "0 50 50",
            to: "360 50 50",
            dur: "2.4s",
            repeatCount: "indefinite"
        })
    ]),
    _vue.h("path", {
        d: "M50 100A50 50 0 0 1 0 50L50 50L50 100",
        fill: "currentColor",
        opacity: "0.5"
    }, [
        _vue.h("animateTransform", {
            attributeName: "transform",
            type: "rotate",
            from: "0 50 50",
            to: "360 50 50",
            dur: "3.2s",
            repeatCount: "indefinite"
        })
    ])
];
var QSpinnerPie = createComponent({
    name: "QSpinnerPie",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                width: t.value,
                height: t.value,
                viewBox: "0 0 100 100",
                preserveAspectRatio: "xMidYMid",
                xmlns: "http://www.w3.org/2000/svg"
            }, svg$4)
        ;
    }
});
const svg$3 = [
    _vue.h("g", {
        fill: "none",
        "fill-rule": "evenodd",
        "stroke-width": "2"
    }, [
        _vue.h("circle", {
            cx: "22",
            cy: "22",
            r: "1"
        }, [
            _vue.h("animate", {
                attributeName: "r",
                begin: "0s",
                dur: "1.8s",
                values: "1; 20",
                calcMode: "spline",
                keyTimes: "0; 1",
                keySplines: "0.165, 0.84, 0.44, 1",
                repeatCount: "indefinite"
            }),
            _vue.h("animate", {
                attributeName: "stroke-opacity",
                begin: "0s",
                dur: "1.8s",
                values: "1; 0",
                calcMode: "spline",
                keyTimes: "0; 1",
                keySplines: "0.3, 0.61, 0.355, 1",
                repeatCount: "indefinite"
            })
        ]),
        _vue.h("circle", {
            cx: "22",
            cy: "22",
            r: "1"
        }, [
            _vue.h("animate", {
                attributeName: "r",
                begin: "-0.9s",
                dur: "1.8s",
                values: "1; 20",
                calcMode: "spline",
                keyTimes: "0; 1",
                keySplines: "0.165, 0.84, 0.44, 1",
                repeatCount: "indefinite"
            }),
            _vue.h("animate", {
                attributeName: "stroke-opacity",
                begin: "-0.9s",
                dur: "1.8s",
                values: "1; 0",
                calcMode: "spline",
                keyTimes: "0; 1",
                keySplines: "0.3, 0.61, 0.355, 1",
                repeatCount: "indefinite"
            })
        ])
    ])
];
var QSpinnerPuff = createComponent({
    name: "QSpinnerPuff",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                stroke: "currentColor",
                width: t.value,
                height: t.value,
                viewBox: "0 0 44 44",
                xmlns: "http://www.w3.org/2000/svg"
            }, svg$3)
        ;
    }
});
const svg$2 = [
    _vue.h("g", {
        transform: "scale(0.55)"
    }, [
        _vue.h("circle", {
            cx: "30",
            cy: "150",
            r: "30",
            fill: "currentColor"
        }, [
            _vue.h("animate", {
                attributeName: "opacity",
                from: "0",
                to: "1",
                dur: "1s",
                begin: "0",
                repeatCount: "indefinite",
                keyTimes: "0;0.5;1",
                values: "0;1;1"
            })
        ]),
        _vue.h("path", {
            d: "M90,150h30c0-49.7-40.3-90-90-90v30C63.1,90,90,116.9,90,150z",
            fill: "currentColor"
        }, [
            _vue.h("animate", {
                attributeName: "opacity",
                from: "0",
                to: "1",
                dur: "1s",
                begin: "0.1",
                repeatCount: "indefinite",
                keyTimes: "0;0.5;1",
                values: "0;1;1"
            })
        ]),
        _vue.h("path", {
            d: "M150,150h30C180,67.2,112.8,0,30,0v30C96.3,30,150,83.7,150,150z",
            fill: "currentColor"
        }, [
            _vue.h("animate", {
                attributeName: "opacity",
                from: "0",
                to: "1",
                dur: "1s",
                begin: "0.2",
                repeatCount: "indefinite",
                keyTimes: "0;0.5;1",
                values: "0;1;1"
            })
        ])
    ])
];
var QSpinnerRadio = createComponent({
    name: "QSpinnerRadio",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                width: t.value,
                height: t.value,
                viewBox: "0 0 100 100",
                preserveAspectRatio: "xMidYMid",
                xmlns: "http://www.w3.org/2000/svg"
            }, svg$2)
        ;
    }
});
const svg$1 = [
    _vue.h("g", {
        fill: "none",
        "fill-rule": "evenodd",
        transform: "translate(1 1)",
        "stroke-width": "2"
    }, [
        _vue.h("circle", {
            cx: "22",
            cy: "22",
            r: "6"
        }, [
            _vue.h("animate", {
                attributeName: "r",
                begin: "1.5s",
                dur: "3s",
                values: "6;22",
                calcMode: "linear",
                repeatCount: "indefinite"
            }),
            _vue.h("animate", {
                attributeName: "stroke-opacity",
                begin: "1.5s",
                dur: "3s",
                values: "1;0",
                calcMode: "linear",
                repeatCount: "indefinite"
            }),
            _vue.h("animate", {
                attributeName: "stroke-width",
                begin: "1.5s",
                dur: "3s",
                values: "2;0",
                calcMode: "linear",
                repeatCount: "indefinite"
            })
        ]),
        _vue.h("circle", {
            cx: "22",
            cy: "22",
            r: "6"
        }, [
            _vue.h("animate", {
                attributeName: "r",
                begin: "3s",
                dur: "3s",
                values: "6;22",
                calcMode: "linear",
                repeatCount: "indefinite"
            }),
            _vue.h("animate", {
                attributeName: "stroke-opacity",
                begin: "3s",
                dur: "3s",
                values: "1;0",
                calcMode: "linear",
                repeatCount: "indefinite"
            }),
            _vue.h("animate", {
                attributeName: "stroke-width",
                begin: "3s",
                dur: "3s",
                values: "2;0",
                calcMode: "linear",
                repeatCount: "indefinite"
            })
        ]),
        _vue.h("circle", {
            cx: "22",
            cy: "22",
            r: "8"
        }, [
            _vue.h("animate", {
                attributeName: "r",
                begin: "0s",
                dur: "1.5s",
                values: "6;1;2;3;4;5;6",
                calcMode: "linear",
                repeatCount: "indefinite"
            })
        ])
    ])
];
var QSpinnerRings = createComponent({
    name: "QSpinnerRings",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                stroke: "currentColor",
                width: t.value,
                height: t.value,
                viewBox: "0 0 45 45",
                xmlns: "http://www.w3.org/2000/svg"
            }, svg$1)
        ;
    }
});
const svg = [
    _vue.h("defs", [
        _vue.h("linearGradient", {
            x1: "8.042%",
            y1: "0%",
            x2: "65.682%",
            y2: "23.865%",
            id: "a"
        }, [
            _vue.h("stop", {
                "stop-color": "currentColor",
                "stop-opacity": "0",
                offset: "0%"
            }),
            _vue.h("stop", {
                "stop-color": "currentColor",
                "stop-opacity": ".631",
                offset: "63.146%"
            }),
            _vue.h("stop", {
                "stop-color": "currentColor",
                offset: "100%"
            })
        ])
    ]),
    _vue.h("g", {
        transform: "translate(1 1)",
        fill: "none",
        "fill-rule": "evenodd"
    }, [
        _vue.h("path", {
            d: "M36 18c0-9.94-8.06-18-18-18",
            stroke: "url(#a)",
            "stroke-width": "2"
        }, [
            _vue.h("animateTransform", {
                attributeName: "transform",
                type: "rotate",
                from: "0 18 18",
                to: "360 18 18",
                dur: "0.9s",
                repeatCount: "indefinite"
            })
        ]),
        _vue.h("circle", {
            fill: "currentColor",
            cx: "36",
            cy: "18",
            r: "1"
        }, [
            _vue.h("animateTransform", {
                attributeName: "transform",
                type: "rotate",
                from: "0 18 18",
                to: "360 18 18",
                dur: "0.9s",
                repeatCount: "indefinite"
            })
        ])
    ])
];
var QSpinnerTail = createComponent({
    name: "QSpinnerTail",
    props: useSpinnerProps,
    setup (e) {
        const { cSize: t , classes: o  } = useSpinner(e);
        return ()=>_vue.h("svg", {
                class: o.value,
                width: t.value,
                height: t.value,
                viewBox: "0 0 38 38",
                xmlns: "http://www.w3.org/2000/svg"
            }, svg)
        ;
    }
}), QSplitter = createComponent({
    name: "QSplitter",
    props: {
        ...useDarkProps,
        modelValue: {
            type: Number,
            required: !0
        },
        reverse: Boolean,
        unit: {
            type: String,
            default: "%",
            validator: (e)=>[
                    "%",
                    "px"
                ].includes(e)
        },
        limits: {
            type: Array,
            validator: (e)=>{
                return 2 === e.length && "number" === typeof e[0] && "number" === typeof e[1] && e[0] >= 0 && e[0] <= e[1];
            }
        },
        emitImmediately: Boolean,
        horizontal: Boolean,
        disable: Boolean,
        beforeClass: [
            Array,
            String,
            Object
        ],
        afterClass: [
            Array,
            String,
            Object
        ],
        separatorClass: [
            Array,
            String,
            Object
        ],
        separatorStyle: [
            Array,
            String,
            Object
        ]
    },
    emits: [
        "update:modelValue"
    ],
    setup (e151, { slots: t120 , emit: o77  }) {
        const { proxy: { $q: n  }  } = _vue.getCurrentInstance(), a35 = useDark(e151, n), l = _vue.ref(null), i = {
            before: _vue.ref(null),
            after: _vue.ref(null)
        }, r = _vue.computed(()=>"q-splitter no-wrap " + `${!0 === e151.horizontal ? "q-splitter--horizontal column" : "q-splitter--vertical row"}` + ` q-splitter--${!0 === e151.disable ? "disabled" : "workable"}` + (!0 === a35.value ? " q-splitter--dark" : "")
        ), s = _vue.computed(()=>!0 === e151.horizontal ? "height" : "width"
        ), u = _vue.computed(()=>!0 !== e151.reverse ? "before" : "after"
        ), c = _vue.computed(()=>void 0 !== e151.limits ? e151.limits : "%" === e151.unit ? [
                10,
                90
            ] : [
                50,
                1 / 0
            ]
        );
        function d(t) {
            return ("%" === e151.unit ? t : Math.round(t)) + e151.unit;
        }
        const p = _vue.computed(()=>({
                [u.value]: {
                    [s.value]: d(e151.modelValue)
                }
            })
        );
        let v, m, f, g, b;
        function y(t) {
            if (!0 === t.isFirst) {
                const t = l.value.getBoundingClientRect()[s.value];
                return v = !0 === e151.horizontal ? "up" : "left", m = "%" === e151.unit ? 100 : t, f = Math.min(m, c.value[1], Math.max(c.value[0], e151.modelValue)), g = (!0 !== e151.reverse ? 1 : -1) * (!0 === e151.horizontal ? 1 : !0 === n.lang.rtl ? -1 : 1) * ("%" === e151.unit ? 0 === t ? 0 : 100 / t : 1), void l.value.classList.add("q-splitter--active");
            }
            if (!0 === t.isFinal) return b !== e151.modelValue && o77("update:modelValue", b), void l.value.classList.remove("q-splitter--active");
            const a = f + g * (t.direction === v ? -1 : 1) * t.distance[!0 === e151.horizontal ? "y" : "x"];
            b = Math.min(m, c.value[1], Math.max(c.value[0], a)), i[u.value].value.style[s.value] = d(b), !0 === e151.emitImmediately && e151.modelValue !== b && o77("update:modelValue", b);
        }
        const S = _vue.computed(()=>{
            return [
                [
                    TouchPan,
                    y,
                    void 0,
                    {
                        [!0 === e151.horizontal ? "vertical" : "horizontal"]: !0,
                        prevent: !0,
                        stop: !0,
                        mouse: !0,
                        mouseAllDir: !0
                    }
                ]
            ];
        });
        function w(e, t) {
            e < t[0] ? o77("update:modelValue", t[0]) : e > t[1] && o77("update:modelValue", t[1]);
        }
        return _vue.watch(()=>e151.modelValue
        , (e)=>{
            w(e, c.value);
        }), _vue.watch(()=>e151.limits
        , ()=>{
            _vue.nextTick(()=>{
                w(e151.modelValue, c.value);
            });
        }), ()=>{
            const o = [
                _vue.h("div", {
                    ref: i.before,
                    class: [
                        "q-splitter__panel q-splitter__before" + (!0 === e151.reverse ? " col" : ""),
                        e151.beforeClass
                    ],
                    style: p.value.before
                }, hSlot(t120.before)),
                _vue.h("div", {
                    class: [
                        "q-splitter__separator",
                        e151.separatorClass
                    ],
                    style: e151.separatorStyle,
                    "aria-disabled": !0 === e151.disable ? "true" : void 0
                }, [
                    hDir("div", {
                        class: "q-splitter__separator-area absolute-full"
                    }, hSlot(t120.separator), "sep", !0 !== e151.disable, ()=>S.value
                    )
                ]),
                _vue.h("div", {
                    ref: i.after,
                    class: [
                        "q-splitter__panel q-splitter__after" + (!0 === e151.reverse ? "" : " col"),
                        e151.afterClass
                    ],
                    style: p.value.after
                }, hSlot(t120.after))
            ];
            return _vue.h("div", {
                class: r.value,
                ref: l
            }, hMergeSlot(t120.default, o));
        };
    }
}), StepHeader = createComponent({
    name: "StepHeader",
    props: {
        stepper: {
        },
        step: {
        },
        goToPanel: Function
    },
    setup (e, { attrs: t121  }) {
        const { proxy: { $q: o78  }  } = _vue.getCurrentInstance(), n = _vue.ref(null), a36 = _vue.computed(()=>e.stepper.modelValue === e.step.name
        ), l = _vue.computed(()=>{
            const t = e.step.disable;
            return !0 === t || "" === t;
        }), i = _vue.computed(()=>{
            const t = e.step.error;
            return !0 === t || "" === t;
        }), r = _vue.computed(()=>{
            const t = e.step.done;
            return !1 === l.value && (!0 === t || "" === t);
        }), s = _vue.computed(()=>{
            const t = e.step.headerNav, o = !0 === t || "" === t || void 0 === t;
            return !1 === l.value && e.stepper.headerNav && o;
        }), u = _vue.computed(()=>{
            return e.step.prefix && !1 === a36.value && !1 === i.value && !1 === r.value;
        }), c = _vue.computed(()=>{
            return !0 === a36.value ? e.step.activeIcon || e.stepper.activeIcon || o78.iconSet.stepper.active : !0 === i.value ? e.step.errorIcon || e.stepper.errorIcon || o78.iconSet.stepper.error : !1 === l.value && !0 === r.value ? e.step.doneIcon || e.stepper.doneIcon || o78.iconSet.stepper.done : e.step.icon || e.stepper.inactiveIcon;
        }), d = _vue.computed(()=>{
            const t = !0 === i.value ? e.step.errorColor || e.stepper.errorColor : void 0;
            if (!0 === a36.value) {
                const o = e.step.activeColor || e.stepper.activeColor || e.step.color;
                return void 0 !== o ? o : t;
            }
            return void 0 !== t ? t : !1 === l.value && !0 === r.value ? e.step.doneColor || e.stepper.doneColor || e.step.color || e.stepper.inactiveColor : e.step.color || e.stepper.inactiveColor;
        }), p = _vue.computed(()=>{
            return "q-stepper__tab col-grow flex items-center no-wrap relative-position" + (void 0 !== d.value ? ` text-${d.value}` : "") + (!0 === i.value ? " q-stepper__tab--error" : "") + (!0 === a36.value ? " q-stepper__tab--active" : "") + (!0 === r.value ? " q-stepper__tab--done" : "") + (!0 === s.value ? " q-stepper__tab--navigation q-focusable q-hoverable" : "") + (!0 === l.value ? " q-stepper__tab--disabled" : "");
        }), v = _vue.computed(()=>!0 === e.stepper.headerNav && s.value
        );
        function m() {
            null !== n.value && n.value.focus(), !1 === a36.value && e.goToPanel(e.step.name);
        }
        function f(t) {
            13 === t.keyCode && !1 === a36.value && e.goToPanel(e.step.name);
        }
        return ()=>{
            const o = {
                class: p.value
            };
            !0 === s.value && (o.onClick = m, o.onKeyup = f, Object.assign(o, !0 === l.value ? {
                tabindex: -1,
                "aria-disabled": "true"
            } : {
                tabindex: t121.tabindex || 0
            }));
            const a = [
                _vue.h("div", {
                    class: "q-focus-helper",
                    tabindex: -1,
                    ref: n
                }),
                _vue.h("div", {
                    class: "q-stepper__dot row flex-center q-stepper__line relative-position"
                }, [
                    _vue.h("span", {
                        class: "row flex-center"
                    }, [
                        !0 === u.value ? e.step.prefix : _vue.h(QIcon, {
                            name: c.value
                        })
                    ])
                ])
            ];
            if (void 0 !== e.step.title && null !== e.step.title) {
                const t = [
                    _vue.h("div", {
                        class: "q-stepper__title"
                    }, e.step.title)
                ];
                void 0 !== e.step.caption && null !== e.step.caption && t.push(_vue.h("div", {
                    class: "q-stepper__caption"
                }, e.step.caption)), a.push(_vue.h("div", {
                    class: "q-stepper__label q-stepper__line relative-position"
                }, t));
            }
            return _vue.withDirectives(_vue.h("div", o, a), [
                [
                    Ripple,
                    v.value
                ]
            ]);
        };
    }
});
function getStepWrapper(e) {
    return _vue.h("div", {
        class: "q-stepper__step-content"
    }, [
        _vue.h("div", {
            class: "q-stepper__step-inner"
        }, hSlot(e.default))
    ]);
}
const PanelWrapper = {
    setup (e, { slots: t  }) {
        return ()=>getStepWrapper(t)
        ;
    }
};
var QStep = createComponent({
    name: "QStep",
    props: {
        ...usePanelChildProps,
        icon: String,
        color: String,
        title: {
            type: String,
            required: !0
        },
        caption: String,
        prefix: [
            String,
            Number
        ],
        doneIcon: String,
        doneColor: String,
        activeIcon: String,
        activeColor: String,
        errorIcon: String,
        errorColor: String,
        headerNav: {
            type: Boolean,
            default: !0
        },
        done: Boolean,
        error: Boolean
    },
    setup (e152, { slots: t  }) {
        const o = _vue.inject(stepperKey, ()=>{
            console.error("QStep needs to be child of QStepper");
        }), { getCacheWithFn: n  } = useCache(), a = _vue.ref(null), l = _vue.computed(()=>o.value.modelValue === e152.name
        );
        _vue.watch(l, (e)=>{
            !0 === e && !0 === o.value.vertical && _vue.nextTick(()=>{
                null !== a.value && (a.value.scrollTop = 0);
            });
        });
        const i = _vue.computed(()=>"string" === typeof e152.name || "number" === typeof e152.name ? e152.name : String(e152.name)
        );
        function r() {
            const e = o.value.vertical;
            return !0 === e && !0 === o.value.keepAlive ? _vue.h(_vue.KeepAlive, o.value.keepAliveProps.value, !0 === l.value ? [
                _vue.h(!0 === o.value.needsUniqueKeepAliveWrapper.value ? n(i.value, ()=>({
                        ...PanelWrapper,
                        name: i.value
                    })
                ) : PanelWrapper, {
                    key: i.value
                }, t.default)
            ] : void 0) : !0 !== e || !0 === l.value ? getStepWrapper(t) : void 0;
        }
        return ()=>_vue.h("div", {
                ref: a,
                class: "q-stepper__step"
            }, !0 === o.value.vertical ? [
                _vue.h(StepHeader, {
                    stepper: o.value,
                    step: e152,
                    goToPanel: o.value.goToPanel
                }),
                !0 === o.value.animated ? _vue.h(QSlideTransition, r) : r()
            ] : [
                r()
            ])
        ;
    }
});
const camelRE = /(-\w)/g;
function camelizeProps(e153) {
    const t = {
    };
    return Object.keys(e153).forEach((o)=>{
        const n = o.replace(camelRE, (e)=>e[1].toUpperCase()
        );
        t[n] = e153[o];
    }), t;
}
var QStepper = createComponent({
    name: "QStepper",
    props: {
        ...useDarkProps,
        ...usePanelProps,
        flat: Boolean,
        bordered: Boolean,
        alternativeLabels: Boolean,
        headerNav: Boolean,
        contracted: Boolean,
        headerClass: String,
        inactiveColor: String,
        inactiveIcon: String,
        doneIcon: String,
        doneColor: String,
        activeIcon: String,
        activeColor: String,
        errorIcon: String,
        errorColor: String
    },
    emits: usePanelEmits,
    setup (e, { slots: t122  }) {
        const o79 = _vue.getCurrentInstance(), n64 = useDark(e, o79.proxy.$q), { updatePanelsList: a , isValidPanelName: l , updatePanelIndex: i , getPanelContent: r , getPanels: s , panelDirectives: u , goToPanel: c , keepAliveProps: d , needsUniqueKeepAliveWrapper: p  } = usePanel();
        _vue.provide(stepperKey, _vue.computed(()=>({
                goToPanel: c,
                keepAliveProps: d,
                needsUniqueKeepAliveWrapper: p,
                ...e
            })
        ));
        const v = _vue.computed(()=>`q-stepper q-stepper--${!0 === e.vertical ? "vertical" : "horizontal"}` + (!0 === e.flat || !0 === n64.value ? " q-stepper--flat no-shadow" : "") + (!0 === e.bordered || !0 === n64.value && !1 === e.flat ? " q-stepper--bordered" : "") + (!0 === e.contracted ? " q-stepper--contracted" : "") + (!0 === n64.value ? " q-stepper--dark q-dark" : "")
        ), m = _vue.computed(()=>"q-stepper__header row items-stretch justify-between" + ` q-stepper__header--${!0 === e.alternativeLabels ? "alternative" : "standard"}-labels` + (!1 === e.flat || !0 === e.bordered ? " q-stepper__header--border" : "") + (void 0 !== e.headerClass ? ` ${e.headerClass}` : "")
        );
        function f() {
            const o80 = hSlot(t122.message, []);
            if (!0 === e.vertical) {
                l(e.modelValue) && i();
                const n = _vue.h("div", {
                    class: "q-stepper__content"
                }, hSlot(t122.default));
                return void 0 === o80 ? [
                    n
                ] : o80.concat(n);
            }
            return [
                _vue.h("div", {
                    class: m.value
                }, s().map((t)=>{
                    const o = camelizeProps(t.props);
                    return _vue.h(StepHeader, {
                        key: o.name,
                        stepper: e,
                        step: o,
                        goToPanel: c
                    });
                })),
                o80,
                hDir("div", {
                    class: "q-stepper__content q-panel-parent"
                }, r(), "cont", e.swipeable, ()=>u.value
                )
            ];
        }
        return ()=>{
            return a(t122), _vue.h("div", {
                class: v.value
            }, hMergeSlot(t122.navigation, f()));
        };
    }
}), QStepperNavigation = createComponent({
    name: "QStepperNavigation",
    setup (e, { slots: t  }) {
        return ()=>_vue.h("div", {
                class: "q-stepper__nav"
            }, hSlot(t.default))
        ;
    }
}), QTh = createComponent({
    name: "QTh",
    props: {
        props: Object,
        autoWidth: Boolean
    },
    emits: [
        "click"
    ],
    setup (e, { slots: t123 , emit: o  }) {
        const n = _vue.getCurrentInstance(), { proxy: { $q: a  }  } = n;
        return ()=>{
            if (void 0 === e.props) return _vue.h("th", {
                class: !0 === e.autoWidth ? "q-table--col-auto-width" : ""
            }, hSlot(t123.default));
            let l, i;
            const r = n.vnode.key;
            if (r) {
                if (l = e.props.colsMap[r], void 0 === l) return;
            } else l = e.props.col;
            if (!0 === l.sortable) {
                const e = "right" === l.align ? "unshift" : "push";
                i = hUniqueSlot(t123.default, []), i[e](_vue.h(QIcon, {
                    class: l.__iconClass,
                    name: a.iconSet.table.arrowUp
                }));
            } else i = hSlot(t123.default);
            const s = {
                class: l.__thClass + (!0 === e.autoWidth ? " q-table--col-auto-width" : ""),
                style: l.headerStyle,
                onClick: (t)=>{
                    !0 === l.sortable && e.props.sort(l), o("click", t);
                }
            };
            return _vue.h("th", s, i);
        };
    }
});
function getTableMiddle(e, t) {
    return _vue.h("div", e, [
        _vue.h("table", {
            class: "q-table"
        }, t)
    ]);
}
const comps = {
    list: QList,
    table: QMarkupTable
}, typeOptions = [
    "list",
    "table",
    "__qtable"
];
var QVirtualScroll = createComponent({
    name: "QVirtualScroll",
    props: {
        ...useVirtualScrollProps,
        type: {
            type: String,
            default: "list",
            validator: (e)=>typeOptions.includes(e)
        },
        items: {
            type: Array,
            default: ()=>[]
        },
        itemsFn: Function,
        itemsSize: Number,
        scrollTarget: {
            default: void 0
        }
    },
    setup (e154, { slots: t124 , attrs: o81  }) {
        let n;
        const a = _vue.ref(null), l = _vue.computed(()=>e154.itemsSize >= 0 && void 0 !== e154.itemsFn ? parseInt(e154.itemsSize, 10) : Array.isArray(e154.items) ? e154.items.length : 0
        ), { virtualScrollSliceRange: i , localResetVirtualScroll: r , padVirtualScroll: s , onVirtualScrollEvt: u  } = useVirtualScroll({
            virtualScrollLength: l,
            getVirtualScrollTarget: m,
            getVirtualScrollEl: v
        }), c = _vue.computed(()=>{
            if (0 === l.value) return [];
            const t125 = (e, t)=>({
                    index: i.value.from + t,
                    item: e
                })
            ;
            return void 0 === e154.itemsFn ? e154.items.slice(i.value.from, i.value.to).map(t125) : e154.itemsFn(i.value.from, i.value.to - i.value.from).map(t125);
        }), d = _vue.computed(()=>"q-virtual-scroll q-virtual-scroll" + (!0 === e154.virtualScrollHorizontal ? "--horizontal" : "--vertical") + (void 0 !== e154.scrollTarget ? "" : " scroll")
        ), p = _vue.computed(()=>void 0 !== e154.scrollTarget ? {
            } : {
                tabindex: 0
            }
        );
        function v() {
            return a.value.$el || a.value;
        }
        function m() {
            return n;
        }
        function f() {
            n = getScrollTarget(v(), e154.scrollTarget), n.addEventListener("scroll", u, listenOpts.passive);
        }
        function g() {
            void 0 !== n && (n.removeEventListener("scroll", u, listenOpts.passive), n = void 0);
        }
        function b() {
            let o = s("list" === e154.type ? "div" : "tbody", c.value.map(t124.default));
            return void 0 !== t124.before && (o = t124.before().concat(o)), hMergeSlot(t124.after, o);
        }
        return _vue.watch(l, ()=>{
            r();
        }), _vue.watch(()=>e154.scrollTarget
        , ()=>{
            g(), f();
        }), _vue.onBeforeMount(()=>{
            r();
        }), _vue.onMounted(()=>{
            f();
        }), _vue.onBeforeUnmount(()=>{
            g();
        }), ()=>{
            if (void 0 !== t124.default) return "__qtable" === e154.type ? getTableMiddle({
                ref: a,
                class: "q-table__middle " + d.value
            }, b()) : _vue.h(comps[e154.type], {
                ...o81,
                ref: a,
                class: [
                    o81.class,
                    d.value
                ],
                ...p.value
            }, b);
            console.error("QVirtualScroll: default scoped slot is required for rendering");
        };
    }
});
function sortDate(e, t) {
    return new Date(e) - new Date(t);
}
const useTableSortProps = {
    sortMethod: Function,
    binaryStateSort: Boolean,
    columnSortOrder: {
        type: String,
        validator: (e)=>"ad" === e || "da" === e
        ,
        default: "ad"
    }
};
function useTableSort(e155, t126, o82, n65) {
    const a37 = _vue.computed(()=>{
        const { sortBy: e  } = t126.value;
        return e && o82.value.find((t)=>t.name === e
        ) || null;
    }), l26 = _vue.computed(()=>void 0 !== e155.sortMethod ? e155.sortMethod : (e156, t127, n66)=>{
            const a = o82.value.find((e)=>e.name === t127
            );
            if (void 0 === a || void 0 === a.field) return e156;
            const l = !0 === n66 ? -1 : 1, i = "function" === typeof a.field ? (e)=>a.field(e)
             : (e)=>e[a.field]
            ;
            return e156.sort((e157, t)=>{
                let o = i(e157), n = i(t);
                return null === o || void 0 === o ? -1 * l : null === n || void 0 === n ? 1 * l : void 0 !== a.sort ? a.sort(o, n, e157, t) * l : !0 === isNumber(o) && !0 === isNumber(n) ? (o - n) * l : !0 === isDate(o) && !0 === isDate(n) ? sortDate(o, n) * l : "boolean" === typeof o && "boolean" === typeof n ? (o - n) * l : ([o, n] = [
                    o,
                    n
                ].map((e)=>(e + "").toLocaleString().toLowerCase()
                ), o < n ? -1 * l : o === n ? 0 : l);
            });
        }
    );
    function i21(a) {
        let l = e155.columnSortOrder;
        if (a === Object(a)) a.sortOrder && (l = a.sortOrder), a = a.name;
        else {
            const e158 = o82.value.find((e)=>e.name === a
            );
            void 0 !== e158 && e158.sortOrder && (l = e158.sortOrder);
        }
        let { sortBy: i , descending: r  } = t126.value;
        i !== a ? (i = a, r = "da" === l) : !0 === e155.binaryStateSort ? r = !r : !0 === r ? "ad" === l ? i = null : r = !1 : "ad" === l ? r = !0 : i = null, n65({
            sortBy: i,
            descending: r,
            page: 1
        });
    }
    return {
        columnToSort: a37,
        computedSortMethod: l26,
        sort: i21
    };
}
const useTableFilterProps = {
    filter: [
        String,
        Object
    ],
    filterMethod: Function
};
function useTableFilter(e159, t128) {
    const o83 = _vue.computed(()=>void 0 !== e159.filterMethod ? e159.filterMethod : (e160, t129, o84, n)=>{
            const a = t129 ? t129.toLowerCase() : "";
            return e160.filter((e)=>o84.some((t)=>{
                    const o = n(t, e) + "", l = "undefined" === o || "null" === o ? "" : o.toLowerCase();
                    return -1 !== l.indexOf(a);
                })
            );
        }
    );
    return _vue.watch(()=>e159.filter
    , ()=>{
        _vue.nextTick(()=>{
            t128({
                page: 1
            }, !0);
        });
    }, {
        deep: !0
    }), {
        computedFilterMethod: o83
    };
}
function samePagination(e, t) {
    for(const o in t)if (t[o] !== e[o]) return !1;
    return !0;
}
function fixPagination(e) {
    return e.page < 1 && (e.page = 1), void 0 !== e.rowsPerPage && e.rowsPerPage < 1 && (e.rowsPerPage = 0), e;
}
const useTablePaginationProps = {
    pagination: Object,
    rowsPerPageOptions: {
        type: Array,
        default: ()=>[
                5,
                7,
                10,
                15,
                20,
                25,
                50,
                0
            ]
    },
    "onUpdate:pagination": [
        Function,
        Array
    ]
};
function useTablePaginationState(e161, t130) {
    const { props: o , emit: n  } = e161, a = _vue.ref(Object.assign({
        sortBy: null,
        descending: !1,
        page: 1,
        rowsPerPage: o.rowsPerPageOptions.length > 0 ? o.rowsPerPageOptions[0] : 5
    }, o.pagination)), l = _vue.computed(()=>{
        const e = void 0 !== o["onUpdate:pagination"] ? {
            ...a.value,
            ...o.pagination
        } : a.value;
        return fixPagination(e);
    }), i = _vue.computed(()=>void 0 !== l.value.rowsNumber
    );
    function r(e) {
        s17({
            pagination: e,
            filter: o.filter
        });
    }
    function s17(e = {
    }) {
        _vue.nextTick(()=>{
            n("request", {
                pagination: e.pagination || l.value,
                filter: e.filter || o.filter,
                getCellValue: t130
            });
        });
    }
    function u(e, t) {
        const s = fixPagination({
            ...l.value,
            ...e
        });
        !0 !== samePagination(l.value, s) ? !0 !== i.value ? void 0 !== o.pagination && void 0 !== o["onUpdate:pagination"] ? n("update:pagination", s) : a.value = s : r(s) : !0 === i.value && !0 === t && r(s);
    }
    return {
        innerPagination: a,
        computedPagination: l,
        isServerSide: i,
        requestServerInteraction: s17,
        setPagination: u
    };
}
function useTablePagination(e162, t131, o, n67, a, l) {
    const { props: i , emit: r , proxy: { $q: s  }  } = e162, u = _vue.computed(()=>!0 === n67.value ? o.value.rowsNumber || 0 : l.value
    ), c = _vue.computed(()=>{
        const { page: e , rowsPerPage: t  } = o.value;
        return (e - 1) * t;
    }), d = _vue.computed(()=>{
        const { page: e , rowsPerPage: t  } = o.value;
        return e * t;
    }), p = _vue.computed(()=>1 === o.value.page
    ), v = _vue.computed(()=>0 === o.value.rowsPerPage ? 1 : Math.max(1, Math.ceil(u.value / o.value.rowsPerPage))
    ), m = _vue.computed(()=>0 === d.value || o.value.page >= v.value
    ), f = _vue.computed(()=>{
        const e163 = i.rowsPerPageOptions.includes(t131.value.rowsPerPage) ? i.rowsPerPageOptions : [
            t131.value.rowsPerPage
        ].concat(i.rowsPerPageOptions);
        return e163.map((e)=>({
                label: 0 === e ? s.lang.table.allRows : "" + e,
                value: e
            })
        );
    });
    function h() {
        a({
            page: 1
        });
    }
    function g() {
        const { page: e  } = o.value;
        e > 1 && a({
            page: e - 1
        });
    }
    function b() {
        const { page: e , rowsPerPage: t  } = o.value;
        d.value > 0 && e * t < u.value && a({
            page: e + 1
        });
    }
    function y() {
        a({
            page: v.value
        });
    }
    return _vue.watch(v, (e, t)=>{
        if (e === t) return;
        const n = o.value.page;
        e && !n ? a({
            page: 1
        }) : e < n && a({
            page: e
        });
    }), void 0 !== i["onUpdate:pagination"] && r("update:pagination", {
        ...o.value
    }), {
        firstRowIndex: c,
        lastRowIndex: d,
        isFirstPage: p,
        isLastPage: m,
        pagesNumber: v,
        computedRowsPerPageOptions: f,
        computedRowsNumber: u,
        firstPage: h,
        prevPage: g,
        nextPage: b,
        lastPage: y
    };
}
const useTableRowSelectionProps = {
    selection: {
        type: String,
        default: "none",
        validator: (e)=>[
                "single",
                "multiple",
                "none"
            ].includes(e)
    },
    selected: {
        type: Array,
        default: ()=>[]
    }
}, useTableRowSelectionEmits = [
    "update:selected",
    "selection"
];
function useTableRowSelection(e164, t132, o85, n) {
    const a38 = _vue.computed(()=>{
        const t = {
        };
        return e164.selected.map(n.value).forEach((e)=>{
            t[e] = !0;
        }), t;
    }), l27 = _vue.computed(()=>{
        return "none" !== e164.selection;
    }), i = _vue.computed(()=>{
        return "single" === e164.selection;
    }), r12 = _vue.computed(()=>{
        return "multiple" === e164.selection;
    }), s18 = _vue.computed(()=>o85.value.length > 0 && o85.value.every((e)=>!0 === a38.value[n.value(e)]
        )
    ), u = _vue.computed(()=>!0 !== s18.value && o85.value.some((e)=>!0 === a38.value[n.value(e)]
        )
    ), c = _vue.computed(()=>e164.selected.length
    );
    function d(e) {
        return !0 === a38.value[e];
    }
    function p() {
        t132("update:selected", []);
    }
    function v(o, a, l, r) {
        t132("selection", {
            rows: a,
            added: l,
            keys: o,
            evt: r
        });
        const s = !0 === i.value ? !0 === l ? a : [] : !0 === l ? e164.selected.concat(a) : e164.selected.filter((e)=>!1 === o.includes(n.value(e))
        );
        t132("update:selected", s);
    }
    return {
        hasSelectionMode: l27,
        singleSelection: i,
        multipleSelection: r12,
        allRowsSelected: s18,
        someRowsSelected: u,
        rowsSelectedNumber: c,
        isRowSelected: d,
        clearSelection: p,
        updateSelection: v
    };
}
function getVal(e) {
    return Array.isArray(e) ? e.slice() : [];
}
const useTableRowExpandProps = {
    expanded: Array
}, useTableRowExpandEmits = [
    "update:expanded"
];
function useTableRowExpand(e165, t133) {
    const o = _vue.ref(getVal(e165.expanded));
    function n68(e) {
        return o.value.includes(e);
    }
    function a(n) {
        void 0 !== e165.expanded ? t133("update:expanded", n) : o.value = n;
    }
    function l28(e, t) {
        const n = o.value.slice(), l = n.indexOf(e);
        !0 === t ? -1 === l && (n.push(e), a(n)) : -1 !== l && (n.splice(l, 1), a(n));
    }
    return _vue.watch(()=>e165.expanded
    , (e)=>{
        o.value = getVal(e);
    }), {
        isRowExpanded: n68,
        setExpanded: a,
        updateExpanded: l28
    };
}
const useTableColumnSelectionProps = {
    visibleColumns: Array
};
function useTableColumnSelection(e166, t134, o86) {
    const n69 = _vue.computed(()=>{
        if (void 0 !== e166.columns) return e166.columns;
        const t = e166.rows[0];
        return void 0 !== t ? Object.keys(t).map((e)=>({
                name: e,
                label: e.toUpperCase(),
                field: e,
                align: isNumber(t[e]) ? "right" : "left",
                sortable: !0
            })
        ) : [];
    }), a39 = _vue.computed(()=>{
        const { sortBy: o , descending: a  } = t134.value, l = void 0 !== e166.visibleColumns ? n69.value.filter((t)=>!0 === t.required || !0 === e166.visibleColumns.includes(t.name)
        ) : n69.value;
        return l.map((e)=>{
            const t135 = e.align || "right", n = `text-${t135}`;
            return {
                ...e,
                align: t135,
                __iconClass: `q-table__sort-icon q-table__sort-icon--${t135}`,
                __thClass: n + (void 0 !== e.headerClasses ? " " + e.headerClasses : "") + (!0 === e.sortable ? " sortable" : "") + (e.name === o ? ` sorted ${!0 === a ? "sort-desc" : ""}` : ""),
                __tdStyle: void 0 !== e.style ? "function" !== typeof e.style ? ()=>e.style
                 : e.style : ()=>null
                ,
                __tdClass: void 0 !== e.classes ? "function" !== typeof e.classes ? ()=>n + " " + e.classes
                 : (t)=>n + " " + e.classes(t)
                 : ()=>n
            };
        });
    }), l29 = _vue.computed(()=>{
        const e = {
        };
        return a39.value.forEach((t)=>{
            e[t.name] = t;
        }), e;
    }), i = _vue.computed(()=>{
        return void 0 !== e166.tableColspan ? e166.tableColspan : a39.value.length + (!0 === o86.value ? 1 : 0);
    });
    return {
        colList: n69,
        computedCols: a39,
        computedColsMap: l29,
        computedColspan: i
    };
}
const bottomClass = "q-table__bottom row items-center", commonVirtPropsObj = {
};
commonVirtPropsList.forEach((e)=>{
    commonVirtPropsObj[e] = {
    };
});
var QTable = createComponent({
    name: "QTable",
    props: {
        rows: {
            type: Array,
            default: ()=>[]
        },
        rowKey: {
            type: [
                String,
                Function
            ],
            default: "id"
        },
        columns: Array,
        loading: Boolean,
        iconFirstPage: String,
        iconPrevPage: String,
        iconNextPage: String,
        iconLastPage: String,
        title: String,
        hideHeader: Boolean,
        grid: Boolean,
        gridHeader: Boolean,
        dense: Boolean,
        flat: Boolean,
        bordered: Boolean,
        square: Boolean,
        separator: {
            type: String,
            default: "horizontal",
            validator: (e)=>[
                    "horizontal",
                    "vertical",
                    "cell",
                    "none"
                ].includes(e)
        },
        wrapCells: Boolean,
        virtualScroll: Boolean,
        ...commonVirtPropsObj,
        noDataLabel: String,
        noResultsLabel: String,
        loadingLabel: String,
        selectedRowsLabel: Function,
        rowsPerPageLabel: String,
        paginationLabel: Function,
        color: {
            type: String,
            default: "grey-8"
        },
        titleClass: [
            String,
            Array,
            Object
        ],
        tableStyle: [
            String,
            Array,
            Object
        ],
        tableClass: [
            String,
            Array,
            Object
        ],
        tableHeaderStyle: [
            String,
            Array,
            Object
        ],
        tableHeaderClass: [
            String,
            Array,
            Object
        ],
        cardContainerClass: [
            String,
            Array,
            Object
        ],
        cardContainerStyle: [
            String,
            Array,
            Object
        ],
        cardStyle: [
            String,
            Array,
            Object
        ],
        cardClass: [
            String,
            Array,
            Object
        ],
        hideBottom: Boolean,
        hideSelectedBanner: Boolean,
        hideNoData: Boolean,
        hidePagination: Boolean,
        onRowClick: Function,
        onRowDblclick: Function,
        onRowContextmenu: Function,
        ...useDarkProps,
        ...useFullscreenProps,
        ...useTableColumnSelectionProps,
        ...useTableFilterProps,
        ...useTablePaginationProps,
        ...useTableRowExpandProps,
        ...useTableRowSelectionProps,
        ...useTableSortProps
    },
    emits: [
        "request",
        "virtual-scroll",
        ...useFullscreenEmits,
        ...useTableRowExpandEmits,
        ...useTableRowSelectionEmits
    ],
    setup (e167, { slots: t136 , emit: o87  }) {
        const n70 = _vue.getCurrentInstance(), { proxy: { $q: a40  }  } = n70, l30 = useDark(e167, a40), { inFullscreen: i22 , toggleFullscreen: r13  } = useFullscreen(), s19 = _vue.computed(()=>"function" === typeof e167.rowKey ? e167.rowKey : (t)=>t[e167.rowKey]
        ), u11 = _vue.ref(null), c11 = _vue.ref(null), d10 = _vue.computed(()=>!0 !== e167.grid && !0 === e167.virtualScroll
        ), p4 = _vue.computed(()=>" q-table__card" + (!0 === l30.value ? " q-table__card--dark q-dark" : "") + (!0 === e167.square ? " q-table--square" : "") + (!0 === e167.flat ? " q-table--flat" : "") + (!0 === e167.bordered ? " q-table--bordered" : "")
        ), v = _vue.computed(()=>`q-table__container q-table--${e167.separator}-separator column no-wrap` + (!0 === e167.loading ? " q-table--loading" : "") + (!0 === e167.grid ? " q-table--grid" : p4.value) + (!0 === l30.value ? " q-table--dark" : "") + (!0 === e167.dense ? " q-table--dense" : "") + (!1 === e167.wrapCells ? " q-table--no-wrap" : "") + (!0 === i22.value ? " fullscreen scroll" : "")
        ), m = _vue.computed(()=>v.value + (!0 === e167.loading ? " q-table--loading" : "")
        );
        _vue.watch(()=>e167.tableStyle + e167.tableClass + e167.tableHeaderStyle + e167.tableHeaderClass + v.value
        , ()=>{
            !0 === d10.value && null !== c11.value && c11.value.reset();
        });
        const { innerPagination: f , computedPagination: g , isServerSide: b , requestServerInteraction: y , setPagination: S  } = useTablePaginationState(n70, me), { computedFilterMethod: w  } = useTableFilter(e167, S), { isRowExpanded: x , setExpanded: C , updateExpanded: k  } = useTableRowExpand(e167, o87), _ = _vue.computed(()=>{
            let t = e167.rows;
            if (!0 === b.value || 0 === t.length) return t;
            const { sortBy: o , descending: n  } = g.value;
            return e167.filter && (t = w.value(t, e167.filter, R.value, me)), null !== V.value && (t = I.value(e167.rows === t ? t.slice() : t, o, n)), t;
        }), q = _vue.computed(()=>_.value.length
        ), T = _vue.computed(()=>{
            let t = _.value;
            if (!0 === b.value) return t;
            const { rowsPerPage: o  } = g.value;
            return 0 !== o && (0 === N.value && e167.rows !== t ? t.length > j.value && (t = t.slice(0, j.value)) : t = t.slice(N.value, j.value)), t;
        }), { hasSelectionMode: P , singleSelection: $ , multipleSelection: M , allRowsSelected: B , someRowsSelected: Q , rowsSelectedNumber: E , isRowSelected: O , clearSelection: L , updateSelection: z  } = useTableRowSelection(e167, o87, T, s19), { colList: F , computedCols: R , computedColsMap: D , computedColspan: A  } = useTableColumnSelection(e167, g, P), { columnToSort: V , computedSortMethod: I , sort: H  } = useTableSort(e167, g, F, S), { firstRowIndex: N , lastRowIndex: j , isFirstPage: U , isLastPage: K , pagesNumber: W , computedRowsPerPageOptions: Y , computedRowsNumber: G , firstPage: X , prevPage: Z , nextPage: J , lastPage: ee  } = useTablePagination(n70, f, g, b, S, q), te = _vue.computed(()=>0 === T.value.length
        ), oe = _vue.computed(()=>{
            const t = {
            };
            return commonVirtPropsList.forEach((o)=>{
                t[o] = e167[o];
            }), void 0 === t.virtualScrollItemSize && (t.virtualScrollItemSize = !0 === e167.dense ? 28 : 48), t;
        });
        function ne() {
            !0 === d10.value && c11.value.reset();
        }
        function ae() {
            if (!0 === e167.grid) return Te();
            const o = !0 !== e167.hideHeader ? be : null;
            if (!0 === d10.value) {
                const n = t136["top-row"], a = t136["bottom-row"], l = {
                    default: (e)=>se(e.item, t136.body, e.index)
                };
                if (void 0 !== n) {
                    const e = _vue.h("tbody", n({
                        cols: R.value
                    }));
                    l.before = null === o ? ()=>e
                     : ()=>[
                            o()
                        ].concat(e)
                    ;
                } else null !== o && (l.before = o);
                return void 0 !== a && (l.after = ()=>_vue.h("tbody", a({
                        cols: R.value
                    }))
                ), _vue.h(QVirtualScroll, {
                    ref: c11,
                    class: e167.tableClass,
                    style: e167.tableStyle,
                    ...oe.value,
                    items: T.value,
                    type: "__qtable",
                    tableColspan: A.value,
                    onVirtualScroll: ie
                }, l);
            }
            const n = [
                ue()
            ];
            return null !== o && n.unshift(o()), getTableMiddle({
                class: [
                    "q-table__middle scroll",
                    e167.tableClass
                ],
                style: e167.tableStyle
            }, n);
        }
        function le(e, t) {
            if (null !== c11.value) return void c11.value.scrollTo(e, t);
            e = parseInt(e, 10);
            const n = u11.value.querySelector(`tbody tr:nth-of-type(${e + 1})`);
            if (null !== n) {
                const t = u11.value.querySelector(".q-table__middle.scroll"), { offsetTop: a  } = n, l = a < t.scrollTop ? "decrease" : "increase";
                t.scrollTop = a, o87("virtual-scroll", {
                    index: e,
                    from: 0,
                    to: f.value.rowsPerPage - 1,
                    direction: l
                });
            }
        }
        function ie(e) {
            o87("virtual-scroll", e);
        }
        function re() {
            return [
                _vue.h(QLinearProgress, {
                    class: "q-table__linear-progress",
                    color: e167.color,
                    dark: l30.value,
                    indeterminate: !0,
                    trackColor: "transparent"
                })
            ];
        }
        function se(n, a41, i) {
            const r = s19.value(n), u = O(r);
            if (void 0 !== a41) return a41(ce({
                key: r,
                row: n,
                pageIndex: i,
                __trClass: u ? "selected" : ""
            }));
            const c = t136["body-cell"], d = R.value.map((e)=>{
                const o = t136[`body-cell-${e.name}`], a = void 0 !== o ? o : c;
                return void 0 !== a ? a(de({
                    key: r,
                    row: n,
                    pageIndex: i,
                    col: e
                })) : _vue.h("td", {
                    class: e.__tdClass(n),
                    style: e.__tdStyle(n)
                }, me(e, n));
            });
            if (!0 === P.value) {
                const o = t136["body-selection"], a = void 0 !== o ? o(pe({
                    key: r,
                    row: n,
                    pageIndex: i
                })) : [
                    _vue.h(QCheckbox, {
                        modelValue: u,
                        color: e167.color,
                        dark: l30.value,
                        dense: e167.dense,
                        "onUpdate:modelValue": (e, t)=>{
                            z([
                                r
                            ], [
                                n
                            ], e, t);
                        }
                    })
                ];
                d.unshift(_vue.h("td", {
                    class: "q-table--col-auto-width"
                }, a));
            }
            const p = {
                key: r,
                class: {
                    selected: u
                }
            };
            return void 0 !== e167.onRowClick && (p.class["cursor-pointer"] = !0, p.onClick = (e)=>{
                o87("RowClick", e, n, i);
            }), void 0 !== e167.onRowDblclick && (p.class["cursor-pointer"] = !0, p.onDblclick = (e)=>{
                o87("RowDblclick", e, n, i);
            }), void 0 !== e167.onRowContextmenu && (p.class["cursor-pointer"] = !0, p.onContextmenu = (e)=>{
                o87("RowContextmenu", e, n, i);
            }), _vue.h("tr", p, d);
        }
        function ue() {
            const e = t136.body, o88 = t136["top-row"], n = t136["bottom-row"];
            let a = T.value.map((t, o)=>se(t, e, o)
            );
            return void 0 !== o88 && (a = o88({
                cols: R.value
            }).concat(a)), void 0 !== n && (a = a.concat(n({
                cols: R.value
            }))), _vue.h("tbody", a);
        }
        function ce(e) {
            return ve(e), e.cols = e.cols.map((t)=>{
                const o = {
                    ...t
                };
                return Object.defineProperty(o, "value", {
                    get: ()=>me(t, e.row)
                    ,
                    configurable: !0,
                    enumerable: !0
                }), o;
            }), e;
        }
        function de(e) {
            return ve(e), Object.defineProperty(e, "value", {
                get: ()=>me(e.col, e.row)
                ,
                configurable: !0,
                enumerable: !0
            }), e;
        }
        function pe(e) {
            return ve(e), e;
        }
        function ve(t) {
            Object.assign(t, {
                cols: R.value,
                colsMap: D.value,
                sort: H,
                rowIndex: N.value + t.pageIndex,
                color: e167.color,
                dark: l30.value,
                dense: e167.dense
            }), !0 === P.value && Object.defineProperty(t, "selected", {
                get: ()=>O(t.key)
                ,
                set: (e, o)=>{
                    z([
                        t.key
                    ], [
                        t.row
                    ], e, o);
                },
                configurable: !0,
                enumerable: !0
            }), Object.defineProperty(t, "expand", {
                get: ()=>x(t.key)
                ,
                set: (e)=>{
                    k(t.key, e);
                },
                configurable: !0,
                enumerable: !0
            });
        }
        function me(e, t) {
            const o = "function" === typeof e.field ? e.field(t) : t[e.field];
            return void 0 !== e.format ? e.format(o, t) : o;
        }
        const fe = _vue.computed(()=>({
                pagination: g.value,
                pagesNumber: W.value,
                isFirstPage: U.value,
                isLastPage: K.value,
                firstPage: X,
                prevPage: Z,
                nextPage: J,
                lastPage: ee,
                inFullscreen: i22.value,
                toggleFullscreen: r13
            })
        );
        function he() {
            const o = t136.top, n = t136["top-left"], a = t136["top-right"], l = t136["top-selection"], i = !0 === P.value && void 0 !== l && E.vaue > 0, r = "q-table__top relative-position row items-center";
            if (void 0 !== o) return _vue.h("div", {
                class: r
            }, [
                o(fe.value)
            ]);
            let s;
            return !0 === i ? s = l(fe.value).slice() : (s = [], void 0 !== n ? s.push(_vue.h("div", {
                class: "q-table-control"
            }, [
                n(fe.value)
            ])) : e167.title && s.push(_vue.h("div", {
                class: "q-table__control"
            }, [
                _vue.h("div", {
                    class: [
                        "q-table__title",
                        e167.titleClass
                    ]
                }, e167.title)
            ]))), void 0 !== a && (s.push(_vue.h("div", {
                class: "q-table__separator col"
            })), s.push(_vue.h("div", {
                class: "q-table__control"
            }, [
                a(fe.value)
            ]))), 0 !== s.length ? _vue.h("div", {
                class: r
            }, s) : void 0;
        }
        const ge = _vue.computed(()=>!0 === Q.value ? null : B.value
        );
        function be() {
            const o = ye();
            return !0 === e167.loading && void 0 === t136.loading && o.push(_vue.h("tr", {
                class: "q-table__progress"
            }, [
                _vue.h("th", {
                    class: "relative-position",
                    colspan: A.value
                }, re())
            ])), _vue.h("thead", o);
        }
        function ye() {
            const o89 = t136.header, n = t136["header-cell"];
            if (void 0 !== o89) return o89(Se({
                header: !0
            })).slice();
            const a42 = R.value.map((e)=>{
                const o = t136[`header-cell-${e.name}`], a = void 0 !== o ? o : n, l = Se({
                    col: e
                });
                return void 0 !== a ? a(l) : _vue.h(QTh, {
                    key: e.name,
                    props: l
                }, ()=>e.label
                );
            });
            if (!0 === $.value && !0 !== e167.grid) a42.unshift(_vue.h("th", {
                class: "q-table--col-auto-width"
            }, " "));
            else if (!0 === M.value) {
                const o = t136["header-selection"], n = void 0 !== o ? o(Se({
                })) : [
                    _vue.h(QCheckbox, {
                        color: e167.color,
                        modelValue: ge.value,
                        dark: l30.value,
                        dense: e167.dense,
                        "onUpdate:modelValue": we
                    })
                ];
                a42.unshift(_vue.h("th", {
                    class: "q-table--col-auto-width"
                }, n));
            }
            return [
                _vue.h("tr", {
                    class: e167.tableHeaderClass,
                    style: e167.tableHeaderStyle
                }, a42)
            ];
        }
        function Se(t) {
            return Object.assign(t, {
                cols: R.value,
                sort: H,
                colsMap: D.value,
                color: e167.color,
                dark: l30.value,
                dense: e167.dense
            }), !0 === M.value && Object.defineProperty(t, "selected", {
                get: ()=>ge.value
                ,
                set: we,
                configurable: !0,
                enumerable: !0
            }), t;
        }
        function we(e) {
            !0 === Q.value && (e = !1), z(T.value.map(s19.value), T.value, e);
        }
        const xe = _vue.computed(()=>{
            const t = [
                e167.iconFirstPage || a40.iconSet.table.firstPage,
                e167.iconPrevPage || a40.iconSet.table.prevPage,
                e167.iconNextPage || a40.iconSet.table.nextPage,
                e167.iconLastPage || a40.iconSet.table.lastPage
            ];
            return !0 === a40.lang.rtl ? t.reverse() : t;
        });
        function Ce() {
            if (!0 === e167.hideBottom) return;
            if (!0 === te.value) {
                if (!0 === e167.hideNoData) return;
                const o = !0 === e167.loading ? e167.loadingLabel || a40.lang.table.loading : e167.filter ? e167.noResultsLabel || a40.lang.table.noResults : e167.noDataLabel || a40.lang.table.noData, n = t136["no-data"], l = void 0 !== n ? [
                    n({
                        message: o,
                        icon: a40.iconSet.table.warning,
                        filter: e167.filter
                    })
                ] : [
                    _vue.h(QIcon, {
                        class: "q-table__bottom-nodata-icon",
                        name: a40.iconSet.table.warning
                    }),
                    o
                ];
                return _vue.h("div", {
                    class: bottomClass + " q-table__bottom--nodata"
                }, l);
            }
            const o = t136.bottom;
            if (void 0 !== o) return _vue.h("div", {
                class: bottomClass
            }, [
                o(fe.value)
            ]);
            const n = !0 !== e167.hideSelectedBanner && !0 === P.value && E.value > 0 ? [
                _vue.h("div", {
                    class: "q-table__control"
                }, [
                    _vue.h("div", [
                        (e167.selectedRowsLabel || a40.lang.table.selectedRecords)(E.value)
                    ])
                ])
            ] : [];
            return !0 !== e167.hidePagination ? _vue.h("div", {
                class: bottomClass + " justify-end"
            }, _e(n)) : n.length > 0 ? _vue.h("div", {
                class: bottomClass
            }, n) : void 0;
        }
        function ke(e) {
            S({
                page: 1,
                rowsPerPage: e.value
            });
        }
        function _e(o) {
            let n;
            const { rowsPerPage: i  } = g.value, r = e167.paginationLabel || a40.lang.table.pagination, s = t136.pagination, u = e167.rowsPerPageOptions.length > 1;
            if (o.push(_vue.h("div", {
                class: "q-table__separator col"
            })), !0 === u && o.push(_vue.h("div", {
                class: "q-table__control"
            }, [
                _vue.h("span", {
                    class: "q-table__bottom-item"
                }, [
                    e167.rowsPerPageLabel || a40.lang.table.recordsPerPage
                ]),
                _vue.h(QSelect, {
                    class: "q-table__select inline q-table__bottom-item",
                    color: e167.color,
                    modelValue: i,
                    options: Y.value,
                    displayValue: 0 === i ? a40.lang.table.allRows : i,
                    dark: l30.value,
                    borderless: !0,
                    dense: !0,
                    optionsDense: !0,
                    optionsCover: !0,
                    "onUpdate:modelValue": ke
                })
            ])), void 0 !== s) n = s(fe.value);
            else if (n = [
                _vue.h("span", 0 !== i ? {
                    class: "q-table__bottom-item"
                } : {
                }, [
                    i ? r(N.value + 1, Math.min(j.value, G.value), G.value) : r(1, q.value, G.value)
                ])
            ], 0 !== i && W.value > 1) {
                const t = {
                    color: e167.color,
                    round: !0,
                    dense: !0,
                    flat: !0
                };
                !0 === e167.dense && (t.size = "sm"), W.value > 2 && n.push(_vue.h(QBtn, {
                    key: "pgFirst",
                    ...t,
                    icon: xe.value[0],
                    disable: U.value,
                    onClick: X
                })), n.push(_vue.h(QBtn, {
                    key: "pgPrev",
                    ...t,
                    icon: xe.value[1],
                    disable: U.value,
                    onClick: Z
                }), _vue.h(QBtn, {
                    key: "pgNext",
                    ...t,
                    icon: xe.value[2],
                    disable: K.value,
                    onClick: J
                })), W.value > 2 && n.push(_vue.h(QBtn, {
                    key: "pgLast",
                    ...t,
                    icon: xe.value[3],
                    disable: K.value,
                    onClick: ee
                }));
            }
            return o.push(_vue.h("div", {
                class: "q-table__control"
            }, n)), o;
        }
        function qe() {
            const o = !0 === e167.gridHeader ? [
                _vue.h("table", {
                    class: "q-table"
                }, [
                    be()
                ])
            ] : !0 === e167.loading && void 0 === t136.loading ? re() : void 0;
            return _vue.h("div", {
                class: "q-table__middle"
            }, o);
        }
        function Te() {
            const n71 = void 0 !== t136.item ? t136.item : (n)=>{
                const a = n.cols.map((e)=>_vue.h("div", {
                        class: "q-table__grid-item-row"
                    }, [
                        _vue.h("div", {
                            class: "q-table__grid-item-title"
                        }, [
                            e.label
                        ]),
                        _vue.h("div", {
                            class: "q-table__grid-item-value"
                        }, [
                            e.value
                        ])
                    ])
                );
                if (!0 === P.value) {
                    const o = t136["body-selection"], i = void 0 !== o ? o(n) : [
                        _vue.h(QCheckbox, {
                            modelValue: n.selected,
                            color: e167.color,
                            dark: l30.value,
                            dense: e167.dense,
                            "onUpdate:modelValue": (e, t)=>{
                                z([
                                    n.key
                                ], [
                                    n.row
                                ], e, t);
                            }
                        })
                    ];
                    a.unshift(_vue.h("div", {
                        class: "q-table__grid-item-row"
                    }, i), _vue.h(QSeparator, {
                        dark: l30.value
                    }));
                }
                const i = {
                    class: [
                        "q-table__grid-item-card" + p4.value,
                        e167.cardClass
                    ],
                    style: e167.cardStyle
                };
                return void 0 === e167.onRowClick && void 0 === e167.onRowDblclick || (i.class[0] += " cursor-pointer", void 0 !== e167.onRowClick && (i.onClick = (e)=>{
                    o87("RowClick", e, n.row, n.pageIndex);
                }), void 0 !== e167.onRowDblclick && (i.onDblclick = (e)=>{
                    o87("RowDblclick", e, n.row, n.pageIndex);
                })), _vue.h("div", {
                    class: "q-table__grid-item col-xs-12 col-sm-6 col-md-4 col-lg-3" + (!0 === n.selected ? "q-table__grid-item--selected" : "")
                }, [
                    _vue.h("div", i, a)
                ]);
            };
            return _vue.h("div", {
                class: [
                    "q-table__grid-content row",
                    e167.cardContainerClass
                ],
                style: e167.cardContainerStyle
            }, T.value.map((e, t)=>{
                return n71(ce({
                    key: s19.value(e),
                    row: e,
                    pageIndex: t
                }));
            }));
        }
        return Object.assign(n70.proxy, {
            requestServerInteraction: y,
            setPagination: S,
            firstPage: X,
            prevPage: Z,
            nextPage: J,
            lastPage: ee,
            isRowSelected: O,
            clearSelection: L,
            isRowExpanded: x,
            setExpanded: C,
            sort: H,
            resetVirtualScroll: ne,
            scrollTo: le,
            getCellValue: me
        }), Object.defineProperty(n70.proxy, "filteredSortedRows", {
            get: ()=>_.value
            ,
            enumerable: !0
        }), Object.defineProperty(n70.proxy, "computedRows", {
            get: ()=>T.value
            ,
            enumerable: !0
        }), Object.defineProperty(n70.proxy, "computedRowsNumber", {
            get: ()=>G.value
            ,
            enumerable: !0
        }), ()=>{
            const o = [
                he()
            ], n = {
                ref: u11,
                class: m.value
            };
            return !0 === e167.grid ? o.push(qe()) : Object.assign(n, {
                class: [
                    n.class,
                    e167.cardClass
                ],
                style: e167.cardStyle
            }), o.push(ae(), Ce()), !0 === e167.loading && void 0 !== t136.loading && o.push(t136.loading()), _vue.h("div", n, o);
        };
    }
}), QTr = createComponent({
    name: "QTr",
    props: {
        props: Object,
        noHover: Boolean
    },
    setup (e, { slots: t  }) {
        const o = _vue.computed(()=>"q-tr" + (void 0 === e.props || !0 === e.props.header ? "" : " " + e.props.__trClass) + (!0 === e.noHover ? " q-tr--no-hover" : "")
        );
        return ()=>_vue.h("tr", {
                class: o.value
            }, hSlot(t.default))
        ;
    }
}), QTd = createComponent({
    name: "QTd",
    props: {
        props: Object,
        autoWidth: Boolean,
        noHover: Boolean
    },
    setup (e, { slots: t  }) {
        const o = _vue.getCurrentInstance(), n = _vue.computed(()=>"q-td" + (!0 === e.autoWidth ? " q-table--col-auto-width" : "") + (!0 === e.noHover ? " q-td--no-hover" : "") + " "
        );
        return ()=>{
            if (void 0 === e.props) return _vue.h("td", {
                class: n.value
            }, hSlot(t.default));
            const a = o.vnode.key, l = (void 0 !== e.props.colsMap ? e.props.colsMap[a] : null) || e.props.col;
            if (void 0 === l) return;
            const { row: i  } = e.props;
            return _vue.h("td", {
                class: n.value + l.__tdClass(i),
                style: l.__tdStyle(i)
            }, hSlot(t.default));
        };
    }
}), QRouteTab = createComponent({
    name: "QRouteTab",
    props: {
        ...useRouterLinkProps,
        ...useTabProps,
        to: {
            required: !0
        }
    },
    emits: useTabEmits,
    setup (e, { slots: t , emit: o  }) {
        const n = useRouterLink(), { renderTab: a , $tabs: l  } = useTab(e, t, o, {
            exact: _vue.computed(()=>e.exact
            ),
            ...n
        });
        return _vue.watch(()=>e.name + e.exact + (n.linkRoute.value || {
            }).href
        , ()=>{
            l.verifyRouteModel();
        }), ()=>a(n.linkTag.value, n.linkProps.value)
        ;
    }
});
function getViewByModel(e, t) {
    if (null !== e.hour) {
        if (null === e.minute) return "minute";
        if (!0 === t && null === e.second) return "second";
    }
    return "hour";
}
function getCurrentTime() {
    const e = new Date;
    return {
        hour: e.getHours(),
        minute: e.getMinutes(),
        second: e.getSeconds(),
        millisecond: e.getMilliseconds()
    };
}
var QTime = createComponent({
    name: "QTime",
    props: {
        ...useDarkProps,
        ...useFormProps,
        ...useDatetimeProps,
        mask: {
            default: null
        },
        format24h: {
            type: Boolean,
            default: null
        },
        defaultDate: {
            type: String,
            validator: (e)=>/^-?[\d]+\/[0-1]\d\/[0-3]\d$/.test(e)
        },
        options: Function,
        hourOptions: Array,
        minuteOptions: Array,
        secondOptions: Array,
        withSeconds: Boolean,
        nowBtn: Boolean
    },
    emits: useDatetimeEmits,
    setup (e168, { slots: t137 , emit: o90  }) {
        const { proxy: { $q: n72  }  } = _vue.getCurrentInstance(), a43 = useDark(e168, n72), { tabindex: l31 , headerClass: i23 , getLocale: r14 , getCurrentDate: s  } = useDatetime(e168, n72), u = useFormAttrs(e168), c = useFormInject(u);
        let d, p;
        const v = _vue.ref(null), m = _vue.computed(()=>V()
        ), f = _vue.computed(()=>r14()
        ), g = __splitDate(e168.modelValue, V(), r14(), e168.calendar, I()), b = _vue.ref(getViewByModel(g)), y = _vue.ref(g), S = _vue.ref(null === g.hour || g.hour < 12), w = _vue.computed(()=>`q-time q-time--${!0 === e168.landscape ? "landscape" : "portrait"}` + (!0 === a43.value ? " q-time--dark q-dark" : "") + (!0 === e168.disable ? " disabled" : !0 === e168.readonly ? " q-time--readonly" : "") + (!0 === e168.bordered ? " q-time--bordered" : "") + (!0 === e168.square ? " q-time--square no-border-radius" : "") + (!0 === e168.flat ? " q-time--flat no-shadow" : "")
        ), x = _vue.computed(()=>{
            const e = y.value;
            return {
                hour: null === e.hour ? "--" : !0 === k.value ? pad(e.hour) : String(!0 === S.value ? 0 === e.hour ? 12 : e.hour : e.hour > 12 ? e.hour - 12 : e.hour),
                minute: null === e.minute ? "--" : pad(e.minute),
                second: null === e.second ? "--" : pad(e.second)
            };
        }), C = _vue.computed(()=>I()
        ), k = _vue.computed(()=>null !== e168.format24h ? e168.format24h : n72.lang.date.format24h
        ), _ = _vue.computed(()=>{
            const e = "hour" === b.value, t = !0 === e ? 12 : 60, o = y.value[b.value], n = Math.round(o * (360 / t)) - 180;
            let a = `rotate(${n}deg) translateX(-50%)`;
            return !0 === e && !0 === k.value && y.value.hour >= 12 && (a += " scale(.7)"), {
                transform: a
            };
        }), q = _vue.computed(()=>null !== y.value.hour
        ), T = _vue.computed(()=>!0 === q.value && null !== y.value.minute
        ), P = _vue.computed(()=>void 0 !== e168.hourOptions ? (t)=>e168.hourOptions.includes(t)
             : void 0 !== e168.options ? (t)=>e168.options(t, null, null)
             : null
        ), $ = _vue.computed(()=>void 0 !== e168.minuteOptions ? (t)=>e168.minuteOptions.includes(t)
             : void 0 !== e168.options ? (t)=>e168.options(y.value.hour, t, null)
             : null
        ), M = _vue.computed(()=>void 0 !== e168.secondOptions ? (t)=>e168.secondOptions.includes(t)
             : void 0 !== e168.options ? (t)=>e168.options(y.value.hour, y.value.minute, t)
             : null
        ), B = _vue.computed(()=>{
            if (null === P.value) return null;
            const e = R(0, 11, P.value), t = R(12, 11, P.value);
            return {
                am: e,
                pm: t,
                values: e.values.concat(t.values)
            };
        }), Q = _vue.computed(()=>null !== $.value ? R(0, 59, $.value) : null
        ), E = _vue.computed(()=>null !== M.value ? R(0, 59, M.value) : null
        ), O = _vue.computed(()=>{
            switch(b.value){
                case "hour":
                    return B.value;
                case "minute":
                    return Q.value;
                case "second":
                    return E.value;
            }
        }), L = _vue.computed(()=>{
            let e, t, o = 0, n = 1;
            const a = null !== O.value ? O.value.values : void 0;
            "hour" === b.value ? !0 === k.value ? (e = 0, t = 23) : (e = 0, t = 11, !1 === S.value && (o = 12)) : (e = 0, t = 55, n = 5);
            const l = [];
            for(let i = e, r = e; i <= t; i += n, r++){
                const e = i + o, t = void 0 !== a && !1 === a.includes(e), n = "hour" === b.value && 0 === i ? !0 === k.value ? "00" : "12" : i;
                l.push({
                    val: e,
                    index: r,
                    disable: t,
                    label: n
                });
            }
            return l;
        }), z = _vue.computed(()=>{
            return [
                [
                    TouchPan,
                    j,
                    void 0,
                    {
                        stop: !0,
                        prevent: !0,
                        mouse: !0
                    }
                ]
            ];
        });
        function F() {
            const e = {
                ...s(),
                ...getCurrentTime()
            };
            ue(e), Object.assign(y.value, e), b.value = "hour";
        }
        function R(e169, t, o) {
            const n73 = Array.apply(null, {
                length: t + 1
            }).map((t, n)=>{
                const a = n + e169;
                return {
                    index: a,
                    val: !0 === o(a)
                };
            }).filter((e)=>!0 === e.val
            ).map((e)=>e.index
            );
            return {
                min: n73[0],
                max: n73[n73.length - 1],
                values: n73,
                threshold: t + 1
            };
        }
        function D(e, t, o) {
            const n = Math.abs(e - t);
            return Math.min(n, o - n);
        }
        function A(e, { min: t138 , max: o , values: n , threshold: a  }) {
            if (e === t138) return t138;
            if (e < t138 || e > o) return D(e, t138, a) <= D(e, o, a) ? t138 : o;
            const l = n.findIndex((t)=>e <= t
            ), i = n[l - 1], r = n[l];
            return e - i <= r - e ? i : r;
        }
        function V() {
            return "persian" !== e168.calendar && null !== e168.mask ? e168.mask : `HH:mm${!0 === e168.withSeconds ? ":ss" : ""}`;
        }
        function I() {
            if ("string" !== typeof e168.defaultDate) {
                const e = s(!0);
                return e.dateHash = getDayHash(e), e;
            }
            return __splitDate(e168.defaultDate, "YYYY/MM/DD", void 0, e168.calendar);
        }
        function H() {
            return !0 === ce.isDeactivated || !0 === ce.isUnmounted || null !== O.value && (0 === O.value.values.length || "hour" === b.value && !0 !== k.value && 0 === B.value[!0 === S.value ? "am" : "pm"].values.length);
        }
        function N() {
            const e = v.value, { top: t , left: o , width: n  } = e.getBoundingClientRect(), a = n / 2;
            return {
                top: t + a,
                left: o + a,
                dist: 0.7 * a
            };
        }
        function j(e) {
            if (!0 !== H()) {
                if (!0 === e.isFirst) return d = N(), void (p = K(e.evt, d));
                p = K(e.evt, d, p), !0 === e.isFinal && (d = !1, p = null, U());
            }
        }
        function U() {
            "hour" === b.value ? b.value = "minute" : e168.withSeconds && "minute" === b.value && (b.value = "second");
        }
        function K(e, t, o) {
            const n = position(e), a = Math.abs(n.top - t.top), l = Math.sqrt(Math.pow(Math.abs(n.top - t.top), 2) + Math.pow(Math.abs(n.left - t.left), 2));
            let i, r = Math.asin(a / l) * (180 / Math.PI);
            if (r = n.top < t.top ? t.left < n.left ? 90 - r : 270 + r : t.left < n.left ? r + 90 : 270 - r, "hour" === b.value) {
                if (i = r / 30, null !== B.value) {
                    const e = !0 !== k.value ? !0 === S.value : B.value.am.values.length > 0 && B.value.pm.values.length > 0 ? l >= t.dist : B.value.am.values.length > 0;
                    i = A(i + (!0 === e ? 0 : 12), B.value[!0 === e ? "am" : "pm"]);
                } else i = Math.round(i), !0 === k.value ? l < t.dist ? i < 12 && (i += 12) : 12 === i && (i = 0) : !0 === S.value && 12 === i ? i = 0 : !1 === S.value && 12 !== i && (i += 12);
                !0 === k.value && (S.value = i < 12);
            } else i = Math.round(r / 6) % 60, "minute" === b.value && null !== Q.value ? i = A(i, Q.value) : "second" === b.value && null !== E.value && (i = A(i, E.value));
            return o !== i && le[b.value](i), i;
        }
        _vue.watch(()=>e168.modelValue
        , (t)=>{
            const o = __splitDate(t, m.value, f.value, e168.calendar, C.value);
            o.dateHash === y.value.dateHash && o.timeHash === y.value.timeHash || (y.value = o, null === o.hour ? b.value = "hour" : S.value = o.hour < 12);
        }), _vue.watch([
            m,
            f
        ], ()=>{
            _vue.nextTick(()=>{
                ue();
            });
        });
        const W = {
            hour () {
                b.value = "hour";
            },
            minute () {
                b.value = "minute";
            },
            second () {
                b.value = "second";
            }
        };
        function Y(e) {
            13 === e.keyCode && ie();
        }
        function G(e) {
            13 === e.keyCode && re();
        }
        function X(e) {
            !0 !== H() && (!0 !== n72.platform.is.desktop && K(e, N()), U());
        }
        function Z(e) {
            !0 !== H() && K(e, N());
        }
        function J(e) {
            if (13 === e.keyCode) b.value = "hour";
            else if ([
                37,
                39
            ].includes(e.keyCode)) {
                const t = 37 === e.keyCode ? -1 : 1;
                if (null !== B.value) {
                    const e = !0 === k.value ? B.value.values : B.value[!0 === S.value ? "am" : "pm"].values;
                    if (0 === e.length) return;
                    if (null === y.value.hour) oe(e[0]);
                    else {
                        const o = (e.length + e.indexOf(y.value.hour) + t) % e.length;
                        oe(e[o]);
                    }
                } else {
                    const e = !0 === k.value ? 24 : 12, o = !0 !== k.value && !1 === S.value ? 12 : 0, n = null === y.value.hour ? -t : y.value.hour;
                    oe(o + (24 + n + t) % e);
                }
            }
        }
        function ee(e) {
            if (13 === e.keyCode) b.value = "minute";
            else if ([
                37,
                39
            ].includes(e.keyCode)) {
                const t = 37 === e.keyCode ? -1 : 1;
                if (null !== Q.value) {
                    const e = Q.value.values;
                    if (0 === e.length) return;
                    if (null === y.value.minute) ne(e[0]);
                    else {
                        const o = (e.length + e.indexOf(y.value.minute) + t) % e.length;
                        ne(e[o]);
                    }
                } else {
                    const e = null === y.value.minute ? -t : y.value.minute;
                    ne((60 + e + t) % 60);
                }
            }
        }
        function te(e) {
            if (13 === e.keyCode) b.value = "second";
            else if ([
                37,
                39
            ].includes(e.keyCode)) {
                const t = 37 === e.keyCode ? -1 : 1;
                if (null !== E.value) {
                    const e = E.value.values;
                    if (0 === e.length) return;
                    if (null === y.value.seconds) ae(e[0]);
                    else {
                        const o = (e.length + e.indexOf(y.value.second) + t) % e.length;
                        ae(e[o]);
                    }
                } else {
                    const e = null === y.value.second ? -t : y.value.second;
                    ae((60 + e + t) % 60);
                }
            }
        }
        function oe(e) {
            y.value.hour !== e && (y.value.hour = e, se());
        }
        function ne(e) {
            y.value.minute !== e && (y.value.minute = e, se());
        }
        function ae(e) {
            y.value.second !== e && (y.value.second = e, se());
        }
        const le = {
            hour: oe,
            minute: ne,
            second: ae
        };
        function ie() {
            !1 === S.value && (S.value = !0, null !== y.value.hour && (y.value.hour -= 12, se()));
        }
        function re() {
            !0 === S.value && (S.value = !1, null !== y.value.hour && (y.value.hour += 12, se()));
        }
        function se() {
            return null !== P.value && !0 !== P.value(y.value.hour) ? (y.value = __splitDate(), void (b.value = "hour")) : null !== $.value && !0 !== $.value(y.value.minute) ? (y.value.minute = null, y.value.second = null, void (b.value = "minute")) : !0 === e168.withSeconds && null !== M.value && !0 !== M.value(y.value.second) ? (y.value.second = null, void (b.value = "second")) : void (null === y.value.hour || null === y.value.minute || !0 === e168.withSeconds && null === y.value.second || ue());
        }
        function ue(t) {
            const n = Object.assign({
                ...y.value
            }, t), a = "persian" === e168.calendar ? pad(n.hour) + ":" + pad(n.minute) + (!0 === e168.withSeconds ? ":" + pad(n.second) : "") : formatDate(new Date(n.year, null === n.month ? null : n.month - 1, n.day, n.hour, n.minute, n.second, n.millisecond), m.value, f.value, n.year, n.timezoneOffset);
            n.changed = a !== e168.modelValue, o90("update:modelValue", a, n);
        }
        const ce = _vue.getCurrentInstance();
        function de() {
            const t = [
                _vue.h("div", {
                    class: "q-time__link " + ("hour" === b.value ? "q-time__link--active" : "cursor-pointer"),
                    tabindex: l31.value,
                    onClick: W.hour,
                    onKeyup: J
                }, x.value.hour),
                _vue.h("div", ":"),
                _vue.h("div", !0 === q.value ? {
                    class: "q-time__link " + ("minute" === b.value ? "q-time__link--active" : "cursor-pointer"),
                    tabindex: l31.value,
                    onKeyup: ee,
                    onClick: W.minute
                } : {
                    class: "q-time__link"
                }, x.value.minute)
            ];
            !0 === e168.withSeconds && t.push(_vue.h("div", ":"), _vue.h("div", !0 === T.value ? {
                class: "q-time__link " + ("second" === b.value ? "q-time__link--active" : "cursor-pointer"),
                tabindex: l31.value,
                onKeyup: te,
                onClick: W.second
            } : {
                class: "q-time__link"
            }, x.value.second));
            const o = [
                _vue.h("div", {
                    class: "q-time__header-label row items-center no-wrap",
                    dir: "ltr"
                }, t)
            ];
            return !1 === k.value && o.push(_vue.h("div", {
                class: "q-time__header-ampm column items-between no-wrap"
            }, [
                _vue.h("div", {
                    class: "q-time__link " + (!0 === S.value ? "q-time__link--active" : "cursor-pointer"),
                    tabindex: l31.value,
                    onClick: ie,
                    onKeyup: Y
                }, "AM"),
                _vue.h("div", {
                    class: "q-time__link " + (!0 !== S.value ? "q-time__link--active" : "cursor-pointer"),
                    tabindex: l31.value,
                    onClick: re,
                    onKeyup: G
                }, "PM")
            ])), _vue.h("div", {
                class: "q-time__header flex flex-center no-wrap " + i23.value
            }, o);
        }
        function pe() {
            const t = y.value[b.value];
            return _vue.h("div", {
                class: "q-time__content col relative-position"
            }, [
                _vue.h(_vue.Transition, {
                    name: "q-transition--scale"
                }, ()=>_vue.h("div", {
                        key: "clock" + b.value,
                        class: "q-time__container-parent absolute-full"
                    }, [
                        _vue.h("div", {
                            ref: v,
                            class: "q-time__container-child fit overflow-hidden"
                        }, [
                            _vue.withDirectives(_vue.h("div", {
                                class: "q-time__clock cursor-pointer non-selectable",
                                onClick: X,
                                onMousedown: Z
                            }, [
                                _vue.h("div", {
                                    class: "q-time__clock-circle fit"
                                }, [
                                    _vue.h("div", {
                                        class: "q-time__clock-pointer" + (null === y.value[b.value] ? " hidden" : void 0 !== e168.color ? ` text-${e168.color}` : ""),
                                        style: _.value
                                    }),
                                    L.value.map((e)=>_vue.h("div", {
                                            class: `q-time__clock-position row flex-center q-time__clock-pos-${e.index}` + (e.val === t ? " q-time__clock-position--active " + i23.value : !0 === e.disable ? " q-time__clock-position--disable" : "")
                                        }, [
                                            _vue.h("span", e.label)
                                        ])
                                    )
                                ])
                            ]), z.value)
                        ])
                    ])
                ),
                !0 === e168.nowBtn ? _vue.h(QBtn, {
                    class: "q-time__now-button absolute",
                    icon: n72.iconSet.datetime.now,
                    unelevated: !0,
                    size: "sm",
                    round: !0,
                    color: e168.color,
                    textColor: e168.textColor,
                    tabindex: l31.value,
                    onClick: F
                }) : null
            ]);
        }
        return Object.assign(ce.proxy, {
            setNow: F
        }), ()=>{
            const o = [
                pe()
            ], n = hSlot(t137.default);
            return void 0 !== n && o.push(_vue.h("div", {
                class: "q-time__actions"
            }, n)), void 0 !== e168.name && !0 !== e168.disable && c(o, "push"), _vue.h("div", {
                class: w.value,
                tabindex: -1
            }, [
                de(),
                _vue.h("div", {
                    class: "q-time__main col overflow-auto"
                }, o)
            ]);
        };
    }
}), QTimeline = createComponent({
    name: "QTimeline",
    props: {
        ...useDarkProps,
        color: {
            type: String,
            default: "primary"
        },
        side: {
            type: String,
            default: "right",
            validator: (e)=>[
                    "left",
                    "right"
                ].includes(e)
        },
        layout: {
            type: String,
            default: "dense",
            validator: (e)=>[
                    "dense",
                    "comfortable",
                    "loose"
                ].includes(e)
        }
    },
    setup (e, { slots: t  }) {
        const o = _vue.getCurrentInstance(), n = useDark(e, o.proxy.$q);
        _vue.provide(timelineKey, e);
        const a = _vue.computed(()=>`q-timeline q-timeline--${e.layout} q-timeline--${e.layout}--${e.side}` + (!0 === n.value ? " q-timeline--dark" : "")
        );
        return ()=>_vue.h("ul", {
                class: a.value
            }, hSlot(t.default))
        ;
    }
}), QTimelineEntry = createComponent({
    name: "QTimelineEntry",
    props: {
        heading: Boolean,
        tag: {
            type: String,
            default: "h3"
        },
        side: {
            type: String,
            default: "right",
            validator: (e)=>[
                    "left",
                    "right"
                ].includes(e)
        },
        icon: String,
        avatar: String,
        color: String,
        title: String,
        subtitle: String,
        body: String
    },
    setup (e, { slots: t139  }) {
        const o91 = _vue.inject(timelineKey, ()=>{
            console.error("QTimelineEntry needs to be child of QTimeline");
        }), n = _vue.computed(()=>`q-timeline__entry q-timeline__entry--${e.side}` + (void 0 !== e.icon || void 0 !== e.avatar ? " q-timeline__entry--icon" : "")
        ), a = _vue.computed(()=>`q-timeline__dot text-${e.color || o91.color}`
        ), l = _vue.computed(()=>"comfortable" === o91.layout && "left" === o91.side
        );
        return ()=>{
            const o = hUniqueSlot(t139.default, []);
            if (void 0 !== e.body && o.unshift(e.body), !0 === e.heading) {
                const t = [
                    _vue.h("div"),
                    _vue.h("div"),
                    _vue.h(e.tag, {
                        class: "q-timeline__heading-title"
                    }, o)
                ];
                return _vue.h("div", {
                    class: "q-timeline__heading"
                }, !0 === l.value ? t.reverse() : t);
            }
            let i;
            void 0 !== e.icon ? i = [
                _vue.h(QIcon, {
                    class: "row items-center justify-center",
                    name: e.icon
                })
            ] : void 0 !== e.avatar && (i = [
                _vue.h("img", {
                    class: "q-timeline__dot-img",
                    src: e.avatar
                })
            ]);
            const r = [
                _vue.h("div", {
                    class: "q-timeline__subtitle"
                }, [
                    _vue.h("span", {
                    }, hSlot(t139.subtitle, [
                        e.subtitle
                    ]))
                ]),
                _vue.h("div", {
                    class: a.value
                }, i),
                _vue.h("div", {
                    class: "q-timeline__content"
                }, [
                    _vue.h("h6", {
                        class: "q-timeline__title"
                    }, hSlot(t139.title, [
                        e.title
                    ]))
                ].concat(o))
            ];
            return _vue.h("li", {
                class: n.value
            }, !0 === l.value ? r.reverse() : r);
        };
    }
}), QToolbar = createComponent({
    name: "QToolbar",
    props: {
        inset: Boolean
    },
    setup (e, { slots: t  }) {
        const o = _vue.computed(()=>"q-toolbar row no-wrap items-center" + (!0 === e.inset ? " q-toolbar--inset" : "")
        );
        return ()=>_vue.h("div", {
                class: o.value
            }, hSlot(t.default))
        ;
    }
}), QToolbarTitle = createComponent({
    name: "QToolbarTitle",
    props: {
        shrink: Boolean
    },
    setup (e, { slots: t  }) {
        const o = _vue.computed(()=>"q-toolbar__title ellipsis" + (!0 === e.shrink ? " col-shrink" : "")
        );
        return ()=>_vue.h("div", {
                class: o.value
            }, hSlot(t.default))
        ;
    }
});
const tickStrategyOptions = [
    "none",
    "strict",
    "leaf",
    "leaf-filtered"
];
var QTree = createComponent({
    name: "QTree",
    props: {
        ...useDarkProps,
        nodes: {
            type: Array,
            required: !0
        },
        nodeKey: {
            type: String,
            required: !0
        },
        labelKey: {
            type: String,
            default: "label"
        },
        childrenKey: {
            type: String,
            default: "children"
        },
        dense: Boolean,
        color: String,
        controlColor: String,
        textColor: String,
        selectedColor: String,
        icon: String,
        tickStrategy: {
            type: String,
            default: "none",
            validator: (e)=>tickStrategyOptions.includes(e)
        },
        ticked: Array,
        expanded: Array,
        selected: {
        },
        defaultExpandAll: Boolean,
        accordion: Boolean,
        filter: String,
        filterMethod: Function,
        duration: Number,
        noConnectors: Boolean,
        noNodesLabel: String,
        noResultsLabel: String
    },
    emits: [
        "update:expanded",
        "update:ticked",
        "update:selected",
        "lazy-load",
        "after-show",
        "after-hide"
    ],
    setup (e170, { slots: t140 , emit: o92  }) {
        const { proxy: n74  } = _vue.getCurrentInstance(), { $q: a44  } = n74, l32 = useDark(e170, a44), i24 = _vue.ref({
        }), r15 = _vue.ref(e170.ticked || []), s20 = _vue.ref(e170.expanded || []);
        let u12 = {
        };
        _vue.onBeforeUpdate(()=>{
            u12 = {
            };
        });
        const c12 = _vue.computed(()=>`q-tree q-tree--${!0 === e170.dense ? "dense" : "standard"}` + (!0 === e170.noConnectors ? " q-tree--no-connectors" : "") + (!0 === l32.value ? " q-tree--dark" : "") + (void 0 !== e170.color ? ` text-${e170.color}` : "")
        ), d11 = _vue.computed(()=>void 0 !== e170.selected
        ), p5 = _vue.computed(()=>e170.icon || a44.iconSet.tree.icon
        ), v6 = _vue.computed(()=>e170.controlColor || e170.color
        ), m4 = _vue.computed(()=>void 0 !== e170.textColor ? ` text-${e170.textColor}` : ""
        ), f3 = _vue.computed(()=>{
            const t = e170.selectedColor || e170.color;
            return t ? ` text-${t}` : "";
        }), g = _vue.computed(()=>void 0 !== e170.filterMethod ? e170.filterMethod : (t, o)=>{
                const n = o.toLowerCase();
                return t[e170.labelKey] && t[e170.labelKey].toLowerCase().indexOf(n) > -1;
            }
        ), b3 = _vue.computed(()=>{
            const t141 = {
            }, o = (n, a)=>{
                const l = n.tickStrategy || (a ? a.tickStrategy : e170.tickStrategy), u = n[e170.nodeKey], c = n[e170.childrenKey] && n[e170.childrenKey].length > 0, p = !0 !== c, v = !0 !== n.disabled && !0 === d11.value && !1 !== n.selectable, m = !0 !== n.disabled && !1 !== n.expandable, f = "none" !== l, h = "strict" === l, b = "leaf-filtered" === l, y = "leaf" === l || "leaf-filtered" === l;
                let S = !0 !== n.disabled && !1 !== n.tickable;
                !0 === y && !0 === S && a && !0 !== a.tickable && (S = !1);
                let w = n.lazy;
                !0 === w && void 0 !== i24.value[u] && !0 === Array.isArray(n[e170.childrenKey]) && (w = i24.value[u]);
                const x = {
                    key: u,
                    parent: a,
                    isParent: c,
                    isLeaf: p,
                    lazy: w,
                    disabled: n.disabled,
                    link: !0 !== n.disabled && (!0 === v || !0 === m && (!0 === c || !0 === w)),
                    children: [],
                    matchesFilter: !e170.filter || g.value(n, e170.filter),
                    selected: u === e170.selected && !0 === v,
                    selectable: v,
                    expanded: !0 === c && s20.value.includes(u),
                    expandable: m,
                    noTick: !0 === n.noTick || !0 !== h && w && "loaded" !== w,
                    tickable: S,
                    tickStrategy: l,
                    hasTicking: f,
                    strictTicking: h,
                    leafFilteredTicking: b,
                    leafTicking: y,
                    ticked: !0 === h ? r15.value.includes(u) : !0 === p && r15.value.includes(u)
                };
                if (t141[u] = x, !0 === c && (x.children = n[e170.childrenKey].map((e)=>o(e, x)
                ), e170.filter && (!0 !== x.matchesFilter ? x.matchesFilter = x.children.some((e)=>e.matchesFilter
                ) : !0 !== x.noTick && !0 !== x.disabled && !0 === x.tickable && !0 === b && !0 === x.children.every((e)=>!0 !== e.matchesFilter || !0 === e.noTick || !0 !== e.tickable
                ) && (x.tickable = !1)), !0 === x.matchesFilter && (!0 !== x.noTick && !0 !== h && !0 === x.children.every((e)=>e.noTick
                ) && (x.noTick = !0), y))) {
                    if (x.ticked = !1, x.indeterminate = x.children.some((e)=>!0 === e.indeterminate
                    ), x.tickable = !0 === x.tickable && x.children.some((e)=>e.tickable
                    ), !0 !== x.indeterminate) {
                        const e171 = x.children.reduce((e, t)=>!0 === t.ticked ? e + 1 : e
                        , 0);
                        e171 === x.children.length ? x.ticked = !0 : e171 > 0 && (x.indeterminate = !0);
                    }
                    !0 === x.indeterminate && (x.indeterminateNextState = x.children.every((e)=>!0 !== e.tickable || !0 !== e.ticked
                    ));
                }
                return x;
            };
            return e170.nodes.forEach((e)=>o(e, null)
            ), t141;
        });
        function y3(t) {
            const o = [].reduce, n = (a, l)=>{
                return a || !l ? a : !0 === Array.isArray(l) ? o.call(Object(l), n, a) : l[e170.nodeKey] === t ? l : l[e170.childrenKey] ? n(null, l[e170.childrenKey]) : void 0;
            };
            return n(null, e170.nodes);
        }
        function S2() {
            return r15.value.map((e)=>y3(e)
            );
        }
        function w1() {
            return s20.value.map((e)=>y3(e)
            );
        }
        function x1(e) {
            return !(!e || !b3.value[e]) && b3.value[e].expanded;
        }
        function C() {
            void 0 !== e170.expanded ? o92("update:expanded", []) : s20.value = [];
        }
        function k() {
            const t = s20.value, n = (o)=>{
                o[e170.childrenKey] && o[e170.childrenKey].length > 0 && !1 !== o.expandable && !0 !== o.disabled && (t.push(o[e170.nodeKey]), o[e170.childrenKey].forEach(n));
            };
            e170.nodes.forEach(n), void 0 !== e170.expanded ? o92("update:expanded", t) : s20.value = t;
        }
        function _(t, n, a = y3(t), l = b3.value[t]) {
            if (l.lazy && "loaded" !== l.lazy) {
                if ("loading" === l.lazy) return;
                i24.value[t] = "loading", !0 !== Array.isArray(a[e170.childrenKey]) && (a[e170.childrenKey] = []), o92("lazy-load", {
                    node: a,
                    key: t,
                    done: (o)=>{
                        i24.value[t] = "loaded", a[e170.childrenKey] = !0 === Array.isArray(o) ? o : [], _vue.nextTick(()=>{
                            const e = b3.value[t];
                            e && !0 === e.isParent && q(t, !0);
                        });
                    },
                    fail: ()=>{
                        delete i24.value[t], 0 === a[e170.childrenKey].length && delete a[e170.childrenKey];
                    }
                });
            } else !0 === l.isParent && !0 === l.expandable && q(t, n);
        }
        function q(t142, n75) {
            let a45 = s20.value;
            const l = void 0 !== e170.expanded;
            if (!0 === l && (a45 = a45.slice()), n75) {
                if (e170.accordion && b3.value[t142]) {
                    const o = [];
                    b3.value[t142].parent ? b3.value[t142].parent.children.forEach((e)=>{
                        e.key !== t142 && !0 === e.expandable && o.push(e.key);
                    }) : e170.nodes.forEach((n)=>{
                        const a = n[e170.nodeKey];
                        a !== t142 && o.push(a);
                    }), o.length > 0 && (a45 = a45.filter((e)=>!1 === o.includes(e)
                    ));
                }
                a45 = a45.concat([
                    t142
                ]).filter((e, t, o)=>o.indexOf(e) === t
                );
            } else a45 = a45.filter((e)=>e !== t142
            );
            !0 === l ? o92("update:expanded", a45) : s20.value = a45;
        }
        function T(e) {
            return !(!e || !b3.value[e]) && b3.value[e].ticked;
        }
        function P(t143, n) {
            let a = r15.value;
            const l = void 0 !== e170.ticked;
            !0 === l && (a = a.slice()), a = n ? a.concat(t143).filter((e, t, o)=>o.indexOf(e) === t
            ) : a.filter((e)=>!1 === t143.includes(e)
            ), !0 === l && o92("update:ticked", a);
        }
        function $(t, o, a) {
            const i = {
                tree: n74,
                node: t,
                key: a,
                color: e170.color,
                dark: l32.value
            };
            return Object.defineProperty(i, "expanded", {
                get: ()=>{
                    return o.expanded;
                },
                set: (e)=>{
                    e !== o.expanded && _(a, e);
                },
                configurable: !0,
                enumerable: !0
            }), Object.defineProperty(i, "ticked", {
                get: ()=>{
                    return o.ticked;
                },
                set: (e)=>{
                    e !== o.ticked && P([
                        a
                    ], e);
                },
                configurable: !0,
                enumerable: !0
            }), i;
        }
        function M(t) {
            return (e170.filter ? t.filter((t)=>b3.value[t[e170.nodeKey]].matchesFilter
            ) : t).map((e)=>O(e)
            );
        }
        function B(e) {
            if (void 0 !== e.icon) return _vue.h(QIcon, {
                class: "q-tree__icon q-mr-sm",
                name: e.icon,
                color: e.iconColor
            });
            const t = e.img || e.avatar;
            return t ? _vue.h("img", {
                class: `q-tree__${e.img ? "img" : "avatar"} q-mr-sm`,
                src: t
            }) : void 0;
        }
        function Q() {
            o92("after-show");
        }
        function E() {
            o92("after-hide");
        }
        function O(o) {
            const n = o[e170.nodeKey], a = b3.value[n], i = o.header && t140[`header-${o.header}`] || t140["default-header"], r = !0 === a.isParent ? M(o[e170.childrenKey]) : [], s = r.length > 0 || a.lazy && "loaded" !== a.lazy;
            let c = o.body && t140[`body-${o.body}`] || t140["default-body"];
            const d = void 0 !== i || void 0 !== c ? $(o, a, n) : null;
            return void 0 !== c && (c = _vue.h("div", {
                class: "q-tree__node-body relative-position"
            }, [
                _vue.h("div", {
                    class: m4.value
                }, [
                    c(d)
                ])
            ])), _vue.h("div", {
                key: n,
                class: "q-tree__node relative-position" + ` q-tree__node--${!0 === s ? "parent" : "child"}`
            }, [
                _vue.h("div", {
                    class: "q-tree__node-header relative-position row no-wrap items-center" + (!0 === a.link ? " q-tree__node--link q-hoverable q-focusable" : "") + (!0 === a.selected ? " q-tree__node--selected" : "") + (!0 === a.disabled ? " q-tree__node--disabled" : ""),
                    tabindex: !0 === a.link ? 0 : -1,
                    onClick: (e)=>{
                        z(o, a, e);
                    },
                    onKeypress (e) {
                        !0 !== shouldIgnoreKey(e) && (13 === e.keyCode ? z(o, a, e, !0) : 32 === e.keyCode && F(o, a, e, !0));
                    }
                }, [
                    _vue.h("div", {
                        class: "q-focus-helper",
                        tabindex: -1,
                        ref: (e)=>{
                            u12[a.key] = e;
                        }
                    }),
                    "loading" === a.lazy ? _vue.h(QSpinner, {
                        class: "q-tree__spinner",
                        color: v6.value
                    }) : !0 === s ? _vue.h(QIcon, {
                        class: "q-tree__arrow" + (!0 === a.expanded ? " q-tree__arrow--rotate" : ""),
                        name: p5.value,
                        onClick (e) {
                            F(o, a, e);
                        }
                    }) : null,
                    !0 === a.hasTicking && !0 !== a.noTick ? _vue.h(QCheckbox, {
                        class: "q-tree__tickbox",
                        modelValue: !0 === a.indeterminate ? null : a.ticked,
                        color: v6.value,
                        dark: l32.value,
                        dense: !0,
                        keepColor: !0,
                        disable: !0 !== a.tickable,
                        onKeydown: stopAndPrevent,
                        "onUpdate:modelValue": (e)=>{
                            R(a, e);
                        }
                    }) : null,
                    _vue.h("div", {
                        class: "q-tree__node-header-content col row no-wrap items-center" + (!0 === a.selected ? f3.value : m4.value)
                    }, [
                        i ? i(d) : [
                            B(o),
                            _vue.h("div", o[e170.labelKey])
                        ]
                    ])
                ]),
                !0 === s ? _vue.h(QSlideTransition, {
                    duration: e170.duration,
                    onShow: Q,
                    onHide: E
                }, ()=>_vue.withDirectives(_vue.h("div", {
                        class: "q-tree__node-collapsible" + m4.value,
                        key: `${n}__q`
                    }, [
                        c,
                        _vue.h("div", {
                            class: "q-tree__children" + (!0 === a.disabled ? " q-tree__node--disabled" : "")
                        }, r)
                    ]), [
                        [
                            _vue.vShow,
                            a.expanded
                        ]
                    ])
                ) : c
            ]);
        }
        function L(e) {
            const t = u12[e];
            t && t.focus();
        }
        function z(t, n, a, l) {
            !0 !== l && L(n.key), d11.value ? n.selectable && o92("update:selected", n.key !== e170.selected ? n.key : null) : F(t, n, a, l), "function" === typeof t.handler && t.handler(t);
        }
        function F(e, t, o, n) {
            void 0 !== o && stopAndPrevent(o), !0 !== n && L(t.key), _(t.key, !t.expanded, e, t);
        }
        function R(e172, t) {
            if (!0 === e172.indeterminate && (t = e172.indeterminateNextState), e172.strictTicking) P([
                e172.key
            ], t);
            else if (e172.leafTicking) {
                const o = [], n = (e)=>{
                    e.isParent ? (!0 !== t && !0 !== e.noTick && !0 === e.tickable && o.push(e.key), !0 === e.leafTicking && e.children.forEach(n)) : !0 === e.noTick || !0 !== e.tickable || !0 === e.leafFilteredTicking && !0 !== e.matchesFilter || o.push(e.key);
                };
                n(e172), P(o, t);
            }
        }
        return _vue.watch(()=>e170.ticked
        , (e)=>{
            r15.value = e;
        }), _vue.watch(()=>e170.expanded
        , (e)=>{
            s20.value = e;
        }), Object.assign(n74, {
            getNodeByKey: y3,
            getTickedNodes: S2,
            getExpandedNodes: w1,
            isExpanded: x1,
            collapseAll: C,
            expandAll: k,
            setExpanded: _,
            isTicked: T,
            setTicked: P
        }), !0 === e170.defaultExpandAll && k(), ()=>{
            const t = M(e170.nodes);
            return _vue.h("div", {
                class: c12.value
            }, 0 === t.length ? e170.filter ? e170.noResultsLabel || a44.lang.tree.noResults : e170.noNodesLabel || a44.lang.tree.noNodes : t);
        };
    }
});
function getProgressLabel(e) {
    return (100 * e).toFixed(2) + "%";
}
const coreProps = {
    ...useDarkProps,
    ...useFileProps,
    label: String,
    color: String,
    textColor: String,
    square: Boolean,
    flat: Boolean,
    bordered: Boolean,
    noThumbnails: Boolean,
    autoUpload: Boolean,
    hideUploadBtn: Boolean,
    disable: Boolean,
    readonly: Boolean
}, coreEmits = [
    ...useFileEmits,
    "start",
    "finish",
    "added",
    "removed"
];
function getRenderer(e173) {
    const t144 = _vue.getCurrentInstance(), { props: o93 , slots: n76 , emit: a , proxy: l33  } = t144, { $q: i  } = l33, r = useDark(o93, i);
    function s(e, t, o) {
        if (e.__status = t, "idle" === t) return e.__uploaded = 0, e.__progress = 0, e.__sizeLabel = humanStorageSize(e.size), void (e.__progressLabel = "0.00%");
        "failed" !== t ? (e.__uploaded = "uploaded" === t ? e.size : o, e.__progress = "uploaded" === t ? 1 : Math.min(0.9999, e.__uploaded / e.size), e.__progressLabel = getProgressLabel(e.__progress), l33.$forceUpdate()) : l33.$forceUpdate();
    }
    const u = {
        files: _vue.ref([]),
        queuedFiles: _vue.ref([]),
        uploadedFiles: _vue.ref([]),
        uploadedSize: _vue.ref(0),
        updateFileStatus: s,
        isAlive () {
            return !0 !== t144.isDeactivated && !0 !== t144.isUnmounted;
        }
    };
    Object.assign(u, e173({
        props: o93,
        slots: n76,
        emit: a,
        helpers: u
    }));
    const c = _vue.ref(0), d = _vue.computed(()=>!0 !== o93.disable && !0 !== o93.readonly
    );
    void 0 === u.isBusy && (u.isBusy = _vue.ref(!1));
    const p = _vue.ref(!1), v = _vue.ref(null), m = _vue.ref(null);
    _vue.provide(uploaderKey, A);
    const { pickFiles: f , addFiles: g , onDragover: b , processFiles: y , getDndNode: S , maxFilesNumber: w , maxTotalSizeNumber: x  } = useFile({
        editable: d,
        dnd: p,
        getFileInput: z,
        addFilesToQueue: F
    }), C = _vue.computed(()=>!0 === d.value && !0 !== u.isUploading.value && (!0 === o93.multiple || 0 === u.queuedFiles.value.length) && (void 0 === o93.maxFiles || u.files.value.length < w.value) && (void 0 === o93.maxTotalSize || c.value < x.value)
    ), k = _vue.computed(()=>!0 === d.value && !0 !== u.isBusy.value && !0 !== u.isUploading.value && u.queuedFiles.value.length > 0
    ), _ = _vue.computed(()=>0 === c.value ? 0 : u.uploadedSize.value / c.value
    ), q = _vue.computed(()=>getProgressLabel(_.value)
    ), T = _vue.computed(()=>humanStorageSize(c.value)
    ), P = _vue.computed(()=>"q-uploader column no-wrap" + (!0 === r.value ? " q-uploader--dark q-dark" : "") + (!0 === o93.bordered ? " q-uploader--bordered" : "") + (!0 === o93.square ? " q-uploader--square no-border-radius" : "") + (!0 === o93.flat ? " q-uploader--flat no-shadow" : "") + (!0 === o93.disable ? " disabled q-uploader--disable" : "")
    ), $ = _vue.computed(()=>"q-uploader__header" + (void 0 !== o93.color ? ` bg-${o93.color}` : "") + (void 0 !== o93.textColor ? ` text-${o93.textColor}` : "")
    );
    function M() {
        !1 === o93.disable && (u.abort(), u.uploadedSize.value = 0, c.value = 0, L(), u.files.value = [], u.queuedFiles.value = [], u.uploadedFiles.value = []);
    }
    function B() {
        !1 === o93.disable && E([
            "uploaded"
        ], ()=>{
            u.uploadedFiles.value = [];
        });
    }
    function Q() {
        E([
            "idle",
            "failed"
        ], ({ size: e  })=>{
            c.value -= e, u.queuedFiles.value = [];
        });
    }
    function E(e, t145) {
        if (!0 === o93.disable) return;
        const n = {
            files: [],
            size: 0
        }, l = u.files.value.filter((t)=>{
            return -1 === e.indexOf(t.__status) || (n.size += t.size, n.files.push(t), void 0 !== t._img && window.URL.revokeObjectURL(t._img.src), !1);
        });
        n.files.length > 0 && (u.files.value = l, t145(n), a("removed", n.files));
    }
    function O(e) {
        o93.disable || ("uploaded" === e.__status ? u.uploadedFiles.value = u.uploadedFiles.value.filter((t)=>t.name !== e.name
        ) : "uploading" === e.__status ? e.__abort() : c.value -= e.size, u.files.value = u.files.value.filter((t)=>{
            return t.name !== e.name || (void 0 !== t._img && window.URL.revokeObjectURL(t._img.src), !1);
        }), u.queuedFiles.value = u.queuedFiles.value.filter((t)=>t.name !== e.name
        ), a("removed", [
            e
        ]));
    }
    function L() {
        u.files.value.forEach((e)=>{
            void 0 !== e._img && window.URL.revokeObjectURL(e._img.src);
        });
    }
    function z() {
        return m.value || v.value.getElementsByClassName("q-uploader__input")[0];
    }
    function F(e174, t146) {
        const n = y(e174, t146, u.files.value, !0);
        if (void 0 === n) return;
        const l = z();
        void 0 !== l && null !== l && (l.value = ""), n.forEach((e)=>{
            if (u.updateFileStatus(e, "idle"), c.value += e.size, !0 !== o93.noThumbnails && e.type.toUpperCase().startsWith("IMAGE")) {
                const t = new Image;
                t.src = window.URL.createObjectURL(e), e.__img = t;
            }
        }), u.files.value = u.files.value.concat(n), u.queuedFiles.value = u.queuedFiles.value.concat(n), a("added", n), !0 === o93.autoUpload && u.upload();
    }
    function R() {
        !0 === k.value && u.upload();
    }
    function D(e, t, o) {
        if (!0 === e) {
            const e = {
                type: "a",
                key: t,
                icon: i.iconSet.uploader[t],
                flat: !0,
                dense: !0
            };
            let n = void 0;
            return "add" === t ? n = A : e.onClick = o, _vue.h(QBtn, e, n);
        }
    }
    function A() {
        return _vue.h("input", {
            ref: m,
            class: "q-uploader__input overflow-hidden absolute-full",
            tabindex: -1,
            type: "file",
            title: "",
            accept: o93.accept,
            multiple: !0 === o93.multiple ? "multiple" : void 0,
            capture: o93.capture,
            onMousedown: stop,
            onChange: F
        });
    }
    function V() {
        return void 0 !== n76.header ? n76.header(N.value) : [
            _vue.h("div", {
                class: "q-uploader__header-content flex flex-center no-wrap q-gutter-xs"
            }, [
                D(u.queuedFiles.value.length > 0, "removeQueue", Q),
                D(u.uploadedFiles.value.length > 0, "removeUploaded", B),
                !0 === u.isUploading.value ? _vue.h(QSpinner, {
                    class: "q-uploader__spinner"
                }) : null,
                _vue.h("div", {
                    class: "col column justify-center"
                }, [
                    void 0 !== o93.label ? _vue.h("div", {
                        class: "q-uploader__title"
                    }, [
                        o93.label
                    ]) : null,
                    _vue.h("div", {
                        class: "q-uploader__subtitle"
                    }, [
                        T.value + " / " + q.value
                    ])
                ]),
                D(C.value, "add"),
                D(!1 === o93.hideUploadBtn && !0 === k.value, "upload", u.upload),
                D(u.isUploading.value, "clear", u.abort)
            ])
        ];
    }
    function I() {
        return void 0 !== n76.list ? n76.list(N.value) : u.files.value.map((e)=>_vue.h("div", {
                key: e.name,
                class: "q-uploader__file relative-position" + (!0 !== o93.noThumbnails && void 0 !== e.__img ? " q-uploader__file--img" : "") + ("failed" === e.__status ? " q-uploader__file--failed" : "uploaded" === e.__status ? " q-uploader__file--uploaded" : ""),
                style: !0 !== o93.noThumbnails && void 0 !== e.__img ? {
                    backgroundImage: 'url("' + e.__img.src + '")'
                } : null
            }, [
                _vue.h("div", {
                    class: "q-uploader__file-header row flex-center no-wrap"
                }, [
                    "failed" === e.__status ? _vue.h(QIcon, {
                        class: "q-uploader__file-status",
                        name: i.iconSet.type.negative,
                        color: "negative"
                    }) : null,
                    _vue.h("div", {
                        class: "q-uploader__file-header-content col"
                    }, [
                        _vue.h("div", {
                            class: "q-uploader__title"
                        }, [
                            e.name
                        ]),
                        _vue.h("div", {
                            class: "q-uploader__subtitle row items-center no-wrap"
                        }, [
                            e.__sizeLabel + " / " + e.__progressLabel
                        ])
                    ]),
                    "uploading" === e.__status ? _vue.h(QCircularProgress, {
                        value: e.__progress,
                        min: 0,
                        max: 1,
                        indeterminate: 0 === e.__progress
                    }) : _vue.h(QBtn, {
                        round: !0,
                        dense: !0,
                        flat: !0,
                        icon: i.iconSet.uploader["uploaded" === e.__status ? "done" : "clear"],
                        onClick: ()=>{
                            O(e);
                        }
                    })
                ])
            ])
        );
    }
    _vue.watch(u.isUploading, (e, t)=>{
        !1 === t && !0 === e ? a("start") : !0 === t && !1 === e && a("finish");
    }), _vue.onBeforeUnmount(()=>{
        !0 === u.isUploading.value && u.abort(), u.files.value.length > 0 && L();
    });
    const H = {
        pickFiles: f,
        addFiles: g,
        reset: M,
        removeUploadedFiles: B,
        removeQueuedFiles: Q,
        removeFile: O,
        upload: R,
        abort: u.abort
    }, N = _vue.computed(()=>{
        const e = {
            canAddFiles: C.value,
            canUpload: k.value,
            uploadSizeLabel: T.value,
            uploadProgressLabel: q.value
        };
        return Object.keys(u).forEach((t)=>{
            e[t] = !0 === _vue.isRef(u[t]) ? u[t].value : u[t];
        }), {
            ...e,
            ...H
        };
    });
    return Object.assign(l33, H), ()=>{
        const e = [
            _vue.h("div", {
                class: $.value
            }, V()),
            _vue.h("div", {
                class: "q-uploader__list scroll"
            }, I()),
            S("uploader")
        ];
        !0 === u.isBusy.value && e.push(_vue.h("div", {
            class: "q-uploader__overlay absolute-full flex flex-center"
        }, [
            _vue.h(QSpinner)
        ]));
        const t = {
            ref: v,
            class: P.value
        };
        return !0 === C.value && (t.onDragover = b), _vue.h("div", t, e);
    };
}
const trueFn = ()=>!0
;
function getEmitsObject(e) {
    const t = {
    };
    return e.forEach((e)=>{
        t[e] = trueFn;
    }), t;
}
const coreEmitsObject = getEmitsObject(coreEmits);
var createUploaderComponent = ({ name: e , props: t , emits: o , injectPlugin: n  })=>createComponent({
        name: e,
        props: {
            ...coreProps,
            ...t
        },
        emits: Object(o) === o ? {
            ...coreEmitsObject,
            ...o
        } : [
            ...coreEmits,
            ...o
        ],
        setup () {
            return getRenderer(n);
        }
    })
;
function getFn(e) {
    return "function" === typeof e ? e : ()=>e
    ;
}
const props$2 = {
    url: [
        Function,
        String
    ],
    method: {
        type: [
            Function,
            String
        ],
        default: "POST"
    },
    fieldName: {
        type: [
            Function,
            String
        ],
        default: ()=>{
            return (e)=>e.name
            ;
        }
    },
    headers: [
        Function,
        Array
    ],
    formFields: [
        Function,
        Array
    ],
    withCredentials: [
        Function,
        Boolean
    ],
    sendRaw: [
        Function,
        Boolean
    ],
    batch: [
        Function,
        Boolean
    ],
    factory: Function
}, emits$1 = [
    "factory-failed",
    "uploaded",
    "failed",
    "uploading"
];
function injectPlugin({ props: e175 , emit: t147 , helpers: o  }) {
    const n77 = _vue.ref([]), a46 = _vue.ref([]), l34 = _vue.ref(0), i25 = _vue.computed(()=>({
            url: getFn(e175.url),
            method: getFn(e175.method),
            headers: getFn(e175.headers),
            formFields: getFn(e175.formFields),
            fieldName: getFn(e175.fieldName),
            withCredentials: getFn(e175.withCredentials),
            sendRaw: getFn(e175.sendRaw),
            batch: getFn(e175.batch)
        })
    ), r16 = _vue.computed(()=>l34.value > 0
    ), s21 = _vue.computed(()=>a46.value.length > 0
    );
    let u13;
    function c13() {
        n77.value.forEach((e)=>{
            e.abort();
        }), a46.value.length > 0 && (u13 = !0);
    }
    function d12() {
        const e176 = o.queuedFiles.value.slice(0);
        o.queuedFiles.value = [], i25.value.batch(e176) ? p6(e176) : e176.forEach((e)=>{
            p6([
                e
            ]);
        });
    }
    function p6(n) {
        if (l34.value++, "function" !== typeof e175.factory) return void v7(n, {
        });
        const i = e175.factory(n);
        if (i) {
            if ("function" === typeof i.catch && "function" === typeof i.then) {
                a46.value.push(i);
                const e177 = (e178)=>{
                    !0 === o.isAlive() && (a46.value = a46.value.filter((e)=>e !== i
                    ), 0 === a46.value.length && (u13 = !1), o.queuedFiles.value = o.queuedFiles.value.concat(n), n.forEach((e)=>{
                        o.updateFileStatus(e, "failed");
                    }), t147("factory-failed", e178, n), l34.value--);
                };
                i.then((t)=>{
                    !0 === u13 ? e177(new Error("Aborted")) : !0 === o.isAlive() && (a46.value = a46.value.filter((e)=>e !== i
                    ), v7(n, t));
                }).catch(e177);
            } else v7(n, i || {
            });
        } else t147("factory-failed", new Error("QUploader: factory() does not return properly"), n), l34.value--;
    }
    function v7(e179, a47) {
        const r = new FormData, s = new XMLHttpRequest, u = (e, t)=>{
            return void 0 !== a47[e] ? getFn(a47[e])(t) : i25.value[e](t);
        }, c = u("url", e179);
        if (!c) return console.error("q-uploader: invalid or no URL specified"), void l34.value--;
        const d = u("formFields", e179);
        void 0 !== d && d.forEach((e)=>{
            r.append(e.name, e.value);
        });
        let p, v = 0, m = 0, f = 0, h = 0;
        s.upload.addEventListener("progress", (t)=>{
            if (!0 === p) return;
            const n = Math.min(h, t.loaded);
            o.uploadedSize.value += n - f, f = n;
            let a = f - m;
            for(let l = v; a > 0 && l < e179.length; l++){
                const t = e179[l], n = a > t.size;
                if (!n) return void o.updateFileStatus(t, "uploading", a);
                a -= t.size, v++, m += t.size, o.updateFileStatus(t, "uploading", t.size);
            }
        }, !1), s.onreadystatechange = ()=>{
            s.readyState < 4 || (s.status && s.status < 400 ? (o.uploadedFiles.value = o.uploadedFiles.value.concat(e179), e179.forEach((e)=>{
                o.updateFileStatus(e, "uploaded");
            }), t147("uploaded", {
                files: e179,
                xhr: s
            })) : (p = !0, o.uploadedSize.value -= f, o.queuedFiles.value = o.queuedFiles.value.concat(e179), e179.forEach((e)=>{
                o.updateFileStatus(e, "failed");
            }), t147("failed", {
                files: e179,
                xhr: s
            })), l34.value--, n77.value = n77.value.filter((e)=>e !== s
            ));
        }, s.open(u("method", e179), c), !0 === u("withCredentials", e179) && (s.withCredentials = !0);
        const g = u("headers", e179);
        void 0 !== g && g.forEach((e)=>{
            s.setRequestHeader(e.name, e.value);
        });
        const b = u("sendRaw", e179);
        e179.forEach((e)=>{
            o.updateFileStatus(e, "uploading", 0), !0 !== b && r.append(u("fieldName", e), e, e.name), e.xhr = s, e.__abort = ()=>{
                s.abort();
            }, h += e.size;
        }), t147("uploading", {
            files: e179,
            xhr: s
        }), n77.value.push(s), !0 === b ? s.send(new Blob(e179)) : s.send(r);
    }
    return {
        isUploading: r16,
        isBusy: s21,
        abort: c13,
        upload: d12
    };
}
var xhrUploaderPlugin = {
    name: "QUploader",
    props: props$2,
    emits: emits$1,
    injectPlugin: injectPlugin
}, QUploader = createUploaderComponent(xhrUploaderPlugin), QUploaderAddTrigger = createComponent({
    name: "QUploaderAddTrigger",
    setup () {
        return _vue.inject(uploaderKey, ()=>{
            console.error("QUploaderAddTrigger needs to be child of QUploader");
        });
    }
}), QVideo = createComponent({
    name: "QVideo",
    props: {
        ...useRatioProps,
        src: {
            type: String,
            required: !0
        }
    },
    setup (e) {
        const t = useRatio(e), o = _vue.computed(()=>"q-video" + (void 0 !== e.ratio ? " q-video--responsive" : "")
        );
        return ()=>_vue.h("div", {
                class: o.value,
                style: t.value
            }, [
                _vue.h("iframe", {
                    src: e.src,
                    frameborder: "0",
                    allowfullscreen: !0
                })
            ])
        ;
    }
}), components = Object.freeze({
    __proto__: null,
    QAjaxBar: QAjaxBar,
    QAvatar: QAvatar,
    QBadge: QBadge,
    QBanner: QBanner,
    QBar: QBar,
    QBreadcrumbs: QBreadcrumbs,
    QBreadcrumbsEl: QBreadcrumbsEl,
    QBtn: QBtn,
    QBtnDropdown: QBtnDropdown,
    QBtnGroup: QBtnGroup,
    QBtnToggle: QBtnToggle,
    QCard: QCard,
    QCardSection: QCardSection,
    QCardActions: QCardActions,
    QCarousel: QCarousel,
    QCarouselSlide: QCarouselSlide,
    QCarouselControl: QCarouselControl,
    QChatMessage: QChatMessage,
    QCheckbox: QCheckbox,
    QChip: QChip,
    QCircularProgress: QCircularProgress,
    QColor: QColor,
    QDate: QDate,
    QDialog: QDialog,
    QDrawer: QDrawer,
    QEditor: QEditor,
    QExpansionItem: QExpansionItem,
    QFab: QFab,
    QFabAction: QFabAction,
    QField: QField,
    QFile: QFile,
    QFooter: QFooter,
    QForm: QForm,
    QFormChildMixin: QFormChildMixin,
    QHeader: QHeader,
    QIcon: QIcon,
    QImg: QImg,
    QInfiniteScroll: QInfiniteScroll,
    QInnerLoading: QInnerLoading,
    QInput: QInput,
    QIntersection: QIntersection,
    QList: QList,
    QItem: QItem,
    QItemSection: QItemSection,
    QItemLabel: QItemLabel,
    QKnob: QKnob,
    QLayout: QLayout,
    QMarkupTable: QMarkupTable,
    QMenu: QMenu,
    QNoSsr: QNoSsr,
    QOptionGroup: QOptionGroup,
    QPage: QPage,
    QPageContainer: QPageContainer,
    QPageScroller: QPageScroller,
    QPageSticky: QPageSticky,
    QPagination: QPagination,
    QParallax: QParallax,
    QPopupEdit: QPopupEdit,
    QPopupProxy: QPopupProxy,
    QLinearProgress: QLinearProgress,
    QPullToRefresh: QPullToRefresh,
    QRadio: QRadio,
    QRange: QRange,
    QRating: QRating,
    QResizeObserver: QResizeObserver,
    QResponsive: QResponsive,
    QScrollArea: QScrollArea,
    QScrollObserver: QScrollObserver,
    QSelect: QSelect,
    QSeparator: QSeparator,
    QSkeleton: QSkeleton,
    QSlideItem: QSlideItem,
    QSlideTransition: QSlideTransition,
    QSlider: QSlider,
    QSpace: QSpace,
    QSpinner: QSpinner,
    QSpinnerAudio: QSpinnerAudio,
    QSpinnerBall: QSpinnerBall,
    QSpinnerBars: QSpinnerBars,
    QSpinnerBox: QSpinnerBox,
    QSpinnerClock: QSpinnerClock,
    QSpinnerComment: QSpinnerComment,
    QSpinnerCube: QSpinnerCube,
    QSpinnerDots: QSpinnerDots,
    QSpinnerFacebook: QSpinnerFacebook,
    QSpinnerGears: QSpinnerGears,
    QSpinnerGrid: QSpinnerGrid,
    QSpinnerHearts: QSpinnerHearts,
    QSpinnerHourglass: QSpinnerHourglass,
    QSpinnerInfinity: QSpinnerInfinity,
    QSpinnerIos: QSpinnerIos,
    QSpinnerOrbit: QSpinnerOrbit,
    QSpinnerOval: QSpinnerOval,
    QSpinnerPie: QSpinnerPie,
    QSpinnerPuff: QSpinnerPuff,
    QSpinnerRadio: QSpinnerRadio,
    QSpinnerRings: QSpinnerRings,
    QSpinnerTail: QSpinnerTail,
    QSplitter: QSplitter,
    QStep: QStep,
    QStepper: QStepper,
    QStepperNavigation: QStepperNavigation,
    QTabPanels: QTabPanels,
    QTabPanel: QTabPanel,
    QTable: QTable,
    QTh: QTh,
    QTr: QTr,
    QTd: QTd,
    QTabs: QTabs,
    QTab: QTab,
    QRouteTab: QRouteTab,
    QTime: QTime,
    QTimeline: QTimeline,
    QTimelineEntry: QTimelineEntry,
    QToggle: QToggle,
    QToolbar: QToolbar,
    QToolbarTitle: QToolbarTitle,
    QTooltip: QTooltip,
    QTree: QTree,
    QUploader: QUploader,
    QUploaderAddTrigger: QUploaderAddTrigger,
    QVideo: QVideo,
    QVirtualScroll: QVirtualScroll
});
function getDepth(e) {
    if (!1 === e) return 0;
    if (!0 === e || void 0 === e) return 1;
    const t = parseInt(e, 10);
    return isNaN(t) ? 0 : t;
}
var ClosePopup = createDirective({
    name: "close-popup",
    beforeMount (e180, { value: t148  }) {
        const o = {
            depth: getDepth(t148),
            handler (t) {
                0 !== o.depth && setTimeout(()=>{
                    const n = getPortalVm(e180);
                    void 0 !== n && closePortals(n, t, o.depth);
                });
            },
            handlerKey (e) {
                !0 === isKeyCode(e, 13) && o.handler(e);
            }
        };
        e180.__qclosepopup = o, e180.addEventListener("click", o.handler), e180.addEventListener("keyup", o.handlerKey);
    },
    updated (e, { value: t , oldValue: o  }) {
        t !== o && (e.__qclosepopup.depth = getDepth(t));
    },
    beforeUnmount (e) {
        const t = e.__qclosepopup;
        e.removeEventListener("click", t.handler), e.removeEventListener("keyup", t.handlerKey), delete e.__qclosepopup;
    }
});
let id = 0, offsetBase = void 0;
function getAbsolutePosition(e, t) {
    void 0 === offsetBase && (offsetBase = document.createElement("div"), offsetBase.style.cssText = "position: absolute; left: 0; top: 0", document.body.appendChild(offsetBase));
    const o = e.getBoundingClientRect(), n = offsetBase.getBoundingClientRect(), { marginLeft: a , marginRight: l , marginTop: i , marginBottom: r  } = window.getComputedStyle(e), s = parseInt(a, 10) + parseInt(l, 10), u = parseInt(i, 10) + parseInt(r, 10);
    return {
        left: o.left - n.left,
        top: o.top - n.top,
        width: o.right - o.left,
        height: o.bottom - o.top,
        widthM: o.right - o.left + (!0 === t ? 0 : s),
        heightM: o.bottom - o.top + (!0 === t ? 0 : u),
        marginH: !0 === t ? s : 0,
        marginV: !0 === t ? u : 0
    };
}
function getAbsoluteSize(e) {
    return {
        width: e.scrollWidth,
        height: e.scrollHeight
    };
}
const styleEdges = [
    "Top",
    "Right",
    "Bottom",
    "Left"
], styleBorderRadiuses = [
    "borderTopLeftRadius",
    "borderTopRightRadius",
    "borderBottomRightRadius",
    "borderBottomLeftRadius"
], reStyleSkipKey = /-block|-inline|block-|inline-/, reStyleSkipRule = /(-block|-inline|block-|inline-).*:/;
function getComputedStyle$1(e, t) {
    const o = window.getComputedStyle(e), n = {
    };
    for(let a = 0; a < t.length; a++){
        const e182 = t[a];
        if ("" === o[e182]) {
            if ("cssText" === e182) {
                const t = o.length;
                let a = "";
                for(let e = 0; e < t; e++)!0 !== reStyleSkipKey.test(o[e]) && (a += o[e] + ": " + o[o[e]] + "; ");
                n[e182] = a;
            } else if ([
                "borderWidth",
                "borderStyle",
                "borderColor"
            ].indexOf(e182) > -1) {
                const t = e182.replace("border", "");
                let a = "";
                for(let e181 = 0; e181 < styleEdges.length; e181++){
                    const n = "border" + styleEdges[e181] + t;
                    a += o[n] + " ";
                }
                n[e182] = a;
            } else if ("borderRadius" === e182) {
                let t = "", a = "";
                for(let e = 0; e < styleBorderRadiuses.length; e++){
                    const n = o[styleBorderRadiuses[e]].split(" ");
                    t += n[0] + " ", a += (void 0 === n[1] ? n[0] : n[1]) + " ";
                }
                n[e182] = t + "/ " + a;
            } else n[e182] = o[e182];
        } else n[e182] = "cssText" === e182 ? o[e182].split(";").filter((e)=>!0 !== reStyleSkipRule.test(e)
        ).join(";") : o[e182];
    }
    return n;
}
const zIndexPositions = [
    "absolute",
    "fixed",
    "relative",
    "sticky"
];
function getMaxZIndex(e) {
    let t = e, o = 0;
    while(null !== t && t !== document){
        const { position: n , zIndex: a  } = window.getComputedStyle(t), l = Number(a);
        l > o && (t === e || !0 === zIndexPositions.includes(n)) && (o = l), t = t.parentNode;
    }
    return o;
}
function normalizeElements(e) {
    return {
        from: e.from,
        to: void 0 !== e.to ? e.to : e.from
    };
}
function normalizeOptions(e) {
    return "number" === typeof e ? e = {
        duration: e
    } : "function" === typeof e && (e = {
        onEnd: e
    }), {
        ...e,
        waitFor: void 0 === e.waitFor ? 0 : e.waitFor,
        duration: !0 === isNaN(e.duration) ? 300 : parseInt(e.duration, 10),
        easing: "string" === typeof e.easing && e.easing.length > 0 ? e.easing : "ease-in-out",
        delay: !0 === isNaN(e.delay) ? 0 : parseInt(e.delay, 10),
        fill: "string" === typeof e.fill && e.fill.length > 0 ? e.fill : "none",
        resize: !0 === e.resize,
        useCSS: !0 === e.useCSS,
        hideFromClone: !0 === e.hideFromClone,
        keepToClone: !0 === e.keepToClone,
        tween: !0 === e.tween,
        tweenFromOpacity: !0 === isNaN(e.tweenFromOpacity) ? 0.6 : parseFloat(e.tweenFromOpacity),
        tweenToOpacity: !0 === isNaN(e.tweenToOpacity) ? 0.5 : parseFloat(e.tweenToOpacity)
    };
}
function getElement(e) {
    const t = typeof e;
    return "function" === t ? e() : "string" === t ? document.querySelector(e) : e;
}
function isValidElement(e) {
    return e && e.ownerDocument === document && null !== e.parentNode;
}
function morph(e183) {
    let t150 = ()=>!1
    , o94 = !1, n78 = !0;
    const a48 = normalizeElements(e183), l = normalizeOptions(e183), i = getElement(a48.from);
    if (!0 !== isValidElement(i)) return t150;
    "function" === typeof i.qMorphCancel && i.qMorphCancel();
    let r17 = void 0, s22 = void 0, u14 = void 0, c14 = void 0;
    const d13 = i.parentNode, p7 = i.nextElementSibling, v = getAbsolutePosition(i, l.resize), { width: m5 , height: f4  } = getAbsoluteSize(d13), { borderWidth: h , borderStyle: g , borderColor: b , borderRadius: y , backgroundColor: S , transform: w , position: x2 , cssText: C2  } = getComputedStyle$1(i, [
        "borderWidth",
        "borderStyle",
        "borderColor",
        "borderRadius",
        "backgroundColor",
        "transform",
        "position",
        "cssText"
    ]), k2 = i.classList.toString(), _1 = i.style.cssText, q = i.cloneNode(!0), T = !0 === l.tween ? i.cloneNode(!0) : void 0;
    void 0 !== T && (T.className = T.classList.toString().split(" ").filter((e)=>!1 === /^bg-/.test(e)
    ).join(" ")), !0 === l.hideFromClone && q.classList.add("q-morph--internal"), q.setAttribute("aria-hidden", "true"), q.style.transition = "none", q.style.animation = "none", q.style.pointerEvents = "none", d13.insertBefore(q, p7), i.qMorphCancel = ()=>{
        o94 = !0, q.remove(), void 0 !== T && T.remove(), !0 === l.hideFromClone && q.classList.remove("q-morph--internal"), i.qMorphCancel = void 0;
    };
    const P1 = ()=>{
        const e184 = getElement(a48.to);
        if (!0 === o94 || !0 !== isValidElement(e184)) return void ("function" === typeof i.qMorphCancel && i.qMorphCancel());
        i !== e184 && "function" === typeof e184.qMorphCancel && e184.qMorphCancel(), !0 !== l.keepToClone && e184.classList.add("q-morph--internal"), q.classList.add("q-morph--internal");
        const { width: p8 , height: P2  } = getAbsoluteSize(d13), { width: $ , height: M  } = getAbsoluteSize(e184.parentNode);
        !0 !== l.hideFromClone && q.classList.remove("q-morph--internal"), e184.qMorphCancel = ()=>{
            o94 = !0, q.remove(), void 0 !== T && T.remove(), !0 === l.hideFromClone && q.classList.remove("q-morph--internal"), !0 !== l.keepToClone && e184.classList.remove("q-morph--internal"), i.qMorphCancel = void 0, e184.qMorphCancel = void 0;
        };
        const B1 = ()=>{
            if (!0 === o94) return void ("function" === typeof e184.qMorphCancel && e184.qMorphCancel());
            !0 !== l.hideFromClone && (q.classList.add("q-morph--internal"), q.innerHTML = "", q.style.left = 0, q.style.right = "unset", q.style.top = 0, q.style.bottom = "unset", q.style.transform = "none"), !0 !== l.keepToClone && e184.classList.remove("q-morph--internal");
            const a = e184.parentNode, { width: B , height: Q  } = getAbsoluteSize(a), E = e184.cloneNode(l.keepToClone);
            E.setAttribute("aria-hidden", "true"), !0 !== l.keepToClone && (E.style.left = 0, E.style.right = "unset", E.style.top = 0, E.style.bottom = "unset", E.style.transform = "none", E.style.pointerEvents = "none"), E.classList.add("q-morph--internal");
            const O = e184 === i && d13 === a ? q : e184.nextElementSibling;
            a.insertBefore(E, O);
            const { borderWidth: L , borderStyle: z , borderColor: F , borderRadius: R , backgroundColor: D , transform: A , position: V , cssText: I  } = getComputedStyle$1(e184, [
                "borderWidth",
                "borderStyle",
                "borderColor",
                "borderRadius",
                "backgroundColor",
                "transform",
                "position",
                "cssText"
            ]), H = e184.classList.toString(), N = e184.style.cssText;
            e184.style.cssText = I, e184.style.transform = "none", e184.style.animation = "none", e184.style.transition = "none", e184.className = H.split(" ").filter((e)=>!1 === /^bg-/.test(e)
            ).join(" ");
            const j = getAbsolutePosition(e184, l.resize), U = v.left - j.left, K = v.top - j.top, W = v.width / (j.width > 0 ? j.width : 10), Y = v.height / (j.height > 0 ? j.height : 100), G = m5 - p8, X = f4 - P2, Z = B - $, J = Q - M, ee = Math.max(v.widthM, G), te = Math.max(v.heightM, X), oe = Math.max(j.widthM, Z), ne = Math.max(j.heightM, J), ae = i === e184 && !1 === [
                "absolute",
                "fixed"
            ].includes(V) && !1 === [
                "absolute",
                "fixed"
            ].includes(x2);
            let le = "fixed" === V, ie = a;
            while(!0 !== le && ie !== document)le = "fixed" === window.getComputedStyle(ie).position, ie = ie.parentNode;
            if (!0 !== l.hideFromClone && (q.style.display = "block", q.style.flex = "0 0 auto", q.style.opacity = 0, q.style.minWidth = "unset", q.style.maxWidth = "unset", q.style.minHeight = "unset", q.style.maxHeight = "unset", q.classList.remove("q-morph--internal")), !0 !== l.keepToClone && (E.style.display = "block", E.style.flex = "0 0 auto", E.style.opacity = 0, E.style.minWidth = "unset", E.style.maxWidth = "unset", E.style.minHeight = "unset", E.style.maxHeight = "unset"), E.classList.remove("q-morph--internal"), "string" === typeof l.classes && (e184.className += " " + l.classes), "string" === typeof l.style) e184.style.cssText += " " + l.style;
            else if (l.style === Object(l.style)) for(const t149 in l.style)e184.style[t149] = l.style[t149];
            const re = getMaxZIndex(q), se = getMaxZIndex(e184), ue = !0 === le ? document.documentElement : {
                scrollLeft: 0,
                scrollTop: 0
            };
            e184.style.position = !0 === le ? "fixed" : "absolute", e184.style.left = `${j.left - ue.scrollLeft}px`, e184.style.right = "unset", e184.style.top = `${j.top - ue.scrollTop}px`, e184.style.margin = 0, !0 === l.resize && (e184.style.minWidth = "unset", e184.style.maxWidth = "unset", e184.style.minHeight = "unset", e184.style.maxHeight = "unset", e184.style.overflow = "hidden", e184.style.overflowX = "hidden", e184.style.overflowY = "hidden"), document.body.appendChild(e184), void 0 !== T && (T.style.cssText = C2, T.style.transform = "none", T.style.animation = "none", T.style.transition = "none", T.style.position = e184.style.position, T.style.left = `${v.left - ue.scrollLeft}px`, T.style.right = "unset", T.style.top = `${v.top - ue.scrollTop}px`, T.style.margin = 0, T.style.pointerEvents = "none", !0 === l.resize && (T.style.minWidth = "unset", T.style.maxWidth = "unset", T.style.minHeight = "unset", T.style.maxHeight = "unset", T.style.overflow = "hidden", T.style.overflowX = "hidden", T.style.overflowY = "hidden"), document.body.appendChild(T));
            const ce = (o)=>{
                i === e184 && !0 !== n78 ? (e184.style.cssText = _1, e184.className = k2) : (e184.style.cssText = N, e184.className = H), E.parentNode === a && a.insertBefore(e184, E), q.remove(), E.remove(), void 0 !== T && T.remove(), t150 = ()=>!1
                , i.qMorphCancel = void 0, e184.qMorphCancel = void 0, "function" === typeof l.onEnd && l.onEnd(!0 === n78 ? "to" : "from", !0 === o);
            };
            if (!0 !== l.useCSS && "function" === typeof e184.animate) {
                const a = !0 === l.resize ? {
                    transform: `translate(${U}px, ${K}px)`,
                    width: `${ee}px`,
                    height: `${te}px`
                } : {
                    transform: `translate(${U}px, ${K}px) scale(${W}, ${Y})`
                }, d = !0 === l.resize ? {
                    width: `${oe}px`,
                    height: `${ne}px`
                } : {
                }, p = !0 === l.resize ? {
                    width: `${ee}px`,
                    height: `${te}px`
                } : {
                }, m = !0 === l.resize ? {
                    transform: `translate(${-1 * U}px, ${-1 * K}px)`,
                    width: `${oe}px`,
                    height: `${ne}px`
                } : {
                    transform: `translate(${-1 * U}px, ${-1 * K}px) scale(${1 / W}, ${1 / Y})`
                }, f = void 0 !== T ? {
                    opacity: l.tweenToOpacity
                } : {
                    backgroundColor: S
                }, x = void 0 !== T ? {
                    opacity: 1
                } : {
                    backgroundColor: D
                };
                c14 = e184.animate([
                    {
                        margin: 0,
                        borderWidth: h,
                        borderStyle: g,
                        borderColor: b,
                        borderRadius: y,
                        zIndex: re,
                        transformOrigin: "0 0",
                        ...a,
                        ...f
                    },
                    {
                        margin: 0,
                        borderWidth: L,
                        borderStyle: z,
                        borderColor: F,
                        borderRadius: R,
                        zIndex: se,
                        transformOrigin: "0 0",
                        transform: A,
                        ...d,
                        ...x
                    }
                ], {
                    duration: l.duration,
                    easing: l.easing,
                    fill: l.fill,
                    delay: l.delay
                }), s22 = void 0 === T ? void 0 : T.animate([
                    {
                        opacity: l.tweenFromOpacity,
                        margin: 0,
                        borderWidth: h,
                        borderStyle: g,
                        borderColor: b,
                        borderRadius: y,
                        zIndex: re,
                        transformOrigin: "0 0",
                        transform: w,
                        ...p
                    },
                    {
                        opacity: 0,
                        margin: 0,
                        borderWidth: L,
                        borderStyle: z,
                        borderColor: F,
                        borderRadius: R,
                        zIndex: se,
                        transformOrigin: "0 0",
                        ...m
                    }
                ], {
                    duration: l.duration,
                    easing: l.easing,
                    fill: l.fill,
                    delay: l.delay
                }), r17 = !0 === l.hideFromClone || !0 === ae ? void 0 : q.animate([
                    {
                        margin: `${X < 0 ? X / 2 : 0}px ${G < 0 ? G / 2 : 0}px`,
                        width: `${ee + v.marginH}px`,
                        height: `${te + v.marginV}px`
                    },
                    {
                        margin: 0,
                        width: 0,
                        height: 0
                    }
                ], {
                    duration: l.duration,
                    easing: l.easing,
                    fill: l.fill,
                    delay: l.delay
                }), u14 = !0 === l.keepToClone ? void 0 : E.animate([
                    !0 === ae ? {
                        margin: `${X < 0 ? X / 2 : 0}px ${G < 0 ? G / 2 : 0}px`,
                        width: `${ee + v.marginH}px`,
                        height: `${te + v.marginV}px`
                    } : {
                        margin: 0,
                        width: 0,
                        height: 0
                    },
                    {
                        margin: `${J < 0 ? J / 2 : 0}px ${Z < 0 ? Z / 2 : 0}px`,
                        width: `${oe + j.marginH}px`,
                        height: `${ne + j.marginV}px`
                    }
                ], {
                    duration: l.duration,
                    easing: l.easing,
                    fill: l.fill,
                    delay: l.delay
                });
                const C = (e)=>{
                    void 0 !== r17 && r17.cancel(), void 0 !== s22 && s22.cancel(), void 0 !== u14 && u14.cancel(), c14.cancel(), c14.removeEventListener("finish", C), c14.removeEventListener("cancel", C), ce(e), r17 = void 0, s22 = void 0, u14 = void 0, c14 = void 0;
                };
                i.qMorphCancel = ()=>{
                    i.qMorphCancel = void 0, o94 = !0, C();
                }, e184.qMorphCancel = ()=>{
                    e184.qMorphCancel = void 0, o94 = !0, C();
                }, c14.addEventListener("finish", C), c14.addEventListener("cancel", C), t150 = (e)=>{
                    return !0 !== o94 && void 0 !== c14 && (!0 === e ? (C(!0), !0) : (n78 = !0 !== n78, void 0 !== r17 && r17.reverse(), void 0 !== s22 && s22.reverse(), void 0 !== u14 && u14.reverse(), c14.reverse(), !0));
                };
            } else {
                const a = `q-morph-anim-${++id}`, r = document.createElement("style"), s = !0 === l.resize ? `\n            transform: translate(${U}px, ${K}px);\n            width: ${ee}px;\n            height: ${te}px;\n          ` : `transform: translate(${U}px, ${K}px) scale(${W}, ${Y});`, u = !0 === l.resize ? `\n            width: ${oe}px;\n            height: ${ne}px;\n          ` : "", c = !0 === l.resize ? `\n            width: ${ee}px;\n            height: ${te}px;\n          ` : "", d = !0 === l.resize ? `\n            transform: translate(${-1 * U}px, ${-1 * K}px);\n            width: ${oe}px;\n            height: ${ne}px;\n          ` : `transform: translate(${-1 * U}px, ${-1 * K}px) scale(${1 / W}, ${1 / Y});`, p = void 0 !== T ? `opacity: ${l.tweenToOpacity};` : `background-color: ${S};`, m = void 0 !== T ? "opacity: 1;" : `background-color: ${D};`, f = void 0 === T ? "" : `\n            @keyframes ${a}-from-tween {\n              0% {\n                opacity: ${l.tweenFromOpacity};\n                margin: 0;\n                border-width: ${h};\n                border-style: ${g};\n                border-color: ${b};\n                border-radius: ${y};\n                z-index: ${re};\n                transform-origin: 0 0;\n                transform: ${w};\n                ${c}\n              }\n\n              100% {\n                opacity: 0;\n                margin: 0;\n                border-width: ${L};\n                border-style: ${z};\n                border-color: ${F};\n                border-radius: ${R};\n                z-index: ${se};\n                transform-origin: 0 0;\n                ${d}\n              }\n            }\n          `, x = !0 === l.hideFromClone || !0 === ae ? "" : `\n            @keyframes ${a}-from {\n              0% {\n                margin: ${X < 0 ? X / 2 : 0}px ${G < 0 ? G / 2 : 0}px;\n                width: ${ee + v.marginH}px;\n                height: ${te + v.marginV}px;\n              }\n\n              100% {\n                margin: 0;\n                width: 0;\n                height: 0;\n              }\n            }\n          `, C = !0 === ae ? `\n            margin: ${X < 0 ? X / 2 : 0}px ${G < 0 ? G / 2 : 0}px;\n            width: ${ee + v.marginH}px;\n            height: ${te + v.marginV}px;\n          ` : "\n            margin: 0;\n            width: 0;\n            height: 0;\n          ", k = !0 === l.keepToClone ? "" : `\n            @keyframes ${a}-to {\n              0% {\n                ${C}\n              }\n\n              100% {\n                margin: ${J < 0 ? J / 2 : 0}px ${Z < 0 ? Z / 2 : 0}px;\n                width: ${oe + j.marginH}px;\n                height: ${ne + j.marginV}px;\n              }\n            }\n          `;
                r.innerHTML = `\n          @keyframes ${a} {\n            0% {\n              margin: 0;\n              border-width: ${h};\n              border-style: ${g};\n              border-color: ${b};\n              border-radius: ${y};\n              background-color: ${S};\n              z-index: ${re};\n              transform-origin: 0 0;\n              ${s}\n              ${p}\n            }\n\n            100% {\n              margin: 0;\n              border-width: ${L};\n              border-style: ${z};\n              border-color: ${F};\n              border-radius: ${R};\n              background-color: ${D};\n              z-index: ${se};\n              transform-origin: 0 0;\n              transform: ${A};\n              ${u}\n              ${m}\n            }\n          }\n\n          ${x}\n\n          ${f}\n\n          ${k}\n        `, document.head.appendChild(r);
                let _ = "normal";
                q.style.animation = `${l.duration}ms ${l.easing} ${l.delay}ms ${_} ${l.fill} ${a}-from`, void 0 !== T && (T.style.animation = `${l.duration}ms ${l.easing} ${l.delay}ms ${_} ${l.fill} ${a}-from-tween`), E.style.animation = `${l.duration}ms ${l.easing} ${l.delay}ms ${_} ${l.fill} ${a}-to`, e184.style.animation = `${l.duration}ms ${l.easing} ${l.delay}ms ${_} ${l.fill} ${a}`;
                const P = (t)=>{
                    t === Object(t) && t.animationName !== a || (e184.removeEventListener("animationend", P), e184.removeEventListener("animationcancel", P), ce(), r.remove());
                };
                i.qMorphCancel = ()=>{
                    i.qMorphCancel = void 0, o94 = !0, P();
                }, e184.qMorphCancel = ()=>{
                    e184.qMorphCancel = void 0, o94 = !0, P();
                }, e184.addEventListener("animationend", P), e184.addEventListener("animationcancel", P), t150 = (t)=>{
                    return !!(!0 !== o94 && e184 && q && E) && (!0 === t ? (P(), !0) : (n78 = !0 !== n78, _ = "normal" === _ ? "reverse" : "normal", q.style.animationDirection = _, T.style.animationDirection = _, E.style.animationDirection = _, e184.style.animationDirection = _, !0));
                };
            }
        };
        if (l.waitFor > 0 || "transitionend" === l.waitFor || l.waitFor === Object(l.waitFor) && "function" === typeof l.waitFor.then) {
            const t151 = l.waitFor > 0 ? new Promise((e)=>setTimeout(e, l.waitFor)
            ) : "transitionend" === l.waitFor ? new Promise((t)=>{
                const o = setTimeout(()=>{
                    n();
                }, 400), n = (a)=>{
                    clearTimeout(o), e184 && (e184.removeEventListener("transitionend", n), e184.removeEventListener("transitioncancel", n)), t();
                };
                e184.addEventListener("transitionend", n), e184.addEventListener("transitioncancel", n);
            }) : l.waitFor;
            t151.then(B1).catch(()=>{
                "function" === typeof e184.qMorphCancel && e184.qMorphCancel();
            });
        } else B1();
    };
    return "function" === typeof e183.onToggle && e183.onToggle(), requestAnimationFrame(P1), (e)=>t150(e)
    ;
}
const morphGroups = {
}, props$1 = [
    "duration",
    "delay",
    "easing",
    "fill",
    "classes",
    "style",
    "duration",
    "resize",
    "useCSS",
    "hideFromClone",
    "keepToClone",
    "tween",
    "tweenFromOpacity",
    "tweenToOpacity",
    "waitFor",
    "onEnd"
], mods = [
    "resize",
    "useCSS",
    "hideFromClone",
    "keepToClone",
    "tween"
];
function changeClass(e, t) {
    e.clsAction !== t && (e.clsAction = t, e.el.classList[t]("q-morph--invisible"));
}
function trigger(e) {
    if (!0 === e.animating || e.queue.length < 2) return;
    const [t, o] = e.queue;
    e.animating = !0, t.animating = !0, o.animating = !0, changeClass(t, "remove"), changeClass(o, "remove");
    const n79 = morph({
        from: t.el,
        to: o.el,
        onToggle () {
            changeClass(t, "add"), changeClass(o, "remove");
        },
        ...o.opts,
        onEnd (n, a) {
            void 0 !== o.opts.onEnd && o.opts.onEnd(n, a), !0 !== a && (t.animating = !1, o.animating = !1, e.animating = !1, e.cancel = void 0, e.queue.shift(), trigger(e));
        }
    });
    e.cancel = ()=>{
        n79(!0), e.cancel = void 0;
    };
}
function updateModifiers(e, t) {
    const o = t.opts;
    mods.forEach((t)=>{
        o[t] = !0 === e[t];
    });
}
function insertArgs(e, t) {
    const o = "string" === typeof e && e.length > 0 ? e.split(":") : [];
    t.name = o[0], t.group = o[1], Object.assign(t.opts, {
        duration: !0 === isNaN(o[2]) ? 300 : parseFloat(o[2]),
        waitFor: o[3]
    });
}
function updateArgs(e, t) {
    void 0 !== e.group && (t.group = e.group), void 0 !== e.name && (t.name = e.name);
    const o = t.opts;
    props$1.forEach((t)=>{
        void 0 !== e[t] && (o[t] = e[t]);
    });
}
function updateModel(e, t) {
    if (t.name !== e) !1 === t.animating && changeClass(t, "add");
    else {
        const o = morphGroups[t.group];
        void 0 === o ? (morphGroups[t.group] = {
            name: t.group,
            model: e,
            queue: [
                t
            ],
            animating: !1
        }, changeClass(t, "remove")) : o.model !== e && (o.model = e, o.queue.push(t), !1 === o.animating && 2 === o.queue.length && trigger(o));
    }
}
function updateValue(e, t) {
    let o;
    Object(t) === t ? (o = "" + t.model, updateArgs(t, e), updateModifiers(t, e)) : o = "" + t, o !== e.model ? (e.model = o, updateModel(o, e)) : !1 === e.animating && void 0 !== e.clsAction && e.el.classList[e.clsAction]("q-morph--invisible");
}
var Morph = createDirective({
    name: "morph",
    mounted (e, t) {
        const o = {
            el: e,
            animating: !1,
            opts: {
            }
        };
        updateModifiers(t.modifiers, o), insertArgs(t.arg, o), updateValue(o, t.value), e.__qmorph = o;
    },
    updated (e, t) {
        updateValue(e.__qmorph, t.value);
    },
    beforeUnmount (e) {
        const t = e.__qmorph, o = morphGroups[t.group];
        if (void 0 !== o) {
            const e185 = o.queue.indexOf(t);
            -1 !== e185 && (o.queue = o.queue.filter((e)=>e !== t
            ), 0 === o.queue.length && (void 0 !== o.cancel && o.cancel(), delete morphGroups[t.group]));
        }
        "add" === t.clsAction && e.classList.remove("q-morph--invisible"), delete e.__qmorph;
    }
});
const defaultCfg = {
    childList: !0,
    subtree: !0,
    attributes: !0,
    characterData: !0,
    attributeOldValue: !0,
    characterDataOldValue: !0
};
function update$2(e, t, o95) {
    t.handler = o95, void 0 !== t.observer && t.observer.disconnect(), t.observer = new MutationObserver((o)=>{
        if ("function" === typeof t.handler) {
            const n = t.handler(o);
            !1 !== n && !0 !== t.once || destroy(e);
        }
    }), t.observer.observe(e, t.opts);
}
function destroy(e) {
    const t = e.__qmutation;
    void 0 !== t && (void 0 !== t.observer && t.observer.disconnect(), delete e.__qmutation);
}
var Mutation = createDirective({
    name: "mutation",
    mounted (e, { modifiers: { once: t , ...o } , value: n  }) {
        const a = {
            once: t,
            opts: 0 === Object.keys(o).length ? defaultCfg : o
        };
        update$2(e, a, n), e.__qmutation = a;
    },
    updated (e, { oldValue: t , value: o  }) {
        const n = e.__qmutation;
        void 0 !== n && t !== o && update$2(e, n, o);
    },
    beforeUnmount: destroy
});
const { passive: passive  } = listenOpts;
function update$1(e, { value: t , oldValue: o  }) {
    "function" === typeof t ? (e.handler = t, "function" !== typeof o && (e.scrollTarget.addEventListener("scroll", e.scroll, passive), e.scroll())) : e.scrollTarget.removeEventListener("scroll", e.scroll, passive);
}
var ScrollFire = createDirective({
    name: "scroll-fire",
    mounted (e, t152) {
        const o = {
            scrollTarget: getScrollTarget(e),
            scroll: debounce(()=>{
                let t, n;
                o.scrollTarget === window ? (n = e.getBoundingClientRect().bottom, t = window.innerHeight) : (n = offset(e).top + height(e), t = offset(o.scrollTarget).top + height(o.scrollTarget)), n > 0 && n < t && (o.scrollTarget.removeEventListener("scroll", o.scroll, passive), o.handler(e));
            }, 25)
        };
        update$1(o, t152), e.__qscrollfire = o;
    },
    updated (e, t) {
        t.value !== t.oldValue && update$1(e.__qscrollfire, t);
    },
    beforeUnmount (e) {
        const t = e.__qscrollfire;
        t.scrollTarget.removeEventListener("scroll", t.scroll, passive), delete e.__qscrollfire;
    }
});
function update(e, { value: t , oldValue: o  }) {
    "function" === typeof t ? (e.handler = t, "function" !== typeof o && e.scrollTarget.addEventListener("scroll", e.scroll, listenOpts.passive)) : e.scrollTarget.removeEventListener("scroll", e.scroll, listenOpts.passive);
}
var Scroll = createDirective({
    name: "scroll",
    mounted (e, t) {
        const o = {
            scrollTarget: getScrollTarget(e),
            scroll () {
                o.handler(getVerticalScrollPosition(o.scrollTarget), getHorizontalScrollPosition(o.scrollTarget));
            }
        };
        update(o, t), e.__qscroll = o;
    },
    updated (e, t) {
        void 0 !== e.__qscroll && t.oldValue !== t.value && update(e.__qscroll, t);
    },
    beforeUnmount (e) {
        const t = e.__qscroll;
        t.scrollTarget.removeEventListener("scroll", t.scroll, listenOpts.passive), delete e.__qscroll;
    }
}), TouchHold = createDirective({
    name: "touch-hold",
    beforeMount (e186, t153) {
        const { modifiers: o96  } = t153;
        if (!0 !== o96.mouse && !0 !== client.has.touch) return;
        const n = {
            handler: t153.value,
            noop: noop,
            mouseStart (e) {
                "function" === typeof n.handler && !0 === leftClick(e) && (addEvt(n, "temp", [
                    [
                        document,
                        "mousemove",
                        "move",
                        "passiveCapture"
                    ],
                    [
                        document,
                        "click",
                        "end",
                        "notPassiveCapture"
                    ]
                ]), n.start(e, !0));
            },
            touchStart (e) {
                if (void 0 !== e.target && "function" === typeof n.handler) {
                    const t = e.target;
                    addEvt(n, "temp", [
                        [
                            t,
                            "touchmove",
                            "move",
                            "passiveCapture"
                        ],
                        [
                            t,
                            "touchcancel",
                            "end",
                            "notPassiveCapture"
                        ],
                        [
                            t,
                            "touchend",
                            "end",
                            "notPassiveCapture"
                        ]
                    ]), n.start(e);
                }
            },
            start (e187, t154) {
                n.origin = position(e187);
                const o = Date.now();
                !0 === client.is.mobile && (document.body.classList.add("non-selectable"), clearSelection(), n.styleCleanup = (e)=>{
                    n.styleCleanup = void 0;
                    const t = ()=>{
                        document.body.classList.remove("non-selectable");
                    };
                    !0 === e ? (clearSelection(), setTimeout(t, 10)) : t();
                }), n.triggered = !1, n.sensitivity = !0 === t154 ? n.mouseSensitivity : n.touchSensitivity, n.timer = setTimeout(()=>{
                    clearSelection(), n.triggered = !0, n.handler({
                        evt: e187,
                        touch: !0 !== t154,
                        mouse: !0 === t154,
                        position: n.origin,
                        duration: Date.now() - o
                    });
                }, n.duration);
            },
            move (e) {
                const { top: t , left: o  } = position(e);
                (Math.abs(o - n.origin.left) >= n.sensitivity || Math.abs(t - n.origin.top) >= n.sensitivity) && clearTimeout(n.timer);
            },
            end (e) {
                cleanEvt(n, "temp"), void 0 !== n.styleCleanup && n.styleCleanup(n.triggered), !0 === n.triggered ? void 0 !== e && stopAndPrevent(e) : clearTimeout(n.timer);
            }
        }, a = [
            600,
            5,
            7
        ];
        "string" === typeof t153.arg && t153.arg.length > 0 && t153.arg.split(":").forEach((e, t)=>{
            const o = parseInt(e, 10);
            o && (a[t] = o);
        }), [n.duration, n.touchSensitivity, n.mouseSensitivity] = a, e186.__qtouchhold = n, !0 === o96.mouse && addEvt(n, "main", [
            [
                e186,
                "mousedown",
                "mouseStart",
                `passive${!0 === o96.mouseCapture ? "Capture" : ""}`
            ]
        ]), !0 === client.has.touch && addEvt(n, "main", [
            [
                e186,
                "touchstart",
                "touchStart",
                `passive${!0 === o96.capture ? "Capture" : ""}`
            ],
            [
                e186,
                "touchend",
                "noop",
                "notPassiveCapture"
            ]
        ]);
    },
    updated (e, t) {
        const o = e.__qtouchhold;
        void 0 !== o && t.oldValue !== t.value && ("function" !== typeof t.value && o.end(), o.handler = t.value);
    },
    beforeUnmount (e) {
        const t = e.__qtouchhold;
        void 0 !== t && (cleanEvt(t, "main"), cleanEvt(t, "temp"), clearTimeout(t.timer), void 0 !== t.styleCleanup && t.styleCleanup(), delete e.__qtouchhold);
    }
});
const keyCodes = {
    esc: 27,
    tab: 9,
    enter: 13,
    space: 32,
    up: 38,
    left: 37,
    right: 39,
    down: 40,
    delete: [
        8,
        46
    ]
}, keyRegex = new RegExp(`^([\\d+]+|${Object.keys(keyCodes).join("|")})$`, "i");
function shouldEnd(e, t) {
    const { top: o , left: n  } = position(e);
    return Math.abs(n - t.left) >= 7 || Math.abs(o - t.top) >= 7;
}
var TouchRepeat = createDirective({
    name: "touch-repeat",
    beforeMount (e188, { modifiers: t155 , value: o97 , arg: n80  }) {
        const a49 = Object.keys(t155).reduce((e, t)=>{
            if (!0 === keyRegex.test(t)) {
                const o = isNaN(parseInt(t, 10)) ? keyCodes[t.toLowerCase()] : parseInt(t, 10);
                o >= 0 && e.push(o);
            }
            return e;
        }, []);
        if (!0 !== t155.mouse && !0 !== client.has.touch && 0 === a49.length) return;
        const l = "string" === typeof n80 && n80.length > 0 ? n80.split(":").map((e)=>parseInt(e, 10)
        ) : [
            0,
            600,
            300
        ], i = l.length - 1, r = {
            keyboard: a49,
            handler: o97,
            noop: noop,
            mouseStart (e) {
                void 0 === r.event && "function" === typeof r.handler && !0 === leftClick(e) && (addEvt(r, "temp", [
                    [
                        document,
                        "mousemove",
                        "move",
                        "passiveCapture"
                    ],
                    [
                        document,
                        "click",
                        "end",
                        "notPassiveCapture"
                    ]
                ]), r.start(e, !0));
            },
            keyboardStart (t) {
                if ("function" === typeof r.handler && !0 === isKeyCode(t, a49)) {
                    if ((0 === l[0] || void 0 !== r.event) && (stopAndPrevent(t), e188.focus(), void 0 !== r.event)) return;
                    addEvt(r, "temp", [
                        [
                            document,
                            "keyup",
                            "end",
                            "notPassiveCapture"
                        ],
                        [
                            document,
                            "click",
                            "end",
                            "notPassiveCapture"
                        ]
                    ]), r.start(t, !1, !0);
                }
            },
            touchStart (e) {
                if (void 0 !== e.target && "function" === typeof r.handler) {
                    const t = e.target;
                    addEvt(r, "temp", [
                        [
                            t,
                            "touchmove",
                            "move",
                            "passiveCapture"
                        ],
                        [
                            t,
                            "touchcancel",
                            "end",
                            "notPassiveCapture"
                        ],
                        [
                            t,
                            "touchend",
                            "end",
                            "notPassiveCapture"
                        ]
                    ]), r.start(e);
                }
            },
            start (e189, t156, o) {
                function n(e) {
                    r.styleCleanup = void 0, document.documentElement.style.cursor = "";
                    const t = ()=>{
                        document.body.classList.remove("non-selectable");
                    };
                    !0 === e ? (clearSelection(), setTimeout(t, 10)) : t();
                }
                !0 !== o && (r.origin = position(e189)), !0 === client.is.mobile && (document.body.classList.add("non-selectable"), clearSelection(), r.styleCleanup = n), r.event = {
                    touch: !0 !== t156 && !0 !== o,
                    mouse: !0 === t156,
                    keyboard: !0 === o,
                    startTime: Date.now(),
                    repeatCount: 0
                };
                const a = ()=>{
                    if (void 0 === r.event) return;
                    0 === r.event.repeatCount && (r.event.evt = e189, !0 === o ? r.event.keyCode = e189.keyCode : r.event.position = position(e189), !0 !== client.is.mobile && (document.documentElement.style.cursor = "pointer", document.body.classList.add("non-selectable"), clearSelection(), r.styleCleanup = n)), r.event.duration = Date.now() - r.event.startTime, r.event.repeatCount += 1, r.handler(r.event);
                    const t = i < r.event.repeatCount ? i : r.event.repeatCount;
                    r.timer = setTimeout(a, l[t]);
                };
                0 === l[0] ? a() : r.timer = setTimeout(a, l[0]);
            },
            move (e) {
                void 0 !== r.event && !0 === shouldEnd(e, r.origin) && clearTimeout(r.timer);
            },
            end (e) {
                void 0 !== r.event && (void 0 !== r.styleCleanup && r.styleCleanup(!0), void 0 !== e && r.event.repeatCount > 0 && stopAndPrevent(e), cleanEvt(r, "temp"), clearTimeout(r.timer), r.event = void 0);
            }
        };
        e188.__qtouchrepeat = r, !0 === t155.mouse && addEvt(r, "main", [
            [
                e188,
                "mousedown",
                "mouseStart",
                `passive${!0 === t155.mouseCapture ? "Capture" : ""}`
            ]
        ]), !0 === client.has.touch && addEvt(r, "main", [
            [
                e188,
                "touchstart",
                "touchStart",
                `passive${!0 === t155.capture ? "Capture" : ""}`
            ],
            [
                e188,
                "touchend",
                "noop",
                "notPassiveCapture"
            ]
        ]), a49.length > 0 && addEvt(r, "main", [
            [
                e188,
                "keydown",
                "keyboardStart",
                `notPassive${!0 === t155.keyCapture ? "Capture" : ""}`
            ]
        ]);
    },
    updated (e, { oldValue: t , value: o  }) {
        const n = e.__qtouchrepeat;
        void 0 !== n && t !== o && ("function" !== typeof o && n.end(), n.handler = o);
    },
    beforeUnmount (e) {
        const t = e.__qtouchrepeat;
        void 0 !== t && (clearTimeout(t.timer), cleanEvt(t, "main"), cleanEvt(t, "temp"), void 0 !== t.styleCleanup && t.styleCleanup(), delete e.__qtouchrepeat);
    }
}), directives = Object.freeze({
    __proto__: null,
    ClosePopup: ClosePopup,
    Intersection: Intersection,
    Morph: Morph,
    Mutation: Mutation,
    Ripple: Ripple,
    ScrollFire: ScrollFire,
    Scroll: Scroll,
    TouchHold: TouchHold,
    TouchPan: TouchPan,
    TouchRepeat: TouchRepeat,
    TouchSwipe: TouchSwipe
});
function getCssVar(e, t = document.body) {
    if ("string" !== typeof e) throw new TypeError("Expected a string as propName");
    if (!(t instanceof Element)) throw new TypeError("Expected a DOM element");
    return getComputedStyle(t).getPropertyValue(`--q-${e}`).trim() || null;
}
let metaValue;
function getProp() {
    return client.is.winphone ? "msapplication-navbutton-color" : client.is.safari ? "apple-mobile-web-app-status-bar-style" : "theme-color";
}
function getMetaTag(e) {
    const t = document.getElementsByTagName("META");
    for(const o in t)if (t[o].name === e) return t[o];
}
function setColor(e) {
    void 0 === metaValue && (metaValue = getProp());
    let t = getMetaTag(metaValue);
    const o = void 0 === t;
    o && (t = document.createElement("meta"), t.setAttribute("name", metaValue)), t.setAttribute("content", e), o && document.head.appendChild(t);
}
var AddressbarColor = {
    set: !0 !== client.is.mobile || !0 !== client.is.nativeMobile && !0 !== client.is.winphone && !0 !== client.is.safari && !0 !== client.is.webkit && !0 !== client.is.vivaldi ? noop : (e)=>{
        const t = e || getCssVar("primary");
        !0 === client.is.nativeMobile && window.StatusBar ? window.StatusBar.backgroundColorByHexString(t) : setColor(t);
    },
    install ({ $q: e  }) {
        e.addressbarColor = this, e.config.addressbarColor && this.set(e.config.addressbarColor);
    }
};
const prefixes = {
};
function getFullscreenElement() {
    return document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
}
function promisify(e, t) {
    try {
        const o = e[t]();
        return void 0 === o ? Promise.resolve() : o;
    } catch (e190) {
        return Promise.reject(e190);
    }
}
const Plugin$5 = defineReactivePlugin({
    isActive: !1,
    activeEl: null
}, {
    isCapable: !1,
    request (e) {
        if (!0 === Plugin$5.isCapable && !1 === Plugin$5.isActive) {
            const t = e || document.documentElement;
            return promisify(t, prefixes.request);
        }
        return Plugin$5.__getErr();
    },
    exit () {
        return !0 === Plugin$5.isCapable && !0 === Plugin$5.isActive ? promisify(document, prefixes.exit) : Plugin$5.__getErr();
    },
    toggle (e) {
        return !0 === Plugin$5.isActive ? Plugin$5.exit() : Plugin$5.request(e);
    },
    install ({ $q: e  }) {
        e.fullscreen = this;
    }
});
{
    function init() {
        prefixes.request = [
            "requestFullscreen",
            "msRequestFullscreen",
            "mozRequestFullScreen",
            "webkitRequestFullscreen"
        ].find((e)=>void 0 !== document.documentElement[e]
        ), Plugin$5.isCapable = void 0 !== prefixes.request, !1 !== Plugin$5.isCapable ? (Plugin$5.__getErr = ()=>Promise.resolve()
        , prefixes.exit = [
            "exitFullscreen",
            "msExitFullscreen",
            "mozCancelFullScreen",
            "webkitExitFullscreen"
        ].find((e)=>document[e]
        ), Plugin$5.isActive = !!getFullscreenElement(), [
            "onfullscreenchange",
            "onmsfullscreenchange",
            "onwebkitfullscreenchange"
        ].forEach((e)=>{
            document[e] = ()=>{
                Plugin$5.isActive = !1 === Plugin$5.isActive, !1 === Plugin$5.isActive ? (Plugin$5.activeEl = null, changeGlobalNodesTarget(document.body)) : (Plugin$5.activeEl = getFullscreenElement(), changeGlobalNodesTarget(Plugin$5.activeEl === document.documentElement ? document.body : Plugin$5.activeEl));
            };
        })) : Plugin$5.__getErr = ()=>Promise.reject("Not capable")
        ;
    }
    init();
}const Plugin$4 = defineReactivePlugin({
    appVisible: !0
}, {
    install ({ $q: e  }) {
        Object.defineProperty(e, "appVisible", {
            get: ()=>this.appVisible
        });
    }
});
{
    let e, t;
    if ("undefined" !== typeof document.hidden ? (e = "hidden", t = "visibilitychange") : "undefined" !== typeof document.msHidden ? (e = "msHidden", t = "msvisibilitychange") : "undefined" !== typeof document.webkitHidden && (e = "webkitHidden", t = "webkitvisibilitychange"), t && "undefined" !== typeof document[e]) {
        const o = ()=>{
            Plugin$4.appVisible = !document[e];
        };
        document.addEventListener(t, o, !1);
    }
}var BottomSheet$1 = createComponent({
    name: "BottomSheetPlugin",
    props: {
        ...useDarkProps,
        title: String,
        message: String,
        actions: Array,
        grid: Boolean,
        cardClass: [
            String,
            Array,
            Object
        ],
        cardStyle: [
            String,
            Array,
            Object
        ]
    },
    emits: [
        "ok",
        "hide"
    ],
    setup (e191, { emit: t157  }) {
        const { proxy: o  } = _vue.getCurrentInstance(), n = useDark(e191, o.$q), a = _vue.ref(null);
        function l() {
            a.value.show();
        }
        function i() {
            a.value.hide();
        }
        function r(e) {
            t157("ok", e), i();
        }
        function s() {
            t157("hide");
        }
        function u() {
            return e191.actions.map((e)=>{
                const t158 = e.avatar || e.img;
                return void 0 === e.label ? _vue.h(QSeparator, {
                    class: "col-all",
                    dark: n.value
                }) : _vue.h("div", {
                    class: [
                        "q-bottom-sheet__item q-hoverable q-focusable cursor-pointer relative-position",
                        e.class
                    ],
                    tabindex: 0,
                    onClick () {
                        r(e);
                    },
                    onKeyup (t) {
                        13 === t.keyCode && r(e);
                    }
                }, [
                    _vue.h("div", {
                        class: "q-focus-helper"
                    }),
                    e.icon ? _vue.h(QIcon, {
                        name: e.icon,
                        color: e.color
                    }) : t158 ? _vue.h("img", {
                        class: e.avatar ? "q-bottom-sheet__avatar" : "",
                        src: t158
                    }) : _vue.h("div", {
                        class: "q-bottom-sheet__empty-icon"
                    }),
                    _vue.h("div", e.label)
                ]);
            });
        }
        function c() {
            return e191.actions.map((e)=>{
                const t159 = e.avatar || e.img;
                return void 0 === e.label ? _vue.h(QSeparator, {
                    spaced: !0,
                    dark: n.value
                }) : _vue.h(QItem, {
                    class: [
                        "q-bottom-sheet__item",
                        e.classes
                    ],
                    tabindex: 0,
                    clickable: !0,
                    dark: n.value,
                    onClick () {
                        r(e);
                    },
                    onKeyup (t) {
                        13 === t.keyCode && r(e);
                    }
                }, ()=>[
                        _vue.h(QItemSection, {
                            avatar: !0
                        }, ()=>e.icon ? _vue.h(QIcon, {
                                name: e.icon,
                                color: e.color
                            }) : t159 ? _vue.h("img", {
                                class: e.avatar ? "q-bottom-sheet__avatar" : "",
                                src: t159
                            }) : null
                        ),
                        _vue.h(QItemSection, ()=>e.label
                        )
                    ]
                );
            });
        }
        function d() {
            const t = [];
            return e191.title && t.push(_vue.h(QCardSection, {
                class: "q-dialog__title"
            }, ()=>e191.title
            )), e191.message && t.push(_vue.h(QCardSection, {
                class: "q-dialog__message"
            }, ()=>e191.message
            )), t.push(!0 === e191.grid ? _vue.h("div", {
                class: "row items-stretch justify-start"
            }, u()) : _vue.h("div", c())), t;
        }
        function p() {
            return [
                _vue.h(QCard, {
                    class: [
                        `q-bottom-sheet q-bottom-sheet--${!0 === e191.grid ? "grid" : "list"}` + (!0 === n.value ? " q-bottom-sheet--dark q-dark" : ""),
                        e191.cardClass
                    ],
                    style: e191.cardStyle
                }, d)
            ];
        }
        return Object.assign(o, {
            show: l,
            hide: i
        }), ()=>_vue.h(QDialog, {
                ref: a,
                position: "bottom",
                onHide: s
            }, p)
        ;
    }
});
function merge(e, t) {
    for(const o in t)"spinner" !== o && Object(t[o]) === t[o] ? (e[o] = Object(e[o]) !== e[o] ? {
    } : {
        ...e[o]
    }, merge(e[o], t[o])) : e[o] = t[o];
}
function globalDialog(e192, t160, o98) {
    return (n81)=>{
        let a, l;
        const i = !0 === t160 && void 0 !== n81.component;
        if (!0 === i) {
            const { component: e , componentProps: t  } = n81;
            a = "string" === typeof e ? o98.component(e) : e, l = t;
        } else {
            const { class: t , style: o , ...i } = n81;
            a = e192, l = i, void 0 !== t && (i.cardClass = t), void 0 !== o && (i.cardStyle = o);
        }
        let r, s = !1;
        const u = _vue.ref(null), c = createGlobalNode(), d = (e)=>{
            null !== u.value && void 0 !== u.value[e] ? u.value[e]() : r.$.subTree && r.$.subTree.component && r.$.subTree.component.proxy && r.$.subTree.component.proxy[e] ? r.$.subTree.component.proxy[e]() : console.error("[Quasar] Incorrectly defined Dialog component");
        }, p = [], v = [], m = {
            onOk (e) {
                return p.push(e), m;
            },
            onCancel (e) {
                return v.push(e), m;
            },
            onDismiss (e) {
                return p.push(e), v.push(e), m;
            },
            hide () {
                return d("hide"), m;
            },
            update (e) {
                if (null !== r) {
                    if (!0 === i) Object.assign(l, e);
                    else {
                        const { class: t , style: o , ...n } = e;
                        void 0 !== t && (n.cardClass = t), void 0 !== o && (n.cardStyle = o), merge(l, n);
                    }
                    r.$forceUpdate();
                }
                return m;
            }
        }, f = (e)=>{
            s = !0, p.forEach((t)=>{
                t(e);
            });
        }, g = ()=>{
            b.unmount(c), removeGlobalNode(c), b = null, r = null, !0 !== s && v.forEach((e)=>{
                e();
            });
        };
        let b = createChildApp({
            name: "QGlobalDialog",
            setup () {
                return ()=>_vue.h(a, {
                        ref: u,
                        ...l,
                        onOk: f,
                        onHide: g
                    })
                ;
            }
        }, o98);
        function y() {
            d("show");
        }
        return r = b.mount(c), null !== u.value ? y() : "function" === typeof a.__asyncLoader && a.__asyncLoader().then(()=>{
            _vue.nextTick(y);
        }), m;
    };
}
var BottomSheet = {
    install ({ $q: e , parentApp: t  }) {
        !0 === this.__installed ? e.bottomSheet = globalDialog(BottomSheet$1, !1, t) : this.create = e.bottomSheet = globalDialog(BottomSheet$1, !1, t);
    }
};
function encode$1(e) {
    return encodeURIComponent(e);
}
function decode$1(e) {
    return decodeURIComponent(e);
}
function stringifyCookieValue(e) {
    return encode$1(e === Object(e) ? JSON.stringify(e) : "" + e);
}
function read(e) {
    if ("" === e) return e;
    0 === e.indexOf('"') && (e = e.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, "\\")), e = decode$1(e.replace(/\+/g, " "));
    try {
        e = JSON.parse(e);
    } catch (e193) {
    }
    return e;
}
function getString(e) {
    const t = new Date;
    return t.setMilliseconds(t.getMilliseconds() + e), t.toUTCString();
}
function parseExpireString(e) {
    let t = 0;
    const o = e.match(/(\d+)d/), n = e.match(/(\d+)h/), a = e.match(/(\d+)m/), l = e.match(/(\d+)s/);
    return o && (t += 86400000 * o[1]), n && (t += 3600000 * n[1]), a && (t += 60000 * a[1]), l && (t += 1000 * l[1]), 0 === t ? e : getString(t);
}
function set(e, t, o = {
}, n) {
    let a, l;
    void 0 !== o.expires && ("[object Date]" === Object.prototype.toString.call(o.expires) ? a = o.expires.toUTCString() : "string" === typeof o.expires ? a = parseExpireString(o.expires) : (l = parseFloat(o.expires), a = !1 === isNaN(l) ? getString(86400000 * l) : o.expires));
    const i = `${encode$1(e)}=${stringifyCookieValue(t)}`, r = [
        i,
        void 0 !== a ? "; Expires=" + a : "",
        o.path ? "; Path=" + o.path : "",
        o.domain ? "; Domain=" + o.domain : "",
        o.sameSite ? "; SameSite=" + o.sameSite : "",
        o.httpOnly ? "; HttpOnly" : "",
        o.secure ? "; Secure" : "",
        o.other ? "; " + o.other : ""
    ].join("");
    if (n) {
        n.req.qCookies ? n.req.qCookies.push(r) : n.req.qCookies = [
            r
        ], n.res.setHeader("Set-Cookie", n.req.qCookies);
        let t = n.req.headers.cookie || "";
        if (void 0 !== a && l < 0) {
            const o = get(e, n);
            void 0 !== o && (t = t.replace(`${e}=${o}; `, "").replace(`; ${e}=${o}`, "").replace(`${e}=${o}`, ""));
        } else t = t ? `${i}; ${t}` : r;
        n.req.headers.cookie = t;
    } else document.cookie = r;
}
function get(e, t) {
    const o = t ? t.req.headers : document, n = o.cookie ? o.cookie.split("; ") : [], a = n.length;
    let l, i, r, s = e ? null : {
    }, u = 0;
    for(; u < a; u++)if (l = n[u].split("="), i = decode$1(l.shift()), r = l.join("="), e) {
        if (e === i) {
            s = read(r);
            break;
        }
    } else s[i] = r;
    return s;
}
function remove(e, t, o) {
    set(e, "", {
        expires: -1,
        ...t
    }, o);
}
function has(e, t) {
    return null !== get(e, t);
}
function getObject(e) {
    return {
        get: (t)=>get(t, e)
        ,
        set: (t, o, n)=>set(t, o, n, e)
        ,
        has: (t)=>has(t, e)
        ,
        remove: (t, o)=>remove(t, o, e)
        ,
        getAll: ()=>get(null, e)
    };
}
const Plugin$3 = {
    install ({ $q: e , ssrContext: t  }) {
        e.cookies = this;
    }
};
Object.assign(Plugin$3, getObject());
var DialogPlugin = createComponent({
    name: "DialogPlugin",
    props: {
        ...useDarkProps,
        title: String,
        message: String,
        prompt: Object,
        options: Object,
        progress: [
            Boolean,
            Object
        ],
        html: Boolean,
        ok: {
            type: [
                String,
                Object,
                Boolean
            ],
            default: !0
        },
        cancel: [
            String,
            Object,
            Boolean
        ],
        focus: {
            type: String,
            default: "ok",
            validator: (e)=>[
                    "ok",
                    "cancel",
                    "none"
                ].includes(e)
        },
        stackButtons: Boolean,
        color: String,
        cardClass: [
            String,
            Array,
            Object
        ],
        cardStyle: [
            String,
            Array,
            Object
        ]
    },
    emits: [
        "ok",
        "hide"
    ],
    setup (e194, { emit: t161  }) {
        const { proxy: o99  } = _vue.getCurrentInstance(), { $q: n  } = o99, a50 = useDark(e194, n), l = _vue.ref(null), i = _vue.ref(void 0 !== e194.prompt ? e194.prompt.model : void 0 !== e194.options ? e194.options.model : void 0), r = _vue.computed(()=>"q-dialog-plugin" + (!0 === a50.value ? " q-dialog-plugin--dark q-dark" : "") + (!1 !== e194.progress ? " q-dialog-plugin--progress" : "")
        ), s = _vue.computed(()=>e194.color || (!0 === a50.value ? "amber" : "primary")
        ), u = _vue.computed(()=>!1 === e194.progress ? null : Object(e194.progress) === e194.progress ? {
                component: e194.progress.spinner || QSpinner,
                props: {
                    color: e194.progress.color || s.value
                }
            } : {
                component: QSpinner,
                props: {
                    color: s.value
                }
            }
        ), c = _vue.computed(()=>void 0 !== e194.prompt || void 0 !== e194.options
        ), d = _vue.computed(()=>{
            if (!0 !== c.value) return {
            };
            const { model: t , isValid: o , items: n , ...a } = void 0 !== e194.prompt ? e194.prompt : e194.options;
            return a;
        }), p = _vue.computed(()=>Object(e194.ok) === e194.ok ? n.lang.label.ok : !0 === e194.ok ? n.lang.label.ok : e194.ok
        ), v = _vue.computed(()=>Object(e194.cancel) === e194.cancel ? n.lang.label.cancel : !0 === e194.cancel ? n.lang.label.cancel : e194.cancel
        ), m = _vue.computed(()=>{
            return void 0 !== e194.prompt ? void 0 !== e194.prompt.isValid && !0 !== e194.prompt.isValid(i.value) : void 0 !== e194.options && void 0 !== e194.options.isValid && !0 !== e194.options.isValid(i.value);
        }), f = _vue.computed(()=>({
                color: s.value,
                label: p.value,
                ripple: !1,
                ...Object(e194.ok) === e194.ok ? e194.ok : {
                    flat: !0
                },
                disable: m.value,
                "data-autofocus": "ok" === e194.focus && !0 !== c.value || void 0,
                onClick: S
            })
        ), g = _vue.computed(()=>({
                color: s.value,
                label: v.value,
                ripple: !1,
                ...Object(e194.cancel) === e194.cancel ? e194.cancel : {
                    flat: !0
                },
                "data-autofocus": "cancel" === e194.focus && !0 !== c.value || void 0,
                onClick: w
            })
        );
        function b() {
            l.value.show();
        }
        function y() {
            l.value.hide();
        }
        function S() {
            t161("ok", _vue.toRaw(i.value)), y();
        }
        function w() {
            y();
        }
        function x() {
            t161("hide");
        }
        function C(e) {
            i.value = e;
        }
        function k(t) {
            !0 !== m.value && "textarea" !== e194.prompt.type && !0 === isKeyCode(t, 13) && S();
        }
        function _(t, o) {
            return !0 === e194.html ? _vue.h(QCardSection, {
                class: t,
                innerHTML: o
            }) : _vue.h(QCardSection, {
                class: t
            }, ()=>o
            );
        }
        function q() {
            return [
                _vue.h(QInput, {
                    modelValue: i.value,
                    ...d.value,
                    color: s.value,
                    dense: !0,
                    autofocus: !0,
                    dark: a50.value,
                    "onUpdate:modelValue": C,
                    onKeyup: k
                })
            ];
        }
        function T() {
            return [
                _vue.h(QOptionGroup, {
                    modelValue: i.value,
                    ...d.value,
                    color: s.value,
                    options: e194.options.items,
                    dark: a50.value,
                    "onUpdate:modelValue": C
                })
            ];
        }
        function P() {
            const t = [];
            return e194.cancel && t.push(_vue.h(QBtn, g.value)), e194.ok && t.push(_vue.h(QBtn, f.value)), _vue.h(QCardActions, {
                class: !0 === e194.stackButtons ? "items-end" : "",
                vertical: e194.stackButtons,
                align: "right"
            }, ()=>t
            );
        }
        function $() {
            const t = [];
            return e194.title && t.push(_("q-dialog__title", e194.title)), !1 !== e194.progress && t.push(_vue.h(QCardSection, {
                class: "q-dialog__progress"
            }, ()=>_vue.h(u.value.component, u.value.props)
            )), e194.message && t.push(_("q-dialog__message", e194.message)), void 0 !== e194.prompt ? t.push(_vue.h(QCardSection, {
                class: "scroll q-dialog-plugin__form"
            }, q)) : void 0 !== e194.options && t.push(_vue.h(QSeparator, {
                dark: a50.value
            }), _vue.h(QCardSection, {
                class: "scroll q-dialog-plugin__form"
            }, T), _vue.h(QSeparator, {
                dark: a50.value
            })), (e194.ok || e194.cancel) && t.push(P()), t;
        }
        function M() {
            return [
                _vue.h(QCard, {
                    class: [
                        r.value,
                        e194.cardClass
                    ],
                    style: e194.cardStyle,
                    dark: a50.value
                }, $)
            ];
        }
        return _vue.watch(()=>e194.prompt && e194.prompt.model
        , C), _vue.watch(()=>e194.options && e194.options.model
        , C), Object.assign(o99, {
            show: b,
            hide: y
        }), ()=>_vue.h(QDialog, {
                ref: l,
                onHide: x
            }, M)
        ;
    }
}), Dialog = {
    install ({ $q: e , parentApp: t  }) {
        !0 === this.__installed ? e.dialog = globalDialog(DialogPlugin, !0, t) : this.create = e.dialog = globalDialog(DialogPlugin, !0, t);
    }
};
const reqProps = {
    ref: "bar"
};
var LoadingBar = defineReactivePlugin({
    isActive: !1
}, {
    start: noop,
    stop: noop,
    increment: noop,
    setDefaults: noop,
    install ({ $q: e195 , parentApp: t162  }) {
        if (e195.loadingBar = this, !0 === this.__installed) return void (void 0 !== e195.config.loadingBar && this.setDefaults(e195.config.loadingBar));
        const o = _vue.ref(void 0 !== e195.config.loadingBar ? {
            ...e195.config.loadingBar,
            ...reqProps
        } : {
            ...reqProps
        }), n = createGlobalNode("q-loading-bar"), a = createChildApp({
            name: "LoadingBar",
            devtools: {
                hide: !0
            },
            setup: ()=>()=>_vue.h(QAjaxBar, o.value)
        }, t162).mount(n);
        Object.assign(this, {
            start: (e)=>{
                const t = a.$refs.bar;
                t.start(e), this.isActive = t.calls > 0;
            },
            stop: ()=>{
                const e = a.$refs.bar;
                e.stop(), this.isActive = e.calls > 0;
            },
            increment () {
                const e = a.$refs.bar;
                e.increment.apply(null, arguments);
            },
            setDefaults: (e)=>{
                e === Object(e) && (o.value = {
                    ...o.value,
                    ...e,
                    ...reqProps
                });
            }
        });
    }
});
let app, vm, timeout, uid$1 = 0, props = {
};
const originalDefaults = {
    delay: 0,
    message: !1,
    html: !1,
    spinnerSize: 80,
    spinnerColor: "",
    messageColor: "",
    backgroundColor: "",
    boxClass: "",
    spinner: QSpinner,
    customClass: ""
}, defaults$1 = {
    ...originalDefaults
}, Plugin$2 = defineReactivePlugin({
    isActive: !1
}, {
    show (e196) {
        if (props = e196 === Object(e196) && !0 === e196.ignoreDefaults ? {
            ...originalDefaults,
            ...e196
        } : {
            ...defaults$1,
            ...e196
        }, Plugin$2.isActive = !0, void 0 !== app) return props.uid = uid$1, void vm.$forceUpdate();
        props.uid = ++uid$1, clearTimeout(timeout), timeout = setTimeout(()=>{
            timeout = void 0;
            const e197 = createGlobalNode("q-loading");
            app = _vue.createApp({
                name: "QLoading",
                setup () {
                    function t() {
                        !0 !== Plugin$2.isActive && void 0 !== app && (preventScroll(!1), app.unmount(e197), removeGlobalNode(e197), app = void 0, vm = void 0);
                    }
                    function o() {
                        if (!0 !== Plugin$2.isActive) return null;
                        const e = [
                            _vue.h(props.spinner, {
                                class: "q-loading__spinner",
                                color: props.spinnerColor,
                                size: props.spinnerSize
                            })
                        ];
                        return props.message && e.push(_vue.h("div", {
                            class: "q-loading__message" + (props.messageColor ? ` text-${props.messageColor}` : ""),
                            [!0 === props.html ? "innerHTML" : "textContent"]: props.message
                        })), _vue.h("div", {
                            class: "q-loading fullscreen flex flex-center z-max " + props.customClass.trim(),
                            key: props.uid
                        }, [
                            _vue.h("div", {
                                class: "q-loading__backdrop" + (props.backgroundColor ? ` bg-${props.backgroundColor}` : "")
                            }),
                            _vue.h("div", {
                                class: "q-loading__box column items-center " + props.boxClass
                            }, e)
                        ]);
                    }
                    return _vue.onMounted(()=>{
                        preventScroll(!0);
                    }), ()=>_vue.h(_vue.Transition, {
                            name: "q-transition--fade",
                            appear: !0,
                            onAfterLeave: t
                        }, o)
                    ;
                }
            }), vm = app.mount(e197);
        }, props.delay);
    },
    hide () {
        !0 === Plugin$2.isActive && (void 0 !== timeout && (clearTimeout(timeout), timeout = void 0), Plugin$2.isActive = !1);
    },
    setDefaults (e) {
        e === Object(e) && Object.assign(defaults$1, e);
    },
    install ({ $q: e  }) {
        e.loading = this, void 0 !== e.config.loading && this.setDefaults(e.config.loading);
    }
});
let updateId, currentClientMeta;
const clientList = [];
function normalize(e) {
    e.title && (e.title = e.titleTemplate ? e.titleTemplate(e.title) : e.title, delete e.titleTemplate), [
        [
            "meta",
            "content"
        ],
        [
            "link",
            "href"
        ]
    ].forEach((t)=>{
        const o = e[t[0]], n = t[1];
        for(const e198 in o){
            const t = o[e198];
            t.template && (1 === Object.keys(t).length ? delete o[e198] : (t[n] = t.template(t[n] || ""), delete t.template));
        }
    });
}
function changed(e, t) {
    if (Object.keys(e).length !== Object.keys(t).length) return !0;
    for(const o in e)if (e[o] !== t[o]) return !0;
}
function bodyFilter(e) {
    return !1 === [
        "class",
        "style"
    ].includes(e);
}
function htmlFilter(e) {
    return !1 === [
        "lang",
        "dir"
    ].includes(e);
}
function diff(e200, t) {
    const o = {
    }, n = {
    };
    return void 0 === e200 ? {
        add: t,
        remove: n
    } : (e200.title !== t.title && (o.title = t.title), [
        "meta",
        "link",
        "script",
        "htmlAttr",
        "bodyAttr"
    ].forEach((a)=>{
        const l = e200[a], i = t[a];
        if (n[a] = [], void 0 !== l && null !== l) {
            o[a] = {
            };
            for(const e in l)!1 === i.hasOwnProperty(e) && n[a].push(e);
            for(const e199 in i)!1 === l.hasOwnProperty(e199) ? o[a][e199] = i[e199] : !0 === changed(l[e199], i[e199]) && (n[a].push(e199), o[a][e199] = i[e199]);
        } else o[a] = i;
    }), {
        add: o,
        remove: n
    });
}
function apply({ add: e201 , remove: t163  }) {
    e201.title && (document.title = e201.title), Object.keys(t163).length > 0 && ([
        "meta",
        "link",
        "script"
    ].forEach((e)=>{
        t163[e].forEach((t)=>{
            document.head.querySelector(`${e}[data-qmeta="${t}"]`).remove();
        });
    }), t163.htmlAttr.filter(htmlFilter).forEach((e)=>{
        document.documentElement.removeAttribute(e);
    }), t163.bodyAttr.filter(bodyFilter).forEach((e)=>{
        document.body.removeAttribute(e);
    })), [
        "meta",
        "link",
        "script"
    ].forEach((t)=>{
        const o = e201[t];
        for(const e in o){
            const n = document.createElement(t);
            for(const t164 in o[e])"innerHTML" !== t164 && n.setAttribute(t164, o[e][t164]);
            n.setAttribute("data-qmeta", e), "script" === t && (n.innerHTML = o[e].innerHTML || ""), document.head.appendChild(n);
        }
    }), Object.keys(e201.htmlAttr).filter(htmlFilter).forEach((t)=>{
        document.documentElement.setAttribute(t, e201.htmlAttr[t] || "");
    }), Object.keys(e201.bodyAttr).filter(bodyFilter).forEach((t)=>{
        document.body.setAttribute(t, e201.bodyAttr[t] || "");
    });
}
function updateClientMeta() {
    const e = {
        title: "",
        titleTemplate: null,
        meta: {
        },
        link: {
        },
        script: {
        },
        htmlAttr: {
        },
        bodyAttr: {
        }
    };
    for(let t = 0; t < clientList.length; t++){
        const { active: o , val: n  } = clientList[t];
        !0 === o && extend(!0, e, n);
    }
    normalize(e), apply(diff(currentClientMeta, e)), currentClientMeta = e;
}
function planClientUpdate() {
    clearTimeout(updateId), updateId = setTimeout(updateClientMeta, 50);
}
var Meta = {
    install (e) {
        !0 !== this.__installed && !0 === isRuntimeSsrPreHydration.value && (currentClientMeta = window.__Q_META__, document.getElementById("qmeta-init").remove());
    }
};
let addNotification, uid = 0;
const defaults = {
}, positionList = [
    "top-left",
    "top-right",
    "bottom-left",
    "bottom-right",
    "top",
    "bottom",
    "left",
    "right",
    "center"
], badgePositions = [
    "top-left",
    "top-right",
    "bottom-left",
    "bottom-right"
], notifTypes = {
    positive: {
        icon: (e)=>e.iconSet.type.positive
        ,
        color: "positive"
    },
    negative: {
        icon: (e)=>e.iconSet.type.negative
        ,
        color: "negative"
    },
    warning: {
        icon: (e)=>e.iconSet.type.warning
        ,
        color: "warning",
        textColor: "dark"
    },
    info: {
        icon: (e)=>e.iconSet.type.info
        ,
        color: "info"
    },
    ongoing: {
        group: !1,
        timeout: 0,
        spinner: !0,
        color: "grey-8"
    }
}, groups = {
}, positionClass = {
};
function logError(e, t) {
    return console.error(`Notify: ${e}`, t), !1;
}
function getComponent(e202) {
    return createComponent({
        name: "QNotifications",
        devtools: {
            hide: !0
        },
        setup () {
            const t165 = {
            }, o100 = [];
            function n82(e) {
                clearTimeout(e.meta.timer);
                const n = t165[e.position].value.indexOf(e);
                if (-1 !== n) {
                    void 0 !== e.group && delete groups[e.meta.group];
                    const a = o100["" + e.meta.uid];
                    if (a) {
                        const { width: e , height: t  } = getComputedStyle(a);
                        a.style.left = `${a.offsetLeft}px`, a.style.width = e, a.style.height = t;
                    }
                    t165[e.position].value.splice(n, 1), "function" === typeof e.onDismiss && e.onDismiss();
                }
            }
            return positionList.forEach((e)=>{
                t165[e] = _vue.ref([]);
                const o = !0 === [
                    "left",
                    "center",
                    "right"
                ].includes(e) ? "center" : e.indexOf("top") > -1 ? "top" : "bottom", n = e.indexOf("left") > -1 ? "start" : e.indexOf("right") > -1 ? "end" : "center", a = [
                    "left",
                    "right"
                ].includes(e) ? `items-${"left" === e ? "start" : "end"} justify-center` : "center" === e ? "flex-center" : `items-${n}`;
                positionClass[e] = `q-notifications__list q-notifications__list--${o} fixed column no-wrap ${a}`;
            }), addNotification = (o101, a)=>{
                if (!o101) return logError("parameter required");
                let l;
                const i = {
                    textColor: "white"
                };
                if (!0 !== o101.ignoreDefaults && Object.assign(i, defaults), Object(o101) !== o101 && (i.type && Object.assign(i, notifTypes[i.type]), o101 = {
                    message: o101
                }), Object.assign(i, notifTypes[o101.type || i.type], o101), "function" === typeof i.icon && (i.icon = i.icon(e202)), i.spinner ? (!0 === i.spinner && (i.spinner = QSpinner), i.spinner = _vue.markRaw(i.spinner)) : i.spinner = !1, i.meta = {
                    hasMedia: Boolean(!1 !== i.spinner || i.icon || i.avatar),
                    hasText: Boolean(void 0 !== i.message && null !== i.message || void 0 !== i.caption && null !== i.caption)
                }, i.position) {
                    if (!1 === positionList.includes(i.position)) return logError("wrong position", o101);
                } else i.position = "bottom";
                if (void 0 === i.timeout) i.timeout = 5000;
                else {
                    const e = parseInt(i.timeout, 10);
                    if (isNaN(e) || e < 0) return logError("wrong timeout", o101);
                    i.timeout = e;
                }
                0 === i.timeout ? i.progress = !1 : !0 === i.progress && (i.meta.progressClass = "q-notification__progress" + (i.progressClass ? ` ${i.progressClass}` : ""), i.meta.progressStyle = {
                    animationDuration: `${i.timeout + 1000}ms`
                });
                const r = (!0 === Array.isArray(o101.actions) ? o101.actions : []).concat(!0 !== o101.ignoreDefaults && !0 === Array.isArray(defaults.actions) ? defaults.actions : []).concat(void 0 !== notifTypes[o101.type] && !0 === Array.isArray(notifTypes[o101.type].actions) ? notifTypes[o101.type].actions : []);
                if (i.closeBtn && r.push({
                    label: "string" === typeof i.closeBtn ? i.closeBtn : e202.lang.label.close
                }), i.actions = r.map(({ handler: e , noDismiss: t , ...o })=>({
                        flat: !0,
                        ...o,
                        onClick: "function" === typeof e ? ()=>{
                            e(), !0 !== t && s();
                        } : ()=>{
                            s();
                        }
                    })
                ), void 0 === i.multiLine && (i.multiLine = i.actions.length > 1), Object.assign(i.meta, {
                    class: "q-notification row items-stretch" + ` q-notification--${!0 === i.multiLine ? "multi-line" : "standard"}` + (void 0 !== i.color ? ` bg-${i.color}` : "") + (void 0 !== i.textColor ? ` text-${i.textColor}` : "") + (void 0 !== i.classes ? ` ${i.classes}` : ""),
                    wrapperClass: "q-notification__wrapper col relative-position border-radius-inherit " + (!0 === i.multiLine ? "column no-wrap justify-center" : "row items-center"),
                    contentClass: "q-notification__content row items-center" + (!0 === i.multiLine ? "" : " col"),
                    leftClass: !0 === i.meta.hasText ? "additional" : "single",
                    attrs: {
                        role: "alert",
                        ...i.attrs
                    }
                }), !1 === i.group ? (i.group = void 0, i.meta.group = void 0) : (void 0 !== i.group && !0 !== i.group || (i.group = [
                    i.message,
                    i.caption,
                    i.multiline
                ].concat(i.actions.map((e)=>`${e.label}*${e.icon}`
                )).join("|")), i.meta.group = i.group + "|" + i.position), 0 === i.actions.length ? i.actions = void 0 : i.meta.actionsClass = "q-notification__actions row items-center " + (!0 === i.multiLine ? "justify-end" : "col-auto") + (!0 === i.meta.hasMedia ? " q-notification__actions--with-media" : ""), void 0 !== a) {
                    clearTimeout(a.notif.meta.timer), i.meta.uid = a.notif.meta.uid;
                    const e = t165[i.position].value.indexOf(a.notif);
                    t165[i.position].value[e] = i;
                } else {
                    const e = groups[i.meta.group];
                    if (void 0 === e) {
                        if (i.meta.uid = uid++, i.meta.badge = 1, -1 !== [
                            "left",
                            "right",
                            "center"
                        ].indexOf(i.position)) t165[i.position].value.splice(Math.floor(t165[i.position].value.length / 2), 0, i);
                        else {
                            const e = i.position.indexOf("top") > -1 ? "unshift" : "push";
                            t165[i.position].value[e](i);
                        }
                        void 0 !== i.group && (groups[i.meta.group] = i);
                    } else {
                        if (clearTimeout(e.meta.timer), void 0 !== i.badgePosition) {
                            if (!1 === badgePositions.includes(i.badgePosition)) return logError("wrong badgePosition", o101);
                        } else i.badgePosition = `top-${i.position.indexOf("left") > -1 ? "right" : "left"}`;
                        i.meta.uid = e.meta.uid, i.meta.badge = e.meta.badge + 1, i.meta.badgeClass = `q-notification__badge q-notification__badge--${i.badgePosition}` + (void 0 !== i.badgeColor ? ` bg-${i.badgeColor}` : "") + (void 0 !== i.badgeTextColor ? ` text-${i.badgeTextColor}` : "") + (i.badgeClass ? ` ${i.badgeClass}` : "");
                        const n = t165[i.position].value.indexOf(e);
                        t165[i.position].value[n] = groups[i.meta.group] = i;
                    }
                }
                const s = ()=>{
                    n82(i), l = void 0;
                };
                return i.timeout > 0 && (i.meta.timer = setTimeout(()=>{
                    s();
                }, i.timeout + 1000)), void 0 !== i.group ? (e)=>{
                    void 0 !== e ? logError("trying to update a grouped one which is forbidden", o101) : s();
                } : (l = {
                    dismiss: s,
                    config: o101,
                    notif: i
                }, void 0 === a ? (e)=>{
                    if (void 0 !== l) {
                        if (void 0 === e) l.dismiss();
                        else {
                            const t = Object.assign({
                            }, l.config, e, {
                                group: !1,
                                position: i.position
                            });
                            addNotification(t, l);
                        }
                    }
                } : void Object.assign(a, l));
            }, ()=>_vue.h("div", {
                    class: "q-notifications"
                }, positionList.map((e203)=>{
                    return _vue.h(_vue.TransitionGroup, {
                        key: e203,
                        class: positionClass[e203],
                        tag: "div",
                        name: `q-notification--${e203}`
                    }, ()=>t165[e203].value.map((e204)=>{
                            const t = e204.meta, n = [];
                            if (!0 === t.hasMedia && (!1 !== e204.spinner ? n.push(_vue.h(e204.spinner, {
                                class: "q-notification__spinner q-notification__spinner--" + t.leftClass
                            })) : e204.icon ? n.push(_vue.h(QIcon, {
                                class: "q-notification__icon q-notification__icon--" + t.leftClass,
                                name: e204.icon,
                                role: "img"
                            })) : e204.avatar && n.push(_vue.h(QAvatar, {
                                class: "q-notification__avatar q-notification__avatar--" + t.leftClass
                            }, ()=>_vue.h("img", {
                                    src: e204.avatar,
                                    "aria-hidden": "true"
                                })
                            ))), !0 === t.hasText) {
                                let t;
                                const o = {
                                    class: "q-notification__message col"
                                };
                                if (!0 === e204.html) o.innerHTML = e204.caption ? `<div>${e204.message}</div><div class="q-notification__caption">${e204.caption}</div>` : e204.message;
                                else {
                                    const o = [
                                        e204.message
                                    ];
                                    t = e204.caption ? [
                                        _vue.h("div", o),
                                        _vue.h("div", {
                                            class: "q-notification__caption"
                                        }, [
                                            e204.caption
                                        ])
                                    ] : o;
                                }
                                n.push(_vue.h("div", o, t));
                            }
                            const a = [
                                _vue.h("div", {
                                    class: t.contentClass
                                }, n)
                            ];
                            return !0 === e204.progress && a.push(_vue.h("div", {
                                key: `${t.uid}|p|${t.badge}`,
                                class: t.progressClass,
                                style: t.progressStyle
                            })), void 0 !== e204.actions && a.push(_vue.h("div", {
                                class: t.actionsClass
                            }, e204.actions.map((e)=>_vue.h(QBtn, e)
                            ))), t.badge > 1 && a.push(_vue.h("div", {
                                key: `${t.uid}|${t.badge}`,
                                class: e204.meta.badgeClass,
                                style: e204.badgeStyle
                            }, [
                                t.badge
                            ])), _vue.h("div", {
                                ref: (e)=>{
                                    o100["" + t.uid] = e;
                                },
                                key: t.uid,
                                class: t.class,
                                ...t.attrs
                            }, [
                                _vue.h("div", {
                                    class: t.wrapperClass
                                }, a)
                            ]);
                        })
                    );
                }))
            ;
        }
    });
}
var Notify = {
    create (e) {
        return addNotification(e);
    },
    setDefaults (e) {
        e === Object(e) && Object.assign(defaults, e);
    },
    registerType (e, t) {
        t === Object(t) && (notifTypes[e] = t);
    },
    install ({ $q: e , parentApp: t  }) {
        if (e.notify = this.create, e.notify.setDefaults = this.setDefaults, e.notify.registerType = this.registerType, void 0 !== e.config.notify && this.setDefaults(e.config.notify), !0 !== this.__installed) {
            const o = createGlobalNode("q-notify");
            createChildApp(getComponent(e), t).mount(o);
        }
    }
};
function encode(e) {
    return "[object Date]" === Object.prototype.toString.call(e) ? "__q_date|" + e.toUTCString() : "[object RegExp]" === Object.prototype.toString.call(e) ? "__q_expr|" + e.source : "number" === typeof e ? "__q_numb|" + e : "boolean" === typeof e ? "__q_bool|" + (e ? "1" : "0") : "string" === typeof e ? "__q_strn|" + e : "function" === typeof e ? "__q_strn|" + e.toString() : e === Object(e) ? "__q_objt|" + JSON.stringify(e) : e;
}
function decode(e) {
    const t = e.length;
    if (t < 9) return e;
    const o = e.substr(0, 8), n = e.substring(9);
    switch(o){
        case "__q_date":
            return new Date(n);
        case "__q_expr":
            return new RegExp(n);
        case "__q_numb":
            return Number(n);
        case "__q_bool":
            return Boolean("1" === n);
        case "__q_strn":
            return "" + n;
        case "__q_objt":
            return JSON.parse(n);
        default:
            return e;
    }
}
function getEmptyStorage() {
    const e = ()=>null
    ;
    return {
        has: ()=>!1
        ,
        getLength: ()=>0
        ,
        getItem: e,
        getIndex: e,
        getKey: e,
        getAll: ()=>{
        },
        getAllKeys: ()=>[]
        ,
        set: noop,
        remove: noop,
        clear: noop,
        isEmpty: ()=>!0
    };
}
function getStorage(e205) {
    const t = window[e205 + "Storage"], o102 = (e)=>{
        const o = t.getItem(e);
        return o ? decode(o) : null;
    };
    return {
        has: (e)=>null !== t.getItem(e)
        ,
        getLength: ()=>t.length
        ,
        getItem: o102,
        getIndex: (e)=>{
            return e < t.length ? o102(t.key(e)) : null;
        },
        getKey: (e)=>{
            return e < t.length ? t.key(e) : null;
        },
        getAll: ()=>{
            let e;
            const n = {
            }, a = t.length;
            for(let l = 0; l < a; l++)e = t.key(l), n[e] = o102(e);
            return n;
        },
        getAllKeys: ()=>{
            const e = [], o = t.length;
            for(let n = 0; n < o; n++)e.push(t.key(n));
            return e;
        },
        set: (e, o)=>{
            t.setItem(e, encode(o));
        },
        remove: (e)=>{
            t.removeItem(e);
        },
        clear: ()=>{
            t.clear();
        },
        isEmpty: ()=>0 === t.length
    };
}
const storage$1 = !1 === client.has.webStorage ? getEmptyStorage() : getStorage("local"), Plugin$1 = {
    install ({ $q: e  }) {
        e.localStorage = storage$1;
    }
};
Object.assign(Plugin$1, storage$1);
const storage = !1 === client.has.webStorage ? getEmptyStorage() : getStorage("session"), Plugin = {
    install ({ $q: e  }) {
        e.sessionStorage = storage;
    }
};
function useDialogPluginComponent() {
    const { emit: e , proxy: t166  } = _vue.getCurrentInstance(), o = _vue.ref(null);
    function n() {
        o.value.show();
    }
    function a() {
        o.value.hide();
    }
    function l(t) {
        e("ok", t), a();
    }
    function i() {
        e("hide");
    }
    return Object.assign(t166, {
        show: n,
        hide: a
    }), {
        dialogRef: o,
        onDialogHide: i,
        onDialogOK: l,
        onDialogCancel: a
    };
}
Object.assign(Plugin, storage);
const emits = [
    "ok",
    "hide"
];
function useMeta(e206) {
    {
        const t = {
            active: !0
        };
        if ("function" === typeof e206) {
            const o = _vue.computed(e206);
            t.val = o.value, _vue.watch(o, (e)=>{
                t.val = e, !0 === t.active && planClientUpdate();
            });
        } else t.val = e206;
        clientList.push(t), planClientUpdate(), _vue.onActivated(()=>{
            t.active = !0, planClientUpdate();
        }), _vue.onDeactivated(()=>{
            t.active = !1, planClientUpdate();
        }), _vue.onUnmounted(()=>{
            clientList.splice(clientList.indexOf(t), 1), planClientUpdate();
        });
    }
}
function useQuasar() {
    return _vue.inject(quasarKey);
}
function fallback(e) {
    const t = document.createElement("textarea");
    t.value = e, t.contentEditable = !0, t.style.position = "fixed", document.body.appendChild(t), t.focus(), t.select();
    const o = document.execCommand("copy");
    return t.remove(), o;
}
function copyToClipboard(e) {
    return void 0 !== navigator.clipboard ? navigator.clipboard.writeText(e) : new Promise((t, o)=>{
        const n = fallback(e);
        n ? t(!0) : o(n);
    });
}
useDialogPluginComponent.emits = emits, useDialogPluginComponent.emitsObject = getEmitsObject(emits);
var createMetaMixin = (e207)=>{
    const t = {
        activated () {
            this.__qMeta.active = !0, planClientUpdate();
        },
        deactivated () {
            this.__qMeta.active = !1, planClientUpdate();
        },
        unmounted () {
            clientList.splice(clientList.indexOf(this.__qMeta), 1), planClientUpdate(), this.__qMeta = void 0;
        }
    };
    return "function" === typeof e207 ? Object.assign(t, {
        computed: {
            __qMetaOptions () {
                return e207.call(this) || {
                };
            }
        },
        watch: {
            __qMetaOptions (e) {
                this.__qMeta.val = e, !0 === this.__qMeta.active && planClientUpdate();
            }
        },
        created () {
            this.__qMeta = {
                active: !0,
                val: this.__qMetaOptions
            }, clientList.push(this.__qMeta), planClientUpdate();
        }
    }) : t.created = function() {
        this.__qMeta = {
            active: !0,
            val: e207
        }, clientList.push(this.__qMeta), planClientUpdate();
    }, t;
};
function clean(e) {
    setTimeout(()=>{
        window.URL.revokeObjectURL(e.href);
    }, 10000), e.remove();
}
function exportFile(e, t, o = {
}) {
    const { mimeType: n , byteOrderMark: a , encoding: l  } = "string" === typeof o ? {
        mimeType: o
    } : o, i = void 0 !== l ? new TextEncoder(l).encode([
        t
    ]) : t, r = void 0 !== a ? [
        a,
        i
    ] : [
        i
    ], s = new Blob(r, {
        type: n || "application/octet-stream"
    }), u = document.createElement("a");
    u.href = window.URL.createObjectURL(s), u.setAttribute("download", e), "undefined" === typeof u.download && u.setAttribute("target", "_blank"), u.classList.add("hidden"), u.style.position = "fixed", document.body.appendChild(u);
    try {
        return u.click(), clean(u), !0;
    } catch (e208) {
        return clean(u), e208;
    }
}
function parseFeatures(e209) {
    const t = Object.assign({
        noopener: !0
    }, e209), o = [];
    return Object.keys(t).forEach((e)=>{
        !0 === t[e] && o.push(e);
    }), o.join(",");
}
function openWindow(e, t, o) {
    let n = window.open;
    if (!0 === Platform.is.cordova) {
        if (void 0 !== cordova && void 0 !== cordova.InAppBrowser && void 0 !== cordova.InAppBrowser.open) n = cordova.InAppBrowser.open;
        else if (void 0 !== navigator && void 0 !== navigator.app) return navigator.app.loadUrl(e, {
            openExternal: !0
        });
    }
    const a = n(e, "_blank", parseFeatures(o));
    if (a) return Platform.is.desktop && a.focus(), a;
    t && t();
}
var openUrl = (e, t, o)=>{
    if (!0 !== Platform.is.ios || void 0 === window.SafariViewController) return openWindow(e, t, o);
    window.SafariViewController.isAvailable((n)=>{
        n ? window.SafariViewController.show({
            url: e
        }, noop, t) : openWindow(e, t, o);
    });
};
const Quasar = {
    version: "2.3.3",
    install (e, t, o) {
        installQuasar(e, {
            components: components,
            directives: directives,
            ...t
        });
    },
    lang: Plugin$7,
    iconSet: Plugin$6
};

},{"vue":"a2RR7","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cSzv9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vuex = require("vuex");
var _app = require("./modules/app");
var _appDefault = parcelHelpers.interopDefault(_app);
exports.default = _vuex.createStore({
    modules: {
        app: _appDefault.default
    }
});

},{"vuex":"bnBNl","./modules/app":"gvgbJ","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bnBNl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Store", ()=>Store1
);
parcelHelpers.export(exports, "createLogger", ()=>createLogger
);
parcelHelpers.export(exports, "createNamespacedHelpers", ()=>createNamespacedHelpers
);
parcelHelpers.export(exports, "createStore", ()=>createStore
);
parcelHelpers.export(exports, "mapActions", ()=>mapActions
);
parcelHelpers.export(exports, "mapGetters", ()=>mapGetters
);
parcelHelpers.export(exports, "mapMutations", ()=>mapMutations
);
parcelHelpers.export(exports, "mapState", ()=>mapState
);
parcelHelpers.export(exports, "storeKey", ()=>storeKey
);
parcelHelpers.export(exports, "useStore", ()=>useStore
);
/*!
 * vuex v4.0.2
 * (c) 2021 Evan You
 * @license MIT
 */ var _vue = require("vue");
var _devtoolsApi = require("@vue/devtools-api");
var storeKey = 'store';
function useStore(key) {
    if (key === void 0) key = null;
    return _vue.inject(key !== null ? key : storeKey);
}
/**
 * Get the first item that pass the test
 * by second argument function
 *
 * @param {Array} list
 * @param {Function} f
 * @return {*}
 */ function find(list, f) {
    return list.filter(f)[0];
}
/**
 * Deep copy the given object considering circular structure.
 * This function caches all nested objects and its copies.
 * If it detects circular structure, use cached copy to avoid infinite loop.
 *
 * @param {*} obj
 * @param {Array<Object>} cache
 * @return {*}
 */ function deepCopy(obj, cache) {
    if (cache === void 0) cache = [];
    // just return if obj is immutable value
    if (obj === null || typeof obj !== 'object') return obj;
    // if obj is hit, it is in circular structure
    var hit = find(cache, function(c) {
        return c.original === obj;
    });
    if (hit) return hit.copy;
    var copy = Array.isArray(obj) ? [] : {
    };
    // put the copy into cache at first
    // because we want to refer it in recursive deepCopy
    cache.push({
        original: obj,
        copy: copy
    });
    Object.keys(obj).forEach(function(key) {
        copy[key] = deepCopy(obj[key], cache);
    });
    return copy;
}
/**
 * forEach for object
 */ function forEachValue(obj, fn) {
    Object.keys(obj).forEach(function(key) {
        return fn(obj[key], key);
    });
}
function isObject(obj) {
    return obj !== null && typeof obj === 'object';
}
function isPromise(val) {
    return val && typeof val.then === 'function';
}
function assert(condition, msg) {
    if (!condition) throw new Error("[vuex] " + msg);
}
function partial(fn, arg) {
    return function() {
        return fn(arg);
    };
}
function genericSubscribe(fn, subs, options) {
    if (subs.indexOf(fn) < 0) options && options.prepend ? subs.unshift(fn) : subs.push(fn);
    return function() {
        var i = subs.indexOf(fn);
        if (i > -1) subs.splice(i, 1);
    };
}
function resetStore(store, hot) {
    store._actions = Object.create(null);
    store._mutations = Object.create(null);
    store._wrappedGetters = Object.create(null);
    store._modulesNamespaceMap = Object.create(null);
    var state = store.state;
    // init all modules
    installModule(store, state, [], store._modules.root, true);
    // reset state
    resetStoreState(store, state, hot);
}
function resetStoreState(store, state, hot) {
    var oldState = store._state;
    // bind store public getters
    store.getters = {
    };
    // reset local getters cache
    store._makeLocalGettersCache = Object.create(null);
    var wrappedGetters = store._wrappedGetters;
    var computedObj = {
    };
    forEachValue(wrappedGetters, function(fn, key) {
        // use computed to leverage its lazy-caching mechanism
        // direct inline function use will lead to closure preserving oldState.
        // using partial to return function with only arguments preserved in closure environment.
        computedObj[key] = partial(fn, store);
        Object.defineProperty(store.getters, key, {
            // TODO: use `computed` when it's possible. at the moment we can't due to
            // https://github.com/vuejs/vuex/pull/1883
            get: function() {
                return computedObj[key]();
            },
            enumerable: true // for local getters
        });
    });
    store._state = _vue.reactive({
        data: state
    });
    // enable strict mode for new state
    if (store.strict) enableStrictMode(store);
    if (oldState) {
        if (hot) // dispatch changes in all subscribed watchers
        // to force getter re-evaluation for hot reloading.
        store._withCommit(function() {
            oldState.data = null;
        });
    }
}
function installModule(store, rootState, path, module, hot) {
    var isRoot = !path.length;
    var namespace = store._modules.getNamespace(path);
    // register in namespace map
    if (module.namespaced) {
        if (store._modulesNamespaceMap[namespace] && true) console.error("[vuex] duplicate namespace " + namespace + " for the namespaced module " + path.join('/'));
        store._modulesNamespaceMap[namespace] = module;
    }
    // set state
    if (!isRoot && !hot) {
        var parentState = getNestedState(rootState, path.slice(0, -1));
        var moduleName = path[path.length - 1];
        store._withCommit(function() {
            if (moduleName in parentState) console.warn("[vuex] state field \"" + moduleName + "\" was overridden by a module with the same name at \"" + path.join('.') + "\"");
            parentState[moduleName] = module.state;
        });
    }
    var local = module.context = makeLocalContext(store, namespace, path);
    module.forEachMutation(function(mutation, key) {
        var namespacedType = namespace + key;
        registerMutation(store, namespacedType, mutation, local);
    });
    module.forEachAction(function(action, key) {
        var type = action.root ? key : namespace + key;
        var handler = action.handler || action;
        registerAction(store, type, handler, local);
    });
    module.forEachGetter(function(getter, key) {
        var namespacedType = namespace + key;
        registerGetter(store, namespacedType, getter, local);
    });
    module.forEachChild(function(child, key) {
        installModule(store, rootState, path.concat(key), child, hot);
    });
}
/**
 * make localized dispatch, commit, getters and state
 * if there is no namespace, just use root ones
 */ function makeLocalContext(store, namespace, path) {
    var noNamespace = namespace === '';
    var local = {
        dispatch: noNamespace ? store.dispatch : function(_type, _payload, _options) {
            var args = unifyObjectStyle(_type, _payload, _options);
            var payload = args.payload;
            var options = args.options;
            var type = args.type;
            if (!options || !options.root) {
                type = namespace + type;
                if (!store._actions[type]) {
                    console.error("[vuex] unknown local action type: " + args.type + ", global type: " + type);
                    return;
                }
            }
            return store.dispatch(type, payload);
        },
        commit: noNamespace ? store.commit : function(_type, _payload, _options) {
            var args = unifyObjectStyle(_type, _payload, _options);
            var payload = args.payload;
            var options = args.options;
            var type = args.type;
            if (!options || !options.root) {
                type = namespace + type;
                if (!store._mutations[type]) {
                    console.error("[vuex] unknown local mutation type: " + args.type + ", global type: " + type);
                    return;
                }
            }
            store.commit(type, payload, options);
        }
    };
    // getters and state object must be gotten lazily
    // because they will be changed by state update
    Object.defineProperties(local, {
        getters: {
            get: noNamespace ? function() {
                return store.getters;
            } : function() {
                return makeLocalGetters(store, namespace);
            }
        },
        state: {
            get: function() {
                return getNestedState(store.state, path);
            }
        }
    });
    return local;
}
function makeLocalGetters(store, namespace) {
    if (!store._makeLocalGettersCache[namespace]) {
        var gettersProxy = {
        };
        var splitPos = namespace.length;
        Object.keys(store.getters).forEach(function(type) {
            // skip if the target getter is not match this namespace
            if (type.slice(0, splitPos) !== namespace) return;
            // extract local getter type
            var localType = type.slice(splitPos);
            // Add a port to the getters proxy.
            // Define as getter property because
            // we do not want to evaluate the getters in this time.
            Object.defineProperty(gettersProxy, localType, {
                get: function() {
                    return store.getters[type];
                },
                enumerable: true
            });
        });
        store._makeLocalGettersCache[namespace] = gettersProxy;
    }
    return store._makeLocalGettersCache[namespace];
}
function registerMutation(store, type, handler, local) {
    var entry = store._mutations[type] || (store._mutations[type] = []);
    entry.push(function wrappedMutationHandler(payload) {
        handler.call(store, local.state, payload);
    });
}
function registerAction(store, type, handler, local) {
    var entry = store._actions[type] || (store._actions[type] = []);
    entry.push(function wrappedActionHandler(payload) {
        var res = handler.call(store, {
            dispatch: local.dispatch,
            commit: local.commit,
            getters: local.getters,
            state: local.state,
            rootGetters: store.getters,
            rootState: store.state
        }, payload);
        if (!isPromise(res)) res = Promise.resolve(res);
        if (store._devtoolHook) return res.catch(function(err) {
            store._devtoolHook.emit('vuex:error', err);
            throw err;
        });
        else return res;
    });
}
function registerGetter(store1, type, rawGetter, local) {
    if (store1._wrappedGetters[type]) {
        console.error("[vuex] duplicate getter key: " + type);
        return;
    }
    store1._wrappedGetters[type] = function wrappedGetter(store) {
        return rawGetter(local.state, local.getters, store.state, store.getters // root getters
        );
    };
}
function enableStrictMode(store) {
    _vue.watch(function() {
        return store._state.data;
    }, function() {
        assert(store._committing, "do not mutate vuex store state outside mutation handlers.");
    }, {
        deep: true,
        flush: 'sync'
    });
}
function getNestedState(state1, path) {
    return path.reduce(function(state, key) {
        return state[key];
    }, state1);
}
function unifyObjectStyle(type, payload, options) {
    if (isObject(type) && type.type) {
        options = payload;
        payload = type;
        type = type.type;
    }
    assert(typeof type === 'string', "expects string as the type, but found " + typeof type + ".");
    return {
        type: type,
        payload: payload,
        options: options
    };
}
var LABEL_VUEX_BINDINGS = 'vuex bindings';
var MUTATIONS_LAYER_ID = 'vuex:mutations';
var ACTIONS_LAYER_ID = 'vuex:actions';
var INSPECTOR_ID = 'vuex';
var actionId = 0;
function addDevtools(app, store) {
    _devtoolsApi.setupDevtoolsPlugin({
        id: 'org.vuejs.vuex',
        app: app,
        label: 'Vuex',
        homepage: 'https://next.vuex.vuejs.org/',
        logo: 'https://vuejs.org/images/icons/favicon-96x96.png',
        packageName: 'vuex',
        componentStateTypes: [
            LABEL_VUEX_BINDINGS
        ]
    }, function(api) {
        api.addTimelineLayer({
            id: MUTATIONS_LAYER_ID,
            label: 'Vuex Mutations',
            color: COLOR_LIME_500
        });
        api.addTimelineLayer({
            id: ACTIONS_LAYER_ID,
            label: 'Vuex Actions',
            color: COLOR_LIME_500
        });
        api.addInspector({
            id: INSPECTOR_ID,
            label: 'Vuex',
            icon: 'storage',
            treeFilterPlaceholder: 'Filter stores...'
        });
        api.on.getInspectorTree(function(payload) {
            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
                if (payload.filter) {
                    var nodes = [];
                    flattenStoreForInspectorTree(nodes, store._modules.root, payload.filter, '');
                    payload.rootNodes = nodes;
                } else payload.rootNodes = [
                    formatStoreForInspectorTree(store._modules.root, '')
                ];
            }
        });
        api.on.getInspectorState(function(payload) {
            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
                var modulePath = payload.nodeId;
                makeLocalGetters(store, modulePath);
                payload.state = formatStoreForInspectorState(getStoreModule(store._modules, modulePath), modulePath === 'root' ? store.getters : store._makeLocalGettersCache, modulePath);
            }
        });
        api.on.editInspectorState(function(payload) {
            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
                var modulePath = payload.nodeId;
                var path = payload.path;
                if (modulePath !== 'root') path = modulePath.split('/').filter(Boolean).concat(path);
                store._withCommit(function() {
                    payload.set(store._state.data, path, payload.state.value);
                });
            }
        });
        store.subscribe(function(mutation, state) {
            var data = {
            };
            if (mutation.payload) data.payload = mutation.payload;
            data.state = state;
            api.notifyComponentUpdate();
            api.sendInspectorTree(INSPECTOR_ID);
            api.sendInspectorState(INSPECTOR_ID);
            api.addTimelineEvent({
                layerId: MUTATIONS_LAYER_ID,
                event: {
                    time: Date.now(),
                    title: mutation.type,
                    data: data
                }
            });
        });
        store.subscribeAction({
            before: function(action, state) {
                var data = {
                };
                if (action.payload) data.payload = action.payload;
                action._id = actionId++;
                action._time = Date.now();
                data.state = state;
                api.addTimelineEvent({
                    layerId: ACTIONS_LAYER_ID,
                    event: {
                        time: action._time,
                        title: action.type,
                        groupId: action._id,
                        subtitle: 'start',
                        data: data
                    }
                });
            },
            after: function(action, state) {
                var data = {
                };
                var duration = Date.now() - action._time;
                data.duration = {
                    _custom: {
                        type: 'duration',
                        display: duration + "ms",
                        tooltip: 'Action duration',
                        value: duration
                    }
                };
                if (action.payload) data.payload = action.payload;
                data.state = state;
                api.addTimelineEvent({
                    layerId: ACTIONS_LAYER_ID,
                    event: {
                        time: Date.now(),
                        title: action.type,
                        groupId: action._id,
                        subtitle: 'end',
                        data: data
                    }
                });
            }
        });
    });
}
// extracted from tailwind palette
var COLOR_LIME_500 = 8702998;
var COLOR_DARK = 6710886;
var COLOR_WHITE = 16777215;
var TAG_NAMESPACED = {
    label: 'namespaced',
    textColor: COLOR_WHITE,
    backgroundColor: COLOR_DARK
};
/**
 * @param {string} path
 */ function extractNameFromPath(path) {
    return path && path !== 'root' ? path.split('/').slice(-2, -1)[0] : 'Root';
}
/**
 * @param {*} module
 * @return {import('@vue/devtools-api').CustomInspectorNode}
 */ function formatStoreForInspectorTree(module, path) {
    return {
        id: path || 'root',
        // all modules end with a `/`, we want the last segment only
        // cart/ -> cart
        // nested/cart/ -> cart
        label: extractNameFromPath(path),
        tags: module.namespaced ? [
            TAG_NAMESPACED
        ] : [],
        children: Object.keys(module._children).map(function(moduleName) {
            return formatStoreForInspectorTree(module._children[moduleName], path + moduleName + '/');
        })
    };
}
/**
 * @param {import('@vue/devtools-api').CustomInspectorNode[]} result
 * @param {*} module
 * @param {string} filter
 * @param {string} path
 */ function flattenStoreForInspectorTree(result, module, filter, path) {
    if (path.includes(filter)) result.push({
        id: path || 'root',
        label: path.endsWith('/') ? path.slice(0, path.length - 1) : path || 'Root',
        tags: module.namespaced ? [
            TAG_NAMESPACED
        ] : []
    });
    Object.keys(module._children).forEach(function(moduleName) {
        flattenStoreForInspectorTree(result, module._children[moduleName], filter, path + moduleName + '/');
    });
}
/**
 * @param {*} module
 * @return {import('@vue/devtools-api').CustomInspectorState}
 */ function formatStoreForInspectorState(module, getters, path) {
    getters = path === 'root' ? getters : getters[path];
    var gettersKeys = Object.keys(getters);
    var storeState = {
        state: Object.keys(module.state).map(function(key) {
            return {
                key: key,
                editable: true,
                value: module.state[key]
            };
        })
    };
    if (gettersKeys.length) {
        var tree = transformPathsToObjectTree(getters);
        storeState.getters = Object.keys(tree).map(function(key) {
            return {
                key: key.endsWith('/') ? extractNameFromPath(key) : key,
                editable: false,
                value: canThrow(function() {
                    return tree[key];
                })
            };
        });
    }
    return storeState;
}
function transformPathsToObjectTree(getters) {
    var result = {
    };
    Object.keys(getters).forEach(function(key) {
        var path = key.split('/');
        if (path.length > 1) {
            var target = result;
            var leafKey = path.pop();
            path.forEach(function(p) {
                if (!target[p]) target[p] = {
                    _custom: {
                        value: {
                        },
                        display: p,
                        tooltip: 'Module',
                        abstract: true
                    }
                };
                target = target[p]._custom.value;
            });
            target[leafKey] = canThrow(function() {
                return getters[key];
            });
        } else result[key] = canThrow(function() {
            return getters[key];
        });
    });
    return result;
}
function getStoreModule(moduleMap, path) {
    var names = path.split('/').filter(function(n) {
        return n;
    });
    return names.reduce(function(module, moduleName, i) {
        var child = module[moduleName];
        if (!child) throw new Error("Missing module \"" + moduleName + "\" for path \"" + path + "\".");
        return i === names.length - 1 ? child : child._children;
    }, path === 'root' ? moduleMap : moduleMap.root._children);
}
function canThrow(cb) {
    try {
        return cb();
    } catch (e) {
        return e;
    }
}
// Base data struct for store's module, package with some attribute and method
var Module = function Module(rawModule, runtime) {
    this.runtime = runtime;
    // Store some children item
    this._children = Object.create(null);
    // Store the origin module object which passed by programmer
    this._rawModule = rawModule;
    var rawState = rawModule.state;
    // Store the origin module's state
    this.state = (typeof rawState === 'function' ? rawState() : rawState) || {
    };
};
var prototypeAccessors$1 = {
    namespaced: {
        configurable: true
    }
};
prototypeAccessors$1.namespaced.get = function() {
    return !!this._rawModule.namespaced;
};
Module.prototype.addChild = function addChild(key, module) {
    this._children[key] = module;
};
Module.prototype.removeChild = function removeChild(key) {
    delete this._children[key];
};
Module.prototype.getChild = function getChild(key) {
    return this._children[key];
};
Module.prototype.hasChild = function hasChild(key) {
    return key in this._children;
};
Module.prototype.update = function update(rawModule) {
    this._rawModule.namespaced = rawModule.namespaced;
    if (rawModule.actions) this._rawModule.actions = rawModule.actions;
    if (rawModule.mutations) this._rawModule.mutations = rawModule.mutations;
    if (rawModule.getters) this._rawModule.getters = rawModule.getters;
};
Module.prototype.forEachChild = function forEachChild(fn) {
    forEachValue(this._children, fn);
};
Module.prototype.forEachGetter = function forEachGetter(fn) {
    if (this._rawModule.getters) forEachValue(this._rawModule.getters, fn);
};
Module.prototype.forEachAction = function forEachAction(fn) {
    if (this._rawModule.actions) forEachValue(this._rawModule.actions, fn);
};
Module.prototype.forEachMutation = function forEachMutation(fn) {
    if (this._rawModule.mutations) forEachValue(this._rawModule.mutations, fn);
};
Object.defineProperties(Module.prototype, prototypeAccessors$1);
var ModuleCollection = function ModuleCollection(rawRootModule) {
    // register root module (Vuex.Store options)
    this.register([], rawRootModule, false);
};
ModuleCollection.prototype.get = function get(path) {
    return path.reduce(function(module, key) {
        return module.getChild(key);
    }, this.root);
};
ModuleCollection.prototype.getNamespace = function getNamespace(path) {
    var module = this.root;
    return path.reduce(function(namespace, key) {
        module = module.getChild(key);
        return namespace + (module.namespaced ? key + '/' : '');
    }, '');
};
ModuleCollection.prototype.update = function update$1(rawRootModule) {
    update([], this.root, rawRootModule);
};
ModuleCollection.prototype.register = function register(path, rawModule, runtime) {
    var this$1$1 = this;
    if (runtime === void 0) runtime = true;
    assertRawModule(path, rawModule);
    var newModule = new Module(rawModule, runtime);
    if (path.length === 0) this.root = newModule;
    else {
        var parent = this.get(path.slice(0, -1));
        parent.addChild(path[path.length - 1], newModule);
    }
    // register nested modules
    if (rawModule.modules) forEachValue(rawModule.modules, function(rawChildModule, key) {
        this$1$1.register(path.concat(key), rawChildModule, runtime);
    });
};
ModuleCollection.prototype.unregister = function unregister(path) {
    var parent = this.get(path.slice(0, -1));
    var key = path[path.length - 1];
    var child = parent.getChild(key);
    if (!child) {
        console.warn("[vuex] trying to unregister module '" + key + "', which is " + "not registered");
        return;
    }
    if (!child.runtime) return;
    parent.removeChild(key);
};
ModuleCollection.prototype.isRegistered = function isRegistered(path) {
    var parent = this.get(path.slice(0, -1));
    var key = path[path.length - 1];
    if (parent) return parent.hasChild(key);
    return false;
};
function update(path, targetModule, newModule) {
    assertRawModule(path, newModule);
    // update target module
    targetModule.update(newModule);
    // update nested modules
    if (newModule.modules) for(var key in newModule.modules){
        if (!targetModule.getChild(key)) {
            console.warn("[vuex] trying to add a new module '" + key + "' on hot reloading, " + 'manual reload is needed');
            return;
        }
        update(path.concat(key), targetModule.getChild(key), newModule.modules[key]);
    }
}
var functionAssert = {
    assert: function(value) {
        return typeof value === 'function';
    },
    expected: 'function'
};
var objectAssert = {
    assert: function(value) {
        return typeof value === 'function' || typeof value === 'object' && typeof value.handler === 'function';
    },
    expected: 'function or object with "handler" function'
};
var assertTypes = {
    getters: functionAssert,
    mutations: functionAssert,
    actions: objectAssert
};
function assertRawModule(path, rawModule) {
    Object.keys(assertTypes).forEach(function(key) {
        if (!rawModule[key]) return;
        var assertOptions = assertTypes[key];
        forEachValue(rawModule[key], function(value, type) {
            assert(assertOptions.assert(value), makeAssertionMessage(path, key, type, value, assertOptions.expected));
        });
    });
}
function makeAssertionMessage(path, key, type, value, expected) {
    var buf = key + " should be " + expected + " but \"" + key + "." + type + "\"";
    if (path.length > 0) buf += " in module \"" + path.join('.') + "\"";
    buf += " is " + JSON.stringify(value) + ".";
    return buf;
}
function createStore(options) {
    return new Store1(options);
}
var Store1 = function Store(options1) {
    var this$1$1 = this;
    if (options1 === void 0) options1 = {
    };
    assert(typeof Promise !== 'undefined', "vuex requires a Promise polyfill in this browser.");
    assert(this instanceof Store, "store must be called with the new operator.");
    var plugins = options1.plugins;
    if (plugins === void 0) plugins = [];
    var strict = options1.strict;
    if (strict === void 0) strict = false;
    var devtools = options1.devtools;
    // store internal state
    this._committing = false;
    this._actions = Object.create(null);
    this._actionSubscribers = [];
    this._mutations = Object.create(null);
    this._wrappedGetters = Object.create(null);
    this._modules = new ModuleCollection(options1);
    this._modulesNamespaceMap = Object.create(null);
    this._subscribers = [];
    this._makeLocalGettersCache = Object.create(null);
    this._devtools = devtools;
    // bind commit and dispatch to self
    var store = this;
    var ref = this;
    var dispatch = ref.dispatch;
    var commit = ref.commit;
    this.dispatch = function boundDispatch(type, payload) {
        return dispatch.call(store, type, payload);
    };
    this.commit = function boundCommit(type, payload, options) {
        return commit.call(store, type, payload, options);
    };
    // strict mode
    this.strict = strict;
    var state = this._modules.root.state;
    // init root module.
    // this also recursively registers all sub-modules
    // and collects all module getters inside this._wrappedGetters
    installModule(this, state, [], this._modules.root);
    // initialize the store state, which is responsible for the reactivity
    // (also registers _wrappedGetters as computed properties)
    resetStoreState(this, state);
    // apply plugins
    plugins.forEach(function(plugin) {
        return plugin(this$1$1);
    });
};
var prototypeAccessors = {
    state: {
        configurable: true
    }
};
Store1.prototype.install = function install(app, injectKey) {
    app.provide(injectKey || storeKey, this);
    app.config.globalProperties.$store = this;
    var useDevtools = this._devtools !== undefined ? this._devtools : true;
    if (useDevtools) addDevtools(app, this);
};
prototypeAccessors.state.get = function() {
    return this._state.data;
};
prototypeAccessors.state.set = function(v) {
    assert(false, "use store.replaceState() to explicit replace store state.");
};
Store1.prototype.commit = function commit(_type, _payload, _options) {
    var this$1$1 = this;
    // check object-style commit
    var ref = unifyObjectStyle(_type, _payload, _options);
    var type = ref.type;
    var payload = ref.payload;
    var options = ref.options;
    var mutation = {
        type: type,
        payload: payload
    };
    var entry = this._mutations[type];
    if (!entry) {
        console.error("[vuex] unknown mutation type: " + type);
        return;
    }
    this._withCommit(function() {
        entry.forEach(function commitIterator(handler) {
            handler(payload);
        });
    });
    this._subscribers.slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe
    .forEach(function(sub) {
        return sub(mutation, this$1$1.state);
    });
    if (options && options.silent) console.warn("[vuex] mutation type: " + type + ". Silent option has been removed. " + 'Use the filter functionality in the vue-devtools');
};
Store1.prototype.dispatch = function dispatch(_type, _payload) {
    var this$1$1 = this;
    // check object-style dispatch
    var ref = unifyObjectStyle(_type, _payload);
    var type = ref.type;
    var payload = ref.payload;
    var action = {
        type: type,
        payload: payload
    };
    var entry = this._actions[type];
    if (!entry) {
        console.error("[vuex] unknown action type: " + type);
        return;
    }
    try {
        this._actionSubscribers.slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe
        .filter(function(sub) {
            return sub.before;
        }).forEach(function(sub) {
            return sub.before(action, this$1$1.state);
        });
    } catch (e1) {
        console.warn("[vuex] error in before action subscribers: ");
        console.error(e1);
    }
    var result = entry.length > 1 ? Promise.all(entry.map(function(handler) {
        return handler(payload);
    })) : entry[0](payload);
    return new Promise(function(resolve, reject) {
        result.then(function(res) {
            try {
                this$1$1._actionSubscribers.filter(function(sub) {
                    return sub.after;
                }).forEach(function(sub) {
                    return sub.after(action, this$1$1.state);
                });
            } catch (e) {
                console.warn("[vuex] error in after action subscribers: ");
                console.error(e);
            }
            resolve(res);
        }, function(error) {
            try {
                this$1$1._actionSubscribers.filter(function(sub) {
                    return sub.error;
                }).forEach(function(sub) {
                    return sub.error(action, this$1$1.state, error);
                });
            } catch (e) {
                console.warn("[vuex] error in error action subscribers: ");
                console.error(e);
            }
            reject(error);
        });
    });
};
Store1.prototype.subscribe = function subscribe(fn, options) {
    return genericSubscribe(fn, this._subscribers, options);
};
Store1.prototype.subscribeAction = function subscribeAction(fn, options) {
    var subs = typeof fn === 'function' ? {
        before: fn
    } : fn;
    return genericSubscribe(subs, this._actionSubscribers, options);
};
Store1.prototype.watch = function watch$1(getter, cb, options) {
    var this$1$1 = this;
    assert(typeof getter === 'function', "store.watch only accepts a function.");
    return _vue.watch(function() {
        return getter(this$1$1.state, this$1$1.getters);
    }, cb, Object.assign({
    }, options));
};
Store1.prototype.replaceState = function replaceState(state) {
    var this$1$1 = this;
    this._withCommit(function() {
        this$1$1._state.data = state;
    });
};
Store1.prototype.registerModule = function registerModule(path, rawModule, options) {
    if (options === void 0) options = {
    };
    if (typeof path === 'string') path = [
        path
    ];
    assert(Array.isArray(path), "module path must be a string or an Array.");
    assert(path.length > 0, 'cannot register the root module by using registerModule.');
    this._modules.register(path, rawModule);
    installModule(this, this.state, path, this._modules.get(path), options.preserveState);
    // reset store to update getters...
    resetStoreState(this, this.state);
};
Store1.prototype.unregisterModule = function unregisterModule(path) {
    var this$1$1 = this;
    if (typeof path === 'string') path = [
        path
    ];
    assert(Array.isArray(path), "module path must be a string or an Array.");
    this._modules.unregister(path);
    this._withCommit(function() {
        var parentState = getNestedState(this$1$1.state, path.slice(0, -1));
        delete parentState[path[path.length - 1]];
    });
    resetStore(this);
};
Store1.prototype.hasModule = function hasModule(path) {
    if (typeof path === 'string') path = [
        path
    ];
    assert(Array.isArray(path), "module path must be a string or an Array.");
    return this._modules.isRegistered(path);
};
Store1.prototype.hotUpdate = function hotUpdate(newOptions) {
    this._modules.update(newOptions);
    resetStore(this, true);
};
Store1.prototype._withCommit = function _withCommit(fn) {
    var committing = this._committing;
    this._committing = true;
    fn();
    this._committing = committing;
};
Object.defineProperties(Store1.prototype, prototypeAccessors);
/**
 * Reduce the code which written in Vue.js for getting the state.
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.
 * @param {Object}
 */ var mapState = normalizeNamespace(function(namespace, states) {
    var res = {
    };
    if (!isValidMap(states)) console.error('[vuex] mapState: mapper parameter must be either an Array or an Object');
    normalizeMap(states).forEach(function(ref) {
        var key = ref.key;
        var val = ref.val;
        res[key] = function mappedState() {
            var state = this.$store.state;
            var getters = this.$store.getters;
            if (namespace) {
                var module = getModuleByNamespace(this.$store, 'mapState', namespace);
                if (!module) return;
                state = module.context.state;
                getters = module.context.getters;
            }
            return typeof val === 'function' ? val.call(this, state, getters) : state[val];
        };
        // mark vuex getter for devtools
        res[key].vuex = true;
    });
    return res;
});
/**
 * Reduce the code which written in Vue.js for committing the mutation
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} mutations # Object's item can be a function which accept `commit` function as the first param, it can accept another params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */ var mapMutations = normalizeNamespace(function(namespace, mutations) {
    var res = {
    };
    if (!isValidMap(mutations)) console.error('[vuex] mapMutations: mapper parameter must be either an Array or an Object');
    normalizeMap(mutations).forEach(function(ref) {
        var key = ref.key;
        var val = ref.val;
        res[key] = function mappedMutation() {
            var args = [], len = arguments.length;
            while(len--)args[len] = arguments[len];
            // Get the commit method from store
            var commit = this.$store.commit;
            if (namespace) {
                var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);
                if (!module) return;
                commit = module.context.commit;
            }
            return typeof val === 'function' ? val.apply(this, [
                commit
            ].concat(args)) : commit.apply(this.$store, [
                val
            ].concat(args));
        };
    });
    return res;
});
/**
 * Reduce the code which written in Vue.js for getting the getters
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} getters
 * @return {Object}
 */ var mapGetters = normalizeNamespace(function(namespace, getters) {
    var res = {
    };
    if (!isValidMap(getters)) console.error('[vuex] mapGetters: mapper parameter must be either an Array or an Object');
    normalizeMap(getters).forEach(function(ref) {
        var key = ref.key;
        var val = ref.val;
        // The namespace has been mutated by normalizeNamespace
        val = namespace + val;
        res[key] = function mappedGetter() {
            if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) return;
            if (!(val in this.$store.getters)) {
                console.error("[vuex] unknown getter: " + val);
                return;
            }
            return this.$store.getters[val];
        };
        // mark vuex getter for devtools
        res[key].vuex = true;
    });
    return res;
});
/**
 * Reduce the code which written in Vue.js for dispatch the action
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} actions # Object's item can be a function which accept `dispatch` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */ var mapActions = normalizeNamespace(function(namespace, actions) {
    var res = {
    };
    if (!isValidMap(actions)) console.error('[vuex] mapActions: mapper parameter must be either an Array or an Object');
    normalizeMap(actions).forEach(function(ref) {
        var key = ref.key;
        var val = ref.val;
        res[key] = function mappedAction() {
            var args = [], len = arguments.length;
            while(len--)args[len] = arguments[len];
            // get dispatch function from store
            var dispatch = this.$store.dispatch;
            if (namespace) {
                var module = getModuleByNamespace(this.$store, 'mapActions', namespace);
                if (!module) return;
                dispatch = module.context.dispatch;
            }
            return typeof val === 'function' ? val.apply(this, [
                dispatch
            ].concat(args)) : dispatch.apply(this.$store, [
                val
            ].concat(args));
        };
    });
    return res;
});
/**
 * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object
 * @param {String} namespace
 * @return {Object}
 */ var createNamespacedHelpers = function(namespace) {
    return {
        mapState: mapState.bind(null, namespace),
        mapGetters: mapGetters.bind(null, namespace),
        mapMutations: mapMutations.bind(null, namespace),
        mapActions: mapActions.bind(null, namespace)
    };
};
/**
 * Normalize the map
 * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]
 * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]
 * @param {Array|Object} map
 * @return {Object}
 */ function normalizeMap(map) {
    if (!isValidMap(map)) return [];
    return Array.isArray(map) ? map.map(function(key) {
        return {
            key: key,
            val: key
        };
    }) : Object.keys(map).map(function(key) {
        return {
            key: key,
            val: map[key]
        };
    });
}
/**
 * Validate whether given map is valid or not
 * @param {*} map
 * @return {Boolean}
 */ function isValidMap(map) {
    return Array.isArray(map) || isObject(map);
}
/**
 * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.
 * @param {Function} fn
 * @return {Function}
 */ function normalizeNamespace(fn) {
    return function(namespace, map) {
        if (typeof namespace !== 'string') {
            map = namespace;
            namespace = '';
        } else if (namespace.charAt(namespace.length - 1) !== '/') namespace += '/';
        return fn(namespace, map);
    };
}
/**
 * Search a special module from store by namespace. if module not exist, print error message.
 * @param {Object} store
 * @param {String} helper
 * @param {String} namespace
 * @return {Object}
 */ function getModuleByNamespace(store, helper, namespace) {
    var module = store._modulesNamespaceMap[namespace];
    if (!module) console.error("[vuex] module namespace not found in " + helper + "(): " + namespace);
    return module;
}
// Credits: borrowed code from fcomb/redux-logger
function createLogger(ref) {
    if (ref === void 0) ref = {
    };
    var collapsed = ref.collapsed;
    if (collapsed === void 0) collapsed = true;
    var filter = ref.filter;
    if (filter === void 0) filter = function(mutation, stateBefore, stateAfter) {
        return true;
    };
    var transformer = ref.transformer;
    if (transformer === void 0) transformer = function(state) {
        return state;
    };
    var mutationTransformer = ref.mutationTransformer;
    if (mutationTransformer === void 0) mutationTransformer = function(mut) {
        return mut;
    };
    var actionFilter = ref.actionFilter;
    if (actionFilter === void 0) actionFilter = function(action, state) {
        return true;
    };
    var actionTransformer = ref.actionTransformer;
    if (actionTransformer === void 0) actionTransformer = function(act) {
        return act;
    };
    var logMutations = ref.logMutations;
    if (logMutations === void 0) logMutations = true;
    var logActions = ref.logActions;
    if (logActions === void 0) logActions = true;
    var logger = ref.logger;
    if (logger === void 0) logger = console;
    return function(store) {
        var prevState = deepCopy(store.state);
        if (typeof logger === 'undefined') return;
        if (logMutations) store.subscribe(function(mutation, state) {
            var nextState = deepCopy(state);
            if (filter(mutation, prevState, nextState)) {
                var formattedTime = getFormattedTime();
                var formattedMutation = mutationTransformer(mutation);
                var message = "mutation " + mutation.type + formattedTime;
                startMessage1(logger, message, collapsed);
                logger.log('%c prev state', 'color: #9E9E9E; font-weight: bold', transformer(prevState));
                logger.log('%c mutation', 'color: #03A9F4; font-weight: bold', formattedMutation);
                logger.log('%c next state', 'color: #4CAF50; font-weight: bold', transformer(nextState));
                endMessage(logger);
            }
            prevState = nextState;
        });
        if (logActions) store.subscribeAction(function(action, state) {
            if (actionFilter(action, state)) {
                var formattedTime = getFormattedTime();
                var formattedAction = actionTransformer(action);
                var message = "action " + action.type + formattedTime;
                startMessage1(logger, message, collapsed);
                logger.log('%c action', 'color: #03A9F4; font-weight: bold', formattedAction);
                endMessage(logger);
            }
        });
    };
}
function startMessage1(logger, message, collapsed) {
    var startMessage = collapsed ? logger.groupCollapsed : logger.group;
    // render
    try {
        startMessage.call(logger, message);
    } catch (e) {
        logger.log(message);
    }
}
function endMessage(logger) {
    try {
        logger.groupEnd();
    } catch (e) {
        logger.log('—— log end ——');
    }
}
function getFormattedTime() {
    var time = new Date();
    return " @ " + pad(time.getHours(), 2) + ":" + pad(time.getMinutes(), 2) + ":" + pad(time.getSeconds(), 2) + "." + pad(time.getMilliseconds(), 3);
}
function repeat(str, times) {
    return new Array(times + 1).join(str);
}
function pad(num, maxLength) {
    return repeat('0', maxLength - num.toString().length) + num;
}
var index = {
    version: '4.0.2',
    Store: Store1,
    storeKey: storeKey,
    createStore: createStore,
    useStore: useStore,
    mapState: mapState,
    mapMutations: mapMutations,
    mapGetters: mapGetters,
    mapActions: mapActions,
    createNamespacedHelpers: createNamespacedHelpers,
    createLogger: createLogger
};
exports.default = index;

},{"vue":"a2RR7","@vue/devtools-api":"5xqqV","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5xqqV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setupDevtoolsPlugin", ()=>setupDevtoolsPlugin
);
var _env = require("./env");
var _const = require("./const");
var _proxy = require("./proxy");
var _api = require("./api");
parcelHelpers.exportAll(_api, exports);
var _plugin = require("./plugin");
parcelHelpers.exportAll(_plugin, exports);
function setupDevtoolsPlugin(pluginDescriptor, setupFn) {
    const target = _env.getTarget();
    const hook = _env.getDevtoolsGlobalHook();
    const enableProxy = _env.isProxyAvailable && pluginDescriptor.enableEarlyProxy;
    if (hook && (target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !enableProxy)) hook.emit(_const.HOOK_SETUP, pluginDescriptor, setupFn);
    else {
        const proxy = enableProxy ? new _proxy.ApiProxy(pluginDescriptor, hook) : null;
        const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];
        list.push({
            pluginDescriptor,
            setupFn,
            proxy
        });
        if (proxy) setupFn(proxy.proxiedTarget);
    }
}

},{"./env":"bp1az","./const":"6CGU7","./proxy":"aME6E","./api":"lytBi","./plugin":"lvkIU","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bp1az":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDevtoolsGlobalHook", ()=>getDevtoolsGlobalHook
);
parcelHelpers.export(exports, "getTarget", ()=>getTarget
);
parcelHelpers.export(exports, "isProxyAvailable", ()=>isProxyAvailable
);
var global = arguments[3];
function getDevtoolsGlobalHook() {
    return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;
}
function getTarget() {
    // @ts-ignore
    return typeof navigator !== 'undefined' && typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {
    };
}
const isProxyAvailable = typeof Proxy === 'function';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6CGU7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HOOK_SETUP", ()=>HOOK_SETUP
);
parcelHelpers.export(exports, "HOOK_PLUGIN_SETTINGS_SET", ()=>HOOK_PLUGIN_SETTINGS_SET
);
const HOOK_SETUP = 'devtools-plugin:setup';
const HOOK_PLUGIN_SETTINGS_SET = 'plugin:settings:set';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aME6E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ApiProxy", ()=>ApiProxy
);
var _const = require("./const");
class ApiProxy {
    constructor(plugin, hook){
        this.target = null;
        this.targetQueue = [];
        this.onQueue = [];
        this.plugin = plugin;
        this.hook = hook;
        const defaultSettings = {
        };
        if (plugin.settings) for(const id in plugin.settings){
            const item = plugin.settings[id];
            defaultSettings[id] = item.defaultValue;
        }
        const localSettingsSaveId = `__vue-devtools-plugin-settings__${plugin.id}`;
        let currentSettings = {
            ...defaultSettings
        };
        try {
            const raw = localStorage.getItem(localSettingsSaveId);
            const data = JSON.parse(raw);
            Object.assign(currentSettings, data);
        } catch (e) {
        // noop
        }
        this.fallbacks = {
            getSettings () {
                return currentSettings;
            },
            setSettings (value) {
                try {
                    localStorage.setItem(localSettingsSaveId, JSON.stringify(value));
                } catch (e) {
                // noop
                }
                currentSettings = value;
            }
        };
        hook.on(_const.HOOK_PLUGIN_SETTINGS_SET, (pluginId, value)=>{
            if (pluginId === this.plugin.id) this.fallbacks.setSettings(value);
        });
        this.proxiedOn = new Proxy({
        }, {
            get: (_target, prop)=>{
                if (this.target) return this.target.on[prop];
                else return (...args)=>{
                    this.onQueue.push({
                        method: prop,
                        args
                    });
                };
            }
        });
        this.proxiedTarget = new Proxy({
        }, {
            get: (_target, prop)=>{
                if (this.target) return this.target[prop];
                else if (prop === 'on') return this.proxiedOn;
                else if (Object.keys(this.fallbacks).includes(prop)) return (...args)=>{
                    this.targetQueue.push({
                        method: prop,
                        args,
                        resolve: ()=>{
                        }
                    });
                    return this.fallbacks[prop](...args);
                };
                else return (...args)=>{
                    return new Promise((resolve)=>{
                        this.targetQueue.push({
                            method: prop,
                            args,
                            resolve
                        });
                    });
                };
            }
        });
    }
    async setRealTarget(target) {
        this.target = target;
        for (const item of this.onQueue)this.target.on[item.method](...item.args);
        for (const item1 of this.targetQueue)item1.resolve(await this.target[item1.method](...item1.args));
    }
}

},{"./const":"6CGU7","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lytBi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _api = require("./api");
parcelHelpers.exportAll(_api, exports);
var _app = require("./app");
parcelHelpers.exportAll(_app, exports);
var _component = require("./component");
parcelHelpers.exportAll(_component, exports);
var _context = require("./context");
parcelHelpers.exportAll(_context, exports);
var _hooks = require("./hooks");
parcelHelpers.exportAll(_hooks, exports);
var _util = require("./util");
parcelHelpers.exportAll(_util, exports);

},{"./api":"2eaeU","./app":"bUz65","./component":"fQYN2","./context":"93ceW","./hooks":"1z8jy","./util":"fP5kI","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2eaeU":[function(require,module,exports) {

},{}],"bUz65":[function(require,module,exports) {

},{}],"fQYN2":[function(require,module,exports) {

},{}],"93ceW":[function(require,module,exports) {

},{}],"1z8jy":[function(require,module,exports) {

},{}],"fP5kI":[function(require,module,exports) {

},{}],"lvkIU":[function(require,module,exports) {

},{}],"gvgbJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _quasar = require("quasar");
var _api = require("../../api");
var _apiDefault = parcelHelpers.interopDefault(_api);
var _mutationTypes = require("../mutation-types");
var _types = require("../../models/types");
const innterState = ()=>({
        status: _types.TEST_STATES.NOT_STARTED,
        progressIntervalMs: 5000,
        testsPath: "",
        totalTests: 0,
        totalSuites: 0,
        successTests: 0,
        failedTests: 0,
        pendingTests: 0,
        tests: []
    })
;
// getters
const getters = {
    status: (state)=>{
        switch(state.status){
            case _types.TEST_STATES.NOT_STARTED:
                return "Not running";
            case _types.TEST_STATES.IN_PROGRESS:
                return "Running...";
            case _types.TEST_STATES.FINISHED:
                return "Finished";
            default:
                return "Unknown";
        }
    },
    testsPath: (state)=>state.testsPath
    ,
    totalTests: (state)=>state.totalTests
    ,
    totalSuites: (state)=>state.totalSuites
    ,
    successTests: (state)=>{
        if (state.status === _types.TEST_STATES.NOT_STARTED) return 0;
        return state.successTests;
    },
    failedTests: (state)=>{
        if (state.status === _types.TEST_STATES.NOT_STARTED) return 0;
        return state.failedTests;
    },
    pendingTests: (state)=>{
        if (state.status === _types.TEST_STATES.NOT_STARTED) return 0;
        return state.pendingTests;
    }
};
// actions
const actions = {
    async getInitialData ({ commit  }) {
        try {
            const apiClient = new _apiDefault.default();
            _quasar.Loading.show({
                spinner: _quasar.QSpinnerGears,
                message: "Getting things ready for you... please wait"
            });
            commit(_mutationTypes.APP_CLEAN_DATA);
            const data = await apiClient.getAppInfo();
            commit(_mutationTypes.APP_SET_INITIAL_DATA, data);
        } catch (error) {
            _quasar.Notify.create({
                type: "negative",
                color: "negative",
                message: "Something went wrong :( Check your browser's console for more info.",
                icon: "report_problem",
                position: "top-right",
                timeout: 2500
            });
            console.error("[web-app][store][app][getTests][getInitialData][error] Error occured: %s", error);
        } finally{
            _quasar.Loading.hide();
        }
    }
};
// mutations
const mutations = {
    [_mutationTypes.APP_CLEAN_DATA] (state) {
        state.status = _types.TEST_STATES.NOT_STARTED;
        state.progressIntervalMs = 5000;
        state.testsPath = "";
        state.totalTests = 0;
        state.totalSuites = 0;
        state.successTests = 0;
        state.failedTests = 0;
        state.pendingTests = 0;
        state.tests = [];
    },
    [_mutationTypes.APP_SET_INITIAL_DATA] (state, data) {
        state.progressIntervalMs = data.configuration.progressCheckIntervalMs;
        state.testsPath = data.configuration.testsPath;
        state.totalTests = data.stats.tests;
        state.totalSuites = data.stats.suites;
        state.tests = data.tests;
    }
};
exports.default = {
    namespaced: true,
    state: innterState,
    getters,
    actions,
    mutations
};

},{"quasar":"053an","../../api":"eW8wc","../mutation-types":"1PxYv","../../models/types":"8pKkF","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eW8wc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
class API {
    async getAppInfo() {
        try {
            const result = await _axiosDefault.default.get("/info");
            return result.data;
        } catch (error) {
            console.error("[web-app][api][getAppInfo][error] Error occured: %s", error);
            throw error;
        }
    }
}
exports.default = API;

},{"axios":"1IeuP","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1IeuP":[function(require,module,exports) {
module.exports = require('./lib/axios');

},{"./lib/axios":"ePOwX"}],"ePOwX":[function(require,module,exports) {
'use strict';
var utils = require('./utils');
var bind = require('./helpers/bind');
var Axios = require('./core/Axios');
var mergeConfig = require('./core/mergeConfig');
var defaults = require('./defaults');
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */ function createInstance(defaultConfig) {
    var context = new Axios(defaultConfig);
    var instance = bind(Axios.prototype.request, context);
    // Copy axios.prototype to instance
    utils.extend(instance, Axios.prototype, context);
    // Copy context to instance
    utils.extend(instance, context);
    // Factory for creating new instances
    instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };
    return instance;
}
// Create the default instance to be exported
var axios = createInstance(defaults);
// Expose Axios class to allow class inheritance
axios.Axios = Axios;
// Expose Cancel & CancelToken
axios.Cancel = require('./cancel/Cancel');
axios.CancelToken = require('./cancel/CancelToken');
axios.isCancel = require('./cancel/isCancel');
axios.VERSION = require('./env/data').version;
// Expose all/spread
axios.all = function all(promises) {
    return Promise.all(promises);
};
axios.spread = require('./helpers/spread');
// Expose isAxiosError
axios.isAxiosError = require('./helpers/isAxiosError');
module.exports = axios;
// Allow use of default import syntax in TypeScript
module.exports.default = axios;

},{"./utils":"60BxC","./helpers/bind":"dYB0d","./core/Axios":"90S9u","./core/mergeConfig":"3C70I","./defaults":"3VoDd","./cancel/Cancel":"23h6O","./cancel/CancelToken":"7tnIm","./cancel/isCancel":"8W2MY","./env/data":"eW1zO","./helpers/spread":"8AMVi","./helpers/isAxiosError":"1s7p9"}],"60BxC":[function(require,module,exports) {
'use strict';
var bind = require('./helpers/bind');
// utils is a library of generic helper functions non-specific to axios
var toString = Object.prototype.toString;
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */ function isArray(val) {
    return toString.call(val) === '[object Array]';
}
/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */ function isUndefined(val) {
    return typeof val === 'undefined';
}
/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */ function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */ function isArrayBuffer(val) {
    return toString.call(val) === '[object ArrayBuffer]';
}
/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */ function isFormData(val) {
    return typeof FormData !== 'undefined' && val instanceof FormData;
}
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */ function isArrayBufferView(val) {
    var result;
    if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) result = ArrayBuffer.isView(val);
    else result = val && val.buffer && val.buffer instanceof ArrayBuffer;
    return result;
}
/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */ function isString(val) {
    return typeof val === 'string';
}
/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */ function isNumber(val) {
    return typeof val === 'number';
}
/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */ function isObject(val) {
    return val !== null && typeof val === 'object';
}
/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */ function isPlainObject(val) {
    if (toString.call(val) !== '[object Object]') return false;
    var prototype = Object.getPrototypeOf(val);
    return prototype === null || prototype === Object.prototype;
}
/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */ function isDate(val) {
    return toString.call(val) === '[object Date]';
}
/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */ function isFile(val) {
    return toString.call(val) === '[object File]';
}
/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */ function isBlob(val) {
    return toString.call(val) === '[object Blob]';
}
/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */ function isFunction(val) {
    return toString.call(val) === '[object Function]';
}
/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */ function isStream(val) {
    return isObject(val) && isFunction(val.pipe);
}
/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */ function isURLSearchParams(val) {
    return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */ function trim(str) {
    return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}
/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */ function isStandardBrowserEnv() {
    if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) return false;
    return typeof window !== 'undefined' && typeof document !== 'undefined';
}
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */ function forEach(obj, fn) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === 'undefined') return;
    // Force an array if not already something iterable
    if (typeof obj !== 'object') /*eslint no-param-reassign:0*/ obj = [
        obj
    ];
    if (isArray(obj)) // Iterate over array values
    for(var i = 0, l = obj.length; i < l; i++)fn.call(null, obj[i], i, obj);
    else {
        // Iterate over object keys
        for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) fn.call(null, obj[key], key, obj);
    }
}
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */ function merge() {
    var result = {
    };
    function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) result[key] = merge(result[key], val);
        else if (isPlainObject(val)) result[key] = merge({
        }, val);
        else if (isArray(val)) result[key] = val.slice();
        else result[key] = val;
    }
    for(var i = 0, l = arguments.length; i < l; i++)forEach(arguments[i], assignValue);
    return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */ function extend(a, b, thisArg) {
    forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === 'function') a[key] = bind(val, thisArg);
        else a[key] = val;
    });
    return a;
}
/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */ function stripBOM(content) {
    if (content.charCodeAt(0) === 65279) content = content.slice(1);
    return content;
}
module.exports = {
    isArray: isArray,
    isArrayBuffer: isArrayBuffer,
    isBuffer: isBuffer,
    isFormData: isFormData,
    isArrayBufferView: isArrayBufferView,
    isString: isString,
    isNumber: isNumber,
    isObject: isObject,
    isPlainObject: isPlainObject,
    isUndefined: isUndefined,
    isDate: isDate,
    isFile: isFile,
    isBlob: isBlob,
    isFunction: isFunction,
    isStream: isStream,
    isURLSearchParams: isURLSearchParams,
    isStandardBrowserEnv: isStandardBrowserEnv,
    forEach: forEach,
    merge: merge,
    extend: extend,
    trim: trim,
    stripBOM: stripBOM
};

},{"./helpers/bind":"dYB0d"}],"dYB0d":[function(require,module,exports) {
'use strict';
module.exports = function bind(fn, thisArg) {
    return function wrap() {
        var args = new Array(arguments.length);
        for(var i = 0; i < args.length; i++)args[i] = arguments[i];
        return fn.apply(thisArg, args);
    };
};

},{}],"90S9u":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
var buildURL = require('../helpers/buildURL');
var InterceptorManager = require('./InterceptorManager');
var dispatchRequest = require('./dispatchRequest');
var mergeConfig = require('./mergeConfig');
var validator = require('../helpers/validator');
var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */ function Axios(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
    };
}
/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */ Axios.prototype.request = function request(config) {
    /*eslint no-param-reassign:0*/ // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof config === 'string') {
        config = arguments[1] || {
        };
        config.url = arguments[0];
    } else config = config || {
    };
    config = mergeConfig(this.defaults, config);
    // Set config.method
    if (config.method) config.method = config.method.toLowerCase();
    else if (this.defaults.method) config.method = this.defaults.method.toLowerCase();
    else config.method = 'get';
    var transitional = config.transitional;
    if (transitional !== undefined) validator.assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
    // filter out skipped interceptors
    var requestInterceptorChain = [];
    var synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) return;
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    var responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    var promise;
    if (!synchronousRequestInterceptors) {
        var chain = [
            dispatchRequest,
            undefined
        ];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while(chain.length)promise = promise.then(chain.shift(), chain.shift());
        return promise;
    }
    var newConfig = config;
    while(requestInterceptorChain.length){
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
            newConfig = onFulfilled(newConfig);
        } catch (error) {
            onRejected(error);
            break;
        }
    }
    try {
        promise = dispatchRequest(newConfig);
    } catch (error) {
        return Promise.reject(error);
    }
    while(responseInterceptorChain.length)promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
    return promise;
};
Axios.prototype.getUri = function getUri(config) {
    config = mergeConfig(this.defaults, config);
    return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};
// Provide aliases for supported request methods
utils.forEach([
    'delete',
    'get',
    'head',
    'options'
], function forEachMethodNoData(method) {
    /*eslint func-names:0*/ Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {
        }, {
            method: method,
            url: url,
            data: (config || {
            }).data
        }));
    };
});
utils.forEach([
    'post',
    'put',
    'patch'
], function forEachMethodWithData(method) {
    /*eslint func-names:0*/ Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {
        }, {
            method: method,
            url: url,
            data: data
        }));
    };
});
module.exports = Axios;

},{"./../utils":"60BxC","../helpers/buildURL":"lPZw9","./InterceptorManager":"4Q1Mi","./dispatchRequest":"baODi","./mergeConfig":"3C70I","../helpers/validator":"bw7Lu"}],"lPZw9":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
function encode(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
}
/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */ module.exports = function buildURL(url, params, paramsSerializer) {
    /*eslint no-param-reassign:0*/ if (!params) return url;
    var serializedParams;
    if (paramsSerializer) serializedParams = paramsSerializer(params);
    else if (utils.isURLSearchParams(params)) serializedParams = params.toString();
    else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
            if (val === null || typeof val === 'undefined') return;
            if (utils.isArray(val)) key = key + '[]';
            else val = [
                val
            ];
            utils.forEach(val, function parseValue(v) {
                if (utils.isDate(v)) v = v.toISOString();
                else if (utils.isObject(v)) v = JSON.stringify(v);
                parts.push(encode(key) + '=' + encode(v));
            });
        });
        serializedParams = parts.join('&');
    }
    if (serializedParams) {
        var hashmarkIndex = url.indexOf('#');
        if (hashmarkIndex !== -1) url = url.slice(0, hashmarkIndex);
        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
    }
    return url;
};

},{"./../utils":"60BxC"}],"4Q1Mi":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
function InterceptorManager() {
    this.handlers = [];
}
/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */ InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
    this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
};
/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */ InterceptorManager.prototype.eject = function eject(id) {
    if (this.handlers[id]) this.handlers[id] = null;
};
/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */ InterceptorManager.prototype.forEach = function forEach(fn) {
    utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) fn(h);
    });
};
module.exports = InterceptorManager;

},{"./../utils":"60BxC"}],"baODi":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
var transformData = require('./transformData');
var isCancel = require('../cancel/isCancel');
var defaults = require('../defaults');
var Cancel = require('../cancel/Cancel');
/**
 * Throws a `Cancel` if cancellation has been requested.
 */ function throwIfCancellationRequested(config) {
    if (config.cancelToken) config.cancelToken.throwIfRequested();
    if (config.signal && config.signal.aborted) throw new Cancel('canceled');
}
/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */ module.exports = function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    // Ensure headers exist
    config.headers = config.headers || {
    };
    // Transform request data
    config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
    // Flatten headers
    config.headers = utils.merge(config.headers.common || {
    }, config.headers[config.method] || {
    }, config.headers);
    utils.forEach([
        'delete',
        'get',
        'head',
        'post',
        'put',
        'patch',
        'common'
    ], function cleanHeaderConfig(method) {
        delete config.headers[method];
    });
    var adapter = config.adapter || defaults.adapter;
    return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        // Transform response data
        response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
        return response;
    }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
            throwIfCancellationRequested(config);
            // Transform response data
            if (reason && reason.response) reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
        }
        return Promise.reject(reason);
    });
};

},{"./../utils":"60BxC","./transformData":"62fpb","../cancel/isCancel":"8W2MY","../defaults":"3VoDd","../cancel/Cancel":"23h6O"}],"62fpb":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
var defaults = require('./../defaults');
/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */ module.exports = function transformData(data, headers, fns) {
    var context = this || defaults;
    /*eslint no-param-reassign:0*/ utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
    });
    return data;
};

},{"./../utils":"60BxC","./../defaults":"3VoDd"}],"3VoDd":[function(require,module,exports) {
var process = require("process");
'use strict';
var utils = require('./utils');
var normalizeHeaderName = require('./helpers/normalizeHeaderName');
var enhanceError = require('./core/enhanceError');
var DEFAULT_CONTENT_TYPE = {
    'Content-Type': 'application/x-www-form-urlencoded'
};
function setContentTypeIfUnset(headers, value) {
    if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) headers['Content-Type'] = value;
}
function getDefaultAdapter() {
    var adapter;
    if (typeof XMLHttpRequest !== 'undefined') // For browsers use XHR adapter
    adapter = require('./adapters/xhr');
    else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') // For node use HTTP adapter
    adapter = require('./adapters/http');
    return adapter;
}
function stringifySafely(rawValue, parser, encoder) {
    if (utils.isString(rawValue)) try {
        (parser || JSON.parse)(rawValue);
        return utils.trim(rawValue);
    } catch (e) {
        if (e.name !== 'SyntaxError') throw e;
    }
    return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
    transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
    },
    adapter: getDefaultAdapter(),
    transformRequest: [
        function transformRequest(data, headers) {
            normalizeHeaderName(headers, 'Accept');
            normalizeHeaderName(headers, 'Content-Type');
            if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) return data;
            if (utils.isArrayBufferView(data)) return data.buffer;
            if (utils.isURLSearchParams(data)) {
                setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
                return data.toString();
            }
            if (utils.isObject(data) || headers && headers['Content-Type'] === 'application/json') {
                setContentTypeIfUnset(headers, 'application/json');
                return stringifySafely(data);
            }
            return data;
        }
    ],
    transformResponse: [
        function transformResponse(data) {
            var transitional = this.transitional || defaults.transitional;
            var silentJSONParsing = transitional && transitional.silentJSONParsing;
            var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
            var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';
            if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) try {
                return JSON.parse(data);
            } catch (e) {
                if (strictJSONParsing) {
                    if (e.name === 'SyntaxError') throw enhanceError(e, this, 'E_JSON_PARSE');
                    throw e;
                }
            }
            return data;
        }
    ],
    /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */ timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
    },
    headers: {
        common: {
            'Accept': 'application/json, text/plain, */*'
        }
    }
};
utils.forEach([
    'delete',
    'get',
    'head'
], function forEachMethodNoData(method) {
    defaults.headers[method] = {
    };
});
utils.forEach([
    'post',
    'put',
    'patch'
], function forEachMethodWithData(method) {
    defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
module.exports = defaults;

},{"process":"lDnB8","./utils":"60BxC","./helpers/normalizeHeaderName":"gXQ9Q","./core/enhanceError":"cZtoX","./adapters/xhr":"1BOMK","./adapters/http":"1BOMK"}],"lDnB8":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {
};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e1) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {
};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {
};
function noop() {
}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
process.cwd = function() {
    return '/';
};
process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() {
    return 0;
};

},{}],"gXQ9Q":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
module.exports = function normalizeHeaderName(headers, normalizedName) {
    utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
            headers[normalizedName] = value;
            delete headers[name];
        }
    });
};

},{"../utils":"60BxC"}],"cZtoX":[function(require,module,exports) {
'use strict';
/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */ module.exports = function enhanceError(error, config, code, request, response) {
    error.config = config;
    if (code) error.code = code;
    error.request = request;
    error.response = response;
    error.isAxiosError = true;
    error.toJSON = function toJSON() {
        return {
            // Standard
            message: this.message,
            name: this.name,
            // Microsoft
            description: this.description,
            number: this.number,
            // Mozilla
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            // Axios
            config: this.config,
            code: this.code,
            status: this.response && this.response.status ? this.response.status : null
        };
    };
    return error;
};

},{}],"1BOMK":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
var settle = require('./../core/settle');
var cookies = require('./../helpers/cookies');
var buildURL = require('./../helpers/buildURL');
var buildFullPath = require('../core/buildFullPath');
var parseHeaders = require('./../helpers/parseHeaders');
var isURLSameOrigin = require('./../helpers/isURLSameOrigin');
var createError = require('../core/createError');
var defaults = require('../defaults');
var Cancel = require('../cancel/Cancel');
module.exports = function xhrAdapter(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
            if (config.cancelToken) config.cancelToken.unsubscribe(onCanceled);
            if (config.signal) config.signal.removeEventListener('abort', onCanceled);
        }
        if (utils.isFormData(requestData)) delete requestHeaders['Content-Type']; // Let the browser set it
        var request = new XMLHttpRequest();
        // HTTP basic authentication
        if (config.auth) {
            var username = config.auth.username || '';
            var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
            requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        // Set the request timeout in MS
        request.timeout = config.timeout;
        function onloadend() {
            if (!request) return;
            // Prepare the response
            var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
            var responseData = !responseType || responseType === 'text' || responseType === 'json' ? request.responseText : request.response;
            var response = {
                data: responseData,
                status: request.status,
                statusText: request.statusText,
                headers: responseHeaders,
                config: config,
                request: request
            };
            settle(function _resolve(value) {
                resolve(value);
                done();
            }, function _reject(err) {
                reject(err);
                done();
            }, response);
            // Clean up request
            request = null;
        }
        if ('onloadend' in request) // Use onloadend if available
        request.onloadend = onloadend;
        else // Listen for ready state to emulate onloadend
        request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) return;
            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) return;
            // readystate handler is calling before onerror or ontimeout handlers,
            // so we should call onloadend on the next 'tick'
            setTimeout(onloadend);
        };
        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
            if (!request) return;
            reject(createError('Request aborted', config, 'ECONNABORTED', request));
            // Clean up request
            request = null;
        };
        // Handle low level network errors
        request.onerror = function handleError() {
            // Real errors are hidden from us by the browser
            // onerror should only fire if it's a network error
            reject(createError('Network Error', config, null, request));
            // Clean up request
            request = null;
        };
        // Handle timeout
        request.ontimeout = function handleTimeout() {
            var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
            var transitional = config.transitional || defaults.transitional;
            if (config.timeoutErrorMessage) timeoutErrorMessage = config.timeoutErrorMessage;
            reject(createError(timeoutErrorMessage, config, transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED', request));
            // Clean up request
            request = null;
        };
        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils.isStandardBrowserEnv()) {
            // Add xsrf header
            var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;
            if (xsrfValue) requestHeaders[config.xsrfHeaderName] = xsrfValue;
        }
        // Add headers to the request
        if ('setRequestHeader' in request) utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') // Remove Content-Type if data is undefined
            delete requestHeaders[key];
            else // Otherwise add header to the request
            request.setRequestHeader(key, val);
        });
        // Add withCredentials to request if needed
        if (!utils.isUndefined(config.withCredentials)) request.withCredentials = !!config.withCredentials;
        // Add responseType to request if needed
        if (responseType && responseType !== 'json') request.responseType = config.responseType;
        // Handle progress if needed
        if (typeof config.onDownloadProgress === 'function') request.addEventListener('progress', config.onDownloadProgress);
        // Not all browsers support upload events
        if (typeof config.onUploadProgress === 'function' && request.upload) request.upload.addEventListener('progress', config.onUploadProgress);
        if (config.cancelToken || config.signal) {
            // Handle cancellation
            // eslint-disable-next-line func-names
            onCanceled = function(cancel) {
                if (!request) return;
                reject(!cancel || cancel && cancel.type ? new Cancel('canceled') : cancel);
                request.abort();
                request = null;
            };
            config.cancelToken && config.cancelToken.subscribe(onCanceled);
            if (config.signal) config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
        }
        if (!requestData) requestData = null;
        // Send the request
        request.send(requestData);
    });
};

},{"./../utils":"60BxC","./../core/settle":"c4IyS","./../helpers/cookies":"5sHG9","./../helpers/buildURL":"lPZw9","../core/buildFullPath":"24S8y","./../helpers/parseHeaders":"jZkkm","./../helpers/isURLSameOrigin":"ho6wD","../core/createError":"4CdwW","../defaults":"3VoDd","../cancel/Cancel":"23h6O"}],"c4IyS":[function(require,module,exports) {
'use strict';
var createError = require('./createError');
/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */ module.exports = function settle(resolve, reject, response) {
    var validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) resolve(response);
    else reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));
};

},{"./createError":"4CdwW"}],"4CdwW":[function(require,module,exports) {
'use strict';
var enhanceError = require('./enhanceError');
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */ module.exports = function createError(message, config, code, request, response) {
    var error = new Error(message);
    return enhanceError(error, config, code, request, response);
};

},{"./enhanceError":"cZtoX"}],"5sHG9":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
(function standardBrowserEnv() {
    return {
        write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + '=' + encodeURIComponent(value));
            if (utils.isNumber(expires)) cookie.push('expires=' + new Date(expires).toGMTString());
            if (utils.isString(path)) cookie.push('path=' + path);
            if (utils.isString(domain)) cookie.push('domain=' + domain);
            if (secure === true) cookie.push('secure');
            document.cookie = cookie.join('; ');
        },
        read: function read(name) {
            var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
            return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
            this.write(name, '', Date.now() - 86400000);
        }
    };
})() : // Non standard browser env (web workers, react-native) lack needed support.
(function nonStandardBrowserEnv() {
    return {
        write: function write() {
        },
        read: function read() {
            return null;
        },
        remove: function remove() {
        }
    };
})();

},{"./../utils":"60BxC"}],"24S8y":[function(require,module,exports) {
'use strict';
var isAbsoluteURL = require('../helpers/isAbsoluteURL');
var combineURLs = require('../helpers/combineURLs');
/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */ module.exports = function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) return combineURLs(baseURL, requestedURL);
    return requestedURL;
};

},{"../helpers/isAbsoluteURL":"aFD0Y","../helpers/combineURLs":"1TAvX"}],"aFD0Y":[function(require,module,exports) {
'use strict';
/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */ module.exports = function isAbsoluteURL(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

},{}],"1TAvX":[function(require,module,exports) {
'use strict';
/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */ module.exports = function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
};

},{}],"jZkkm":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
    'age',
    'authorization',
    'content-length',
    'content-type',
    'etag',
    'expires',
    'from',
    'host',
    'if-modified-since',
    'if-unmodified-since',
    'last-modified',
    'location',
    'max-forwards',
    'proxy-authorization',
    'referer',
    'retry-after',
    'user-agent'
];
/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */ module.exports = function parseHeaders(headers) {
    var parsed = {
    };
    var key;
    var val;
    var i;
    if (!headers) return parsed;
    utils.forEach(headers.split('\n'), function parser(line) {
        i = line.indexOf(':');
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
            if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) return;
            if (key === 'set-cookie') parsed[key] = (parsed[key] ? parsed[key] : []).concat([
                val
            ]);
            else parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
        }
    });
    return parsed;
};

},{"./../utils":"60BxC"}],"ho6wD":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
(function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement('a');
    var originURL;
    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */ function resolveURL(url) {
        var href = url;
        if (msie) {
            // IE needs attribute set twice to normalize properties
            urlParsingNode.setAttribute('href', href);
            href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute('href', href);
        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
        };
    }
    originURL = resolveURL(window.location.href);
    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */ return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
})() : // Non standard browser envs (web workers, react-native) lack needed support.
(function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
        return true;
    };
})();

},{"./../utils":"60BxC"}],"23h6O":[function(require,module,exports) {
'use strict';
/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */ function Cancel(message) {
    this.message = message;
}
Cancel.prototype.toString = function toString() {
    return 'Cancel' + (this.message ? ': ' + this.message : '');
};
Cancel.prototype.__CANCEL__ = true;
module.exports = Cancel;

},{}],"8W2MY":[function(require,module,exports) {
'use strict';
module.exports = function isCancel(value) {
    return !!(value && value.__CANCEL__);
};

},{}],"3C70I":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */ module.exports = function mergeConfig(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {
    };
    var config = {
    };
    function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) return utils.merge(target, source);
        else if (utils.isPlainObject(source)) return utils.merge({
        }, source);
        else if (utils.isArray(source)) return source.slice();
        return source;
    }
    // eslint-disable-next-line consistent-return
    function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) return getMergedValue(config1[prop], config2[prop]);
        else if (!utils.isUndefined(config1[prop])) return getMergedValue(undefined, config1[prop]);
    }
    // eslint-disable-next-line consistent-return
    function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) return getMergedValue(undefined, config2[prop]);
    }
    // eslint-disable-next-line consistent-return
    function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) return getMergedValue(undefined, config2[prop]);
        else if (!utils.isUndefined(config1[prop])) return getMergedValue(undefined, config1[prop]);
    }
    // eslint-disable-next-line consistent-return
    function mergeDirectKeys(prop) {
        if (prop in config2) return getMergedValue(config1[prop], config2[prop]);
        else if (prop in config1) return getMergedValue(undefined, config1[prop]);
    }
    var mergeMap = {
        'url': valueFromConfig2,
        'method': valueFromConfig2,
        'data': valueFromConfig2,
        'baseURL': defaultToConfig2,
        'transformRequest': defaultToConfig2,
        'transformResponse': defaultToConfig2,
        'paramsSerializer': defaultToConfig2,
        'timeout': defaultToConfig2,
        'timeoutMessage': defaultToConfig2,
        'withCredentials': defaultToConfig2,
        'adapter': defaultToConfig2,
        'responseType': defaultToConfig2,
        'xsrfCookieName': defaultToConfig2,
        'xsrfHeaderName': defaultToConfig2,
        'onUploadProgress': defaultToConfig2,
        'onDownloadProgress': defaultToConfig2,
        'decompress': defaultToConfig2,
        'maxContentLength': defaultToConfig2,
        'maxBodyLength': defaultToConfig2,
        'transport': defaultToConfig2,
        'httpAgent': defaultToConfig2,
        'httpsAgent': defaultToConfig2,
        'cancelToken': defaultToConfig2,
        'socketPath': defaultToConfig2,
        'responseEncoding': defaultToConfig2,
        'validateStatus': mergeDirectKeys
    };
    utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
    });
    return config;
};

},{"../utils":"60BxC"}],"bw7Lu":[function(require,module,exports) {
'use strict';
var VERSION = require('../env/data').version;
var validators = {
};
// eslint-disable-next-line func-names
[
    'object',
    'boolean',
    'number',
    'function',
    'string',
    'symbol'
].forEach(function(type, i) {
    validators[type] = function validator(thing) {
        return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
    };
});
var deprecatedWarnings = {
};
/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */ validators.transitional = function transitional(validator, version, message) {
    function formatMessage(opt, desc) {
        return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
    }
    // eslint-disable-next-line func-names
    return function(value, opt, opts) {
        if (validator === false) throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
        if (version && !deprecatedWarnings[opt]) {
            deprecatedWarnings[opt] = true;
            // eslint-disable-next-line no-console
            console.warn(formatMessage(opt, ' has been deprecated since v' + version + ' and will be removed in the near future'));
        }
        return validator ? validator(value, opt, opts) : true;
    };
};
/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */ function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== 'object') throw new TypeError('options must be an object');
    var keys = Object.keys(options);
    var i = keys.length;
    while(i-- > 0){
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
            var value = options[opt];
            var result = value === undefined || validator(value, opt, options);
            if (result !== true) throw new TypeError('option ' + opt + ' must be ' + result);
            continue;
        }
        if (allowUnknown !== true) throw Error('Unknown option ' + opt);
    }
}
module.exports = {
    assertOptions: assertOptions,
    validators: validators
};

},{"../env/data":"eW1zO"}],"eW1zO":[function(require,module,exports) {
module.exports = {
    "version": "0.24.0"
};

},{}],"7tnIm":[function(require,module,exports) {
'use strict';
var Cancel = require('./Cancel');
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */ function CancelToken(executor) {
    if (typeof executor !== 'function') throw new TypeError('executor must be a function.');
    var resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
    });
    var token = this;
    // eslint-disable-next-line func-names
    this.promise.then(function(cancel) {
        if (!token._listeners) return;
        var i;
        var l = token._listeners.length;
        for(i = 0; i < l; i++)token._listeners[i](cancel);
        token._listeners = null;
    });
    // eslint-disable-next-line func-names
    this.promise.then = function(onfulfilled) {
        var _resolve;
        // eslint-disable-next-line func-names
        var promise = new Promise(function(resolve) {
            token.subscribe(resolve);
            _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
            token.unsubscribe(_resolve);
        };
        return promise;
    };
    executor(function cancel(message) {
        if (token.reason) // Cancellation has already been requested
        return;
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
    });
}
/**
 * Throws a `Cancel` if cancellation has been requested.
 */ CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    if (this.reason) throw this.reason;
};
/**
 * Subscribe to the cancel signal
 */ CancelToken.prototype.subscribe = function subscribe(listener) {
    if (this.reason) {
        listener(this.reason);
        return;
    }
    if (this._listeners) this._listeners.push(listener);
    else this._listeners = [
        listener
    ];
};
/**
 * Unsubscribe from the cancel signal
 */ CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
    if (!this._listeners) return;
    var index = this._listeners.indexOf(listener);
    if (index !== -1) this._listeners.splice(index, 1);
};
/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */ CancelToken.source = function source() {
    var cancel;
    var token = new CancelToken(function executor(c) {
        cancel = c;
    });
    return {
        token: token,
        cancel: cancel
    };
};
module.exports = CancelToken;

},{"./Cancel":"23h6O"}],"8AMVi":[function(require,module,exports) {
'use strict';
/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */ module.exports = function spread(callback) {
    return function wrap(arr) {
        return callback.apply(null, arr);
    };
};

},{}],"1s7p9":[function(require,module,exports) {
'use strict';
/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */ module.exports = function isAxiosError(payload) {
    return typeof payload === 'object' && payload.isAxiosError === true;
};

},{}],"1PxYv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "APP_CLEAN_DATA", ()=>APP_CLEAN_DATA
);
parcelHelpers.export(exports, "APP_SET_INITIAL_DATA", ()=>APP_SET_INITIAL_DATA
);
const APP_CLEAN_DATA = "APP_CLEAN_DATA";
const APP_SET_INITIAL_DATA = "APP_SET_INITIAL_DATA";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8pKkF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TEST_STATES", ()=>TEST_STATES
);
const TEST_STATES = {
    NOT_STARTED: "NOT_STARTED",
    IN_PROGRESS: "IN_PROGRESS",
    FINISHED: "FINISHED"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6JlN7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require('script:./App.vue');
    if (script.__esModule) script = script.default;
    script.render = require('template:./App.vue').render;
    require('custom:./App.vue').default(script);
    script.__scopeId = 'data-v-85eb05';
    script.__file = "/home/dariusz/Projekty/mocha-ui-runner/lib/app/pages/App.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = '85eb05-hmr';
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord('85eb05-hmr', script)) __VUE_HMR_RUNTIME__.reload('85eb05-hmr', script);
        }, 0);
    });
}
exports.default = script;

},{"script:./App.vue":"2YET5","template:./App.vue":"5OcQ8","custom:./App.vue":"3qBFC","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2YET5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    created () {
        this.$store.dispatch("app/getInitialData");
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5OcQ8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render
);
var _vue = require("vue");
function render(_ctx, _cache) {
    const _component_app_header = _vue.resolveComponent("app-header");
    const _component_q_drawer = _vue.resolveComponent("q-drawer");
    const _component_q_page_container = _vue.resolveComponent("q-page-container");
    const _component_q_layout = _vue.resolveComponent("q-layout");
    return _vue.openBlock(), _vue.createBlock(_component_q_layout, {
        view: "hHh lpR fFf"
    }, {
        default: _vue.withCtx(()=>[
                _vue.createVNode(_component_app_header),
                _vue.createVNode(_component_q_drawer, {
                    "show-if-above": "",
                    side: "left",
                    width: "500",
                    bordered: ""
                }, {
                    default: _vue.withCtx(()=>[
                            _vue.createCommentVNode(" drawer content ")
                        ]
                    ),
                    _: 1 /* STABLE */ 
                }),
                _vue.createVNode(_component_q_page_container)
            ]
        ),
        _: 1 /* STABLE */ 
    });
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender('85eb05-hmr', render);
});

},{"vue":"a2RR7","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3qBFC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{
};
exports.default = (script)=>{
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cENDJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require('script:./Header.vue');
    if (script.__esModule) script = script.default;
    script.render = require('template:./Header.vue').render;
    require('custom:./Header.vue').default(script);
    script.__scopeId = 'data-v-425fa7';
    script.__file = "/home/dariusz/Projekty/mocha-ui-runner/lib/app/components/header/Header.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = '425fa7-hmr';
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord('425fa7-hmr', script)) __VUE_HMR_RUNTIME__.reload('425fa7-hmr', script);
        }, 0);
    });
}
exports.default = script;

},{"script:./Header.vue":"31098","template:./Header.vue":"g9Vot","custom:./Header.vue":"iEyXv","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"31098":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _vuex = require("vuex");
var _quasar = require("quasar");
var _headerScss = require("./header.scss");
exports.default = {
    computed: {
        ..._vuex.mapGetters("app", {
            status: "status",
            testsPath: "testsPath",
            totalTests: "totalTests",
            totalSuites: "totalSuites",
            successTests: "successTests",
            failedTests: "failedTests",
            pendingTests: "pendingTests"
        })
    },
    setup () {
        const $q = _quasar.useQuasar();
        const useDarkMode = _vue.ref(false);
        return {
            useDarkMode,
            toggleDarkMode (value) {
                $q.dark.set(value);
            }
        };
    }
};

},{"vue":"a2RR7","quasar":"053an","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV","./header.scss":"7BIEV","vuex":"bnBNl"}],"7BIEV":[function() {},{}],"g9Vot":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render
);
var _vue = require("vue");
const _hoisted_1 = /*#__PURE__*/ _vue.createTextVNode("Mocha UI Runner");
const _hoisted_2 = {
    class: "status-panel"
};
const _hoisted_3 = {
    class: "single-info"
};
const _hoisted_4 = /*#__PURE__*/ _vue.createElementVNode("p", {
    class: "title"
}, "Status:", -1 /* HOISTED */ );
const _hoisted_5 = {
    class: "value"
};
const _hoisted_6 = {
    class: "single-info"
};
const _hoisted_7 = /*#__PURE__*/ _vue.createElementVNode("p", {
    class: "title"
}, "Tests glob:", -1 /* HOISTED */ );
const _hoisted_8 = {
    class: "value"
};
const _hoisted_9 = {
    class: "single-info"
};
const _hoisted_10 = /*#__PURE__*/ _vue.createElementVNode("p", {
    class: "title"
}, "Total suites:", -1 /* HOISTED */ );
const _hoisted_11 = {
    class: "value"
};
const _hoisted_12 = {
    class: "single-info"
};
const _hoisted_13 = /*#__PURE__*/ _vue.createElementVNode("p", {
    class: "title"
}, "Total tests:", -1 /* HOISTED */ );
const _hoisted_14 = {
    class: "value"
};
const _hoisted_15 = {
    class: "status-panel"
};
const _hoisted_16 = /*#__PURE__*/ _vue.createElementVNode("div", {
    class: "single-info"
}, [
    /*#__PURE__*/ _vue.createElementVNode("p", {
        class: "title"
    }, "Time:"),
    /*#__PURE__*/ _vue.createElementVNode("p", null, "-")
], -1 /* HOISTED */ );
const _hoisted_17 = {
    class: "single-info"
};
const _hoisted_18 = /*#__PURE__*/ _vue.createElementVNode("p", {
    class: "title"
}, "Success tests:", -1 /* HOISTED */ );
const _hoisted_19 = {
    class: "value success-tests-color"
};
const _hoisted_20 = {
    class: "single-info"
};
const _hoisted_21 = /*#__PURE__*/ _vue.createElementVNode("p", {
    class: "title"
}, "Pending tests:", -1 /* HOISTED */ );
const _hoisted_22 = {
    class: "value pending-tests-color"
};
const _hoisted_23 = {
    class: "single-info"
};
const _hoisted_24 = /*#__PURE__*/ _vue.createElementVNode("p", {
    class: "title"
}, "Failing tests:", -1 /* HOISTED */ );
const _hoisted_25 = {
    class: "value failed-tests-color"
};
function render(_ctx, _cache) {
    const _component_q_toolbar_title = _vue.resolveComponent("q-toolbar-title");
    const _component_q_toggle = _vue.resolveComponent("q-toggle");
    const _component_q_toolbar = _vue.resolveComponent("q-toolbar");
    const _component_q_header = _vue.resolveComponent("q-header");
    return _vue.openBlock(), _vue.createBlock(_component_q_header, {
        elevated: "",
        class: "bg-primary text-white component-header-base",
        "height-hint": "98"
    }, {
        default: _vue.withCtx(()=>[
                _vue.createVNode(_component_q_toolbar, null, {
                    default: _vue.withCtx(()=>[
                            _vue.createVNode(_component_q_toolbar_title, null, {
                                default: _vue.withCtx(()=>[
                                        _hoisted_1
                                    ]
                                ),
                                _: 1 /* STABLE */ 
                            }),
                            _vue.createElementVNode("div", _hoisted_2, [
                                _vue.createElementVNode("div", _hoisted_3, [
                                    _hoisted_4,
                                    _vue.createElementVNode("p", _hoisted_5, _vue.toDisplayString(_ctx.status), 1 /* TEXT */ )
                                ]),
                                _vue.createElementVNode("div", _hoisted_6, [
                                    _hoisted_7,
                                    _vue.createElementVNode("p", _hoisted_8, _vue.toDisplayString(_ctx.testsPath), 1 /* TEXT */ )
                                ]),
                                _vue.createElementVNode("div", _hoisted_9, [
                                    _hoisted_10,
                                    _vue.createElementVNode("p", _hoisted_11, _vue.toDisplayString(_ctx.totalSuites), 1 /* TEXT */ )
                                ]),
                                _vue.createElementVNode("div", _hoisted_12, [
                                    _hoisted_13,
                                    _vue.createElementVNode("p", _hoisted_14, _vue.toDisplayString(_ctx.totalTests), 1 /* TEXT */ )
                                ])
                            ]),
                            _vue.createVNode(_component_q_toggle, {
                                "onUpdate:modelValue": [
                                    _ctx.toggleDarkMode,
                                    _cache[0] || (_cache[0] = ($event)=>_ctx.useDarkMode = $event
                                    )
                                ],
                                modelValue: _ctx.useDarkMode,
                                "checked-icon": "dark_mode",
                                color: "green",
                                size: "lg",
                                "unchecked-icon": "light_mode",
                                "left-label": "",
                                label: "Dark mode"
                            }, null, 8 /* PROPS */ , [
                                "onUpdate:modelValue",
                                "modelValue"
                            ])
                        ]
                    ),
                    _: 1 /* STABLE */ 
                }),
                _vue.createVNode(_component_q_toolbar, null, {
                    default: _vue.withCtx(()=>[
                            _vue.createElementVNode("div", _hoisted_15, [
                                _hoisted_16,
                                _vue.createElementVNode("div", _hoisted_17, [
                                    _hoisted_18,
                                    _vue.createElementVNode("p", _hoisted_19, _vue.toDisplayString(_ctx.successTests), 1 /* TEXT */ )
                                ]),
                                _vue.createElementVNode("div", _hoisted_20, [
                                    _hoisted_21,
                                    _vue.createElementVNode("p", _hoisted_22, _vue.toDisplayString(_ctx.pendingTests), 1 /* TEXT */ )
                                ]),
                                _vue.createElementVNode("div", _hoisted_23, [
                                    _hoisted_24,
                                    _vue.createElementVNode("p", _hoisted_25, _vue.toDisplayString(_ctx.failedTests), 1 /* TEXT */ )
                                ])
                            ])
                        ]
                    ),
                    _: 1 /* STABLE */ 
                })
            ]
        ),
        _: 1 /* STABLE */ 
    });
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender('425fa7-hmr', render);
});

},{"vue":"a2RR7","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iEyXv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{
};
exports.default = (script)=>{
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bJyT2":[function() {},{}],"hIQau":[function() {},{}],"4dYhd":[function() {},{}],"ljNwR":[function() {},{}],"fcEUB":[function() {},{}]},["7avRg","9Udrw"], "9Udrw", "parcelRequiree6f0")

//# sourceMappingURL=index.b01d9421.js.map
